import { c as createComponent, e as inject, f as emptyRenderFn, j as layoutKey, B as pageContainerKey, a as computed, h, g as getCurrentInstance, i as isRuntimeSsrPreHydration, r as ref, o as onMounted, w as watch, Z as onBeforeUpdate, b as onBeforeUnmount, $ as formKey, a0 as debounce$1, a1 as injectProp, y as stopAndPrevent, d as nextTick, X as onDeactivated, a2 as onActivated, t as prevent, U as Transition, a3 as shouldIgnoreKey, m as client, u as stop, n as noop, a4 as onBeforeMount, l as listenOpts, T as isKeyCode, q as addEvt, x as cleanEvt, a5 as globalConfig, D as onUnmounted, a6 as Teleport, v as position, a7 as onUpdated, a8 as isDeepEqual, a9 as toRaw, V as History, aa as isNumber, ab as isDate, ac as isObject$3, ad as injectMultipleProps, k as createDirective, _ as _export_sfc, E as openBlock, O as createElementBlock, H as createVNode, G as withCtx, N as createBaseVNode, J as createTextVNode, z as withDirectives, F as createBlock } from "./index.57f35bce.js";
import { h as hSlot, Q as QIcon, j as QSpinner, a as hUniqueSlot, c as hMergeSlot, k as useSizeProps, l as useSize, b as hDir, m as hMergeSlotSafely, R as Ripple, n as getParentProxy, f as vmIsDestroyed, o as childHasFocus, v as vmHasRouter, d as QBtn, p as useAlignProps, q as useAlign } from "./QBtn.62238b5c.js";
import { d as useDark, a as useDarkProps, s as scrollTargetProp, j as getScrollTarget, p as QList, c as clearSelection, m as getScrollbarWidth, u as useModelToggleProps, b as useModelToggleEmits, e as useTimeout, f as useModelToggle, g as useHistory, i as usePreventScroll, q as normalizeToInterval, n as QItemSection, o as QItemLabel, Q as QItem } from "./QItem.cc84e81f.js";
var QPage = createComponent({
  name: "QPage",
  props: {
    padding: Boolean,
    styleFn: Function
  },
  setup(props, { slots }) {
    const { proxy: { $q } } = getCurrentInstance();
    const $layout = inject(layoutKey, emptyRenderFn);
    if ($layout === emptyRenderFn) {
      console.error("QPage needs to be a deep child of QLayout");
      return emptyRenderFn;
    }
    const $pageContainer = inject(pageContainerKey, emptyRenderFn);
    if ($pageContainer === emptyRenderFn) {
      console.error("QPage needs to be child of QPageContainer");
      return emptyRenderFn;
    }
    const style = computed(() => {
      const offset = ($layout.header.space === true ? $layout.header.size : 0) + ($layout.footer.space === true ? $layout.footer.size : 0);
      if (typeof props.styleFn === "function") {
        const height = $layout.isContainer.value === true ? $layout.containerHeight.value : $q.screen.height;
        return props.styleFn(offset, height);
      }
      return {
        minHeight: $layout.isContainer.value === true ? $layout.containerHeight.value - offset + "px" : $q.screen.height === 0 ? offset !== 0 ? `calc(100vh - ${offset}px)` : "100vh" : $q.screen.height - offset + "px"
      };
    });
    const classes = computed(
      () => `q-page${props.padding === true ? " q-layout-padding" : ""}`
    );
    return () => h("main", {
      class: classes.value,
      style: style.value
    }, hSlot(slots.default));
  }
});
let buf, bufIdx = 0;
const hexBytes = new Array(256);
for (let i = 0; i < 256; i++) {
  hexBytes[i] = (i + 256).toString(16).substring(1);
}
const randomBytes = (() => {
  const lib = typeof crypto !== "undefined" ? crypto : typeof window !== "undefined" ? window.crypto || window.msCrypto : void 0;
  if (lib !== void 0) {
    if (lib.randomBytes !== void 0) {
      return lib.randomBytes;
    }
    if (lib.getRandomValues !== void 0) {
      return (n) => {
        const bytes = new Uint8Array(n);
        lib.getRandomValues(bytes);
        return bytes;
      };
    }
  }
  return (n) => {
    const r = [];
    for (let i = n; i > 0; i--) {
      r.push(Math.floor(Math.random() * 256));
    }
    return r;
  };
})();
const BUFFER_SIZE = 4096;
function uid() {
  if (buf === void 0 || bufIdx + 16 > BUFFER_SIZE) {
    bufIdx = 0;
    buf = randomBytes(BUFFER_SIZE);
  }
  const b = Array.prototype.slice.call(buf, bufIdx, bufIdx += 16);
  b[6] = b[6] & 15 | 64;
  b[8] = b[8] & 63 | 128;
  return hexBytes[b[0]] + hexBytes[b[1]] + hexBytes[b[2]] + hexBytes[b[3]] + "-" + hexBytes[b[4]] + hexBytes[b[5]] + "-" + hexBytes[b[6]] + hexBytes[b[7]] + "-" + hexBytes[b[8]] + hexBytes[b[9]] + "-" + hexBytes[b[10]] + hexBytes[b[11]] + hexBytes[b[12]] + hexBytes[b[13]] + hexBytes[b[14]] + hexBytes[b[15]];
}
function parseValue(val) {
  return val === void 0 || val === null ? null : val;
}
function getId(val, required) {
  return val === void 0 || val === null ? required === true ? `f_${uid()}` : null : val;
}
function useId({ getValue, required = true } = {}) {
  if (isRuntimeSsrPreHydration.value === true) {
    const id = getValue !== void 0 ? ref(parseValue(getValue())) : ref(null);
    if (required === true && id.value === null) {
      onMounted(() => {
        id.value = `f_${uid()}`;
      });
    }
    if (getValue !== void 0) {
      watch(getValue, (newId) => {
        id.value = getId(newId, required);
      });
    }
    return id;
  }
  return getValue !== void 0 ? computed(() => getId(getValue(), required)) : ref(`f_${uid()}`);
}
const listenerRE = /^on[A-Z]/;
function useSplitAttrs() {
  const { attrs, vnode } = getCurrentInstance();
  const acc = {
    listeners: ref({}),
    attributes: ref({})
  };
  function update2() {
    const attributes = {};
    const listeners = {};
    for (const key in attrs) {
      if (key !== "class" && key !== "style" && listenerRE.test(key) === false) {
        attributes[key] = attrs[key];
      }
    }
    for (const key in vnode.props) {
      if (listenerRE.test(key) === true) {
        listeners[key] = vnode.props[key];
      }
    }
    acc.attributes.value = attributes;
    acc.listeners.value = listeners;
  }
  onBeforeUpdate(update2);
  update2();
  return acc;
}
function useFormChild({ validate, resetValidation, requiresQForm }) {
  const $form = inject(formKey, false);
  if ($form !== false) {
    const { props, proxy } = getCurrentInstance();
    Object.assign(proxy, { validate, resetValidation });
    watch(() => props.disable, (val) => {
      if (val === true) {
        typeof resetValidation === "function" && resetValidation();
        $form.unbindComponent(proxy);
      } else {
        $form.bindComponent(proxy);
      }
    });
    onMounted(() => {
      props.disable !== true && $form.bindComponent(proxy);
    });
    onBeforeUnmount(() => {
      props.disable !== true && $form.unbindComponent(proxy);
    });
  } else if (requiresQForm === true) {
    console.error("Parent QForm not found on useFormChild()!");
  }
}
const hex = /^#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?$/, hexa = /^#[0-9a-fA-F]{4}([0-9a-fA-F]{4})?$/, hexOrHexa = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/, rgb = /^rgb\(((0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),){2}(0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5])\)$/, rgba = /^rgba\(((0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),){2}(0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),(0|0\.[0-9]+[1-9]|0\.[1-9]+|1)\)$/;
const testPattern = {
  date: (v) => /^-?[\d]+\/[0-1]\d\/[0-3]\d$/.test(v),
  time: (v) => /^([0-1]?\d|2[0-3]):[0-5]\d$/.test(v),
  fulltime: (v) => /^([0-1]?\d|2[0-3]):[0-5]\d:[0-5]\d$/.test(v),
  timeOrFulltime: (v) => /^([0-1]?\d|2[0-3]):[0-5]\d(:[0-5]\d)?$/.test(v),
  email: (v) => /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(v),
  hexColor: (v) => hex.test(v),
  hexaColor: (v) => hexa.test(v),
  hexOrHexaColor: (v) => hexOrHexa.test(v),
  rgbColor: (v) => rgb.test(v),
  rgbaColor: (v) => rgba.test(v),
  rgbOrRgbaColor: (v) => rgb.test(v) || rgba.test(v),
  hexOrRgbColor: (v) => hex.test(v) || rgb.test(v),
  hexaOrRgbaColor: (v) => hexa.test(v) || rgba.test(v),
  anyColor: (v) => hexOrHexa.test(v) || rgb.test(v) || rgba.test(v)
};
const lazyRulesValues = [true, false, "ondemand"];
const useValidateProps = {
  modelValue: {},
  error: {
    type: Boolean,
    default: null
  },
  errorMessage: String,
  noErrorIcon: Boolean,
  rules: Array,
  reactiveRules: Boolean,
  lazyRules: {
    type: [Boolean, String],
    default: false,
    validator: (v) => lazyRulesValues.includes(v)
  }
};
function useValidate(focused, innerLoading) {
  const { props, proxy } = getCurrentInstance();
  const innerError = ref(false);
  const innerErrorMessage = ref(null);
  const isDirtyModel = ref(false);
  useFormChild({ validate, resetValidation });
  let validateIndex = 0, unwatchRules;
  const hasRules = computed(
    () => props.rules !== void 0 && props.rules !== null && props.rules.length !== 0
  );
  const canDebounceValidate = computed(() => props.disable !== true && hasRules.value === true && innerLoading.value === false);
  const hasError = computed(
    () => props.error === true || innerError.value === true
  );
  const errorMessage = computed(() => typeof props.errorMessage === "string" && props.errorMessage.length !== 0 ? props.errorMessage : innerErrorMessage.value);
  watch(() => props.modelValue, () => {
    isDirtyModel.value = true;
    if (canDebounceValidate.value === true && props.lazyRules === false) {
      debouncedValidate();
    }
  });
  function onRulesChange() {
    if (props.lazyRules !== "ondemand" && canDebounceValidate.value === true && isDirtyModel.value === true) {
      debouncedValidate();
    }
  }
  watch(() => props.reactiveRules, (val) => {
    if (val === true) {
      if (unwatchRules === void 0) {
        unwatchRules = watch(() => props.rules, onRulesChange, { immediate: true, deep: true });
      }
    } else if (unwatchRules !== void 0) {
      unwatchRules();
      unwatchRules = void 0;
    }
  }, { immediate: true });
  watch(() => props.lazyRules, onRulesChange);
  watch(focused, (val) => {
    if (val === true) {
      isDirtyModel.value = true;
    } else if (canDebounceValidate.value === true && props.lazyRules !== "ondemand") {
      debouncedValidate();
    }
  });
  function resetValidation() {
    validateIndex++;
    innerLoading.value = false;
    isDirtyModel.value = false;
    innerError.value = false;
    innerErrorMessage.value = null;
    debouncedValidate.cancel();
  }
  function validate(val = props.modelValue) {
    if (props.disable === true || hasRules.value === false) {
      return true;
    }
    const index = ++validateIndex;
    const setDirty = innerLoading.value !== true ? () => {
      isDirtyModel.value = true;
    } : () => {
    };
    const update2 = (err, msg) => {
      err === true && setDirty();
      innerError.value = err;
      innerErrorMessage.value = msg || null;
      innerLoading.value = false;
    };
    const promises = [];
    for (let i = 0; i < props.rules.length; i++) {
      const rule = props.rules[i];
      let res;
      if (typeof rule === "function") {
        res = rule(val, testPattern);
      } else if (typeof rule === "string" && testPattern[rule] !== void 0) {
        res = testPattern[rule](val);
      }
      if (res === false || typeof res === "string") {
        update2(true, res);
        return false;
      } else if (res !== true && res !== void 0) {
        promises.push(res);
      }
    }
    if (promises.length === 0) {
      update2(false);
      return true;
    }
    innerLoading.value = true;
    return Promise.all(promises).then(
      (res) => {
        if (res === void 0 || Array.isArray(res) === false || res.length === 0) {
          index === validateIndex && update2(false);
          return true;
        }
        const msg = res.find((r) => r === false || typeof r === "string");
        index === validateIndex && update2(msg !== void 0, msg);
        return msg === void 0;
      },
      (e) => {
        if (index === validateIndex) {
          console.error(e);
          update2(true);
        }
        return false;
      }
    );
  }
  const debouncedValidate = debounce$1(validate, 0);
  onBeforeUnmount(() => {
    unwatchRules !== void 0 && unwatchRules();
    debouncedValidate.cancel();
  });
  Object.assign(proxy, { resetValidation, validate });
  injectProp(proxy, "hasError", () => hasError.value);
  return {
    isDirtyModel,
    hasRules,
    hasError,
    errorMessage,
    validate,
    resetValidation
  };
}
let queue = [];
let waitFlags = [];
function clearFlag(flag) {
  waitFlags = waitFlags.filter((entry) => entry !== flag);
}
function addFocusWaitFlag(flag) {
  clearFlag(flag);
  waitFlags.push(flag);
}
function removeFocusWaitFlag(flag) {
  clearFlag(flag);
  if (waitFlags.length === 0 && queue.length !== 0) {
    queue[queue.length - 1]();
    queue = [];
  }
}
function addFocusFn(fn) {
  if (waitFlags.length === 0) {
    fn();
  } else {
    queue.push(fn);
  }
}
function removeFocusFn(fn) {
  queue = queue.filter((entry) => entry !== fn);
}
function fieldValueIsFilled(val) {
  return val !== void 0 && val !== null && ("" + val).length !== 0;
}
const useNonInputFieldProps = {
  ...useDarkProps,
  ...useValidateProps,
  label: String,
  stackLabel: Boolean,
  hint: String,
  hideHint: Boolean,
  prefix: String,
  suffix: String,
  labelColor: String,
  color: String,
  bgColor: String,
  filled: Boolean,
  outlined: Boolean,
  borderless: Boolean,
  standout: [Boolean, String],
  square: Boolean,
  loading: Boolean,
  labelSlot: Boolean,
  bottomSlots: Boolean,
  hideBottomSpace: Boolean,
  rounded: Boolean,
  dense: Boolean,
  itemAligned: Boolean,
  counter: Boolean,
  clearable: Boolean,
  clearIcon: String,
  disable: Boolean,
  readonly: Boolean,
  autofocus: Boolean,
  for: String
};
const useFieldProps = {
  ...useNonInputFieldProps,
  maxlength: [Number, String]
};
const useFieldEmits = ["update:modelValue", "clear", "focus", "blur"];
function useFieldState({ requiredForAttr = true, tagProp, changeEvent = false } = {}) {
  const { props, proxy } = getCurrentInstance();
  const isDark = useDark(props, proxy.$q);
  const targetUid = useId({
    required: requiredForAttr,
    getValue: () => props.for
  });
  return {
    requiredForAttr,
    changeEvent,
    tag: tagProp === true ? computed(() => props.tag) : { value: "label" },
    isDark,
    editable: computed(
      () => props.disable !== true && props.readonly !== true
    ),
    innerLoading: ref(false),
    focused: ref(false),
    hasPopupOpen: false,
    splitAttrs: useSplitAttrs(),
    targetUid,
    rootRef: ref(null),
    targetRef: ref(null),
    controlRef: ref(null)
  };
}
function useField(state) {
  const { props, emit, slots, attrs, proxy } = getCurrentInstance();
  const { $q } = proxy;
  let focusoutTimer = null;
  if (state.hasValue === void 0) {
    state.hasValue = computed(() => fieldValueIsFilled(props.modelValue));
  }
  if (state.emitValue === void 0) {
    state.emitValue = (value) => {
      emit("update:modelValue", value);
    };
  }
  if (state.controlEvents === void 0) {
    state.controlEvents = {
      onFocusin: onControlFocusin,
      onFocusout: onControlFocusout
    };
  }
  Object.assign(state, {
    clearValue,
    onControlFocusin,
    onControlFocusout,
    focus
  });
  if (state.computedCounter === void 0) {
    state.computedCounter = computed(() => {
      if (props.counter !== false) {
        const len = typeof props.modelValue === "string" || typeof props.modelValue === "number" ? ("" + props.modelValue).length : Array.isArray(props.modelValue) === true ? props.modelValue.length : 0;
        const max = props.maxlength !== void 0 ? props.maxlength : props.maxValues;
        return len + (max !== void 0 ? " / " + max : "");
      }
    });
  }
  const {
    isDirtyModel,
    hasRules,
    hasError,
    errorMessage,
    resetValidation
  } = useValidate(state.focused, state.innerLoading);
  const floatingLabel = state.floatingLabel !== void 0 ? computed(() => props.stackLabel === true || state.focused.value === true || state.floatingLabel.value === true) : computed(() => props.stackLabel === true || state.focused.value === true || state.hasValue.value === true);
  const shouldRenderBottom = computed(
    () => props.bottomSlots === true || props.hint !== void 0 || hasRules.value === true || props.counter === true || props.error !== null
  );
  const styleType = computed(() => {
    if (props.filled === true) {
      return "filled";
    }
    if (props.outlined === true) {
      return "outlined";
    }
    if (props.borderless === true) {
      return "borderless";
    }
    if (props.standout) {
      return "standout";
    }
    return "standard";
  });
  const classes = computed(
    () => `q-field row no-wrap items-start q-field--${styleType.value}` + (state.fieldClass !== void 0 ? ` ${state.fieldClass.value}` : "") + (props.rounded === true ? " q-field--rounded" : "") + (props.square === true ? " q-field--square" : "") + (floatingLabel.value === true ? " q-field--float" : "") + (hasLabel.value === true ? " q-field--labeled" : "") + (props.dense === true ? " q-field--dense" : "") + (props.itemAligned === true ? " q-field--item-aligned q-item-type" : "") + (state.isDark.value === true ? " q-field--dark" : "") + (state.getControl === void 0 ? " q-field--auto-height" : "") + (state.focused.value === true ? " q-field--focused" : "") + (hasError.value === true ? " q-field--error" : "") + (hasError.value === true || state.focused.value === true ? " q-field--highlighted" : "") + (props.hideBottomSpace !== true && shouldRenderBottom.value === true ? " q-field--with-bottom" : "") + (props.disable === true ? " q-field--disabled" : props.readonly === true ? " q-field--readonly" : "")
  );
  const contentClass = computed(
    () => "q-field__control relative-position row no-wrap" + (props.bgColor !== void 0 ? ` bg-${props.bgColor}` : "") + (hasError.value === true ? " text-negative" : typeof props.standout === "string" && props.standout.length !== 0 && state.focused.value === true ? ` ${props.standout}` : props.color !== void 0 ? ` text-${props.color}` : "")
  );
  const hasLabel = computed(
    () => props.labelSlot === true || props.label !== void 0
  );
  const labelClass = computed(
    () => "q-field__label no-pointer-events absolute ellipsis" + (props.labelColor !== void 0 && hasError.value !== true ? ` text-${props.labelColor}` : "")
  );
  const controlSlotScope = computed(() => ({
    id: state.targetUid.value,
    editable: state.editable.value,
    focused: state.focused.value,
    floatingLabel: floatingLabel.value,
    modelValue: props.modelValue,
    emitValue: state.emitValue
  }));
  const attributes = computed(() => {
    const acc = {};
    if (state.targetUid.value) {
      acc.for = state.targetUid.value;
    }
    if (props.disable === true) {
      acc["aria-disabled"] = "true";
    }
    return acc;
  });
  function focusHandler() {
    const el = document.activeElement;
    let target2 = state.targetRef !== void 0 && state.targetRef.value;
    if (target2 && (el === null || el.id !== state.targetUid.value)) {
      target2.hasAttribute("tabindex") === true || (target2 = target2.querySelector("[tabindex]"));
      if (target2 && target2 !== el) {
        target2.focus({ preventScroll: true });
      }
    }
  }
  function focus() {
    addFocusFn(focusHandler);
  }
  function blur() {
    removeFocusFn(focusHandler);
    const el = document.activeElement;
    if (el !== null && state.rootRef.value.contains(el)) {
      el.blur();
    }
  }
  function onControlFocusin(e) {
    if (focusoutTimer !== null) {
      clearTimeout(focusoutTimer);
      focusoutTimer = null;
    }
    if (state.editable.value === true && state.focused.value === false) {
      state.focused.value = true;
      emit("focus", e);
    }
  }
  function onControlFocusout(e, then) {
    focusoutTimer !== null && clearTimeout(focusoutTimer);
    focusoutTimer = setTimeout(() => {
      focusoutTimer = null;
      if (document.hasFocus() === true && (state.hasPopupOpen === true || state.controlRef === void 0 || state.controlRef.value === null || state.controlRef.value.contains(document.activeElement) !== false)) {
        return;
      }
      if (state.focused.value === true) {
        state.focused.value = false;
        emit("blur", e);
      }
      then !== void 0 && then();
    });
  }
  function clearValue(e) {
    stopAndPrevent(e);
    if ($q.platform.is.mobile !== true) {
      const el = state.targetRef !== void 0 && state.targetRef.value || state.rootRef.value;
      el.focus();
    } else if (state.rootRef.value.contains(document.activeElement) === true) {
      document.activeElement.blur();
    }
    if (props.type === "file") {
      state.inputRef.value.value = null;
    }
    emit("update:modelValue", null);
    state.changeEvent === true && emit("change", null);
    emit("clear", props.modelValue);
    nextTick(() => {
      const isDirty = isDirtyModel.value;
      resetValidation();
      isDirtyModel.value = isDirty;
    });
  }
  function onClearableKeyup(evt) {
    [13, 32].includes(evt.keyCode) && clearValue(evt);
  }
  function getContent() {
    const node = [];
    slots.prepend !== void 0 && node.push(
      h("div", {
        class: "q-field__prepend q-field__marginal row no-wrap items-center",
        key: "prepend",
        onClick: prevent
      }, slots.prepend())
    );
    node.push(
      h("div", {
        class: "q-field__control-container col relative-position row no-wrap q-anchor--skip"
      }, getControlContainer())
    );
    hasError.value === true && props.noErrorIcon === false && node.push(
      getInnerAppendNode("error", [
        h(QIcon, { name: $q.iconSet.field.error, color: "negative" })
      ])
    );
    if (props.loading === true || state.innerLoading.value === true) {
      node.push(
        getInnerAppendNode(
          "inner-loading-append",
          slots.loading !== void 0 ? slots.loading() : [h(QSpinner, { color: props.color })]
        )
      );
    } else if (props.clearable === true && state.hasValue.value === true && state.editable.value === true) {
      node.push(
        getInnerAppendNode("inner-clearable-append", [
          h(QIcon, {
            class: "q-field__focusable-action",
            name: props.clearIcon || $q.iconSet.field.clear,
            tabindex: 0,
            role: "button",
            "aria-hidden": "false",
            "aria-label": $q.lang.label.clear,
            onKeyup: onClearableKeyup,
            onClick: clearValue
          })
        ])
      );
    }
    slots.append !== void 0 && node.push(
      h("div", {
        class: "q-field__append q-field__marginal row no-wrap items-center",
        key: "append",
        onClick: prevent
      }, slots.append())
    );
    state.getInnerAppend !== void 0 && node.push(
      getInnerAppendNode("inner-append", state.getInnerAppend())
    );
    state.getControlChild !== void 0 && node.push(
      state.getControlChild()
    );
    return node;
  }
  function getControlContainer() {
    const node = [];
    props.prefix !== void 0 && props.prefix !== null && node.push(
      h("div", {
        class: "q-field__prefix no-pointer-events row items-center"
      }, props.prefix)
    );
    if (state.getShadowControl !== void 0 && state.hasShadow.value === true) {
      node.push(
        state.getShadowControl()
      );
    }
    if (state.getControl !== void 0) {
      node.push(state.getControl());
    } else if (slots.rawControl !== void 0) {
      node.push(slots.rawControl());
    } else if (slots.control !== void 0) {
      node.push(
        h("div", {
          ref: state.targetRef,
          class: "q-field__native row",
          tabindex: -1,
          ...state.splitAttrs.attributes.value,
          "data-autofocus": props.autofocus === true || void 0
        }, slots.control(controlSlotScope.value))
      );
    }
    hasLabel.value === true && node.push(
      h("div", {
        class: labelClass.value
      }, hSlot(slots.label, props.label))
    );
    props.suffix !== void 0 && props.suffix !== null && node.push(
      h("div", {
        class: "q-field__suffix no-pointer-events row items-center"
      }, props.suffix)
    );
    return node.concat(hSlot(slots.default));
  }
  function getBottom() {
    let msg, key;
    if (hasError.value === true) {
      if (errorMessage.value !== null) {
        msg = [h("div", { role: "alert" }, errorMessage.value)];
        key = `q--slot-error-${errorMessage.value}`;
      } else {
        msg = hSlot(slots.error);
        key = "q--slot-error";
      }
    } else if (props.hideHint !== true || state.focused.value === true) {
      if (props.hint !== void 0) {
        msg = [h("div", props.hint)];
        key = `q--slot-hint-${props.hint}`;
      } else {
        msg = hSlot(slots.hint);
        key = "q--slot-hint";
      }
    }
    const hasCounter = props.counter === true || slots.counter !== void 0;
    if (props.hideBottomSpace === true && hasCounter === false && msg === void 0) {
      return;
    }
    const main = h("div", {
      key,
      class: "q-field__messages col"
    }, msg);
    return h("div", {
      class: "q-field__bottom row items-start q-field__bottom--" + (props.hideBottomSpace !== true ? "animated" : "stale"),
      onClick: prevent
    }, [
      props.hideBottomSpace === true ? main : h(Transition, { name: "q-transition--field-message" }, () => main),
      hasCounter === true ? h("div", {
        class: "q-field__counter"
      }, slots.counter !== void 0 ? slots.counter() : state.computedCounter.value) : null
    ]);
  }
  function getInnerAppendNode(key, content) {
    return content === null ? null : h("div", {
      key,
      class: "q-field__append q-field__marginal row no-wrap items-center q-anchor--skip"
    }, content);
  }
  let shouldActivate = false;
  onDeactivated(() => {
    shouldActivate = true;
  });
  onActivated(() => {
    shouldActivate === true && props.autofocus === true && proxy.focus();
  });
  props.autofocus === true && onMounted(() => {
    proxy.focus();
  });
  onBeforeUnmount(() => {
    focusoutTimer !== null && clearTimeout(focusoutTimer);
  });
  Object.assign(proxy, { focus, blur });
  return function renderField() {
    const labelAttrs = state.getControl === void 0 && slots.control === void 0 ? {
      ...state.splitAttrs.attributes.value,
      "data-autofocus": props.autofocus === true || void 0,
      ...attributes.value
    } : attributes.value;
    return h(state.tag.value, {
      ref: state.rootRef,
      class: [
        classes.value,
        attrs.class
      ],
      style: attrs.style,
      ...labelAttrs
    }, [
      slots.before !== void 0 ? h("div", {
        class: "q-field__before q-field__marginal row no-wrap items-center",
        onClick: prevent
      }, slots.before()) : null,
      h("div", {
        class: "q-field__inner relative-position col self-stretch"
      }, [
        h("div", {
          ref: state.controlRef,
          class: contentClass.value,
          tabindex: -1,
          ...state.controlEvents
        }, getContent()),
        shouldRenderBottom.value === true ? getBottom() : null
      ]),
      slots.after !== void 0 ? h("div", {
        class: "q-field__after q-field__marginal row no-wrap items-center",
        onClick: prevent
      }, slots.after()) : null
    ]);
  };
}
const NAMED_MASKS = {
  date: "####/##/##",
  datetime: "####/##/## ##:##",
  time: "##:##",
  fulltime: "##:##:##",
  phone: "(###) ### - ####",
  card: "#### #### #### ####"
};
const TOKENS = {
  "#": { pattern: "[\\d]", negate: "[^\\d]" },
  S: { pattern: "[a-zA-Z]", negate: "[^a-zA-Z]" },
  N: { pattern: "[0-9a-zA-Z]", negate: "[^0-9a-zA-Z]" },
  A: { pattern: "[a-zA-Z]", negate: "[^a-zA-Z]", transform: (v) => v.toLocaleUpperCase() },
  a: { pattern: "[a-zA-Z]", negate: "[^a-zA-Z]", transform: (v) => v.toLocaleLowerCase() },
  X: { pattern: "[0-9a-zA-Z]", negate: "[^0-9a-zA-Z]", transform: (v) => v.toLocaleUpperCase() },
  x: { pattern: "[0-9a-zA-Z]", negate: "[^0-9a-zA-Z]", transform: (v) => v.toLocaleLowerCase() }
};
const KEYS = Object.keys(TOKENS);
KEYS.forEach((key) => {
  TOKENS[key].regex = new RegExp(TOKENS[key].pattern);
});
const tokenRegexMask = new RegExp("\\\\([^.*+?^${}()|([\\]])|([.*+?^${}()|[\\]])|([" + KEYS.join("") + "])|(.)", "g"), escRegex = /[.*+?^${}()|[\]\\]/g;
const MARKER = String.fromCharCode(1);
const useMaskProps = {
  mask: String,
  reverseFillMask: Boolean,
  fillMask: [Boolean, String],
  unmaskedValue: Boolean
};
function useMask(props, emit, emitValue, inputRef) {
  let maskMarked, maskReplaced, computedMask, computedUnmask, pastedTextStart, selectionAnchor;
  const hasMask = ref(null);
  const innerValue = ref(getInitialMaskedValue());
  function getIsTypeText() {
    return props.autogrow === true || ["textarea", "text", "search", "url", "tel", "password"].includes(props.type);
  }
  watch(() => props.type + props.autogrow, updateMaskInternals);
  watch(() => props.mask, (v) => {
    if (v !== void 0) {
      updateMaskValue(innerValue.value, true);
    } else {
      const val = unmaskValue(innerValue.value);
      updateMaskInternals();
      props.modelValue !== val && emit("update:modelValue", val);
    }
  });
  watch(() => props.fillMask + props.reverseFillMask, () => {
    hasMask.value === true && updateMaskValue(innerValue.value, true);
  });
  watch(() => props.unmaskedValue, () => {
    hasMask.value === true && updateMaskValue(innerValue.value);
  });
  function getInitialMaskedValue() {
    updateMaskInternals();
    if (hasMask.value === true) {
      const masked = maskValue(unmaskValue(props.modelValue));
      return props.fillMask !== false ? fillWithMask(masked) : masked;
    }
    return props.modelValue;
  }
  function getPaddedMaskMarked(size) {
    if (size < maskMarked.length) {
      return maskMarked.slice(-size);
    }
    let pad = "", localMaskMarked = maskMarked;
    const padPos = localMaskMarked.indexOf(MARKER);
    if (padPos !== -1) {
      for (let i = size - localMaskMarked.length; i > 0; i--) {
        pad += MARKER;
      }
      localMaskMarked = localMaskMarked.slice(0, padPos) + pad + localMaskMarked.slice(padPos);
    }
    return localMaskMarked;
  }
  function updateMaskInternals() {
    hasMask.value = props.mask !== void 0 && props.mask.length !== 0 && getIsTypeText();
    if (hasMask.value === false) {
      computedUnmask = void 0;
      maskMarked = "";
      maskReplaced = "";
      return;
    }
    const localComputedMask = NAMED_MASKS[props.mask] === void 0 ? props.mask : NAMED_MASKS[props.mask], fillChar = typeof props.fillMask === "string" && props.fillMask.length !== 0 ? props.fillMask.slice(0, 1) : "_", fillCharEscaped = fillChar.replace(escRegex, "\\$&"), unmask = [], extract = [], mask = [];
    let firstMatch = props.reverseFillMask === true, unmaskChar = "", negateChar = "";
    localComputedMask.replace(tokenRegexMask, (_, char1, esc, token, char2) => {
      if (token !== void 0) {
        const c = TOKENS[token];
        mask.push(c);
        negateChar = c.negate;
        if (firstMatch === true) {
          extract.push("(?:" + negateChar + "+)?(" + c.pattern + "+)?(?:" + negateChar + "+)?(" + c.pattern + "+)?");
          firstMatch = false;
        }
        extract.push("(?:" + negateChar + "+)?(" + c.pattern + ")?");
      } else if (esc !== void 0) {
        unmaskChar = "\\" + (esc === "\\" ? "" : esc);
        mask.push(esc);
        unmask.push("([^" + unmaskChar + "]+)?" + unmaskChar + "?");
      } else {
        const c = char1 !== void 0 ? char1 : char2;
        unmaskChar = c === "\\" ? "\\\\\\\\" : c.replace(escRegex, "\\\\$&");
        mask.push(c);
        unmask.push("([^" + unmaskChar + "]+)?" + unmaskChar + "?");
      }
    });
    const unmaskMatcher = new RegExp(
      "^" + unmask.join("") + "(" + (unmaskChar === "" ? "." : "[^" + unmaskChar + "]") + "+)?" + (unmaskChar === "" ? "" : "[" + unmaskChar + "]*") + "$"
    ), extractLast = extract.length - 1, extractMatcher = extract.map((re, index) => {
      if (index === 0 && props.reverseFillMask === true) {
        return new RegExp("^" + fillCharEscaped + "*" + re);
      } else if (index === extractLast) {
        return new RegExp(
          "^" + re + "(" + (negateChar === "" ? "." : negateChar) + "+)?" + (props.reverseFillMask === true ? "$" : fillCharEscaped + "*")
        );
      }
      return new RegExp("^" + re);
    });
    computedMask = mask;
    computedUnmask = (val) => {
      const unmaskMatch = unmaskMatcher.exec(props.reverseFillMask === true ? val : val.slice(0, mask.length + 1));
      if (unmaskMatch !== null) {
        val = unmaskMatch.slice(1).join("");
      }
      const extractMatch = [], extractMatcherLength = extractMatcher.length;
      for (let i = 0, str = val; i < extractMatcherLength; i++) {
        const m = extractMatcher[i].exec(str);
        if (m === null) {
          break;
        }
        str = str.slice(m.shift().length);
        extractMatch.push(...m);
      }
      if (extractMatch.length !== 0) {
        return extractMatch.join("");
      }
      return val;
    };
    maskMarked = mask.map((v) => typeof v === "string" ? v : MARKER).join("");
    maskReplaced = maskMarked.split(MARKER).join(fillChar);
  }
  function updateMaskValue(rawVal, updateMaskInternalsFlag, inputType) {
    const inp = inputRef.value, end = inp.selectionEnd, endReverse = inp.value.length - end, unmasked = unmaskValue(rawVal);
    updateMaskInternalsFlag === true && updateMaskInternals();
    const preMasked = maskValue(unmasked), masked = props.fillMask !== false ? fillWithMask(preMasked) : preMasked, changed = innerValue.value !== masked;
    inp.value !== masked && (inp.value = masked);
    changed === true && (innerValue.value = masked);
    document.activeElement === inp && nextTick(() => {
      if (masked === maskReplaced) {
        const cursor = props.reverseFillMask === true ? maskReplaced.length : 0;
        inp.setSelectionRange(cursor, cursor, "forward");
        return;
      }
      if (inputType === "insertFromPaste" && props.reverseFillMask !== true) {
        const maxEnd = inp.selectionEnd;
        let cursor = end - 1;
        for (let i = pastedTextStart; i <= cursor && i < maxEnd; i++) {
          if (maskMarked[i] !== MARKER) {
            cursor++;
          }
        }
        moveCursor.right(inp, cursor);
        return;
      }
      if (["deleteContentBackward", "deleteContentForward"].indexOf(inputType) !== -1) {
        const cursor = props.reverseFillMask === true ? end === 0 ? masked.length > preMasked.length ? 1 : 0 : Math.max(0, masked.length - (masked === maskReplaced ? 0 : Math.min(preMasked.length, endReverse) + 1)) + 1 : end;
        inp.setSelectionRange(cursor, cursor, "forward");
        return;
      }
      if (props.reverseFillMask === true) {
        if (changed === true) {
          const cursor = Math.max(0, masked.length - (masked === maskReplaced ? 0 : Math.min(preMasked.length, endReverse + 1)));
          if (cursor === 1 && end === 1) {
            inp.setSelectionRange(cursor, cursor, "forward");
          } else {
            moveCursor.rightReverse(inp, cursor);
          }
        } else {
          const cursor = masked.length - endReverse;
          inp.setSelectionRange(cursor, cursor, "backward");
        }
      } else {
        if (changed === true) {
          const cursor = Math.max(0, maskMarked.indexOf(MARKER), Math.min(preMasked.length, end) - 1);
          moveCursor.right(inp, cursor);
        } else {
          const cursor = end - 1;
          moveCursor.right(inp, cursor);
        }
      }
    });
    const val = props.unmaskedValue === true ? unmaskValue(masked) : masked;
    if (String(props.modelValue) !== val && (props.modelValue !== null || val !== "")) {
      emitValue(val, true);
    }
  }
  function moveCursorForPaste(inp, start, end) {
    const preMasked = maskValue(unmaskValue(inp.value));
    start = Math.max(0, maskMarked.indexOf(MARKER), Math.min(preMasked.length, start));
    pastedTextStart = start;
    inp.setSelectionRange(start, end, "forward");
  }
  const moveCursor = {
    left(inp, cursor) {
      const noMarkBefore = maskMarked.slice(cursor - 1).indexOf(MARKER) === -1;
      let i = Math.max(0, cursor - 1);
      for (; i >= 0; i--) {
        if (maskMarked[i] === MARKER) {
          cursor = i;
          noMarkBefore === true && cursor++;
          break;
        }
      }
      if (i < 0 && maskMarked[cursor] !== void 0 && maskMarked[cursor] !== MARKER) {
        return moveCursor.right(inp, 0);
      }
      cursor >= 0 && inp.setSelectionRange(cursor, cursor, "backward");
    },
    right(inp, cursor) {
      const limit = inp.value.length;
      let i = Math.min(limit, cursor + 1);
      for (; i <= limit; i++) {
        if (maskMarked[i] === MARKER) {
          cursor = i;
          break;
        } else if (maskMarked[i - 1] === MARKER) {
          cursor = i;
        }
      }
      if (i > limit && maskMarked[cursor - 1] !== void 0 && maskMarked[cursor - 1] !== MARKER) {
        return moveCursor.left(inp, limit);
      }
      inp.setSelectionRange(cursor, cursor, "forward");
    },
    leftReverse(inp, cursor) {
      const localMaskMarked = getPaddedMaskMarked(inp.value.length);
      let i = Math.max(0, cursor - 1);
      for (; i >= 0; i--) {
        if (localMaskMarked[i - 1] === MARKER) {
          cursor = i;
          break;
        } else if (localMaskMarked[i] === MARKER) {
          cursor = i;
          if (i === 0) {
            break;
          }
        }
      }
      if (i < 0 && localMaskMarked[cursor] !== void 0 && localMaskMarked[cursor] !== MARKER) {
        return moveCursor.rightReverse(inp, 0);
      }
      cursor >= 0 && inp.setSelectionRange(cursor, cursor, "backward");
    },
    rightReverse(inp, cursor) {
      const limit = inp.value.length, localMaskMarked = getPaddedMaskMarked(limit), noMarkBefore = localMaskMarked.slice(0, cursor + 1).indexOf(MARKER) === -1;
      let i = Math.min(limit, cursor + 1);
      for (; i <= limit; i++) {
        if (localMaskMarked[i - 1] === MARKER) {
          cursor = i;
          cursor > 0 && noMarkBefore === true && cursor--;
          break;
        }
      }
      if (i > limit && localMaskMarked[cursor - 1] !== void 0 && localMaskMarked[cursor - 1] !== MARKER) {
        return moveCursor.leftReverse(inp, limit);
      }
      inp.setSelectionRange(cursor, cursor, "forward");
    }
  };
  function onMaskedClick(e) {
    emit("click", e);
    selectionAnchor = void 0;
  }
  function onMaskedKeydown(e) {
    emit("keydown", e);
    if (shouldIgnoreKey(e) === true || e.altKey === true) {
      return;
    }
    const inp = inputRef.value, start = inp.selectionStart, end = inp.selectionEnd;
    if (!e.shiftKey) {
      selectionAnchor = void 0;
    }
    if (e.keyCode === 37 || e.keyCode === 39) {
      if (e.shiftKey && selectionAnchor === void 0) {
        selectionAnchor = inp.selectionDirection === "forward" ? start : end;
      }
      const fn = moveCursor[(e.keyCode === 39 ? "right" : "left") + (props.reverseFillMask === true ? "Reverse" : "")];
      e.preventDefault();
      fn(inp, selectionAnchor === start ? end : start);
      if (e.shiftKey) {
        const cursor = inp.selectionStart;
        inp.setSelectionRange(Math.min(selectionAnchor, cursor), Math.max(selectionAnchor, cursor), "forward");
      }
    } else if (e.keyCode === 8 && props.reverseFillMask !== true && start === end) {
      moveCursor.left(inp, start);
      inp.setSelectionRange(inp.selectionStart, end, "backward");
    } else if (e.keyCode === 46 && props.reverseFillMask === true && start === end) {
      moveCursor.rightReverse(inp, end);
      inp.setSelectionRange(start, inp.selectionEnd, "forward");
    }
  }
  function maskValue(val) {
    if (val === void 0 || val === null || val === "") {
      return "";
    }
    if (props.reverseFillMask === true) {
      return maskValueReverse(val);
    }
    const mask = computedMask;
    let valIndex = 0, output = "";
    for (let maskIndex = 0; maskIndex < mask.length; maskIndex++) {
      const valChar = val[valIndex], maskDef = mask[maskIndex];
      if (typeof maskDef === "string") {
        output += maskDef;
        valChar === maskDef && valIndex++;
      } else if (valChar !== void 0 && maskDef.regex.test(valChar)) {
        output += maskDef.transform !== void 0 ? maskDef.transform(valChar) : valChar;
        valIndex++;
      } else {
        return output;
      }
    }
    return output;
  }
  function maskValueReverse(val) {
    const mask = computedMask, firstTokenIndex = maskMarked.indexOf(MARKER);
    let valIndex = val.length - 1, output = "";
    for (let maskIndex = mask.length - 1; maskIndex >= 0 && valIndex !== -1; maskIndex--) {
      const maskDef = mask[maskIndex];
      let valChar = val[valIndex];
      if (typeof maskDef === "string") {
        output = maskDef + output;
        valChar === maskDef && valIndex--;
      } else if (valChar !== void 0 && maskDef.regex.test(valChar)) {
        do {
          output = (maskDef.transform !== void 0 ? maskDef.transform(valChar) : valChar) + output;
          valIndex--;
          valChar = val[valIndex];
        } while (firstTokenIndex === maskIndex && valChar !== void 0 && maskDef.regex.test(valChar));
      } else {
        return output;
      }
    }
    return output;
  }
  function unmaskValue(val) {
    return typeof val !== "string" || computedUnmask === void 0 ? typeof val === "number" ? computedUnmask("" + val) : val : computedUnmask(val);
  }
  function fillWithMask(val) {
    if (maskReplaced.length - val.length <= 0) {
      return val;
    }
    return props.reverseFillMask === true && val.length !== 0 ? maskReplaced.slice(0, -val.length) + val : val + maskReplaced.slice(val.length);
  }
  return {
    innerValue,
    hasMask,
    moveCursorForPaste,
    updateMaskValue,
    onMaskedKeydown,
    onMaskedClick
  };
}
const useFormProps = {
  name: String
};
function useFormInject(formAttrs = {}) {
  return (child, action, className) => {
    child[action](
      h("input", {
        class: "hidden" + (className || ""),
        ...formAttrs.value
      })
    );
  };
}
function useFormInputNameAttr(props) {
  return computed(() => props.name || props.for);
}
function useFileFormDomProps(props, typeGuard) {
  function getFormDomProps() {
    const model = props.modelValue;
    try {
      const dt = "DataTransfer" in window ? new DataTransfer() : "ClipboardEvent" in window ? new ClipboardEvent("").clipboardData : void 0;
      if (Object(model) === model) {
        ("length" in model ? Array.from(model) : [model]).forEach((file) => {
          dt.items.add(file);
        });
      }
      return {
        files: dt.files
      };
    } catch (e) {
      return {
        files: void 0
      };
    }
  }
  return typeGuard === true ? computed(() => {
    if (props.type !== "file") {
      return;
    }
    return getFormDomProps();
  }) : computed(getFormDomProps);
}
const isJapanese = /[\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]/;
const isChinese = /[\u4e00-\u9fff\u3400-\u4dbf\u{20000}-\u{2a6df}\u{2a700}-\u{2b73f}\u{2b740}-\u{2b81f}\u{2b820}-\u{2ceaf}\uf900-\ufaff\u3300-\u33ff\ufe30-\ufe4f\uf900-\ufaff\u{2f800}-\u{2fa1f}]/u;
const isKorean = /[\u3131-\u314e\u314f-\u3163\uac00-\ud7a3]/;
const isPlainText = /[a-z0-9_ -]$/i;
function useKeyComposition(onInput) {
  return function onComposition(e) {
    if (e.type === "compositionend" || e.type === "change") {
      if (e.target.qComposing !== true)
        return;
      e.target.qComposing = false;
      onInput(e);
    } else if (e.type === "compositionupdate" && e.target.qComposing !== true && typeof e.data === "string") {
      const isComposing = client.is.firefox === true ? isPlainText.test(e.data) === false : isJapanese.test(e.data) === true || isChinese.test(e.data) === true || isKorean.test(e.data) === true;
      if (isComposing === true) {
        e.target.qComposing = true;
      }
    }
  };
}
var QInput = createComponent({
  name: "QInput",
  inheritAttrs: false,
  props: {
    ...useFieldProps,
    ...useMaskProps,
    ...useFormProps,
    modelValue: [String, Number, FileList],
    shadowText: String,
    type: {
      type: String,
      default: "text"
    },
    debounce: [String, Number],
    autogrow: Boolean,
    inputClass: [Array, String, Object],
    inputStyle: [Array, String, Object]
  },
  emits: [
    ...useFieldEmits,
    "paste",
    "change",
    "keydown",
    "click",
    "animationend"
  ],
  setup(props, { emit, attrs }) {
    const { proxy } = getCurrentInstance();
    const { $q } = proxy;
    const temp = {};
    let emitCachedValue = NaN, typedNumber, stopValueWatcher, emitTimer = null, emitValueFn;
    const inputRef = ref(null);
    const nameProp = useFormInputNameAttr(props);
    const {
      innerValue,
      hasMask,
      moveCursorForPaste,
      updateMaskValue,
      onMaskedKeydown,
      onMaskedClick
    } = useMask(props, emit, emitValue, inputRef);
    const formDomProps = useFileFormDomProps(props, true);
    const hasValue = computed(() => fieldValueIsFilled(innerValue.value));
    const onComposition = useKeyComposition(onInput);
    const state = useFieldState({ changeEvent: true });
    const isTextarea = computed(
      () => props.type === "textarea" || props.autogrow === true
    );
    const isTypeText = computed(
      () => isTextarea.value === true || ["text", "search", "url", "tel", "password"].includes(props.type)
    );
    const onEvents = computed(() => {
      const evt = {
        ...state.splitAttrs.listeners.value,
        onInput,
        onPaste,
        onChange,
        onBlur: onFinishEditing,
        onFocus: stop
      };
      evt.onCompositionstart = evt.onCompositionupdate = evt.onCompositionend = onComposition;
      if (hasMask.value === true) {
        evt.onKeydown = onMaskedKeydown;
        evt.onClick = onMaskedClick;
      }
      if (props.autogrow === true) {
        evt.onAnimationend = onAnimationend;
      }
      return evt;
    });
    const inputAttrs = computed(() => {
      const attrs2 = {
        tabindex: 0,
        "data-autofocus": props.autofocus === true || void 0,
        rows: props.type === "textarea" ? 6 : void 0,
        "aria-label": props.label,
        name: nameProp.value,
        ...state.splitAttrs.attributes.value,
        id: state.targetUid.value,
        maxlength: props.maxlength,
        disabled: props.disable === true,
        readonly: props.readonly === true
      };
      if (isTextarea.value === false) {
        attrs2.type = props.type;
      }
      if (props.autogrow === true) {
        attrs2.rows = 1;
      }
      return attrs2;
    });
    watch(() => props.type, () => {
      if (inputRef.value) {
        inputRef.value.value = props.modelValue;
      }
    });
    watch(() => props.modelValue, (v) => {
      if (hasMask.value === true) {
        if (stopValueWatcher === true) {
          stopValueWatcher = false;
          if (String(v) === emitCachedValue) {
            return;
          }
        }
        updateMaskValue(v);
      } else if (innerValue.value !== v) {
        innerValue.value = v;
        if (props.type === "number" && temp.hasOwnProperty("value") === true) {
          if (typedNumber === true) {
            typedNumber = false;
          } else {
            delete temp.value;
          }
        }
      }
      props.autogrow === true && nextTick(adjustHeight);
    });
    watch(() => props.autogrow, (val) => {
      if (val === true) {
        nextTick(adjustHeight);
      } else if (inputRef.value !== null && attrs.rows > 0) {
        inputRef.value.style.height = "auto";
      }
    });
    watch(() => props.dense, () => {
      props.autogrow === true && nextTick(adjustHeight);
    });
    function focus() {
      addFocusFn(() => {
        const el = document.activeElement;
        if (inputRef.value !== null && inputRef.value !== el && (el === null || el.id !== state.targetUid.value)) {
          inputRef.value.focus({ preventScroll: true });
        }
      });
    }
    function select() {
      inputRef.value !== null && inputRef.value.select();
    }
    function onPaste(e) {
      if (hasMask.value === true && props.reverseFillMask !== true) {
        const inp = e.target;
        moveCursorForPaste(inp, inp.selectionStart, inp.selectionEnd);
      }
      emit("paste", e);
    }
    function onInput(e) {
      if (!e || !e.target) {
        return;
      }
      if (props.type === "file") {
        emit("update:modelValue", e.target.files);
        return;
      }
      const val = e.target.value;
      if (e.target.qComposing === true) {
        temp.value = val;
        return;
      }
      if (hasMask.value === true) {
        updateMaskValue(val, false, e.inputType);
      } else {
        emitValue(val);
        if (isTypeText.value === true && e.target === document.activeElement) {
          const { selectionStart, selectionEnd } = e.target;
          if (selectionStart !== void 0 && selectionEnd !== void 0) {
            nextTick(() => {
              if (e.target === document.activeElement && val.indexOf(e.target.value) === 0) {
                e.target.setSelectionRange(selectionStart, selectionEnd);
              }
            });
          }
        }
      }
      props.autogrow === true && adjustHeight();
    }
    function onAnimationend(e) {
      emit("animationend", e);
      adjustHeight();
    }
    function emitValue(val, stopWatcher) {
      emitValueFn = () => {
        emitTimer = null;
        if (props.type !== "number" && temp.hasOwnProperty("value") === true) {
          delete temp.value;
        }
        if (props.modelValue !== val && emitCachedValue !== val) {
          emitCachedValue = val;
          stopWatcher === true && (stopValueWatcher = true);
          emit("update:modelValue", val);
          nextTick(() => {
            emitCachedValue === val && (emitCachedValue = NaN);
          });
        }
        emitValueFn = void 0;
      };
      if (props.type === "number") {
        typedNumber = true;
        temp.value = val;
      }
      if (props.debounce !== void 0) {
        emitTimer !== null && clearTimeout(emitTimer);
        temp.value = val;
        emitTimer = setTimeout(emitValueFn, props.debounce);
      } else {
        emitValueFn();
      }
    }
    function adjustHeight() {
      requestAnimationFrame(() => {
        const inp = inputRef.value;
        if (inp !== null) {
          const parentStyle = inp.parentNode.style;
          const { scrollTop } = inp;
          const { overflowY, maxHeight } = $q.platform.is.firefox === true ? {} : window.getComputedStyle(inp);
          const changeOverflow = overflowY !== void 0 && overflowY !== "scroll";
          changeOverflow === true && (inp.style.overflowY = "hidden");
          parentStyle.marginBottom = inp.scrollHeight - 1 + "px";
          inp.style.height = "1px";
          inp.style.height = inp.scrollHeight + "px";
          changeOverflow === true && (inp.style.overflowY = parseInt(maxHeight, 10) < inp.scrollHeight ? "auto" : "hidden");
          parentStyle.marginBottom = "";
          inp.scrollTop = scrollTop;
        }
      });
    }
    function onChange(e) {
      onComposition(e);
      if (emitTimer !== null) {
        clearTimeout(emitTimer);
        emitTimer = null;
      }
      emitValueFn !== void 0 && emitValueFn();
      emit("change", e.target.value);
    }
    function onFinishEditing(e) {
      e !== void 0 && stop(e);
      if (emitTimer !== null) {
        clearTimeout(emitTimer);
        emitTimer = null;
      }
      emitValueFn !== void 0 && emitValueFn();
      typedNumber = false;
      stopValueWatcher = false;
      delete temp.value;
      props.type !== "file" && setTimeout(() => {
        if (inputRef.value !== null) {
          inputRef.value.value = innerValue.value !== void 0 ? innerValue.value : "";
        }
      });
    }
    function getCurValue() {
      return temp.hasOwnProperty("value") === true ? temp.value : innerValue.value !== void 0 ? innerValue.value : "";
    }
    onBeforeUnmount(() => {
      onFinishEditing();
    });
    onMounted(() => {
      props.autogrow === true && adjustHeight();
    });
    Object.assign(state, {
      innerValue,
      fieldClass: computed(
        () => `q-${isTextarea.value === true ? "textarea" : "input"}` + (props.autogrow === true ? " q-textarea--autogrow" : "")
      ),
      hasShadow: computed(
        () => props.type !== "file" && typeof props.shadowText === "string" && props.shadowText.length !== 0
      ),
      inputRef,
      emitValue,
      hasValue,
      floatingLabel: computed(
        () => hasValue.value === true && (props.type !== "number" || isNaN(innerValue.value) === false) || fieldValueIsFilled(props.displayValue)
      ),
      getControl: () => {
        return h(isTextarea.value === true ? "textarea" : "input", {
          ref: inputRef,
          class: [
            "q-field__native q-placeholder",
            props.inputClass
          ],
          style: props.inputStyle,
          ...inputAttrs.value,
          ...onEvents.value,
          ...props.type !== "file" ? { value: getCurValue() } : formDomProps.value
        });
      },
      getShadowControl: () => {
        return h("div", {
          class: "q-field__native q-field__shadow absolute-bottom no-pointer-events" + (isTextarea.value === true ? "" : " text-no-wrap")
        }, [
          h("span", { class: "invisible" }, getCurValue()),
          h("span", props.shadowText)
        ]);
      }
    });
    const renderFn = useField(state);
    Object.assign(proxy, {
      focus,
      select,
      getNativeElement: () => inputRef.value
    });
    injectProp(proxy, "nativeEl", () => inputRef.value);
    return renderFn;
  }
});
var QTh = createComponent({
  name: "QTh",
  props: {
    props: Object,
    autoWidth: Boolean
  },
  emits: ["click"],
  setup(props, { slots, emit }) {
    const vm = getCurrentInstance();
    const { proxy: { $q } } = vm;
    const onClick = (evt) => {
      emit("click", evt);
    };
    return () => {
      if (props.props === void 0) {
        return h("th", {
          class: props.autoWidth === true ? "q-table--col-auto-width" : "",
          onClick
        }, hSlot(slots.default));
      }
      let col, child;
      const name = vm.vnode.key;
      if (name) {
        col = props.props.colsMap[name];
        if (col === void 0)
          return;
      } else {
        col = props.props.col;
      }
      if (col.sortable === true) {
        const action = col.align === "right" ? "unshift" : "push";
        child = hUniqueSlot(slots.default, []);
        child[action](
          h(QIcon, {
            class: col.__iconClass,
            name: $q.iconSet.table.arrowUp
          })
        );
      } else {
        child = hSlot(slots.default);
      }
      const data = {
        class: col.__thClass + (props.autoWidth === true ? " q-table--col-auto-width" : ""),
        style: col.headerStyle,
        onClick: (evt) => {
          col.sortable === true && props.props.sort(col);
          onClick(evt);
        }
      };
      return h("th", data, child);
    };
  }
});
const insetMap = {
  true: "inset",
  item: "item-inset",
  "item-thumbnail": "item-thumbnail-inset"
};
const margins = {
  xs: 2,
  sm: 4,
  md: 8,
  lg: 16,
  xl: 24
};
var QSeparator = createComponent({
  name: "QSeparator",
  props: {
    ...useDarkProps,
    spaced: [Boolean, String],
    inset: [Boolean, String],
    vertical: Boolean,
    color: String,
    size: String
  },
  setup(props) {
    const vm = getCurrentInstance();
    const isDark = useDark(props, vm.proxy.$q);
    const orientation = computed(() => props.vertical === true ? "vertical" : "horizontal");
    const orientClass = computed(() => ` q-separator--${orientation.value}`);
    const insetClass = computed(() => props.inset !== false ? `${orientClass.value}-${insetMap[props.inset]}` : "");
    const classes = computed(
      () => `q-separator${orientClass.value}${insetClass.value}` + (props.color !== void 0 ? ` bg-${props.color}` : "") + (isDark.value === true ? " q-separator--dark" : "")
    );
    const style = computed(() => {
      const acc = {};
      if (props.size !== void 0) {
        acc[props.vertical === true ? "width" : "height"] = props.size;
      }
      if (props.spaced !== false) {
        const size = props.spaced === true ? `${margins.md}px` : props.spaced in margins ? `${margins[props.spaced]}px` : props.spaced;
        const dir = props.vertical === true ? ["Left", "Right"] : ["Top", "Bottom"];
        acc[`margin${dir[0]}`] = acc[`margin${dir[1]}`] = size;
      }
      return acc;
    });
    return () => h("hr", {
      class: classes.value,
      style: style.value,
      "aria-orientation": orientation.value
    });
  }
});
const separatorValues = ["horizontal", "vertical", "cell", "none"];
var QMarkupTable = createComponent({
  name: "QMarkupTable",
  props: {
    ...useDarkProps,
    dense: Boolean,
    flat: Boolean,
    bordered: Boolean,
    square: Boolean,
    wrapCells: Boolean,
    separator: {
      type: String,
      default: "horizontal",
      validator: (v) => separatorValues.includes(v)
    }
  },
  setup(props, { slots }) {
    const vm = getCurrentInstance();
    const isDark = useDark(props, vm.proxy.$q);
    const classes = computed(
      () => `q-markup-table q-table__container q-table__card q-table--${props.separator}-separator` + (isDark.value === true ? " q-table--dark q-table__card--dark q-dark" : "") + (props.dense === true ? " q-table--dense" : "") + (props.flat === true ? " q-table--flat" : "") + (props.bordered === true ? " q-table--bordered" : "") + (props.square === true ? " q-table--square" : "") + (props.wrapCells === false ? " q-table--no-wrap" : "")
    );
    return () => h("div", {
      class: classes.value
    }, [
      h("table", { class: "q-table" }, hSlot(slots.default))
    ]);
  }
});
function getTableMiddle(props, content) {
  return h("div", props, [
    h("table", { class: "q-table" }, content)
  ]);
}
let rtlHasScrollBug = false;
{
  const scroller = document.createElement("div");
  scroller.setAttribute("dir", "rtl");
  Object.assign(scroller.style, {
    width: "1px",
    height: "1px",
    overflow: "auto"
  });
  const spacer = document.createElement("div");
  Object.assign(spacer.style, {
    width: "1000px",
    height: "1px"
  });
  document.body.appendChild(scroller);
  scroller.appendChild(spacer);
  scroller.scrollLeft = -1e3;
  rtlHasScrollBug = scroller.scrollLeft >= 0;
  scroller.remove();
}
const aggBucketSize = 1e3;
const scrollToEdges = [
  "start",
  "center",
  "end",
  "start-force",
  "center-force",
  "end-force"
];
const filterProto = Array.prototype.filter;
const setOverflowAnchor = window.getComputedStyle(document.body).overflowAnchor === void 0 ? noop : function(contentEl, index) {
  if (contentEl === null) {
    return;
  }
  if (contentEl._qOverflowAnimationFrame !== void 0) {
    cancelAnimationFrame(contentEl._qOverflowAnimationFrame);
  }
  contentEl._qOverflowAnimationFrame = requestAnimationFrame(() => {
    if (contentEl === null) {
      return;
    }
    contentEl._qOverflowAnimationFrame = void 0;
    const children = contentEl.children || [];
    filterProto.call(children, (el2) => el2.dataset && el2.dataset.qVsAnchor !== void 0).forEach((el2) => {
      delete el2.dataset.qVsAnchor;
    });
    const el = children[index];
    if (el && el.dataset) {
      el.dataset.qVsAnchor = "";
    }
  });
};
function sumFn(acc, h2) {
  return acc + h2;
}
function getScrollDetails(parent, child, beforeRef, afterRef, horizontal, rtl, stickyStart, stickyEnd) {
  const parentCalc = parent === window ? document.scrollingElement || document.documentElement : parent, propElSize = horizontal === true ? "offsetWidth" : "offsetHeight", details = {
    scrollStart: 0,
    scrollViewSize: -stickyStart - stickyEnd,
    scrollMaxSize: 0,
    offsetStart: -stickyStart,
    offsetEnd: -stickyEnd
  };
  if (horizontal === true) {
    if (parent === window) {
      details.scrollStart = window.pageXOffset || window.scrollX || document.body.scrollLeft || 0;
      details.scrollViewSize += document.documentElement.clientWidth;
    } else {
      details.scrollStart = parentCalc.scrollLeft;
      details.scrollViewSize += parentCalc.clientWidth;
    }
    details.scrollMaxSize = parentCalc.scrollWidth;
    if (rtl === true) {
      details.scrollStart = (rtlHasScrollBug === true ? details.scrollMaxSize - details.scrollViewSize : 0) - details.scrollStart;
    }
  } else {
    if (parent === window) {
      details.scrollStart = window.pageYOffset || window.scrollY || document.body.scrollTop || 0;
      details.scrollViewSize += document.documentElement.clientHeight;
    } else {
      details.scrollStart = parentCalc.scrollTop;
      details.scrollViewSize += parentCalc.clientHeight;
    }
    details.scrollMaxSize = parentCalc.scrollHeight;
  }
  if (beforeRef !== null) {
    for (let el = beforeRef.previousElementSibling; el !== null; el = el.previousElementSibling) {
      if (el.classList.contains("q-virtual-scroll--skip") === false) {
        details.offsetStart += el[propElSize];
      }
    }
  }
  if (afterRef !== null) {
    for (let el = afterRef.nextElementSibling; el !== null; el = el.nextElementSibling) {
      if (el.classList.contains("q-virtual-scroll--skip") === false) {
        details.offsetEnd += el[propElSize];
      }
    }
  }
  if (child !== parent) {
    const parentRect = parentCalc.getBoundingClientRect(), childRect = child.getBoundingClientRect();
    if (horizontal === true) {
      details.offsetStart += childRect.left - parentRect.left;
      details.offsetEnd -= childRect.width;
    } else {
      details.offsetStart += childRect.top - parentRect.top;
      details.offsetEnd -= childRect.height;
    }
    if (parent !== window) {
      details.offsetStart += details.scrollStart;
    }
    details.offsetEnd += details.scrollMaxSize - details.offsetStart;
  }
  return details;
}
function setScroll(parent, scroll, horizontal, rtl) {
  if (scroll === "end") {
    scroll = (parent === window ? document.body : parent)[horizontal === true ? "scrollWidth" : "scrollHeight"];
  }
  if (parent === window) {
    if (horizontal === true) {
      if (rtl === true) {
        scroll = (rtlHasScrollBug === true ? document.body.scrollWidth - document.documentElement.clientWidth : 0) - scroll;
      }
      window.scrollTo(scroll, window.pageYOffset || window.scrollY || document.body.scrollTop || 0);
    } else {
      window.scrollTo(window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, scroll);
    }
  } else if (horizontal === true) {
    if (rtl === true) {
      scroll = (rtlHasScrollBug === true ? parent.scrollWidth - parent.offsetWidth : 0) - scroll;
    }
    parent.scrollLeft = scroll;
  } else {
    parent.scrollTop = scroll;
  }
}
function sumSize(sizeAgg, size, from, to) {
  if (from >= to) {
    return 0;
  }
  const lastTo = size.length, fromAgg = Math.floor(from / aggBucketSize), toAgg = Math.floor((to - 1) / aggBucketSize) + 1;
  let total = sizeAgg.slice(fromAgg, toAgg).reduce(sumFn, 0);
  if (from % aggBucketSize !== 0) {
    total -= size.slice(fromAgg * aggBucketSize, from).reduce(sumFn, 0);
  }
  if (to % aggBucketSize !== 0 && to !== lastTo) {
    total -= size.slice(to, toAgg * aggBucketSize).reduce(sumFn, 0);
  }
  return total;
}
const commonVirtScrollProps = {
  virtualScrollSliceSize: {
    type: [Number, String],
    default: 10
  },
  virtualScrollSliceRatioBefore: {
    type: [Number, String],
    default: 1
  },
  virtualScrollSliceRatioAfter: {
    type: [Number, String],
    default: 1
  },
  virtualScrollItemSize: {
    type: [Number, String],
    default: 24
  },
  virtualScrollStickySizeStart: {
    type: [Number, String],
    default: 0
  },
  virtualScrollStickySizeEnd: {
    type: [Number, String],
    default: 0
  },
  tableColspan: [Number, String]
};
const commonVirtScrollPropsList = Object.keys(commonVirtScrollProps);
const useVirtualScrollProps = {
  virtualScrollHorizontal: Boolean,
  onVirtualScroll: Function,
  ...commonVirtScrollProps
};
function useVirtualScroll({
  virtualScrollLength,
  getVirtualScrollTarget,
  getVirtualScrollEl,
  virtualScrollItemSizeComputed
}) {
  const vm = getCurrentInstance();
  const { props, emit, proxy } = vm;
  const { $q } = proxy;
  let prevScrollStart, prevToIndex, localScrollViewSize, virtualScrollSizesAgg = [], virtualScrollSizes;
  const virtualScrollPaddingBefore = ref(0);
  const virtualScrollPaddingAfter = ref(0);
  const virtualScrollSliceSizeComputed = ref({});
  const beforeRef = ref(null);
  const afterRef = ref(null);
  const contentRef = ref(null);
  const virtualScrollSliceRange = ref({ from: 0, to: 0 });
  const colspanAttr = computed(() => props.tableColspan !== void 0 ? props.tableColspan : 100);
  if (virtualScrollItemSizeComputed === void 0) {
    virtualScrollItemSizeComputed = computed(() => props.virtualScrollItemSize);
  }
  const needsReset = computed(() => virtualScrollItemSizeComputed.value + ";" + props.virtualScrollHorizontal);
  const needsSliceRecalc = computed(
    () => needsReset.value + ";" + props.virtualScrollSliceRatioBefore + ";" + props.virtualScrollSliceRatioAfter
  );
  watch(needsSliceRecalc, () => {
    setVirtualScrollSize();
  });
  watch(needsReset, reset);
  function reset() {
    localResetVirtualScroll(prevToIndex, true);
  }
  function refresh(toIndex) {
    localResetVirtualScroll(toIndex === void 0 ? prevToIndex : toIndex);
  }
  function scrollTo(toIndex, edge) {
    const scrollEl = getVirtualScrollTarget();
    if (scrollEl === void 0 || scrollEl === null || scrollEl.nodeType === 8) {
      return;
    }
    const scrollDetails = getScrollDetails(
      scrollEl,
      getVirtualScrollEl(),
      beforeRef.value,
      afterRef.value,
      props.virtualScrollHorizontal,
      $q.lang.rtl,
      props.virtualScrollStickySizeStart,
      props.virtualScrollStickySizeEnd
    );
    localScrollViewSize !== scrollDetails.scrollViewSize && setVirtualScrollSize(scrollDetails.scrollViewSize);
    setVirtualScrollSliceRange(
      scrollEl,
      scrollDetails,
      Math.min(virtualScrollLength.value - 1, Math.max(0, parseInt(toIndex, 10) || 0)),
      0,
      scrollToEdges.indexOf(edge) !== -1 ? edge : prevToIndex !== -1 && toIndex > prevToIndex ? "end" : "start"
    );
  }
  function localOnVirtualScrollEvt() {
    const scrollEl = getVirtualScrollTarget();
    if (scrollEl === void 0 || scrollEl === null || scrollEl.nodeType === 8) {
      return;
    }
    const scrollDetails = getScrollDetails(
      scrollEl,
      getVirtualScrollEl(),
      beforeRef.value,
      afterRef.value,
      props.virtualScrollHorizontal,
      $q.lang.rtl,
      props.virtualScrollStickySizeStart,
      props.virtualScrollStickySizeEnd
    ), listLastIndex = virtualScrollLength.value - 1, listEndOffset = scrollDetails.scrollMaxSize - scrollDetails.offsetStart - scrollDetails.offsetEnd - virtualScrollPaddingAfter.value;
    if (prevScrollStart === scrollDetails.scrollStart) {
      return;
    }
    if (scrollDetails.scrollMaxSize <= 0) {
      setVirtualScrollSliceRange(scrollEl, scrollDetails, 0, 0);
      return;
    }
    localScrollViewSize !== scrollDetails.scrollViewSize && setVirtualScrollSize(scrollDetails.scrollViewSize);
    updateVirtualScrollSizes(virtualScrollSliceRange.value.from);
    const scrollMaxStart = Math.floor(scrollDetails.scrollMaxSize - Math.max(scrollDetails.scrollViewSize, scrollDetails.offsetEnd) - Math.min(virtualScrollSizes[listLastIndex], scrollDetails.scrollViewSize / 2));
    if (scrollMaxStart > 0 && Math.ceil(scrollDetails.scrollStart) >= scrollMaxStart) {
      setVirtualScrollSliceRange(
        scrollEl,
        scrollDetails,
        listLastIndex,
        scrollDetails.scrollMaxSize - scrollDetails.offsetEnd - virtualScrollSizesAgg.reduce(sumFn, 0)
      );
      return;
    }
    let toIndex = 0, listOffset = scrollDetails.scrollStart - scrollDetails.offsetStart, offset = listOffset;
    if (listOffset <= listEndOffset && listOffset + scrollDetails.scrollViewSize >= virtualScrollPaddingBefore.value) {
      listOffset -= virtualScrollPaddingBefore.value;
      toIndex = virtualScrollSliceRange.value.from;
      offset = listOffset;
    } else {
      for (let j = 0; listOffset >= virtualScrollSizesAgg[j] && toIndex < listLastIndex; j++) {
        listOffset -= virtualScrollSizesAgg[j];
        toIndex += aggBucketSize;
      }
    }
    while (listOffset > 0 && toIndex < listLastIndex) {
      listOffset -= virtualScrollSizes[toIndex];
      if (listOffset > -scrollDetails.scrollViewSize) {
        toIndex++;
        offset = listOffset;
      } else {
        offset = virtualScrollSizes[toIndex] + listOffset;
      }
    }
    setVirtualScrollSliceRange(
      scrollEl,
      scrollDetails,
      toIndex,
      offset
    );
  }
  function setVirtualScrollSliceRange(scrollEl, scrollDetails, toIndex, offset, align) {
    const alignForce = typeof align === "string" && align.indexOf("-force") !== -1;
    const alignEnd = alignForce === true ? align.replace("-force", "") : align;
    const alignRange = alignEnd !== void 0 ? alignEnd : "start";
    let from = Math.max(0, toIndex - virtualScrollSliceSizeComputed.value[alignRange]), to = from + virtualScrollSliceSizeComputed.value.total;
    if (to > virtualScrollLength.value) {
      to = virtualScrollLength.value;
      from = Math.max(0, to - virtualScrollSliceSizeComputed.value.total);
    }
    prevScrollStart = scrollDetails.scrollStart;
    const rangeChanged = from !== virtualScrollSliceRange.value.from || to !== virtualScrollSliceRange.value.to;
    if (rangeChanged === false && alignEnd === void 0) {
      emitScroll(toIndex);
      return;
    }
    const { activeElement } = document;
    const contentEl = contentRef.value;
    if (rangeChanged === true && contentEl !== null && contentEl !== activeElement && contentEl.contains(activeElement) === true) {
      contentEl.addEventListener("focusout", onBlurRefocusFn);
      setTimeout(() => {
        contentEl !== null && contentEl.removeEventListener("focusout", onBlurRefocusFn);
      });
    }
    setOverflowAnchor(contentEl, toIndex - from);
    const sizeBefore = alignEnd !== void 0 ? virtualScrollSizes.slice(from, toIndex).reduce(sumFn, 0) : 0;
    if (rangeChanged === true) {
      const tempTo = to >= virtualScrollSliceRange.value.from && from <= virtualScrollSliceRange.value.to ? virtualScrollSliceRange.value.to : to;
      virtualScrollSliceRange.value = { from, to: tempTo };
      virtualScrollPaddingBefore.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, 0, from);
      virtualScrollPaddingAfter.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, to, virtualScrollLength.value);
      requestAnimationFrame(() => {
        if (virtualScrollSliceRange.value.to !== to && prevScrollStart === scrollDetails.scrollStart) {
          virtualScrollSliceRange.value = { from: virtualScrollSliceRange.value.from, to };
          virtualScrollPaddingAfter.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, to, virtualScrollLength.value);
        }
      });
    }
    requestAnimationFrame(() => {
      if (prevScrollStart !== scrollDetails.scrollStart) {
        return;
      }
      if (rangeChanged === true) {
        updateVirtualScrollSizes(from);
      }
      const sizeAfter = virtualScrollSizes.slice(from, toIndex).reduce(sumFn, 0), posStart = sizeAfter + scrollDetails.offsetStart + virtualScrollPaddingBefore.value, posEnd = posStart + virtualScrollSizes[toIndex];
      let scrollPosition = posStart + offset;
      if (alignEnd !== void 0) {
        const sizeDiff = sizeAfter - sizeBefore;
        const scrollStart = scrollDetails.scrollStart + sizeDiff;
        scrollPosition = alignForce !== true && scrollStart < posStart && posEnd < scrollStart + scrollDetails.scrollViewSize ? scrollStart : alignEnd === "end" ? posEnd - scrollDetails.scrollViewSize : posStart - (alignEnd === "start" ? 0 : Math.round((scrollDetails.scrollViewSize - virtualScrollSizes[toIndex]) / 2));
      }
      prevScrollStart = scrollPosition;
      setScroll(
        scrollEl,
        scrollPosition,
        props.virtualScrollHorizontal,
        $q.lang.rtl
      );
      emitScroll(toIndex);
    });
  }
  function updateVirtualScrollSizes(from) {
    const contentEl = contentRef.value;
    if (contentEl) {
      const children = filterProto.call(
        contentEl.children,
        (el) => el.classList && el.classList.contains("q-virtual-scroll--skip") === false
      ), childrenLength = children.length, sizeFn = props.virtualScrollHorizontal === true ? (el) => el.getBoundingClientRect().width : (el) => el.offsetHeight;
      let index = from, size, diff;
      for (let i = 0; i < childrenLength; ) {
        size = sizeFn(children[i]);
        i++;
        while (i < childrenLength && children[i].classList.contains("q-virtual-scroll--with-prev") === true) {
          size += sizeFn(children[i]);
          i++;
        }
        diff = size - virtualScrollSizes[index];
        if (diff !== 0) {
          virtualScrollSizes[index] += diff;
          virtualScrollSizesAgg[Math.floor(index / aggBucketSize)] += diff;
        }
        index++;
      }
    }
  }
  function onBlurRefocusFn() {
    contentRef.value !== null && contentRef.value !== void 0 && contentRef.value.focus();
  }
  function localResetVirtualScroll(toIndex, fullReset) {
    const defaultSize = 1 * virtualScrollItemSizeComputed.value;
    if (fullReset === true || Array.isArray(virtualScrollSizes) === false) {
      virtualScrollSizes = [];
    }
    const oldVirtualScrollSizesLength = virtualScrollSizes.length;
    virtualScrollSizes.length = virtualScrollLength.value;
    for (let i = virtualScrollLength.value - 1; i >= oldVirtualScrollSizesLength; i--) {
      virtualScrollSizes[i] = defaultSize;
    }
    const jMax = Math.floor((virtualScrollLength.value - 1) / aggBucketSize);
    virtualScrollSizesAgg = [];
    for (let j = 0; j <= jMax; j++) {
      let size = 0;
      const iMax = Math.min((j + 1) * aggBucketSize, virtualScrollLength.value);
      for (let i = j * aggBucketSize; i < iMax; i++) {
        size += virtualScrollSizes[i];
      }
      virtualScrollSizesAgg.push(size);
    }
    prevToIndex = -1;
    prevScrollStart = void 0;
    virtualScrollPaddingBefore.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, 0, virtualScrollSliceRange.value.from);
    virtualScrollPaddingAfter.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, virtualScrollSliceRange.value.to, virtualScrollLength.value);
    if (toIndex >= 0) {
      updateVirtualScrollSizes(virtualScrollSliceRange.value.from);
      nextTick(() => {
        scrollTo(toIndex);
      });
    } else {
      onVirtualScrollEvt();
    }
  }
  function setVirtualScrollSize(scrollViewSize) {
    if (scrollViewSize === void 0 && typeof window !== "undefined") {
      const scrollEl = getVirtualScrollTarget();
      if (scrollEl !== void 0 && scrollEl !== null && scrollEl.nodeType !== 8) {
        scrollViewSize = getScrollDetails(
          scrollEl,
          getVirtualScrollEl(),
          beforeRef.value,
          afterRef.value,
          props.virtualScrollHorizontal,
          $q.lang.rtl,
          props.virtualScrollStickySizeStart,
          props.virtualScrollStickySizeEnd
        ).scrollViewSize;
      }
    }
    localScrollViewSize = scrollViewSize;
    const virtualScrollSliceRatioBefore = parseFloat(props.virtualScrollSliceRatioBefore) || 0;
    const virtualScrollSliceRatioAfter = parseFloat(props.virtualScrollSliceRatioAfter) || 0;
    const multiplier = 1 + virtualScrollSliceRatioBefore + virtualScrollSliceRatioAfter;
    const view = scrollViewSize === void 0 || scrollViewSize <= 0 ? 1 : Math.ceil(scrollViewSize / virtualScrollItemSizeComputed.value);
    const baseSize = Math.max(
      1,
      view,
      Math.ceil((props.virtualScrollSliceSize > 0 ? props.virtualScrollSliceSize : 10) / multiplier)
    );
    virtualScrollSliceSizeComputed.value = {
      total: Math.ceil(baseSize * multiplier),
      start: Math.ceil(baseSize * virtualScrollSliceRatioBefore),
      center: Math.ceil(baseSize * (0.5 + virtualScrollSliceRatioBefore)),
      end: Math.ceil(baseSize * (1 + virtualScrollSliceRatioBefore)),
      view
    };
  }
  function padVirtualScroll(tag, content) {
    const paddingSize = props.virtualScrollHorizontal === true ? "width" : "height";
    const style = {
      ["--q-virtual-scroll-item-" + paddingSize]: virtualScrollItemSizeComputed.value + "px"
    };
    return [
      tag === "tbody" ? h(tag, {
        class: "q-virtual-scroll__padding",
        key: "before",
        ref: beforeRef
      }, [
        h("tr", [
          h("td", {
            style: { [paddingSize]: `${virtualScrollPaddingBefore.value}px`, ...style },
            colspan: colspanAttr.value
          })
        ])
      ]) : h(tag, {
        class: "q-virtual-scroll__padding",
        key: "before",
        ref: beforeRef,
        style: { [paddingSize]: `${virtualScrollPaddingBefore.value}px`, ...style }
      }),
      h(tag, {
        class: "q-virtual-scroll__content",
        key: "content",
        ref: contentRef,
        tabindex: -1
      }, content.flat()),
      tag === "tbody" ? h(tag, {
        class: "q-virtual-scroll__padding",
        key: "after",
        ref: afterRef
      }, [
        h("tr", [
          h("td", {
            style: { [paddingSize]: `${virtualScrollPaddingAfter.value}px`, ...style },
            colspan: colspanAttr.value
          })
        ])
      ]) : h(tag, {
        class: "q-virtual-scroll__padding",
        key: "after",
        ref: afterRef,
        style: { [paddingSize]: `${virtualScrollPaddingAfter.value}px`, ...style }
      })
    ];
  }
  function emitScroll(index) {
    if (prevToIndex !== index) {
      props.onVirtualScroll !== void 0 && emit("virtualScroll", {
        index,
        from: virtualScrollSliceRange.value.from,
        to: virtualScrollSliceRange.value.to - 1,
        direction: index < prevToIndex ? "decrease" : "increase",
        ref: proxy
      });
      prevToIndex = index;
    }
  }
  setVirtualScrollSize();
  const onVirtualScrollEvt = debounce$1(
    localOnVirtualScrollEvt,
    $q.platform.is.ios === true ? 120 : 35
  );
  onBeforeMount(() => {
    setVirtualScrollSize();
  });
  let shouldActivate = false;
  onDeactivated(() => {
    shouldActivate = true;
  });
  onActivated(() => {
    if (shouldActivate !== true)
      return;
    const scrollEl = getVirtualScrollTarget();
    if (prevScrollStart !== void 0 && scrollEl !== void 0 && scrollEl !== null && scrollEl.nodeType !== 8) {
      setScroll(
        scrollEl,
        prevScrollStart,
        props.virtualScrollHorizontal,
        $q.lang.rtl
      );
    } else {
      scrollTo(prevToIndex);
    }
  });
  onBeforeUnmount(() => {
    onVirtualScrollEvt.cancel();
  });
  Object.assign(proxy, { scrollTo, reset, refresh });
  return {
    virtualScrollSliceRange,
    virtualScrollSliceSizeComputed,
    setVirtualScrollSize,
    onVirtualScrollEvt,
    localResetVirtualScroll,
    padVirtualScroll,
    scrollTo,
    reset,
    refresh
  };
}
const comps = {
  list: QList,
  table: QMarkupTable
};
const typeOptions = ["list", "table", "__qtable"];
var QVirtualScroll = createComponent({
  name: "QVirtualScroll",
  props: {
    ...useVirtualScrollProps,
    type: {
      type: String,
      default: "list",
      validator: (v) => typeOptions.includes(v)
    },
    items: {
      type: Array,
      default: () => []
    },
    itemsFn: Function,
    itemsSize: Number,
    scrollTarget: scrollTargetProp
  },
  setup(props, { slots, attrs }) {
    let localScrollTarget;
    const rootRef = ref(null);
    const virtualScrollLength = computed(() => props.itemsSize >= 0 && props.itemsFn !== void 0 ? parseInt(props.itemsSize, 10) : Array.isArray(props.items) ? props.items.length : 0);
    const {
      virtualScrollSliceRange,
      localResetVirtualScroll,
      padVirtualScroll,
      onVirtualScrollEvt
    } = useVirtualScroll({
      virtualScrollLength,
      getVirtualScrollTarget,
      getVirtualScrollEl
    });
    const virtualScrollScope = computed(() => {
      if (virtualScrollLength.value === 0) {
        return [];
      }
      const mapFn = (item, i) => ({
        index: virtualScrollSliceRange.value.from + i,
        item
      });
      return props.itemsFn === void 0 ? props.items.slice(virtualScrollSliceRange.value.from, virtualScrollSliceRange.value.to).map(mapFn) : props.itemsFn(virtualScrollSliceRange.value.from, virtualScrollSliceRange.value.to - virtualScrollSliceRange.value.from).map(mapFn);
    });
    const classes = computed(
      () => "q-virtual-scroll q-virtual-scroll" + (props.virtualScrollHorizontal === true ? "--horizontal" : "--vertical") + (props.scrollTarget !== void 0 ? "" : " scroll")
    );
    const attributes = computed(() => props.scrollTarget !== void 0 ? {} : { tabindex: 0 });
    watch(virtualScrollLength, () => {
      localResetVirtualScroll();
    });
    watch(() => props.scrollTarget, () => {
      unconfigureScrollTarget();
      configureScrollTarget();
    });
    function getVirtualScrollEl() {
      return rootRef.value.$el || rootRef.value;
    }
    function getVirtualScrollTarget() {
      return localScrollTarget;
    }
    function configureScrollTarget() {
      localScrollTarget = getScrollTarget(getVirtualScrollEl(), props.scrollTarget);
      localScrollTarget.addEventListener("scroll", onVirtualScrollEvt, listenOpts.passive);
    }
    function unconfigureScrollTarget() {
      if (localScrollTarget !== void 0) {
        localScrollTarget.removeEventListener("scroll", onVirtualScrollEvt, listenOpts.passive);
        localScrollTarget = void 0;
      }
    }
    function __getVirtualChildren() {
      let child = padVirtualScroll(
        props.type === "list" ? "div" : "tbody",
        virtualScrollScope.value.map(slots.default)
      );
      if (slots.before !== void 0) {
        child = slots.before().concat(child);
      }
      return hMergeSlot(slots.after, child);
    }
    onBeforeMount(() => {
      localResetVirtualScroll();
    });
    onMounted(() => {
      configureScrollTarget();
    });
    onActivated(() => {
      configureScrollTarget();
    });
    onDeactivated(() => {
      unconfigureScrollTarget();
    });
    onBeforeUnmount(() => {
      unconfigureScrollTarget();
    });
    return () => {
      if (slots.default === void 0) {
        console.error("QVirtualScroll: default scoped slot is required for rendering");
        return;
      }
      return props.type === "__qtable" ? getTableMiddle(
        { ref: rootRef, class: "q-table__middle " + classes.value },
        __getVirtualChildren()
      ) : h(comps[props.type], {
        ...attrs,
        ref: rootRef,
        class: [attrs.class, classes.value],
        ...attributes.value
      }, __getVirtualChildren);
    };
  }
});
var QField = createComponent({
  name: "QField",
  inheritAttrs: false,
  props: {
    ...useFieldProps,
    tag: {
      type: String,
      default: "label"
    }
  },
  emits: useFieldEmits,
  setup() {
    return useField(
      useFieldState({ tagProp: true })
    );
  }
});
const defaultSizes$1 = {
  xs: 8,
  sm: 10,
  md: 14,
  lg: 20,
  xl: 24
};
var QChip = createComponent({
  name: "QChip",
  props: {
    ...useDarkProps,
    ...useSizeProps,
    dense: Boolean,
    icon: String,
    iconRight: String,
    iconRemove: String,
    iconSelected: String,
    label: [String, Number],
    color: String,
    textColor: String,
    modelValue: {
      type: Boolean,
      default: true
    },
    selected: {
      type: Boolean,
      default: null
    },
    square: Boolean,
    outline: Boolean,
    clickable: Boolean,
    removable: Boolean,
    removeAriaLabel: String,
    tabindex: [String, Number],
    disable: Boolean,
    ripple: {
      type: [Boolean, Object],
      default: true
    }
  },
  emits: ["update:modelValue", "update:selected", "remove", "click"],
  setup(props, { slots, emit }) {
    const { proxy: { $q } } = getCurrentInstance();
    const isDark = useDark(props, $q);
    const sizeStyle = useSize(props, defaultSizes$1);
    const hasLeftIcon = computed(() => props.selected === true || props.icon !== void 0);
    const leftIcon = computed(() => props.selected === true ? props.iconSelected || $q.iconSet.chip.selected : props.icon);
    const removeIcon = computed(() => props.iconRemove || $q.iconSet.chip.remove);
    const isClickable = computed(
      () => props.disable === false && (props.clickable === true || props.selected !== null)
    );
    const classes = computed(() => {
      const text = props.outline === true ? props.color || props.textColor : props.textColor;
      return "q-chip row inline no-wrap items-center" + (props.outline === false && props.color !== void 0 ? ` bg-${props.color}` : "") + (text ? ` text-${text} q-chip--colored` : "") + (props.disable === true ? " disabled" : "") + (props.dense === true ? " q-chip--dense" : "") + (props.outline === true ? " q-chip--outline" : "") + (props.selected === true ? " q-chip--selected" : "") + (isClickable.value === true ? " q-chip--clickable cursor-pointer non-selectable q-hoverable" : "") + (props.square === true ? " q-chip--square" : "") + (isDark.value === true ? " q-chip--dark q-dark" : "");
    });
    const attributes = computed(() => {
      const chip = props.disable === true ? { tabindex: -1, "aria-disabled": "true" } : { tabindex: props.tabindex || 0 };
      const remove = {
        ...chip,
        role: "button",
        "aria-hidden": "false",
        "aria-label": props.removeAriaLabel || $q.lang.label.remove
      };
      return { chip, remove };
    });
    function onKeyup2(e) {
      e.keyCode === 13 && onClick(e);
    }
    function onClick(e) {
      if (!props.disable) {
        emit("update:selected", !props.selected);
        emit("click", e);
      }
    }
    function onRemove(e) {
      if (e.keyCode === void 0 || e.keyCode === 13) {
        stopAndPrevent(e);
        if (props.disable === false) {
          emit("update:modelValue", false);
          emit("remove");
        }
      }
    }
    function getContent() {
      const child = [];
      isClickable.value === true && child.push(
        h("div", { class: "q-focus-helper" })
      );
      hasLeftIcon.value === true && child.push(
        h(QIcon, {
          class: "q-chip__icon q-chip__icon--left",
          name: leftIcon.value
        })
      );
      const label = props.label !== void 0 ? [h("div", { class: "ellipsis" }, [props.label])] : void 0;
      child.push(
        h("div", {
          class: "q-chip__content col row no-wrap items-center q-anchor--skip"
        }, hMergeSlotSafely(slots.default, label))
      );
      props.iconRight && child.push(
        h(QIcon, {
          class: "q-chip__icon q-chip__icon--right",
          name: props.iconRight
        })
      );
      props.removable === true && child.push(
        h(QIcon, {
          class: "q-chip__icon q-chip__icon--remove cursor-pointer",
          name: removeIcon.value,
          ...attributes.value.remove,
          onClick: onRemove,
          onKeyup: onRemove
        })
      );
      return child;
    }
    return () => {
      if (props.modelValue === false)
        return;
      const data = {
        class: classes.value,
        style: sizeStyle.value
      };
      isClickable.value === true && Object.assign(
        data,
        attributes.value.chip,
        { onClick, onKeyup: onKeyup2 }
      );
      return hDir(
        "div",
        data,
        getContent(),
        "ripple",
        props.ripple !== false && props.disable !== true,
        () => [[Ripple, props.ripple]]
      );
    };
  }
});
const useAnchorStaticProps = {
  target: {
    type: [Boolean, String, Element],
    default: true
  },
  noParentEvent: Boolean
};
const useAnchorProps = {
  ...useAnchorStaticProps,
  contextMenu: Boolean
};
function useAnchor({
  showing,
  avoidEmit,
  configureAnchorEl
}) {
  const { props, proxy, emit } = getCurrentInstance();
  const anchorEl = ref(null);
  let touchTimer = null;
  function canShow(evt) {
    return anchorEl.value === null ? false : evt === void 0 || evt.touches === void 0 || evt.touches.length <= 1;
  }
  const anchorEvents = {};
  if (configureAnchorEl === void 0) {
    Object.assign(anchorEvents, {
      hide(evt) {
        proxy.hide(evt);
      },
      toggle(evt) {
        proxy.toggle(evt);
        evt.qAnchorHandled = true;
      },
      toggleKey(evt) {
        isKeyCode(evt, 13) === true && anchorEvents.toggle(evt);
      },
      contextClick(evt) {
        proxy.hide(evt);
        prevent(evt);
        nextTick(() => {
          proxy.show(evt);
          evt.qAnchorHandled = true;
        });
      },
      prevent,
      mobileTouch(evt) {
        anchorEvents.mobileCleanup(evt);
        if (canShow(evt) !== true) {
          return;
        }
        proxy.hide(evt);
        anchorEl.value.classList.add("non-selectable");
        const target2 = evt.target;
        addEvt(anchorEvents, "anchor", [
          [target2, "touchmove", "mobileCleanup", "passive"],
          [target2, "touchend", "mobileCleanup", "passive"],
          [target2, "touchcancel", "mobileCleanup", "passive"],
          [anchorEl.value, "contextmenu", "prevent", "notPassive"]
        ]);
        touchTimer = setTimeout(() => {
          touchTimer = null;
          proxy.show(evt);
          evt.qAnchorHandled = true;
        }, 300);
      },
      mobileCleanup(evt) {
        anchorEl.value.classList.remove("non-selectable");
        if (touchTimer !== null) {
          clearTimeout(touchTimer);
          touchTimer = null;
        }
        if (showing.value === true && evt !== void 0) {
          clearSelection();
        }
      }
    });
    configureAnchorEl = function(context = props.contextMenu) {
      if (props.noParentEvent === true || anchorEl.value === null)
        return;
      let evts;
      if (context === true) {
        if (proxy.$q.platform.is.mobile === true) {
          evts = [
            [anchorEl.value, "touchstart", "mobileTouch", "passive"]
          ];
        } else {
          evts = [
            [anchorEl.value, "mousedown", "hide", "passive"],
            [anchorEl.value, "contextmenu", "contextClick", "notPassive"]
          ];
        }
      } else {
        evts = [
          [anchorEl.value, "click", "toggle", "passive"],
          [anchorEl.value, "keyup", "toggleKey", "passive"]
        ];
      }
      addEvt(anchorEvents, "anchor", evts);
    };
  }
  function unconfigureAnchorEl() {
    cleanEvt(anchorEvents, "anchor");
  }
  function setAnchorEl(el) {
    anchorEl.value = el;
    while (anchorEl.value.classList.contains("q-anchor--skip")) {
      anchorEl.value = anchorEl.value.parentNode;
    }
    configureAnchorEl();
  }
  function pickAnchorEl() {
    if (props.target === false || props.target === "" || proxy.$el.parentNode === null) {
      anchorEl.value = null;
    } else if (props.target === true) {
      setAnchorEl(proxy.$el.parentNode);
    } else {
      let el = props.target;
      if (typeof props.target === "string") {
        try {
          el = document.querySelector(props.target);
        } catch (err) {
          el = void 0;
        }
      }
      if (el !== void 0 && el !== null) {
        anchorEl.value = el.$el || el;
        configureAnchorEl();
      } else {
        anchorEl.value = null;
        console.error(`Anchor: target "${props.target}" not found`);
      }
    }
  }
  watch(() => props.contextMenu, (val) => {
    if (anchorEl.value !== null) {
      unconfigureAnchorEl();
      configureAnchorEl(val);
    }
  });
  watch(() => props.target, () => {
    if (anchorEl.value !== null) {
      unconfigureAnchorEl();
    }
    pickAnchorEl();
  });
  watch(() => props.noParentEvent, (val) => {
    if (anchorEl.value !== null) {
      if (val === true) {
        unconfigureAnchorEl();
      } else {
        configureAnchorEl();
      }
    }
  });
  onMounted(() => {
    pickAnchorEl();
    if (avoidEmit !== true && props.modelValue === true && anchorEl.value === null) {
      emit("update:modelValue", false);
    }
  });
  onBeforeUnmount(() => {
    touchTimer !== null && clearTimeout(touchTimer);
    unconfigureAnchorEl();
  });
  return {
    anchorEl,
    canShow,
    anchorEvents
  };
}
function useScrollTarget(props, configureScrollTarget) {
  const localScrollTarget = ref(null);
  let scrollFn;
  function changeScrollEvent(scrollTarget, fn) {
    const fnProp = `${fn !== void 0 ? "add" : "remove"}EventListener`;
    const fnHandler = fn !== void 0 ? fn : scrollFn;
    if (scrollTarget !== window) {
      scrollTarget[fnProp]("scroll", fnHandler, listenOpts.passive);
    }
    window[fnProp]("scroll", fnHandler, listenOpts.passive);
    scrollFn = fn;
  }
  function unconfigureScrollTarget() {
    if (localScrollTarget.value !== null) {
      changeScrollEvent(localScrollTarget.value);
      localScrollTarget.value = null;
    }
  }
  const noParentEventWatcher = watch(() => props.noParentEvent, () => {
    if (localScrollTarget.value !== null) {
      unconfigureScrollTarget();
      configureScrollTarget();
    }
  });
  onBeforeUnmount(noParentEventWatcher);
  return {
    localScrollTarget,
    unconfigureScrollTarget,
    changeScrollEvent
  };
}
let portalIndex = 1;
let target = document.body;
function createGlobalNode(id, portalType) {
  const el = document.createElement("div");
  el.id = portalType !== void 0 ? `q-portal--${portalType}--${portalIndex++}` : id;
  if (globalConfig.globalNodes !== void 0) {
    const cls = globalConfig.globalNodes.class;
    if (cls !== void 0) {
      el.className = cls;
    }
  }
  target.appendChild(el);
  return el;
}
function removeGlobalNode(el) {
  el.remove();
}
const portalProxyList = [];
function getPortalProxy(el) {
  return portalProxyList.find(
    (proxy) => proxy.contentEl !== null && proxy.contentEl.contains(el)
  );
}
function closePortalMenus(proxy, evt) {
  do {
    if (proxy.$options.name === "QMenu") {
      proxy.hide(evt);
      if (proxy.$props.separateClosePopup === true) {
        return getParentProxy(proxy);
      }
    } else if (proxy.__qPortal === true) {
      const parent = getParentProxy(proxy);
      if (parent !== void 0 && parent.$options.name === "QPopupProxy") {
        proxy.hide(evt);
        return parent;
      } else {
        return proxy;
      }
    }
    proxy = getParentProxy(proxy);
  } while (proxy !== void 0 && proxy !== null);
}
function closePortals(proxy, evt, depth) {
  while (depth !== 0 && proxy !== void 0 && proxy !== null) {
    if (proxy.__qPortal === true) {
      depth--;
      if (proxy.$options.name === "QMenu") {
        proxy = closePortalMenus(proxy, evt);
        continue;
      }
      proxy.hide(evt);
    }
    proxy = getParentProxy(proxy);
  }
}
const QPortal = createComponent({
  name: "QPortal",
  setup(_, { slots }) {
    return () => slots.default();
  }
});
function isOnGlobalDialog(vm) {
  vm = vm.parent;
  while (vm !== void 0 && vm !== null) {
    if (vm.type.name === "QGlobalDialog") {
      return true;
    }
    if (vm.type.name === "QDialog" || vm.type.name === "QMenu") {
      return false;
    }
    vm = vm.parent;
  }
  return false;
}
function usePortal(vm, innerRef, renderPortalContent, type) {
  const portalIsActive = ref(false);
  const portalIsAccessible = ref(false);
  let portalEl = null;
  const focusObj = {};
  const onGlobalDialog = type === "dialog" && isOnGlobalDialog(vm);
  function showPortal(isReady) {
    if (isReady === true) {
      removeFocusWaitFlag(focusObj);
      portalIsAccessible.value = true;
      return;
    }
    portalIsAccessible.value = false;
    if (portalIsActive.value === false) {
      if (onGlobalDialog === false && portalEl === null) {
        portalEl = createGlobalNode(false, type);
      }
      portalIsActive.value = true;
      portalProxyList.push(vm.proxy);
      addFocusWaitFlag(focusObj);
    }
  }
  function hidePortal(isReady) {
    portalIsAccessible.value = false;
    if (isReady !== true)
      return;
    removeFocusWaitFlag(focusObj);
    portalIsActive.value = false;
    const index = portalProxyList.indexOf(vm.proxy);
    if (index !== -1) {
      portalProxyList.splice(index, 1);
    }
    if (portalEl !== null) {
      removeGlobalNode(portalEl);
      portalEl = null;
    }
  }
  onUnmounted(() => {
    hidePortal(true);
  });
  vm.proxy.__qPortal = true;
  injectProp(vm.proxy, "contentEl", () => innerRef.value);
  return {
    showPortal,
    hidePortal,
    portalIsActive,
    portalIsAccessible,
    renderPortal: () => onGlobalDialog === true ? renderPortalContent() : portalIsActive.value === true ? [h(Teleport, { to: portalEl }, h(QPortal, renderPortalContent))] : void 0
  };
}
const useTransitionProps = {
  transitionShow: {
    type: String,
    default: "fade"
  },
  transitionHide: {
    type: String,
    default: "fade"
  },
  transitionDuration: {
    type: [String, Number],
    default: 300
  }
};
function useTransition(props, defaultShowFn = () => {
}, defaultHideFn = () => {
}) {
  return {
    transitionProps: computed(() => {
      const show = `q-transition--${props.transitionShow || defaultShowFn()}`;
      const hide = `q-transition--${props.transitionHide || defaultHideFn()}`;
      return {
        appear: true,
        enterFromClass: `${show}-enter-from`,
        enterActiveClass: `${show}-enter-active`,
        enterToClass: `${show}-enter-to`,
        leaveFromClass: `${hide}-leave-from`,
        leaveActiveClass: `${hide}-leave-active`,
        leaveToClass: `${hide}-leave-to`
      };
    }),
    transitionStyle: computed(() => `--q-transition-duration: ${props.transitionDuration}ms`)
  };
}
function useTick() {
  let tickFn;
  const vm = getCurrentInstance();
  function removeTick() {
    tickFn = void 0;
  }
  onDeactivated(removeTick);
  onBeforeUnmount(removeTick);
  return {
    removeTick,
    registerTick(fn) {
      tickFn = fn;
      nextTick(() => {
        if (tickFn === fn) {
          vmIsDestroyed(vm) === false && tickFn();
          tickFn = void 0;
        }
      });
    }
  };
}
const handlers$1 = [];
let escDown;
function onKeydown(evt) {
  escDown = evt.keyCode === 27;
}
function onBlur() {
  if (escDown === true) {
    escDown = false;
  }
}
function onKeyup(evt) {
  if (escDown === true) {
    escDown = false;
    if (isKeyCode(evt, 27) === true) {
      handlers$1[handlers$1.length - 1](evt);
    }
  }
}
function update(action) {
  window[action]("keydown", onKeydown);
  window[action]("blur", onBlur);
  window[action]("keyup", onKeyup);
  escDown = false;
}
function addEscapeKey(fn) {
  if (client.is.desktop === true) {
    handlers$1.push(fn);
    if (handlers$1.length === 1) {
      update("addEventListener");
    }
  }
}
function removeEscapeKey(fn) {
  const index = handlers$1.indexOf(fn);
  if (index !== -1) {
    handlers$1.splice(index, 1);
    if (handlers$1.length === 0) {
      update("removeEventListener");
    }
  }
}
const handlers = [];
function trigger(e) {
  handlers[handlers.length - 1](e);
}
function addFocusout(fn) {
  if (client.is.desktop === true) {
    handlers.push(fn);
    if (handlers.length === 1) {
      document.body.addEventListener("focusin", trigger);
    }
  }
}
function removeFocusout(fn) {
  const index = handlers.indexOf(fn);
  if (index !== -1) {
    handlers.splice(index, 1);
    if (handlers.length === 0) {
      document.body.removeEventListener("focusin", trigger);
    }
  }
}
const { notPassiveCapture } = listenOpts, registeredList = [];
function globalHandler(evt) {
  const target2 = evt.target;
  if (target2 === void 0 || target2.nodeType === 8 || target2.classList.contains("no-pointer-events") === true) {
    return;
  }
  let portalIndex2 = portalProxyList.length - 1;
  while (portalIndex2 >= 0) {
    const proxy = portalProxyList[portalIndex2].$;
    if (proxy.type.name === "QTooltip") {
      portalIndex2--;
      continue;
    }
    if (proxy.type.name !== "QDialog") {
      break;
    }
    if (proxy.props.seamless !== true) {
      return;
    }
    portalIndex2--;
  }
  for (let i = registeredList.length - 1; i >= 0; i--) {
    const state = registeredList[i];
    if ((state.anchorEl.value === null || state.anchorEl.value.contains(target2) === false) && (target2 === document.body || state.innerRef.value !== null && state.innerRef.value.contains(target2) === false)) {
      evt.qClickOutside = true;
      state.onClickOutside(evt);
    } else {
      return;
    }
  }
}
function addClickOutside(clickOutsideProps) {
  registeredList.push(clickOutsideProps);
  if (registeredList.length === 1) {
    document.addEventListener("mousedown", globalHandler, notPassiveCapture);
    document.addEventListener("touchstart", globalHandler, notPassiveCapture);
  }
}
function removeClickOutside(clickOutsideProps) {
  const index = registeredList.findIndex((h2) => h2 === clickOutsideProps);
  if (index !== -1) {
    registeredList.splice(index, 1);
    if (registeredList.length === 0) {
      document.removeEventListener("mousedown", globalHandler, notPassiveCapture);
      document.removeEventListener("touchstart", globalHandler, notPassiveCapture);
    }
  }
}
let vpLeft, vpTop;
function validatePosition(pos) {
  const parts = pos.split(" ");
  if (parts.length !== 2) {
    return false;
  }
  if (["top", "center", "bottom"].includes(parts[0]) !== true) {
    console.error("Anchor/Self position must start with one of top/center/bottom");
    return false;
  }
  if (["left", "middle", "right", "start", "end"].includes(parts[1]) !== true) {
    console.error("Anchor/Self position must end with one of left/middle/right/start/end");
    return false;
  }
  return true;
}
function validateOffset(val) {
  if (!val) {
    return true;
  }
  if (val.length !== 2) {
    return false;
  }
  if (typeof val[0] !== "number" || typeof val[1] !== "number") {
    return false;
  }
  return true;
}
const horizontalPos = {
  "start#ltr": "left",
  "start#rtl": "right",
  "end#ltr": "right",
  "end#rtl": "left"
};
["left", "middle", "right"].forEach((pos) => {
  horizontalPos[`${pos}#ltr`] = pos;
  horizontalPos[`${pos}#rtl`] = pos;
});
function parsePosition(pos, rtl) {
  const parts = pos.split(" ");
  return {
    vertical: parts[0],
    horizontal: horizontalPos[`${parts[1]}#${rtl === true ? "rtl" : "ltr"}`]
  };
}
function getAnchorProps(el, offset) {
  let { top, left, right, bottom, width: width2, height } = el.getBoundingClientRect();
  if (offset !== void 0) {
    top -= offset[1];
    left -= offset[0];
    bottom += offset[1];
    right += offset[0];
    width2 += offset[0];
    height += offset[1];
  }
  return {
    top,
    bottom,
    height,
    left,
    right,
    width: width2,
    middle: left + (right - left) / 2,
    center: top + (bottom - top) / 2
  };
}
function getAbsoluteAnchorProps(el, absoluteOffset, offset) {
  let { top, left } = el.getBoundingClientRect();
  top += absoluteOffset.top;
  left += absoluteOffset.left;
  if (offset !== void 0) {
    top += offset[1];
    left += offset[0];
  }
  return {
    top,
    bottom: top + 1,
    height: 1,
    left,
    right: left + 1,
    width: 1,
    middle: left,
    center: top
  };
}
function getTargetProps(width2, height) {
  return {
    top: 0,
    center: height / 2,
    bottom: height,
    left: 0,
    middle: width2 / 2,
    right: width2
  };
}
function getTopLeftProps(anchorProps, targetProps, anchorOrigin, selfOrigin) {
  return {
    top: anchorProps[anchorOrigin.vertical] - targetProps[selfOrigin.vertical],
    left: anchorProps[anchorOrigin.horizontal] - targetProps[selfOrigin.horizontal]
  };
}
function setPosition(cfg, retryNumber = 0) {
  if (cfg.targetEl === null || cfg.anchorEl === null || retryNumber > 5) {
    return;
  }
  if (cfg.targetEl.offsetHeight === 0 || cfg.targetEl.offsetWidth === 0) {
    setTimeout(() => {
      setPosition(cfg, retryNumber + 1);
    }, 10);
    return;
  }
  const {
    targetEl,
    offset,
    anchorEl,
    anchorOrigin,
    selfOrigin,
    absoluteOffset,
    fit,
    cover,
    maxHeight,
    maxWidth
  } = cfg;
  if (client.is.ios === true && window.visualViewport !== void 0) {
    const el = document.body.style;
    const { offsetLeft: left, offsetTop: top } = window.visualViewport;
    if (left !== vpLeft) {
      el.setProperty("--q-pe-left", left + "px");
      vpLeft = left;
    }
    if (top !== vpTop) {
      el.setProperty("--q-pe-top", top + "px");
      vpTop = top;
    }
  }
  const { scrollLeft, scrollTop } = targetEl;
  const anchorProps = absoluteOffset === void 0 ? getAnchorProps(anchorEl, cover === true ? [0, 0] : offset) : getAbsoluteAnchorProps(anchorEl, absoluteOffset, offset);
  Object.assign(targetEl.style, {
    top: 0,
    left: 0,
    minWidth: null,
    minHeight: null,
    maxWidth,
    maxHeight,
    visibility: "visible"
  });
  const { offsetWidth: origElWidth, offsetHeight: origElHeight } = targetEl;
  const { elWidth, elHeight } = fit === true || cover === true ? { elWidth: Math.max(anchorProps.width, origElWidth), elHeight: cover === true ? Math.max(anchorProps.height, origElHeight) : origElHeight } : { elWidth: origElWidth, elHeight: origElHeight };
  let elStyle = { maxWidth, maxHeight };
  if (fit === true || cover === true) {
    elStyle.minWidth = anchorProps.width + "px";
    if (cover === true) {
      elStyle.minHeight = anchorProps.height + "px";
    }
  }
  Object.assign(targetEl.style, elStyle);
  const targetProps = getTargetProps(elWidth, elHeight);
  let props = getTopLeftProps(anchorProps, targetProps, anchorOrigin, selfOrigin);
  if (absoluteOffset === void 0 || offset === void 0) {
    applyBoundaries(props, anchorProps, targetProps, anchorOrigin, selfOrigin);
  } else {
    const { top, left } = props;
    applyBoundaries(props, anchorProps, targetProps, anchorOrigin, selfOrigin);
    let hasChanged = false;
    if (props.top !== top) {
      hasChanged = true;
      const offsetY = 2 * offset[1];
      anchorProps.center = anchorProps.top -= offsetY;
      anchorProps.bottom -= offsetY + 2;
    }
    if (props.left !== left) {
      hasChanged = true;
      const offsetX = 2 * offset[0];
      anchorProps.middle = anchorProps.left -= offsetX;
      anchorProps.right -= offsetX + 2;
    }
    if (hasChanged === true) {
      props = getTopLeftProps(anchorProps, targetProps, anchorOrigin, selfOrigin);
      applyBoundaries(props, anchorProps, targetProps, anchorOrigin, selfOrigin);
    }
  }
  elStyle = {
    top: props.top + "px",
    left: props.left + "px"
  };
  if (props.maxHeight !== void 0) {
    elStyle.maxHeight = props.maxHeight + "px";
    if (anchorProps.height > props.maxHeight) {
      elStyle.minHeight = elStyle.maxHeight;
    }
  }
  if (props.maxWidth !== void 0) {
    elStyle.maxWidth = props.maxWidth + "px";
    if (anchorProps.width > props.maxWidth) {
      elStyle.minWidth = elStyle.maxWidth;
    }
  }
  Object.assign(targetEl.style, elStyle);
  if (targetEl.scrollTop !== scrollTop) {
    targetEl.scrollTop = scrollTop;
  }
  if (targetEl.scrollLeft !== scrollLeft) {
    targetEl.scrollLeft = scrollLeft;
  }
}
function applyBoundaries(props, anchorProps, targetProps, anchorOrigin, selfOrigin) {
  const currentHeight = targetProps.bottom, currentWidth = targetProps.right, margin = getScrollbarWidth(), innerHeight = window.innerHeight - margin, innerWidth = document.body.clientWidth;
  if (props.top < 0 || props.top + currentHeight > innerHeight) {
    if (selfOrigin.vertical === "center") {
      props.top = anchorProps[anchorOrigin.vertical] > innerHeight / 2 ? Math.max(0, innerHeight - currentHeight) : 0;
      props.maxHeight = Math.min(currentHeight, innerHeight);
    } else if (anchorProps[anchorOrigin.vertical] > innerHeight / 2) {
      const anchorY = Math.min(
        innerHeight,
        anchorOrigin.vertical === "center" ? anchorProps.center : anchorOrigin.vertical === selfOrigin.vertical ? anchorProps.bottom : anchorProps.top
      );
      props.maxHeight = Math.min(currentHeight, anchorY);
      props.top = Math.max(0, anchorY - currentHeight);
    } else {
      props.top = Math.max(
        0,
        anchorOrigin.vertical === "center" ? anchorProps.center : anchorOrigin.vertical === selfOrigin.vertical ? anchorProps.top : anchorProps.bottom
      );
      props.maxHeight = Math.min(currentHeight, innerHeight - props.top);
    }
  }
  if (props.left < 0 || props.left + currentWidth > innerWidth) {
    props.maxWidth = Math.min(currentWidth, innerWidth);
    if (selfOrigin.horizontal === "middle") {
      props.left = anchorProps[anchorOrigin.horizontal] > innerWidth / 2 ? Math.max(0, innerWidth - currentWidth) : 0;
    } else if (anchorProps[anchorOrigin.horizontal] > innerWidth / 2) {
      const anchorX = Math.min(
        innerWidth,
        anchorOrigin.horizontal === "middle" ? anchorProps.middle : anchorOrigin.horizontal === selfOrigin.horizontal ? anchorProps.right : anchorProps.left
      );
      props.maxWidth = Math.min(currentWidth, anchorX);
      props.left = Math.max(0, anchorX - props.maxWidth);
    } else {
      props.left = Math.max(
        0,
        anchorOrigin.horizontal === "middle" ? anchorProps.middle : anchorOrigin.horizontal === selfOrigin.horizontal ? anchorProps.left : anchorProps.right
      );
      props.maxWidth = Math.min(currentWidth, innerWidth - props.left);
    }
  }
}
var QMenu = createComponent({
  name: "QMenu",
  inheritAttrs: false,
  props: {
    ...useAnchorProps,
    ...useModelToggleProps,
    ...useDarkProps,
    ...useTransitionProps,
    persistent: Boolean,
    autoClose: Boolean,
    separateClosePopup: Boolean,
    noRouteDismiss: Boolean,
    noRefocus: Boolean,
    noFocus: Boolean,
    fit: Boolean,
    cover: Boolean,
    square: Boolean,
    anchor: {
      type: String,
      validator: validatePosition
    },
    self: {
      type: String,
      validator: validatePosition
    },
    offset: {
      type: Array,
      validator: validateOffset
    },
    scrollTarget: scrollTargetProp,
    touchPosition: Boolean,
    maxHeight: {
      type: String,
      default: null
    },
    maxWidth: {
      type: String,
      default: null
    }
  },
  emits: [
    ...useModelToggleEmits,
    "click",
    "escapeKey"
  ],
  setup(props, { slots, emit, attrs }) {
    let refocusTarget = null, absoluteOffset, unwatchPosition, avoidAutoClose;
    const vm = getCurrentInstance();
    const { proxy } = vm;
    const { $q } = proxy;
    const innerRef = ref(null);
    const showing = ref(false);
    const hideOnRouteChange = computed(
      () => props.persistent !== true && props.noRouteDismiss !== true
    );
    const isDark = useDark(props, $q);
    const { registerTick, removeTick } = useTick();
    const { registerTimeout } = useTimeout();
    const { transitionProps, transitionStyle } = useTransition(props);
    const { localScrollTarget, changeScrollEvent, unconfigureScrollTarget } = useScrollTarget(props, configureScrollTarget);
    const { anchorEl, canShow } = useAnchor({ showing });
    const { hide } = useModelToggle({
      showing,
      canShow,
      handleShow,
      handleHide,
      hideOnRouteChange,
      processOnMount: true
    });
    const { showPortal, hidePortal, renderPortal } = usePortal(vm, innerRef, renderPortalContent, "menu");
    const clickOutsideProps = {
      anchorEl,
      innerRef,
      onClickOutside(e) {
        if (props.persistent !== true && showing.value === true) {
          hide(e);
          if (e.type === "touchstart" || e.target.classList.contains("q-dialog__backdrop")) {
            stopAndPrevent(e);
          }
          return true;
        }
      }
    };
    const anchorOrigin = computed(
      () => parsePosition(
        props.anchor || (props.cover === true ? "center middle" : "bottom start"),
        $q.lang.rtl
      )
    );
    const selfOrigin = computed(() => props.cover === true ? anchorOrigin.value : parsePosition(props.self || "top start", $q.lang.rtl));
    const menuClass = computed(
      () => (props.square === true ? " q-menu--square" : "") + (isDark.value === true ? " q-menu--dark q-dark" : "")
    );
    const onEvents = computed(() => props.autoClose === true ? { onClick: onAutoClose } : {});
    const handlesFocus = computed(
      () => showing.value === true && props.persistent !== true
    );
    watch(handlesFocus, (val) => {
      if (val === true) {
        addEscapeKey(onEscapeKey);
        addClickOutside(clickOutsideProps);
      } else {
        removeEscapeKey(onEscapeKey);
        removeClickOutside(clickOutsideProps);
      }
    });
    function focus() {
      addFocusFn(() => {
        let node = innerRef.value;
        if (node && node.contains(document.activeElement) !== true) {
          node = node.querySelector("[autofocus][tabindex], [data-autofocus][tabindex]") || node.querySelector("[autofocus] [tabindex], [data-autofocus] [tabindex]") || node.querySelector("[autofocus], [data-autofocus]") || node;
          node.focus({ preventScroll: true });
        }
      });
    }
    function handleShow(evt) {
      refocusTarget = props.noRefocus === false ? document.activeElement : null;
      addFocusout(onFocusout);
      showPortal();
      configureScrollTarget();
      absoluteOffset = void 0;
      if (evt !== void 0 && (props.touchPosition || props.contextMenu)) {
        const pos = position(evt);
        if (pos.left !== void 0) {
          const { top, left } = anchorEl.value.getBoundingClientRect();
          absoluteOffset = { left: pos.left - left, top: pos.top - top };
        }
      }
      if (unwatchPosition === void 0) {
        unwatchPosition = watch(
          () => $q.screen.width + "|" + $q.screen.height + "|" + props.self + "|" + props.anchor + "|" + $q.lang.rtl,
          updatePosition
        );
      }
      if (props.noFocus !== true) {
        document.activeElement.blur();
      }
      registerTick(() => {
        updatePosition();
        props.noFocus !== true && focus();
      });
      registerTimeout(() => {
        if ($q.platform.is.ios === true) {
          avoidAutoClose = props.autoClose;
          innerRef.value.click();
        }
        updatePosition();
        showPortal(true);
        emit("show", evt);
      }, props.transitionDuration);
    }
    function handleHide(evt) {
      removeTick();
      hidePortal();
      anchorCleanup(true);
      if (refocusTarget !== null && (evt === void 0 || evt.qClickOutside !== true)) {
        ((evt && evt.type.indexOf("key") === 0 ? refocusTarget.closest('[tabindex]:not([tabindex^="-"])') : void 0) || refocusTarget).focus();
        refocusTarget = null;
      }
      registerTimeout(() => {
        hidePortal(true);
        emit("hide", evt);
      }, props.transitionDuration);
    }
    function anchorCleanup(hiding) {
      absoluteOffset = void 0;
      if (unwatchPosition !== void 0) {
        unwatchPosition();
        unwatchPosition = void 0;
      }
      if (hiding === true || showing.value === true) {
        removeFocusout(onFocusout);
        unconfigureScrollTarget();
        removeClickOutside(clickOutsideProps);
        removeEscapeKey(onEscapeKey);
      }
      if (hiding !== true) {
        refocusTarget = null;
      }
    }
    function configureScrollTarget() {
      if (anchorEl.value !== null || props.scrollTarget !== void 0) {
        localScrollTarget.value = getScrollTarget(anchorEl.value, props.scrollTarget);
        changeScrollEvent(localScrollTarget.value, updatePosition);
      }
    }
    function onAutoClose(e) {
      if (avoidAutoClose !== true) {
        closePortalMenus(proxy, e);
        emit("click", e);
      } else {
        avoidAutoClose = false;
      }
    }
    function onFocusout(evt) {
      if (handlesFocus.value === true && props.noFocus !== true && childHasFocus(innerRef.value, evt.target) !== true) {
        focus();
      }
    }
    function onEscapeKey(evt) {
      emit("escapeKey");
      hide(evt);
    }
    function updatePosition() {
      setPosition({
        targetEl: innerRef.value,
        offset: props.offset,
        anchorEl: anchorEl.value,
        anchorOrigin: anchorOrigin.value,
        selfOrigin: selfOrigin.value,
        absoluteOffset,
        fit: props.fit,
        cover: props.cover,
        maxHeight: props.maxHeight,
        maxWidth: props.maxWidth
      });
    }
    function renderPortalContent() {
      return h(
        Transition,
        transitionProps.value,
        () => showing.value === true ? h("div", {
          role: "menu",
          ...attrs,
          ref: innerRef,
          tabindex: -1,
          class: [
            "q-menu q-position-engine scroll" + menuClass.value,
            attrs.class
          ],
          style: [
            attrs.style,
            transitionStyle.value
          ],
          ...onEvents.value
        }, hSlot(slots.default)) : null
      );
    }
    onBeforeUnmount(anchorCleanup);
    Object.assign(proxy, { focus, updatePosition });
    return renderPortal;
  }
});
let maximizedModals = 0;
const positionClass = {
  standard: "fixed-full flex-center",
  top: "fixed-top justify-center",
  bottom: "fixed-bottom justify-center",
  right: "fixed-right items-center",
  left: "fixed-left items-center"
};
const defaultTransitions = {
  standard: ["scale", "scale"],
  top: ["slide-down", "slide-up"],
  bottom: ["slide-up", "slide-down"],
  right: ["slide-left", "slide-right"],
  left: ["slide-right", "slide-left"]
};
var QDialog = createComponent({
  name: "QDialog",
  inheritAttrs: false,
  props: {
    ...useModelToggleProps,
    ...useTransitionProps,
    transitionShow: String,
    transitionHide: String,
    persistent: Boolean,
    autoClose: Boolean,
    allowFocusOutside: Boolean,
    noEscDismiss: Boolean,
    noBackdropDismiss: Boolean,
    noRouteDismiss: Boolean,
    noRefocus: Boolean,
    noFocus: Boolean,
    noShake: Boolean,
    seamless: Boolean,
    maximized: Boolean,
    fullWidth: Boolean,
    fullHeight: Boolean,
    square: Boolean,
    backdropFilter: String,
    position: {
      type: String,
      default: "standard",
      validator: (val) => ["standard", "top", "bottom", "left", "right"].includes(val)
    }
  },
  emits: [
    ...useModelToggleEmits,
    "shake",
    "click",
    "escapeKey"
  ],
  setup(props, { slots, emit, attrs }) {
    const vm = getCurrentInstance();
    const innerRef = ref(null);
    const showing = ref(false);
    const animating = ref(false);
    let shakeTimeout = null, refocusTarget = null, isMaximized, avoidAutoClose;
    const hideOnRouteChange = computed(
      () => props.persistent !== true && props.noRouteDismiss !== true && props.seamless !== true
    );
    const { preventBodyScroll } = usePreventScroll();
    const { registerTimeout } = useTimeout();
    const { registerTick, removeTick } = useTick();
    const { transitionProps, transitionStyle } = useTransition(
      props,
      () => defaultTransitions[props.position][0],
      () => defaultTransitions[props.position][1]
    );
    const backdropStyle = computed(() => transitionStyle.value + (props.backdropFilter !== void 0 ? `;backdrop-filter:${props.backdropFilter};-webkit-backdrop-filter:${props.backdropFilter}` : ""));
    const { showPortal, hidePortal, portalIsAccessible, renderPortal } = usePortal(
      vm,
      innerRef,
      renderPortalContent,
      "dialog"
    );
    const { hide } = useModelToggle({
      showing,
      hideOnRouteChange,
      handleShow,
      handleHide,
      processOnMount: true
    });
    const { addToHistory, removeFromHistory } = useHistory(showing, hide, hideOnRouteChange);
    const classes = computed(
      () => `q-dialog__inner flex no-pointer-events q-dialog__inner--${props.maximized === true ? "maximized" : "minimized"} q-dialog__inner--${props.position} ${positionClass[props.position]}` + (animating.value === true ? " q-dialog__inner--animating" : "") + (props.fullWidth === true ? " q-dialog__inner--fullwidth" : "") + (props.fullHeight === true ? " q-dialog__inner--fullheight" : "") + (props.square === true ? " q-dialog__inner--square" : "")
    );
    const useBackdrop = computed(() => showing.value === true && props.seamless !== true);
    const onEvents = computed(() => props.autoClose === true ? { onClick: onAutoClose } : {});
    const rootClasses = computed(() => [
      `q-dialog fullscreen no-pointer-events q-dialog--${useBackdrop.value === true ? "modal" : "seamless"}`,
      attrs.class
    ]);
    watch(() => props.maximized, (state) => {
      showing.value === true && updateMaximized(state);
    });
    watch(useBackdrop, (val) => {
      preventBodyScroll(val);
      if (val === true) {
        addFocusout(onFocusChange);
        addEscapeKey(onEscapeKey);
      } else {
        removeFocusout(onFocusChange);
        removeEscapeKey(onEscapeKey);
      }
    });
    function handleShow(evt) {
      addToHistory();
      refocusTarget = props.noRefocus === false && document.activeElement !== null ? document.activeElement : null;
      updateMaximized(props.maximized);
      showPortal();
      animating.value = true;
      if (props.noFocus !== true) {
        document.activeElement !== null && document.activeElement.blur();
        registerTick(focus);
      } else {
        removeTick();
      }
      registerTimeout(() => {
        if (vm.proxy.$q.platform.is.ios === true) {
          if (props.seamless !== true && document.activeElement) {
            const { top, bottom } = document.activeElement.getBoundingClientRect(), { innerHeight } = window, height = window.visualViewport !== void 0 ? window.visualViewport.height : innerHeight;
            if (top > 0 && bottom > height / 2) {
              document.scrollingElement.scrollTop = Math.min(
                document.scrollingElement.scrollHeight - height,
                bottom >= innerHeight ? Infinity : Math.ceil(document.scrollingElement.scrollTop + bottom - height / 2)
              );
            }
            document.activeElement.scrollIntoView();
          }
          avoidAutoClose = true;
          innerRef.value.click();
          avoidAutoClose = false;
        }
        showPortal(true);
        animating.value = false;
        emit("show", evt);
      }, props.transitionDuration);
    }
    function handleHide(evt) {
      removeTick();
      removeFromHistory();
      cleanup(true);
      animating.value = true;
      hidePortal();
      if (refocusTarget !== null) {
        ((evt && evt.type.indexOf("key") === 0 ? refocusTarget.closest('[tabindex]:not([tabindex^="-"])') : void 0) || refocusTarget).focus();
        refocusTarget = null;
      }
      registerTimeout(() => {
        hidePortal(true);
        animating.value = false;
        emit("hide", evt);
      }, props.transitionDuration);
    }
    function focus(selector) {
      addFocusFn(() => {
        let node = innerRef.value;
        if (node === null)
          return;
        if (selector !== void 0) {
          const target2 = node.querySelector(selector);
          if (target2 !== null) {
            target2.focus({ preventScroll: true });
            return;
          }
        }
        if (node.contains(document.activeElement) !== true) {
          node = node.querySelector("[autofocus][tabindex], [data-autofocus][tabindex]") || node.querySelector("[autofocus] [tabindex], [data-autofocus] [tabindex]") || node.querySelector("[autofocus], [data-autofocus]") || node;
          node.focus({ preventScroll: true });
        }
      });
    }
    function shake(focusTarget) {
      if (focusTarget && typeof focusTarget.focus === "function") {
        focusTarget.focus({ preventScroll: true });
      } else {
        focus();
      }
      emit("shake");
      const node = innerRef.value;
      if (node !== null) {
        node.classList.remove("q-animate--scale");
        node.classList.add("q-animate--scale");
        shakeTimeout !== null && clearTimeout(shakeTimeout);
        shakeTimeout = setTimeout(() => {
          shakeTimeout = null;
          if (innerRef.value !== null) {
            node.classList.remove("q-animate--scale");
            focus();
          }
        }, 170);
      }
    }
    function onEscapeKey() {
      if (props.seamless !== true) {
        if (props.persistent === true || props.noEscDismiss === true) {
          props.maximized !== true && props.noShake !== true && shake();
        } else {
          emit("escapeKey");
          hide();
        }
      }
    }
    function cleanup(hiding) {
      if (shakeTimeout !== null) {
        clearTimeout(shakeTimeout);
        shakeTimeout = null;
      }
      if (hiding === true || showing.value === true) {
        updateMaximized(false);
        if (props.seamless !== true) {
          preventBodyScroll(false);
          removeFocusout(onFocusChange);
          removeEscapeKey(onEscapeKey);
        }
      }
      if (hiding !== true) {
        refocusTarget = null;
      }
    }
    function updateMaximized(active) {
      if (active === true) {
        if (isMaximized !== true) {
          maximizedModals < 1 && document.body.classList.add("q-body--dialog");
          maximizedModals++;
          isMaximized = true;
        }
      } else if (isMaximized === true) {
        if (maximizedModals < 2) {
          document.body.classList.remove("q-body--dialog");
        }
        maximizedModals--;
        isMaximized = false;
      }
    }
    function onAutoClose(e) {
      if (avoidAutoClose !== true) {
        hide(e);
        emit("click", e);
      }
    }
    function onBackdropClick(e) {
      if (props.persistent !== true && props.noBackdropDismiss !== true) {
        hide(e);
      } else if (props.noShake !== true) {
        shake();
      }
    }
    function onFocusChange(evt) {
      if (props.allowFocusOutside !== true && portalIsAccessible.value === true && childHasFocus(innerRef.value, evt.target) !== true) {
        focus('[tabindex]:not([tabindex="-1"])');
      }
    }
    Object.assign(vm.proxy, {
      focus,
      shake,
      __updateRefocusTarget(target2) {
        refocusTarget = target2 || null;
      }
    });
    onBeforeUnmount(cleanup);
    function renderPortalContent() {
      return h("div", {
        role: "dialog",
        "aria-modal": useBackdrop.value === true ? "true" : "false",
        ...attrs,
        class: rootClasses.value
      }, [
        h(Transition, {
          name: "q-transition--fade",
          appear: true
        }, () => useBackdrop.value === true ? h("div", {
          class: "q-dialog__backdrop fixed-full",
          style: backdropStyle.value,
          "aria-hidden": "true",
          tabindex: -1,
          onClick: onBackdropClick
        }) : null),
        h(
          Transition,
          transitionProps.value,
          () => showing.value === true ? h("div", {
            ref: innerRef,
            class: classes.value,
            style: transitionStyle.value,
            tabindex: -1,
            ...onEvents.value
          }, hSlot(slots.default)) : null
        )
      ]);
    }
    return renderPortal;
  }
});
const validateNewValueMode = (v) => ["add", "add-unique", "toggle"].includes(v);
const reEscapeList = ".*+?^${}()|[]\\";
const fieldPropsList = Object.keys(useFieldProps);
function getPropValueFn(userPropName, defaultPropName) {
  if (typeof userPropName === "function")
    return userPropName;
  const propName = userPropName !== void 0 ? userPropName : defaultPropName;
  return (opt) => opt !== null && typeof opt === "object" && propName in opt ? opt[propName] : opt;
}
var QSelect = createComponent({
  name: "QSelect",
  inheritAttrs: false,
  props: {
    ...useVirtualScrollProps,
    ...useFormProps,
    ...useFieldProps,
    modelValue: {
      required: true
    },
    multiple: Boolean,
    displayValue: [String, Number],
    displayValueHtml: Boolean,
    dropdownIcon: String,
    options: {
      type: Array,
      default: () => []
    },
    optionValue: [Function, String],
    optionLabel: [Function, String],
    optionDisable: [Function, String],
    hideSelected: Boolean,
    hideDropdownIcon: Boolean,
    fillInput: Boolean,
    maxValues: [Number, String],
    optionsDense: Boolean,
    optionsDark: {
      type: Boolean,
      default: null
    },
    optionsSelectedClass: String,
    optionsHtml: Boolean,
    optionsCover: Boolean,
    menuShrink: Boolean,
    menuAnchor: String,
    menuSelf: String,
    menuOffset: Array,
    popupContentClass: String,
    popupContentStyle: [String, Array, Object],
    popupNoRouteDismiss: Boolean,
    useInput: Boolean,
    useChips: Boolean,
    newValueMode: {
      type: String,
      validator: validateNewValueMode
    },
    mapOptions: Boolean,
    emitValue: Boolean,
    disableTabSelection: Boolean,
    inputDebounce: {
      type: [Number, String],
      default: 500
    },
    inputClass: [Array, String, Object],
    inputStyle: [Array, String, Object],
    tabindex: {
      type: [String, Number],
      default: 0
    },
    autocomplete: String,
    transitionShow: {},
    transitionHide: {},
    transitionDuration: {},
    behavior: {
      type: String,
      validator: (v) => ["default", "menu", "dialog"].includes(v),
      default: "default"
    },
    virtualScrollItemSize: useVirtualScrollProps.virtualScrollItemSize.type,
    onNewValue: Function,
    onFilter: Function
  },
  emits: [
    ...useFieldEmits,
    "add",
    "remove",
    "inputValue",
    "keyup",
    "keypress",
    "keydown",
    "popupShow",
    "popupHide",
    "filterAbort"
  ],
  setup(props, { slots, emit }) {
    const { proxy } = getCurrentInstance();
    const { $q } = proxy;
    const menu = ref(false);
    const dialog = ref(false);
    const optionIndex = ref(-1);
    const inputValue = ref("");
    const dialogFieldFocused = ref(false);
    const innerLoadingIndicator = ref(false);
    let filterTimer = null, inputValueTimer = null, innerValueCache, hasDialog, userInputValue, filterId = null, defaultInputValue, transitionShowComputed, searchBuffer, searchBufferExp;
    const inputRef = ref(null);
    const targetRef = ref(null);
    const menuRef = ref(null);
    const dialogRef = ref(null);
    const menuContentRef = ref(null);
    const nameProp = useFormInputNameAttr(props);
    const onComposition = useKeyComposition(onInput);
    const virtualScrollLength = computed(() => Array.isArray(props.options) ? props.options.length : 0);
    const virtualScrollItemSizeComputed = computed(() => props.virtualScrollItemSize === void 0 ? props.optionsDense === true ? 24 : 48 : props.virtualScrollItemSize);
    const {
      virtualScrollSliceRange,
      virtualScrollSliceSizeComputed,
      localResetVirtualScroll,
      padVirtualScroll,
      onVirtualScrollEvt,
      scrollTo,
      setVirtualScrollSize
    } = useVirtualScroll({
      virtualScrollLength,
      getVirtualScrollTarget,
      getVirtualScrollEl,
      virtualScrollItemSizeComputed
    });
    const state = useFieldState();
    const innerValue = computed(() => {
      const mapNull = props.mapOptions === true && props.multiple !== true, val = props.modelValue !== void 0 && (props.modelValue !== null || mapNull === true) ? props.multiple === true && Array.isArray(props.modelValue) ? props.modelValue : [props.modelValue] : [];
      if (props.mapOptions === true && Array.isArray(props.options) === true) {
        const cache = props.mapOptions === true && innerValueCache !== void 0 ? innerValueCache : [];
        const values = val.map((v) => getOption(v, cache));
        return props.modelValue === null && mapNull === true ? values.filter((v) => v !== null) : values;
      }
      return val;
    });
    const innerFieldProps = computed(() => {
      const acc = {};
      fieldPropsList.forEach((key) => {
        const val = props[key];
        if (val !== void 0) {
          acc[key] = val;
        }
      });
      return acc;
    });
    const isOptionsDark = computed(() => props.optionsDark === null ? state.isDark.value : props.optionsDark);
    const hasValue = computed(() => fieldValueIsFilled(innerValue.value));
    const computedInputClass = computed(() => {
      let cls = "q-field__input q-placeholder col";
      if (props.hideSelected === true || innerValue.value.length === 0) {
        return [cls, props.inputClass];
      }
      cls += " q-field__input--padding";
      return props.inputClass === void 0 ? cls : [cls, props.inputClass];
    });
    const menuContentClass = computed(
      () => (props.virtualScrollHorizontal === true ? "q-virtual-scroll--horizontal" : "") + (props.popupContentClass ? " " + props.popupContentClass : "")
    );
    const noOptions = computed(() => virtualScrollLength.value === 0);
    const selectedString = computed(
      () => innerValue.value.map((opt) => getOptionLabel.value(opt)).join(", ")
    );
    const ariaCurrentValue = computed(() => props.displayValue !== void 0 ? props.displayValue : selectedString.value);
    const needsHtmlFn = computed(() => props.optionsHtml === true ? () => true : (opt) => opt !== void 0 && opt !== null && opt.html === true);
    const valueAsHtml = computed(() => props.displayValueHtml === true || props.displayValue === void 0 && (props.optionsHtml === true || innerValue.value.some(needsHtmlFn.value)));
    const tabindex = computed(() => state.focused.value === true ? props.tabindex : -1);
    const comboboxAttrs = computed(() => {
      const attrs = {
        tabindex: props.tabindex,
        role: "combobox",
        "aria-label": props.label,
        "aria-readonly": props.readonly === true ? "true" : "false",
        "aria-autocomplete": props.useInput === true ? "list" : "none",
        "aria-expanded": menu.value === true ? "true" : "false",
        "aria-controls": `${state.targetUid.value}_lb`
      };
      if (optionIndex.value >= 0) {
        attrs["aria-activedescendant"] = `${state.targetUid.value}_${optionIndex.value}`;
      }
      return attrs;
    });
    const listboxAttrs = computed(() => ({
      id: `${state.targetUid.value}_lb`,
      role: "listbox",
      "aria-multiselectable": props.multiple === true ? "true" : "false"
    }));
    const selectedScope = computed(() => {
      return innerValue.value.map((opt, i) => ({
        index: i,
        opt,
        html: needsHtmlFn.value(opt),
        selected: true,
        removeAtIndex: removeAtIndexAndFocus,
        toggleOption,
        tabindex: tabindex.value
      }));
    });
    const optionScope = computed(() => {
      if (virtualScrollLength.value === 0) {
        return [];
      }
      const { from, to } = virtualScrollSliceRange.value;
      return props.options.slice(from, to).map((opt, i) => {
        const disable = isOptionDisabled.value(opt) === true;
        const active = isOptionSelected(opt) === true;
        const index = from + i;
        const itemProps = {
          clickable: true,
          active,
          activeClass: computedOptionsSelectedClass.value,
          manualFocus: true,
          focused: false,
          disable,
          tabindex: -1,
          dense: props.optionsDense,
          dark: isOptionsDark.value,
          role: "option",
          "aria-selected": active === true ? "true" : "false",
          id: `${state.targetUid.value}_${index}`,
          onClick: () => {
            toggleOption(opt);
          }
        };
        if (disable !== true) {
          optionIndex.value === index && (itemProps.focused = true);
          if ($q.platform.is.desktop === true) {
            itemProps.onMousemove = () => {
              menu.value === true && setOptionIndex(index);
            };
          }
        }
        return {
          index,
          opt,
          html: needsHtmlFn.value(opt),
          label: getOptionLabel.value(opt),
          selected: itemProps.active,
          focused: itemProps.focused,
          toggleOption,
          setOptionIndex,
          itemProps
        };
      });
    });
    const dropdownArrowIcon = computed(() => props.dropdownIcon !== void 0 ? props.dropdownIcon : $q.iconSet.arrow.dropdown);
    const squaredMenu = computed(
      () => props.optionsCover === false && props.outlined !== true && props.standout !== true && props.borderless !== true && props.rounded !== true
    );
    const computedOptionsSelectedClass = computed(() => props.optionsSelectedClass !== void 0 ? props.optionsSelectedClass : props.color !== void 0 ? `text-${props.color}` : "");
    const getOptionValue = computed(() => getPropValueFn(props.optionValue, "value"));
    const getOptionLabel = computed(() => getPropValueFn(props.optionLabel, "label"));
    const isOptionDisabled = computed(() => getPropValueFn(props.optionDisable, "disable"));
    const innerOptionsValue = computed(() => innerValue.value.map(getOptionValue.value));
    const inputControlEvents = computed(() => {
      const evt = {
        onInput,
        onChange: onComposition,
        onKeydown: onTargetKeydown,
        onKeyup: onTargetAutocomplete,
        onKeypress: onTargetKeypress,
        onFocus: selectInputText,
        onClick(e) {
          hasDialog === true && stop(e);
        }
      };
      evt.onCompositionstart = evt.onCompositionupdate = evt.onCompositionend = onComposition;
      return evt;
    });
    watch(innerValue, (val) => {
      innerValueCache = val;
      if (props.useInput === true && props.fillInput === true && props.multiple !== true && state.innerLoading.value !== true && (dialog.value !== true && menu.value !== true || hasValue.value !== true)) {
        userInputValue !== true && resetInputValue();
        if (dialog.value === true || menu.value === true) {
          filter("");
        }
      }
    }, { immediate: true });
    watch(() => props.fillInput, resetInputValue);
    watch(menu, updateMenu);
    watch(virtualScrollLength, rerenderMenu);
    function getEmittingOptionValue(opt) {
      return props.emitValue === true ? getOptionValue.value(opt) : opt;
    }
    function removeAtIndex(index) {
      if (index !== -1 && index < innerValue.value.length) {
        if (props.multiple === true) {
          const model = props.modelValue.slice();
          emit("remove", { index, value: model.splice(index, 1)[0] });
          emit("update:modelValue", model);
        } else {
          emit("update:modelValue", null);
        }
      }
    }
    function removeAtIndexAndFocus(index) {
      removeAtIndex(index);
      state.focus();
    }
    function add(opt, unique) {
      const val = getEmittingOptionValue(opt);
      if (props.multiple !== true) {
        props.fillInput === true && updateInputValue(
          getOptionLabel.value(opt),
          true,
          true
        );
        emit("update:modelValue", val);
        return;
      }
      if (innerValue.value.length === 0) {
        emit("add", { index: 0, value: val });
        emit("update:modelValue", props.multiple === true ? [val] : val);
        return;
      }
      if (unique === true && isOptionSelected(opt) === true) {
        return;
      }
      if (props.maxValues !== void 0 && props.modelValue.length >= props.maxValues) {
        return;
      }
      const model = props.modelValue.slice();
      emit("add", { index: model.length, value: val });
      model.push(val);
      emit("update:modelValue", model);
    }
    function toggleOption(opt, keepOpen) {
      if (state.editable.value !== true || opt === void 0 || isOptionDisabled.value(opt) === true) {
        return;
      }
      const optValue = getOptionValue.value(opt);
      if (props.multiple !== true) {
        if (keepOpen !== true) {
          updateInputValue(
            props.fillInput === true ? getOptionLabel.value(opt) : "",
            true,
            true
          );
          hidePopup();
        }
        targetRef.value !== null && targetRef.value.focus();
        if (innerValue.value.length === 0 || isDeepEqual(getOptionValue.value(innerValue.value[0]), optValue) !== true) {
          emit("update:modelValue", props.emitValue === true ? optValue : opt);
        }
        return;
      }
      (hasDialog !== true || dialogFieldFocused.value === true) && state.focus();
      selectInputText();
      if (innerValue.value.length === 0) {
        const val = props.emitValue === true ? optValue : opt;
        emit("add", { index: 0, value: val });
        emit("update:modelValue", props.multiple === true ? [val] : val);
        return;
      }
      const model = props.modelValue.slice(), index = innerOptionsValue.value.findIndex((v) => isDeepEqual(v, optValue));
      if (index !== -1) {
        emit("remove", { index, value: model.splice(index, 1)[0] });
      } else {
        if (props.maxValues !== void 0 && model.length >= props.maxValues) {
          return;
        }
        const val = props.emitValue === true ? optValue : opt;
        emit("add", { index: model.length, value: val });
        model.push(val);
      }
      emit("update:modelValue", model);
    }
    function setOptionIndex(index) {
      if ($q.platform.is.desktop !== true)
        return;
      const val = index !== -1 && index < virtualScrollLength.value ? index : -1;
      if (optionIndex.value !== val) {
        optionIndex.value = val;
      }
    }
    function moveOptionSelection(offset = 1, skipInputValue) {
      if (menu.value === true) {
        let index = optionIndex.value;
        do {
          index = normalizeToInterval(
            index + offset,
            -1,
            virtualScrollLength.value - 1
          );
        } while (index !== -1 && index !== optionIndex.value && isOptionDisabled.value(props.options[index]) === true);
        if (optionIndex.value !== index) {
          setOptionIndex(index);
          scrollTo(index);
          if (skipInputValue !== true && props.useInput === true && props.fillInput === true) {
            setInputValue(
              index >= 0 ? getOptionLabel.value(props.options[index]) : defaultInputValue,
              true
            );
          }
        }
      }
    }
    function getOption(value, valueCache) {
      const fn = (opt) => isDeepEqual(getOptionValue.value(opt), value);
      return props.options.find(fn) || valueCache.find(fn) || value;
    }
    function isOptionSelected(opt) {
      const val = getOptionValue.value(opt);
      return innerOptionsValue.value.find((v) => isDeepEqual(v, val)) !== void 0;
    }
    function selectInputText(e) {
      if (props.useInput === true && targetRef.value !== null && (e === void 0 || targetRef.value === e.target && e.target.value === selectedString.value)) {
        targetRef.value.select();
      }
    }
    function onTargetKeyup(e) {
      if (isKeyCode(e, 27) === true && menu.value === true) {
        stop(e);
        hidePopup();
        resetInputValue();
      }
      emit("keyup", e);
    }
    function onTargetAutocomplete(e) {
      const { value } = e.target;
      if (e.keyCode !== void 0) {
        onTargetKeyup(e);
        return;
      }
      e.target.value = "";
      if (filterTimer !== null) {
        clearTimeout(filterTimer);
        filterTimer = null;
      }
      if (inputValueTimer !== null) {
        clearTimeout(inputValueTimer);
        inputValueTimer = null;
      }
      resetInputValue();
      if (typeof value === "string" && value.length !== 0) {
        const needle = value.toLocaleLowerCase();
        const findFn = (extractFn) => {
          const option = props.options.find((opt) => String(extractFn.value(opt)).toLocaleLowerCase() === needle);
          if (option === void 0)
            return false;
          if (innerValue.value.indexOf(option) === -1) {
            toggleOption(option);
          } else {
            hidePopup();
          }
          return true;
        };
        const fillFn = (afterFilter) => {
          if (findFn(getOptionValue) !== true && afterFilter !== true && findFn(getOptionLabel) !== true) {
            filter(value, true, () => fillFn(true));
          }
        };
        fillFn();
      } else {
        state.clearValue(e);
      }
    }
    function onTargetKeypress(e) {
      emit("keypress", e);
    }
    function onTargetKeydown(e) {
      emit("keydown", e);
      if (shouldIgnoreKey(e) === true) {
        return;
      }
      const newValueModeValid = inputValue.value.length !== 0 && (props.newValueMode !== void 0 || props.onNewValue !== void 0);
      const tabShouldSelect = e.shiftKey !== true && props.disableTabSelection !== true && props.multiple !== true && (optionIndex.value !== -1 || newValueModeValid === true);
      if (e.keyCode === 27) {
        prevent(e);
        return;
      }
      if (e.keyCode === 9 && tabShouldSelect === false) {
        closeMenu();
        return;
      }
      if (e.target === void 0 || e.target.id !== state.targetUid.value || state.editable.value !== true)
        return;
      if (e.keyCode === 40 && state.innerLoading.value !== true && menu.value === false) {
        stopAndPrevent(e);
        showPopup();
        return;
      }
      if (e.keyCode === 8 && (props.useChips === true || props.clearable === true) && props.hideSelected !== true && inputValue.value.length === 0) {
        if (props.multiple === true && Array.isArray(props.modelValue) === true) {
          removeAtIndex(props.modelValue.length - 1);
        } else if (props.multiple !== true && props.modelValue !== null) {
          emit("update:modelValue", null);
        }
        return;
      }
      if ((e.keyCode === 35 || e.keyCode === 36) && (typeof inputValue.value !== "string" || inputValue.value.length === 0)) {
        stopAndPrevent(e);
        optionIndex.value = -1;
        moveOptionSelection(e.keyCode === 36 ? 1 : -1, props.multiple);
      }
      if ((e.keyCode === 33 || e.keyCode === 34) && virtualScrollSliceSizeComputed.value !== void 0) {
        stopAndPrevent(e);
        optionIndex.value = Math.max(
          -1,
          Math.min(
            virtualScrollLength.value,
            optionIndex.value + (e.keyCode === 33 ? -1 : 1) * virtualScrollSliceSizeComputed.value.view
          )
        );
        moveOptionSelection(e.keyCode === 33 ? 1 : -1, props.multiple);
      }
      if (e.keyCode === 38 || e.keyCode === 40) {
        stopAndPrevent(e);
        moveOptionSelection(e.keyCode === 38 ? -1 : 1, props.multiple);
      }
      const optionsLength = virtualScrollLength.value;
      if (searchBuffer === void 0 || searchBufferExp < Date.now()) {
        searchBuffer = "";
      }
      if (optionsLength > 0 && props.useInput !== true && e.key !== void 0 && e.key.length === 1 && e.altKey === false && e.ctrlKey === false && e.metaKey === false && (e.keyCode !== 32 || searchBuffer.length !== 0)) {
        menu.value !== true && showPopup(e);
        const char = e.key.toLocaleLowerCase(), keyRepeat = searchBuffer.length === 1 && searchBuffer[0] === char;
        searchBufferExp = Date.now() + 1500;
        if (keyRepeat === false) {
          stopAndPrevent(e);
          searchBuffer += char;
        }
        const searchRe = new RegExp("^" + searchBuffer.split("").map((l) => reEscapeList.indexOf(l) !== -1 ? "\\" + l : l).join(".*"), "i");
        let index = optionIndex.value;
        if (keyRepeat === true || index < 0 || searchRe.test(getOptionLabel.value(props.options[index])) !== true) {
          do {
            index = normalizeToInterval(index + 1, -1, optionsLength - 1);
          } while (index !== optionIndex.value && (isOptionDisabled.value(props.options[index]) === true || searchRe.test(getOptionLabel.value(props.options[index])) !== true));
        }
        if (optionIndex.value !== index) {
          nextTick(() => {
            setOptionIndex(index);
            scrollTo(index);
            if (index >= 0 && props.useInput === true && props.fillInput === true) {
              setInputValue(getOptionLabel.value(props.options[index]), true);
            }
          });
        }
        return;
      }
      if (e.keyCode !== 13 && (e.keyCode !== 32 || props.useInput === true || searchBuffer !== "") && (e.keyCode !== 9 || tabShouldSelect === false))
        return;
      e.keyCode !== 9 && stopAndPrevent(e);
      if (optionIndex.value !== -1 && optionIndex.value < optionsLength) {
        toggleOption(props.options[optionIndex.value]);
        return;
      }
      if (newValueModeValid === true) {
        const done = (val, mode) => {
          if (mode) {
            if (validateNewValueMode(mode) !== true) {
              return;
            }
          } else {
            mode = props.newValueMode;
          }
          updateInputValue("", props.multiple !== true, true);
          if (val === void 0 || val === null) {
            return;
          }
          const fn = mode === "toggle" ? toggleOption : add;
          fn(val, mode === "add-unique");
          if (props.multiple !== true) {
            targetRef.value !== null && targetRef.value.focus();
            hidePopup();
          }
        };
        if (props.onNewValue !== void 0) {
          emit("newValue", inputValue.value, done);
        } else {
          done(inputValue.value);
        }
        if (props.multiple !== true) {
          return;
        }
      }
      if (menu.value === true) {
        closeMenu();
      } else if (state.innerLoading.value !== true) {
        showPopup();
      }
    }
    function getVirtualScrollEl() {
      return hasDialog === true ? menuContentRef.value : menuRef.value !== null && menuRef.value.contentEl !== null ? menuRef.value.contentEl : void 0;
    }
    function getVirtualScrollTarget() {
      return getVirtualScrollEl();
    }
    function getSelection() {
      if (props.hideSelected === true) {
        return [];
      }
      if (slots["selected-item"] !== void 0) {
        return selectedScope.value.map((scope) => slots["selected-item"](scope)).slice();
      }
      if (slots.selected !== void 0) {
        return [].concat(slots.selected());
      }
      if (props.useChips === true) {
        return selectedScope.value.map((scope, i) => h(QChip, {
          key: "option-" + i,
          removable: state.editable.value === true && isOptionDisabled.value(scope.opt) !== true,
          dense: true,
          textColor: props.color,
          tabindex: tabindex.value,
          onRemove() {
            scope.removeAtIndex(i);
          }
        }, () => h("span", {
          class: "ellipsis",
          [scope.html === true ? "innerHTML" : "textContent"]: getOptionLabel.value(scope.opt)
        })));
      }
      return [
        h("span", {
          [valueAsHtml.value === true ? "innerHTML" : "textContent"]: ariaCurrentValue.value
        })
      ];
    }
    function getAllOptions() {
      if (noOptions.value === true) {
        return slots["no-option"] !== void 0 ? slots["no-option"]({ inputValue: inputValue.value }) : void 0;
      }
      const fn = slots.option !== void 0 ? slots.option : (scope) => {
        return h(QItem, {
          key: scope.index,
          ...scope.itemProps
        }, () => {
          return h(
            QItemSection,
            () => h(
              QItemLabel,
              () => h("span", {
                [scope.html === true ? "innerHTML" : "textContent"]: scope.label
              })
            )
          );
        });
      };
      let options = padVirtualScroll("div", optionScope.value.map(fn));
      if (slots["before-options"] !== void 0) {
        options = slots["before-options"]().concat(options);
      }
      return hMergeSlot(slots["after-options"], options);
    }
    function getInput(fromDialog, isTarget) {
      const attrs = isTarget === true ? { ...comboboxAttrs.value, ...state.splitAttrs.attributes.value } : void 0;
      const data = {
        ref: isTarget === true ? targetRef : void 0,
        key: "i_t",
        class: computedInputClass.value,
        style: props.inputStyle,
        value: inputValue.value !== void 0 ? inputValue.value : "",
        type: "search",
        ...attrs,
        id: isTarget === true ? state.targetUid.value : void 0,
        maxlength: props.maxlength,
        autocomplete: props.autocomplete,
        "data-autofocus": fromDialog === true || props.autofocus === true || void 0,
        disabled: props.disable === true,
        readonly: props.readonly === true,
        ...inputControlEvents.value
      };
      if (fromDialog !== true && hasDialog === true) {
        if (Array.isArray(data.class) === true) {
          data.class = [...data.class, "no-pointer-events"];
        } else {
          data.class += " no-pointer-events";
        }
      }
      return h("input", data);
    }
    function onInput(e) {
      if (filterTimer !== null) {
        clearTimeout(filterTimer);
        filterTimer = null;
      }
      if (inputValueTimer !== null) {
        clearTimeout(inputValueTimer);
        inputValueTimer = null;
      }
      if (e && e.target && e.target.qComposing === true) {
        return;
      }
      setInputValue(e.target.value || "");
      userInputValue = true;
      defaultInputValue = inputValue.value;
      if (state.focused.value !== true && (hasDialog !== true || dialogFieldFocused.value === true)) {
        state.focus();
      }
      if (props.onFilter !== void 0) {
        filterTimer = setTimeout(() => {
          filterTimer = null;
          filter(inputValue.value);
        }, props.inputDebounce);
      }
    }
    function setInputValue(val, emitImmediately) {
      if (inputValue.value !== val) {
        inputValue.value = val;
        if (emitImmediately === true || props.inputDebounce === 0 || props.inputDebounce === "0") {
          emit("inputValue", val);
        } else {
          inputValueTimer = setTimeout(() => {
            inputValueTimer = null;
            emit("inputValue", val);
          }, props.inputDebounce);
        }
      }
    }
    function updateInputValue(val, noFiltering, internal) {
      userInputValue = internal !== true;
      if (props.useInput === true) {
        setInputValue(val, true);
        if (noFiltering === true || internal !== true) {
          defaultInputValue = val;
        }
        noFiltering !== true && filter(val);
      }
    }
    function filter(val, keepClosed, afterUpdateFn) {
      if (props.onFilter === void 0 || keepClosed !== true && state.focused.value !== true) {
        return;
      }
      if (state.innerLoading.value === true) {
        emit("filterAbort");
      } else {
        state.innerLoading.value = true;
        innerLoadingIndicator.value = true;
      }
      if (val !== "" && props.multiple !== true && innerValue.value.length !== 0 && userInputValue !== true && val === getOptionLabel.value(innerValue.value[0])) {
        val = "";
      }
      const localFilterId = setTimeout(() => {
        menu.value === true && (menu.value = false);
      }, 10);
      filterId !== null && clearTimeout(filterId);
      filterId = localFilterId;
      emit(
        "filter",
        val,
        (fn, afterFn) => {
          if ((keepClosed === true || state.focused.value === true) && filterId === localFilterId) {
            clearTimeout(filterId);
            typeof fn === "function" && fn();
            innerLoadingIndicator.value = false;
            nextTick(() => {
              state.innerLoading.value = false;
              if (state.editable.value === true) {
                if (keepClosed === true) {
                  menu.value === true && hidePopup();
                } else if (menu.value === true) {
                  updateMenu(true);
                } else {
                  menu.value = true;
                }
              }
              typeof afterFn === "function" && nextTick(() => {
                afterFn(proxy);
              });
              typeof afterUpdateFn === "function" && nextTick(() => {
                afterUpdateFn(proxy);
              });
            });
          }
        },
        () => {
          if (state.focused.value === true && filterId === localFilterId) {
            clearTimeout(filterId);
            state.innerLoading.value = false;
            innerLoadingIndicator.value = false;
          }
          menu.value === true && (menu.value = false);
        }
      );
    }
    function getMenu() {
      return h(QMenu, {
        ref: menuRef,
        class: menuContentClass.value,
        style: props.popupContentStyle,
        modelValue: menu.value,
        fit: props.menuShrink !== true,
        cover: props.optionsCover === true && noOptions.value !== true && props.useInput !== true,
        anchor: props.menuAnchor,
        self: props.menuSelf,
        offset: props.menuOffset,
        dark: isOptionsDark.value,
        noParentEvent: true,
        noRefocus: true,
        noFocus: true,
        noRouteDismiss: props.popupNoRouteDismiss,
        square: squaredMenu.value,
        transitionShow: props.transitionShow,
        transitionHide: props.transitionHide,
        transitionDuration: props.transitionDuration,
        separateClosePopup: true,
        ...listboxAttrs.value,
        onScrollPassive: onVirtualScrollEvt,
        onBeforeShow: onControlPopupShow,
        onBeforeHide: onMenuBeforeHide,
        onShow: onMenuShow
      }, getAllOptions);
    }
    function onMenuBeforeHide(e) {
      onControlPopupHide(e);
      closeMenu();
    }
    function onMenuShow() {
      setVirtualScrollSize();
    }
    function onDialogFieldFocus(e) {
      stop(e);
      targetRef.value !== null && targetRef.value.focus();
      dialogFieldFocused.value = true;
      window.scrollTo(window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, 0);
    }
    function onDialogFieldBlur(e) {
      stop(e);
      nextTick(() => {
        dialogFieldFocused.value = false;
      });
    }
    function getDialog() {
      const content = [
        h(QField, {
          class: `col-auto ${state.fieldClass.value}`,
          ...innerFieldProps.value,
          for: state.targetUid.value,
          dark: isOptionsDark.value,
          square: true,
          loading: innerLoadingIndicator.value,
          itemAligned: false,
          filled: true,
          stackLabel: inputValue.value.length !== 0,
          ...state.splitAttrs.listeners.value,
          onFocus: onDialogFieldFocus,
          onBlur: onDialogFieldBlur
        }, {
          ...slots,
          rawControl: () => state.getControl(true),
          before: void 0,
          after: void 0
        })
      ];
      menu.value === true && content.push(
        h("div", {
          ref: menuContentRef,
          class: menuContentClass.value + " scroll",
          style: props.popupContentStyle,
          ...listboxAttrs.value,
          onClick: prevent,
          onScrollPassive: onVirtualScrollEvt
        }, getAllOptions())
      );
      return h(QDialog, {
        ref: dialogRef,
        modelValue: dialog.value,
        position: props.useInput === true ? "top" : void 0,
        transitionShow: transitionShowComputed,
        transitionHide: props.transitionHide,
        transitionDuration: props.transitionDuration,
        noRouteDismiss: props.popupNoRouteDismiss,
        onBeforeShow: onControlPopupShow,
        onBeforeHide: onDialogBeforeHide,
        onHide: onDialogHide,
        onShow: onDialogShow
      }, () => h("div", {
        class: "q-select__dialog" + (isOptionsDark.value === true ? " q-select__dialog--dark q-dark" : "") + (dialogFieldFocused.value === true ? " q-select__dialog--focused" : "")
      }, content));
    }
    function onDialogBeforeHide(e) {
      onControlPopupHide(e);
      if (dialogRef.value !== null) {
        dialogRef.value.__updateRefocusTarget(
          state.rootRef.value.querySelector(".q-field__native > [tabindex]:last-child")
        );
      }
      state.focused.value = false;
    }
    function onDialogHide(e) {
      hidePopup();
      state.focused.value === false && emit("blur", e);
      resetInputValue();
    }
    function onDialogShow() {
      const el = document.activeElement;
      if ((el === null || el.id !== state.targetUid.value) && targetRef.value !== null && targetRef.value !== el) {
        targetRef.value.focus();
      }
      setVirtualScrollSize();
    }
    function closeMenu() {
      if (dialog.value === true) {
        return;
      }
      optionIndex.value = -1;
      if (menu.value === true) {
        menu.value = false;
      }
      if (state.focused.value === false) {
        if (filterId !== null) {
          clearTimeout(filterId);
          filterId = null;
        }
        if (state.innerLoading.value === true) {
          emit("filterAbort");
          state.innerLoading.value = false;
          innerLoadingIndicator.value = false;
        }
      }
    }
    function showPopup(e) {
      if (state.editable.value !== true) {
        return;
      }
      if (hasDialog === true) {
        state.onControlFocusin(e);
        dialog.value = true;
        nextTick(() => {
          state.focus();
        });
      } else {
        state.focus();
      }
      if (props.onFilter !== void 0) {
        filter(inputValue.value);
      } else if (noOptions.value !== true || slots["no-option"] !== void 0) {
        menu.value = true;
      }
    }
    function hidePopup() {
      dialog.value = false;
      closeMenu();
    }
    function resetInputValue() {
      props.useInput === true && updateInputValue(
        props.multiple !== true && props.fillInput === true && innerValue.value.length !== 0 ? getOptionLabel.value(innerValue.value[0]) || "" : "",
        true,
        true
      );
    }
    function updateMenu(show) {
      let optionIndex2 = -1;
      if (show === true) {
        if (innerValue.value.length !== 0) {
          const val = getOptionValue.value(innerValue.value[0]);
          optionIndex2 = props.options.findIndex((v) => isDeepEqual(getOptionValue.value(v), val));
        }
        localResetVirtualScroll(optionIndex2);
      }
      setOptionIndex(optionIndex2);
    }
    function rerenderMenu(newLength, oldLength) {
      if (menu.value === true && state.innerLoading.value === false) {
        localResetVirtualScroll(-1, true);
        nextTick(() => {
          if (menu.value === true && state.innerLoading.value === false) {
            if (newLength > oldLength) {
              localResetVirtualScroll();
            } else {
              updateMenu(true);
            }
          }
        });
      }
    }
    function updateMenuPosition() {
      if (dialog.value === false && menuRef.value !== null) {
        menuRef.value.updatePosition();
      }
    }
    function onControlPopupShow(e) {
      e !== void 0 && stop(e);
      emit("popupShow", e);
      state.hasPopupOpen = true;
      state.onControlFocusin(e);
    }
    function onControlPopupHide(e) {
      e !== void 0 && stop(e);
      emit("popupHide", e);
      state.hasPopupOpen = false;
      state.onControlFocusout(e);
    }
    function updatePreState() {
      hasDialog = $q.platform.is.mobile !== true && props.behavior !== "dialog" ? false : props.behavior !== "menu" && (props.useInput === true ? slots["no-option"] !== void 0 || props.onFilter !== void 0 || noOptions.value === false : true);
      transitionShowComputed = $q.platform.is.ios === true && hasDialog === true && props.useInput === true ? "fade" : props.transitionShow;
    }
    onBeforeUpdate(updatePreState);
    onUpdated(updateMenuPosition);
    updatePreState();
    onBeforeUnmount(() => {
      filterTimer !== null && clearTimeout(filterTimer);
      inputValueTimer !== null && clearTimeout(inputValueTimer);
    });
    Object.assign(proxy, {
      showPopup,
      hidePopup,
      removeAtIndex,
      add,
      toggleOption,
      getOptionIndex: () => optionIndex.value,
      setOptionIndex,
      moveOptionSelection,
      filter,
      updateMenuPosition,
      updateInputValue,
      isOptionSelected,
      getEmittingOptionValue,
      isOptionDisabled: (...args) => isOptionDisabled.value.apply(null, args) === true,
      getOptionValue: (...args) => getOptionValue.value.apply(null, args),
      getOptionLabel: (...args) => getOptionLabel.value.apply(null, args)
    });
    Object.assign(state, {
      innerValue,
      fieldClass: computed(
        () => `q-select q-field--auto-height q-select--with${props.useInput !== true ? "out" : ""}-input q-select--with${props.useChips !== true ? "out" : ""}-chips q-select--${props.multiple === true ? "multiple" : "single"}`
      ),
      inputRef,
      targetRef,
      hasValue,
      showPopup,
      floatingLabel: computed(
        () => props.hideSelected !== true && hasValue.value === true || typeof inputValue.value === "number" || inputValue.value.length !== 0 || fieldValueIsFilled(props.displayValue)
      ),
      getControlChild: () => {
        if (state.editable.value !== false && (dialog.value === true || noOptions.value !== true || slots["no-option"] !== void 0)) {
          return hasDialog === true ? getDialog() : getMenu();
        } else if (state.hasPopupOpen === true) {
          state.hasPopupOpen = false;
        }
      },
      controlEvents: {
        onFocusin(e) {
          state.onControlFocusin(e);
        },
        onFocusout(e) {
          state.onControlFocusout(e, () => {
            resetInputValue();
            closeMenu();
          });
        },
        onClick(e) {
          prevent(e);
          if (hasDialog !== true && menu.value === true) {
            closeMenu();
            targetRef.value !== null && targetRef.value.focus();
            return;
          }
          showPopup(e);
        }
      },
      getControl: (fromDialog) => {
        const child = getSelection();
        const isTarget = fromDialog === true || dialog.value !== true || hasDialog !== true;
        if (props.useInput === true) {
          child.push(getInput(fromDialog, isTarget));
        } else if (state.editable.value === true) {
          const attrs2 = isTarget === true ? comboboxAttrs.value : void 0;
          child.push(
            h("input", {
              ref: isTarget === true ? targetRef : void 0,
              key: "d_t",
              class: "q-select__focus-target",
              id: isTarget === true ? state.targetUid.value : void 0,
              value: ariaCurrentValue.value,
              readonly: true,
              "data-autofocus": fromDialog === true || props.autofocus === true || void 0,
              ...attrs2,
              onKeydown: onTargetKeydown,
              onKeyup: onTargetKeyup,
              onKeypress: onTargetKeypress
            })
          );
          if (isTarget === true && typeof props.autocomplete === "string" && props.autocomplete.length !== 0) {
            child.push(
              h("input", {
                class: "q-select__autocomplete-input",
                autocomplete: props.autocomplete,
                tabindex: -1,
                onKeyup: onTargetAutocomplete
              })
            );
          }
        }
        if (nameProp.value !== void 0 && props.disable !== true && innerOptionsValue.value.length !== 0) {
          const opts = innerOptionsValue.value.map((value) => h("option", { value, selected: true }));
          child.push(
            h("select", {
              class: "hidden",
              name: nameProp.value,
              multiple: props.multiple
            }, opts)
          );
        }
        const attrs = props.useInput === true || isTarget !== true ? void 0 : state.splitAttrs.attributes.value;
        return h("div", {
          class: "q-field__native row items-center",
          ...attrs,
          ...state.splitAttrs.listeners.value
        }, child);
      },
      getInnerAppend: () => props.loading !== true && innerLoadingIndicator.value !== true && props.hideDropdownIcon !== true ? [
        h(QIcon, {
          class: "q-select__dropdown-icon" + (menu.value === true ? " rotate-180" : ""),
          name: dropdownArrowIcon.value
        })
      ] : null
    });
    return useField(state);
  }
});
const defaultSizes = {
  xs: 2,
  sm: 4,
  md: 6,
  lg: 10,
  xl: 14
};
function width(val, reverse, $q) {
  return {
    transform: reverse === true ? `translateX(${$q.lang.rtl === true ? "-" : ""}100%) scale3d(${-val},1,1)` : `scale3d(${val},1,1)`
  };
}
var QLinearProgress = createComponent({
  name: "QLinearProgress",
  props: {
    ...useDarkProps,
    ...useSizeProps,
    value: {
      type: Number,
      default: 0
    },
    buffer: Number,
    color: String,
    trackColor: String,
    reverse: Boolean,
    stripe: Boolean,
    indeterminate: Boolean,
    query: Boolean,
    rounded: Boolean,
    animationSpeed: {
      type: [String, Number],
      default: 2100
    },
    instantFeedback: Boolean
  },
  setup(props, { slots }) {
    const { proxy } = getCurrentInstance();
    const isDark = useDark(props, proxy.$q);
    const sizeStyle = useSize(props, defaultSizes);
    const motion = computed(() => props.indeterminate === true || props.query === true);
    const widthReverse = computed(() => props.reverse !== props.query);
    const style = computed(() => ({
      ...sizeStyle.value !== null ? sizeStyle.value : {},
      "--q-linear-progress-speed": `${props.animationSpeed}ms`
    }));
    const classes = computed(
      () => "q-linear-progress" + (props.color !== void 0 ? ` text-${props.color}` : "") + (props.reverse === true || props.query === true ? " q-linear-progress--reverse" : "") + (props.rounded === true ? " rounded-borders" : "")
    );
    const trackStyle = computed(() => width(props.buffer !== void 0 ? props.buffer : 1, widthReverse.value, proxy.$q));
    const transitionSuffix = computed(() => `with${props.instantFeedback === true ? "out" : ""}-transition`);
    const trackClass = computed(
      () => `q-linear-progress__track absolute-full q-linear-progress__track--${transitionSuffix.value} q-linear-progress__track--${isDark.value === true ? "dark" : "light"}` + (props.trackColor !== void 0 ? ` bg-${props.trackColor}` : "")
    );
    const modelStyle = computed(() => width(motion.value === true ? 1 : props.value, widthReverse.value, proxy.$q));
    const modelClass = computed(
      () => `q-linear-progress__model absolute-full q-linear-progress__model--${transitionSuffix.value} q-linear-progress__model--${motion.value === true ? "in" : ""}determinate`
    );
    const stripeStyle = computed(() => ({ width: `${props.value * 100}%` }));
    const stripeClass = computed(
      () => `q-linear-progress__stripe absolute-${props.reverse === true ? "right" : "left"} q-linear-progress__stripe--${transitionSuffix.value}`
    );
    return () => {
      const child = [
        h("div", {
          class: trackClass.value,
          style: trackStyle.value
        }),
        h("div", {
          class: modelClass.value,
          style: modelStyle.value
        })
      ];
      props.stripe === true && motion.value === false && child.push(
        h("div", {
          class: stripeClass.value,
          style: stripeStyle.value
        })
      );
      return h("div", {
        class: classes.value,
        style: style.value,
        role: "progressbar",
        "aria-valuemin": 0,
        "aria-valuemax": 1,
        "aria-valuenow": props.indeterminate === true ? void 0 : props.value
      }, hMergeSlot(slots.default, child));
    };
  }
});
function useRefocusTarget(props, rootRef) {
  const refocusRef = ref(null);
  const refocusTargetEl = computed(() => {
    if (props.disable === true) {
      return null;
    }
    return h("span", {
      ref: refocusRef,
      class: "no-outline",
      tabindex: -1
    });
  });
  function refocusTarget(e) {
    const root2 = rootRef.value;
    if (e !== void 0 && e.type.indexOf("key") === 0) {
      if (root2 !== null && document.activeElement !== root2 && root2.contains(document.activeElement) === true) {
        root2.focus();
      }
    } else if (refocusRef.value !== null && (e === void 0 || root2 !== null && root2.contains(e.target) === true)) {
      refocusRef.value.focus();
    }
  }
  return {
    refocusTargetEl,
    refocusTarget
  };
}
var optionSizes = {
  xs: 30,
  sm: 35,
  md: 40,
  lg: 50,
  xl: 60
};
const useCheckboxProps = {
  ...useDarkProps,
  ...useSizeProps,
  ...useFormProps,
  modelValue: {
    required: true,
    default: null
  },
  val: {},
  trueValue: { default: true },
  falseValue: { default: false },
  indeterminateValue: { default: null },
  checkedIcon: String,
  uncheckedIcon: String,
  indeterminateIcon: String,
  toggleOrder: {
    type: String,
    validator: (v) => v === "tf" || v === "ft"
  },
  toggleIndeterminate: Boolean,
  label: String,
  leftLabel: Boolean,
  color: String,
  keepColor: Boolean,
  dense: Boolean,
  disable: Boolean,
  tabindex: [String, Number]
};
const useCheckboxEmits = ["update:modelValue"];
function useCheckbox(type, getInner) {
  const { props, slots, emit, proxy } = getCurrentInstance();
  const { $q } = proxy;
  const isDark = useDark(props, $q);
  const rootRef = ref(null);
  const { refocusTargetEl, refocusTarget } = useRefocusTarget(props, rootRef);
  const sizeStyle = useSize(props, optionSizes);
  const modelIsArray = computed(
    () => props.val !== void 0 && Array.isArray(props.modelValue)
  );
  const index = computed(() => {
    const val = toRaw(props.val);
    return modelIsArray.value === true ? props.modelValue.findIndex((opt) => toRaw(opt) === val) : -1;
  });
  const isTrue = computed(() => modelIsArray.value === true ? index.value !== -1 : toRaw(props.modelValue) === toRaw(props.trueValue));
  const isFalse = computed(() => modelIsArray.value === true ? index.value === -1 : toRaw(props.modelValue) === toRaw(props.falseValue));
  const isIndeterminate = computed(
    () => isTrue.value === false && isFalse.value === false
  );
  const tabindex = computed(() => props.disable === true ? -1 : props.tabindex || 0);
  const classes = computed(
    () => `q-${type} cursor-pointer no-outline row inline no-wrap items-center` + (props.disable === true ? " disabled" : "") + (isDark.value === true ? ` q-${type}--dark` : "") + (props.dense === true ? ` q-${type}--dense` : "") + (props.leftLabel === true ? " reverse" : "")
  );
  const innerClass = computed(() => {
    const state = isTrue.value === true ? "truthy" : isFalse.value === true ? "falsy" : "indet";
    const color = props.color !== void 0 && (props.keepColor === true || (type === "toggle" ? isTrue.value === true : isFalse.value !== true)) ? ` text-${props.color}` : "";
    return `q-${type}__inner relative-position non-selectable q-${type}__inner--${state}${color}`;
  });
  const formAttrs = computed(() => {
    const prop = { type: "checkbox" };
    props.name !== void 0 && Object.assign(prop, {
      ".checked": isTrue.value,
      "^checked": isTrue.value === true ? "checked" : void 0,
      name: props.name,
      value: modelIsArray.value === true ? props.val : props.trueValue
    });
    return prop;
  });
  const injectFormInput = useFormInject(formAttrs);
  const attributes = computed(() => {
    const attrs = {
      tabindex: tabindex.value,
      role: type === "toggle" ? "switch" : "checkbox",
      "aria-label": props.label,
      "aria-checked": isIndeterminate.value === true ? "mixed" : isTrue.value === true ? "true" : "false"
    };
    if (props.disable === true) {
      attrs["aria-disabled"] = "true";
    }
    return attrs;
  });
  function onClick(e) {
    if (e !== void 0) {
      stopAndPrevent(e);
      refocusTarget(e);
    }
    if (props.disable !== true) {
      emit("update:modelValue", getNextValue(), e);
    }
  }
  function getNextValue() {
    if (modelIsArray.value === true) {
      if (isTrue.value === true) {
        const val = props.modelValue.slice();
        val.splice(index.value, 1);
        return val;
      }
      return props.modelValue.concat([props.val]);
    }
    if (isTrue.value === true) {
      if (props.toggleOrder !== "ft" || props.toggleIndeterminate === false) {
        return props.falseValue;
      }
    } else if (isFalse.value === true) {
      if (props.toggleOrder === "ft" || props.toggleIndeterminate === false) {
        return props.trueValue;
      }
    } else {
      return props.toggleOrder !== "ft" ? props.trueValue : props.falseValue;
    }
    return props.indeterminateValue;
  }
  function onKeydown2(e) {
    if (e.keyCode === 13 || e.keyCode === 32) {
      stopAndPrevent(e);
    }
  }
  function onKeyup2(e) {
    if (e.keyCode === 13 || e.keyCode === 32) {
      onClick(e);
    }
  }
  const getInnerContent = getInner(isTrue, isIndeterminate);
  Object.assign(proxy, { toggle: onClick });
  return () => {
    const inner = getInnerContent();
    props.disable !== true && injectFormInput(
      inner,
      "unshift",
      ` q-${type}__native absolute q-ma-none q-pa-none`
    );
    const child = [
      h("div", {
        class: innerClass.value,
        style: sizeStyle.value,
        "aria-hidden": "true"
      }, inner)
    ];
    if (refocusTargetEl.value !== null) {
      child.push(refocusTargetEl.value);
    }
    const label = props.label !== void 0 ? hMergeSlot(slots.default, [props.label]) : hSlot(slots.default);
    label !== void 0 && child.push(
      h("div", {
        class: `q-${type}__label q-anchor--skip`
      }, label)
    );
    return h("div", {
      ref: rootRef,
      class: classes.value,
      ...attributes.value,
      onClick,
      onKeydown: onKeydown2,
      onKeyup: onKeyup2
    }, child);
  };
}
const createBgNode = () => h("div", {
  key: "svg",
  class: "q-checkbox__bg absolute"
}, [
  h("svg", {
    class: "q-checkbox__svg fit absolute-full",
    viewBox: "0 0 24 24"
  }, [
    h("path", {
      class: "q-checkbox__truthy",
      fill: "none",
      d: "M1.73,12.91 8.1,19.28 22.79,4.59"
    }),
    h("path", {
      class: "q-checkbox__indet",
      d: "M4,14H20V10H4"
    })
  ])
]);
var QCheckbox = createComponent({
  name: "QCheckbox",
  props: useCheckboxProps,
  emits: useCheckboxEmits,
  setup(props) {
    const bgNode = createBgNode();
    function getInner(isTrue, isIndeterminate) {
      const icon = computed(
        () => (isTrue.value === true ? props.checkedIcon : isIndeterminate.value === true ? props.indeterminateIcon : props.uncheckedIcon) || null
      );
      return () => icon.value !== null ? [
        h("div", {
          key: "icon",
          class: "q-checkbox__icon-container absolute-full flex flex-center no-wrap"
        }, [
          h(QIcon, {
            class: "q-checkbox__icon",
            name: icon.value
          })
        ])
      ] : [bgNode];
    }
    return useCheckbox("checkbox", getInner);
  }
});
let counter = 0;
const useFullscreenProps = {
  fullscreen: Boolean,
  noRouteFullscreenExit: Boolean
};
const useFullscreenEmits = ["update:fullscreen", "fullscreen"];
function useFullscreen() {
  const vm = getCurrentInstance();
  const { props, emit, proxy } = vm;
  let historyEntry, fullscreenFillerNode, container;
  const inFullscreen = ref(false);
  vmHasRouter(vm) === true && watch(() => proxy.$route.fullPath, () => {
    props.noRouteFullscreenExit !== true && exitFullscreen();
  });
  watch(() => props.fullscreen, (v) => {
    if (inFullscreen.value !== v) {
      toggleFullscreen();
    }
  });
  watch(inFullscreen, (v) => {
    emit("update:fullscreen", v);
    emit("fullscreen", v);
  });
  function toggleFullscreen() {
    if (inFullscreen.value === true) {
      exitFullscreen();
    } else {
      setFullscreen();
    }
  }
  function setFullscreen() {
    if (inFullscreen.value === true) {
      return;
    }
    inFullscreen.value = true;
    container = proxy.$el.parentNode;
    container.replaceChild(fullscreenFillerNode, proxy.$el);
    document.body.appendChild(proxy.$el);
    counter++;
    if (counter === 1) {
      document.body.classList.add("q-body--fullscreen-mixin");
    }
    historyEntry = {
      handler: exitFullscreen
    };
    History.add(historyEntry);
  }
  function exitFullscreen() {
    if (inFullscreen.value !== true) {
      return;
    }
    if (historyEntry !== void 0) {
      History.remove(historyEntry);
      historyEntry = void 0;
    }
    container.replaceChild(proxy.$el, fullscreenFillerNode);
    inFullscreen.value = false;
    counter = Math.max(0, counter - 1);
    if (counter === 0) {
      document.body.classList.remove("q-body--fullscreen-mixin");
      if (proxy.$el.scrollIntoView !== void 0) {
        setTimeout(() => {
          proxy.$el.scrollIntoView();
        });
      }
    }
  }
  onBeforeMount(() => {
    fullscreenFillerNode = document.createElement("span");
  });
  onMounted(() => {
    props.fullscreen === true && setFullscreen();
  });
  onBeforeUnmount(exitFullscreen);
  Object.assign(proxy, {
    toggleFullscreen,
    setFullscreen,
    exitFullscreen
  });
  return {
    inFullscreen,
    toggleFullscreen
  };
}
function sortDate(a, b) {
  return new Date(a) - new Date(b);
}
const useTableSortProps = {
  sortMethod: Function,
  binaryStateSort: Boolean,
  columnSortOrder: {
    type: String,
    validator: (v) => v === "ad" || v === "da",
    default: "ad"
  }
};
function useTableSort(props, computedPagination, colList, setPagination) {
  const columnToSort = computed(() => {
    const { sortBy } = computedPagination.value;
    return sortBy ? colList.value.find((def) => def.name === sortBy) || null : null;
  });
  const computedSortMethod = computed(() => props.sortMethod !== void 0 ? props.sortMethod : (data, sortBy, descending) => {
    const col = colList.value.find((def) => def.name === sortBy);
    if (col === void 0 || col.field === void 0) {
      return data;
    }
    const dir = descending === true ? -1 : 1, val = typeof col.field === "function" ? (v) => col.field(v) : (v) => v[col.field];
    return data.sort((a, b) => {
      let A = val(a), B = val(b);
      if (col.rawSort !== void 0) {
        return col.rawSort(A, B, a, b) * dir;
      }
      if (A === null || A === void 0) {
        return -1 * dir;
      }
      if (B === null || B === void 0) {
        return 1 * dir;
      }
      if (col.sort !== void 0) {
        return col.sort(A, B, a, b) * dir;
      }
      if (isNumber(A) === true && isNumber(B) === true) {
        return (A - B) * dir;
      }
      if (isDate(A) === true && isDate(B) === true) {
        return sortDate(A, B) * dir;
      }
      if (typeof A === "boolean" && typeof B === "boolean") {
        return (A - B) * dir;
      }
      [A, B] = [A, B].map((s) => (s + "").toLocaleString().toLowerCase());
      return A < B ? -1 * dir : A === B ? 0 : dir;
    });
  });
  function sort(col) {
    let sortOrder = props.columnSortOrder;
    if (isObject$3(col) === true) {
      if (col.sortOrder) {
        sortOrder = col.sortOrder;
      }
      col = col.name;
    } else {
      const def = colList.value.find((def2) => def2.name === col);
      if (def !== void 0 && def.sortOrder) {
        sortOrder = def.sortOrder;
      }
    }
    let { sortBy, descending } = computedPagination.value;
    if (sortBy !== col) {
      sortBy = col;
      descending = sortOrder === "da";
    } else if (props.binaryStateSort === true) {
      descending = !descending;
    } else if (descending === true) {
      if (sortOrder === "ad") {
        sortBy = null;
      } else {
        descending = false;
      }
    } else {
      if (sortOrder === "ad") {
        descending = true;
      } else {
        sortBy = null;
      }
    }
    setPagination({ sortBy, descending, page: 1 });
  }
  return {
    columnToSort,
    computedSortMethod,
    sort
  };
}
const useTableFilterProps = {
  filter: [String, Object],
  filterMethod: Function
};
function useTableFilter(props, setPagination) {
  const computedFilterMethod = computed(() => props.filterMethod !== void 0 ? props.filterMethod : (rows, terms, cols, cellValue) => {
    const lowerTerms = terms ? terms.toLowerCase() : "";
    return rows.filter(
      (row) => cols.some((col) => {
        const val = cellValue(col, row) + "";
        const haystack = val === "undefined" || val === "null" ? "" : val.toLowerCase();
        return haystack.indexOf(lowerTerms) !== -1;
      })
    );
  });
  watch(
    () => props.filter,
    () => {
      nextTick(() => {
        setPagination({ page: 1 }, true);
      });
    },
    { deep: true }
  );
  return { computedFilterMethod };
}
function samePagination(oldPag, newPag) {
  for (const prop in newPag) {
    if (newPag[prop] !== oldPag[prop]) {
      return false;
    }
  }
  return true;
}
function fixPagination(p) {
  if (p.page < 1) {
    p.page = 1;
  }
  if (p.rowsPerPage !== void 0 && p.rowsPerPage < 1) {
    p.rowsPerPage = 0;
  }
  return p;
}
const useTablePaginationProps = {
  pagination: Object,
  rowsPerPageOptions: {
    type: Array,
    default: () => [5, 7, 10, 15, 20, 25, 50, 0]
  },
  "onUpdate:pagination": [Function, Array]
};
function useTablePaginationState(vm, getCellValue) {
  const { props, emit } = vm;
  const innerPagination = ref(
    Object.assign({
      sortBy: null,
      descending: false,
      page: 1,
      rowsPerPage: props.rowsPerPageOptions.length !== 0 ? props.rowsPerPageOptions[0] : 5
    }, props.pagination)
  );
  const computedPagination = computed(() => {
    const pag = props["onUpdate:pagination"] !== void 0 ? { ...innerPagination.value, ...props.pagination } : innerPagination.value;
    return fixPagination(pag);
  });
  const isServerSide = computed(() => computedPagination.value.rowsNumber !== void 0);
  function sendServerRequest(pagination) {
    requestServerInteraction({
      pagination,
      filter: props.filter
    });
  }
  function requestServerInteraction(prop = {}) {
    nextTick(() => {
      emit("request", {
        pagination: prop.pagination || computedPagination.value,
        filter: prop.filter || props.filter,
        getCellValue
      });
    });
  }
  function setPagination(val, forceServerRequest) {
    const newPagination = fixPagination({
      ...computedPagination.value,
      ...val
    });
    if (samePagination(computedPagination.value, newPagination) === true) {
      if (isServerSide.value === true && forceServerRequest === true) {
        sendServerRequest(newPagination);
      }
      return;
    }
    if (isServerSide.value === true) {
      sendServerRequest(newPagination);
      return;
    }
    if (props.pagination !== void 0 && props["onUpdate:pagination"] !== void 0) {
      emit("update:pagination", newPagination);
    } else {
      innerPagination.value = newPagination;
    }
  }
  return {
    innerPagination,
    computedPagination,
    isServerSide,
    requestServerInteraction,
    setPagination
  };
}
function useTablePagination(vm, innerPagination, computedPagination, isServerSide, setPagination, filteredSortedRowsNumber) {
  const { props, emit, proxy: { $q } } = vm;
  const computedRowsNumber = computed(() => isServerSide.value === true ? computedPagination.value.rowsNumber || 0 : filteredSortedRowsNumber.value);
  const firstRowIndex = computed(() => {
    const { page, rowsPerPage } = computedPagination.value;
    return (page - 1) * rowsPerPage;
  });
  const lastRowIndex = computed(() => {
    const { page, rowsPerPage } = computedPagination.value;
    return page * rowsPerPage;
  });
  const isFirstPage = computed(() => computedPagination.value.page === 1);
  const pagesNumber = computed(() => computedPagination.value.rowsPerPage === 0 ? 1 : Math.max(
    1,
    Math.ceil(computedRowsNumber.value / computedPagination.value.rowsPerPage)
  ));
  const isLastPage = computed(() => lastRowIndex.value === 0 ? true : computedPagination.value.page >= pagesNumber.value);
  const computedRowsPerPageOptions = computed(() => {
    const opts = props.rowsPerPageOptions.includes(innerPagination.value.rowsPerPage) ? props.rowsPerPageOptions : [innerPagination.value.rowsPerPage].concat(props.rowsPerPageOptions);
    return opts.map((count) => ({
      label: count === 0 ? $q.lang.table.allRows : "" + count,
      value: count
    }));
  });
  watch(pagesNumber, (lastPage2, oldLastPage) => {
    if (lastPage2 === oldLastPage) {
      return;
    }
    const currentPage = computedPagination.value.page;
    if (lastPage2 && !currentPage) {
      setPagination({ page: 1 });
    } else if (lastPage2 < currentPage) {
      setPagination({ page: lastPage2 });
    }
  });
  function firstPage() {
    setPagination({ page: 1 });
  }
  function prevPage() {
    const { page } = computedPagination.value;
    if (page > 1) {
      setPagination({ page: page - 1 });
    }
  }
  function nextPage() {
    const { page, rowsPerPage } = computedPagination.value;
    if (lastRowIndex.value > 0 && page * rowsPerPage < computedRowsNumber.value) {
      setPagination({ page: page + 1 });
    }
  }
  function lastPage() {
    setPagination({ page: pagesNumber.value });
  }
  if (props["onUpdate:pagination"] !== void 0) {
    emit("update:pagination", { ...computedPagination.value });
  }
  return {
    firstRowIndex,
    lastRowIndex,
    isFirstPage,
    isLastPage,
    pagesNumber,
    computedRowsPerPageOptions,
    computedRowsNumber,
    firstPage,
    prevPage,
    nextPage,
    lastPage
  };
}
const useTableRowSelectionProps = {
  selection: {
    type: String,
    default: "none",
    validator: (v) => ["single", "multiple", "none"].includes(v)
  },
  selected: {
    type: Array,
    default: () => []
  }
};
const useTableRowSelectionEmits = ["update:selected", "selection"];
function useTableRowSelection(props, emit, computedRows, getRowKey) {
  const selectedKeys = computed(() => {
    const keys = {};
    props.selected.map(getRowKey.value).forEach((key) => {
      keys[key] = true;
    });
    return keys;
  });
  const hasSelectionMode = computed(() => {
    return props.selection !== "none";
  });
  const singleSelection = computed(() => {
    return props.selection === "single";
  });
  const multipleSelection = computed(() => {
    return props.selection === "multiple";
  });
  const allRowsSelected = computed(
    () => computedRows.value.length !== 0 && computedRows.value.every(
      (row) => selectedKeys.value[getRowKey.value(row)] === true
    )
  );
  const someRowsSelected = computed(
    () => allRowsSelected.value !== true && computedRows.value.some((row) => selectedKeys.value[getRowKey.value(row)] === true)
  );
  const rowsSelectedNumber = computed(() => props.selected.length);
  function isRowSelected(key) {
    return selectedKeys.value[key] === true;
  }
  function clearSelection2() {
    emit("update:selected", []);
  }
  function updateSelection(keys, rows, added, evt) {
    emit("selection", { rows, added, keys, evt });
    const payload = singleSelection.value === true ? added === true ? rows : [] : added === true ? props.selected.concat(rows) : props.selected.filter(
      (row) => keys.includes(getRowKey.value(row)) === false
    );
    emit("update:selected", payload);
  }
  return {
    hasSelectionMode,
    singleSelection,
    multipleSelection,
    allRowsSelected,
    someRowsSelected,
    rowsSelectedNumber,
    isRowSelected,
    clearSelection: clearSelection2,
    updateSelection
  };
}
function getVal(val) {
  return Array.isArray(val) ? val.slice() : [];
}
const useTableRowExpandProps = {
  expanded: Array
};
const useTableRowExpandEmits = ["update:expanded"];
function useTableRowExpand(props, emit) {
  const innerExpanded = ref(getVal(props.expanded));
  watch(() => props.expanded, (val) => {
    innerExpanded.value = getVal(val);
  });
  function isRowExpanded(key) {
    return innerExpanded.value.includes(key);
  }
  function setExpanded(val) {
    if (props.expanded !== void 0) {
      emit("update:expanded", val);
    } else {
      innerExpanded.value = val;
    }
  }
  function updateExpanded(key, add) {
    const target2 = innerExpanded.value.slice();
    const index = target2.indexOf(key);
    if (add === true) {
      if (index === -1) {
        target2.push(key);
        setExpanded(target2);
      }
    } else if (index !== -1) {
      target2.splice(index, 1);
      setExpanded(target2);
    }
  }
  return {
    isRowExpanded,
    setExpanded,
    updateExpanded
  };
}
const useTableColumnSelectionProps = {
  visibleColumns: Array
};
function useTableColumnSelection(props, computedPagination, hasSelectionMode) {
  const colList = computed(() => {
    if (props.columns !== void 0) {
      return props.columns;
    }
    const row = props.rows[0];
    return row !== void 0 ? Object.keys(row).map((name) => ({
      name,
      label: name.toUpperCase(),
      field: name,
      align: isNumber(row[name]) ? "right" : "left",
      sortable: true
    })) : [];
  });
  const computedCols = computed(() => {
    const { sortBy, descending } = computedPagination.value;
    const cols = props.visibleColumns !== void 0 ? colList.value.filter((col) => col.required === true || props.visibleColumns.includes(col.name) === true) : colList.value;
    return cols.map((col) => {
      const align = col.align || "right";
      const alignClass = `text-${align}`;
      return {
        ...col,
        align,
        __iconClass: `q-table__sort-icon q-table__sort-icon--${align}`,
        __thClass: alignClass + (col.headerClasses !== void 0 ? " " + col.headerClasses : "") + (col.sortable === true ? " sortable" : "") + (col.name === sortBy ? ` sorted ${descending === true ? "sort-desc" : ""}` : ""),
        __tdStyle: col.style !== void 0 ? typeof col.style !== "function" ? () => col.style : col.style : () => null,
        __tdClass: col.classes !== void 0 ? typeof col.classes !== "function" ? () => alignClass + " " + col.classes : (row) => alignClass + " " + col.classes(row) : () => alignClass
      };
    });
  });
  const computedColsMap = computed(() => {
    const names = {};
    computedCols.value.forEach((col) => {
      names[col.name] = col;
    });
    return names;
  });
  const computedColspan = computed(() => {
    return props.tableColspan !== void 0 ? props.tableColspan : computedCols.value.length + (hasSelectionMode.value === true ? 1 : 0);
  });
  return {
    colList,
    computedCols,
    computedColsMap,
    computedColspan
  };
}
const bottomClass = "q-table__bottom row items-center";
const virtScrollPassthroughProps = {};
commonVirtScrollPropsList.forEach((p) => {
  virtScrollPassthroughProps[p] = {};
});
var QTable = createComponent({
  name: "QTable",
  props: {
    rows: {
      type: Array,
      required: true
    },
    rowKey: {
      type: [String, Function],
      default: "id"
    },
    columns: Array,
    loading: Boolean,
    iconFirstPage: String,
    iconPrevPage: String,
    iconNextPage: String,
    iconLastPage: String,
    title: String,
    hideHeader: Boolean,
    grid: Boolean,
    gridHeader: Boolean,
    dense: Boolean,
    flat: Boolean,
    bordered: Boolean,
    square: Boolean,
    separator: {
      type: String,
      default: "horizontal",
      validator: (v) => ["horizontal", "vertical", "cell", "none"].includes(v)
    },
    wrapCells: Boolean,
    virtualScroll: Boolean,
    virtualScrollTarget: {},
    ...virtScrollPassthroughProps,
    noDataLabel: String,
    noResultsLabel: String,
    loadingLabel: String,
    selectedRowsLabel: Function,
    rowsPerPageLabel: String,
    paginationLabel: Function,
    color: {
      type: String,
      default: "grey-8"
    },
    titleClass: [String, Array, Object],
    tableStyle: [String, Array, Object],
    tableClass: [String, Array, Object],
    tableHeaderStyle: [String, Array, Object],
    tableHeaderClass: [String, Array, Object],
    cardContainerClass: [String, Array, Object],
    cardContainerStyle: [String, Array, Object],
    cardStyle: [String, Array, Object],
    cardClass: [String, Array, Object],
    hideBottom: Boolean,
    hideSelectedBanner: Boolean,
    hideNoData: Boolean,
    hidePagination: Boolean,
    onRowClick: Function,
    onRowDblclick: Function,
    onRowContextmenu: Function,
    ...useDarkProps,
    ...useFullscreenProps,
    ...useTableColumnSelectionProps,
    ...useTableFilterProps,
    ...useTablePaginationProps,
    ...useTableRowExpandProps,
    ...useTableRowSelectionProps,
    ...useTableSortProps
  },
  emits: [
    "request",
    "virtualScroll",
    ...useFullscreenEmits,
    ...useTableRowExpandEmits,
    ...useTableRowSelectionEmits
  ],
  setup(props, { slots, emit }) {
    const vm = getCurrentInstance();
    const { proxy: { $q } } = vm;
    const isDark = useDark(props, $q);
    const { inFullscreen, toggleFullscreen } = useFullscreen();
    const getRowKey = computed(() => typeof props.rowKey === "function" ? props.rowKey : (row) => row[props.rowKey]);
    const rootRef = ref(null);
    const virtScrollRef = ref(null);
    const hasVirtScroll = computed(() => props.grid !== true && props.virtualScroll === true);
    const cardDefaultClass = computed(
      () => " q-table__card" + (isDark.value === true ? " q-table__card--dark q-dark" : "") + (props.square === true ? " q-table--square" : "") + (props.flat === true ? " q-table--flat" : "") + (props.bordered === true ? " q-table--bordered" : "")
    );
    const __containerClass = computed(
      () => `q-table__container q-table--${props.separator}-separator column no-wrap` + (props.grid === true ? " q-table--grid" : cardDefaultClass.value) + (isDark.value === true ? " q-table--dark" : "") + (props.dense === true ? " q-table--dense" : "") + (props.wrapCells === false ? " q-table--no-wrap" : "") + (inFullscreen.value === true ? " fullscreen scroll" : "")
    );
    const containerClass = computed(
      () => __containerClass.value + (props.loading === true ? " q-table--loading" : "")
    );
    watch(
      () => props.tableStyle + props.tableClass + props.tableHeaderStyle + props.tableHeaderClass + __containerClass.value,
      () => {
        hasVirtScroll.value === true && virtScrollRef.value !== null && virtScrollRef.value.reset();
      }
    );
    const {
      innerPagination,
      computedPagination,
      isServerSide,
      requestServerInteraction,
      setPagination
    } = useTablePaginationState(vm, getCellValue);
    const { computedFilterMethod } = useTableFilter(props, setPagination);
    const { isRowExpanded, setExpanded, updateExpanded } = useTableRowExpand(props, emit);
    const filteredSortedRows = computed(() => {
      let rows = props.rows;
      if (isServerSide.value === true || rows.length === 0) {
        return rows;
      }
      const { sortBy, descending } = computedPagination.value;
      if (props.filter) {
        rows = computedFilterMethod.value(rows, props.filter, computedCols.value, getCellValue);
      }
      if (columnToSort.value !== null) {
        rows = computedSortMethod.value(
          props.rows === rows ? rows.slice() : rows,
          sortBy,
          descending
        );
      }
      return rows;
    });
    const filteredSortedRowsNumber = computed(() => filteredSortedRows.value.length);
    const computedRows = computed(() => {
      let rows = filteredSortedRows.value;
      if (isServerSide.value === true) {
        return rows;
      }
      const { rowsPerPage } = computedPagination.value;
      if (rowsPerPage !== 0) {
        if (firstRowIndex.value === 0 && props.rows !== rows) {
          if (rows.length > lastRowIndex.value) {
            rows = rows.slice(0, lastRowIndex.value);
          }
        } else {
          rows = rows.slice(firstRowIndex.value, lastRowIndex.value);
        }
      }
      return rows;
    });
    const {
      hasSelectionMode,
      singleSelection,
      multipleSelection,
      allRowsSelected,
      someRowsSelected,
      rowsSelectedNumber,
      isRowSelected,
      clearSelection: clearSelection2,
      updateSelection
    } = useTableRowSelection(props, emit, computedRows, getRowKey);
    const { colList, computedCols, computedColsMap, computedColspan } = useTableColumnSelection(props, computedPagination, hasSelectionMode);
    const { columnToSort, computedSortMethod, sort } = useTableSort(props, computedPagination, colList, setPagination);
    const {
      firstRowIndex,
      lastRowIndex,
      isFirstPage,
      isLastPage,
      pagesNumber,
      computedRowsPerPageOptions,
      computedRowsNumber,
      firstPage,
      prevPage,
      nextPage,
      lastPage
    } = useTablePagination(vm, innerPagination, computedPagination, isServerSide, setPagination, filteredSortedRowsNumber);
    const nothingToDisplay = computed(() => computedRows.value.length === 0);
    const virtProps = computed(() => {
      const acc = {};
      commonVirtScrollPropsList.forEach((p) => {
        acc[p] = props[p];
      });
      if (acc.virtualScrollItemSize === void 0) {
        acc.virtualScrollItemSize = props.dense === true ? 28 : 48;
      }
      return acc;
    });
    function resetVirtualScroll() {
      hasVirtScroll.value === true && virtScrollRef.value.reset();
    }
    function getBody() {
      if (props.grid === true) {
        return getGridBody();
      }
      const header = props.hideHeader !== true ? getTHead : null;
      if (hasVirtScroll.value === true) {
        const topRow = slots["top-row"];
        const bottomRow = slots["bottom-row"];
        const virtSlots = {
          default: (props2) => getTBodyTR(props2.item, slots.body, props2.index)
        };
        if (topRow !== void 0) {
          const topContent = h("tbody", topRow({ cols: computedCols.value }));
          virtSlots.before = header === null ? () => topContent : () => [header()].concat(topContent);
        } else if (header !== null) {
          virtSlots.before = header;
        }
        if (bottomRow !== void 0) {
          virtSlots.after = () => h("tbody", bottomRow({ cols: computedCols.value }));
        }
        return h(QVirtualScroll, {
          ref: virtScrollRef,
          class: props.tableClass,
          style: props.tableStyle,
          ...virtProps.value,
          scrollTarget: props.virtualScrollTarget,
          items: computedRows.value,
          type: "__qtable",
          tableColspan: computedColspan.value,
          onVirtualScroll: onVScroll
        }, virtSlots);
      }
      const child = [
        getTBody()
      ];
      if (header !== null) {
        child.unshift(header());
      }
      return getTableMiddle({
        class: ["q-table__middle scroll", props.tableClass],
        style: props.tableStyle
      }, child);
    }
    function scrollTo(toIndex, edge) {
      if (virtScrollRef.value !== null) {
        virtScrollRef.value.scrollTo(toIndex, edge);
        return;
      }
      toIndex = parseInt(toIndex, 10);
      const rowEl = rootRef.value.querySelector(`tbody tr:nth-of-type(${toIndex + 1})`);
      if (rowEl !== null) {
        const scrollTarget = rootRef.value.querySelector(".q-table__middle.scroll");
        const offsetTop = rowEl.offsetTop - props.virtualScrollStickySizeStart;
        const direction = offsetTop < scrollTarget.scrollTop ? "decrease" : "increase";
        scrollTarget.scrollTop = offsetTop;
        emit("virtualScroll", {
          index: toIndex,
          from: 0,
          to: innerPagination.value.rowsPerPage - 1,
          direction
        });
      }
    }
    function onVScroll(info) {
      emit("virtualScroll", info);
    }
    function getProgress() {
      return [
        h(QLinearProgress, {
          class: "q-table__linear-progress",
          color: props.color,
          dark: isDark.value,
          indeterminate: true,
          trackColor: "transparent"
        })
      ];
    }
    function getTBodyTR(row, bodySlot, pageIndex) {
      const key = getRowKey.value(row), selected = isRowSelected(key);
      if (bodySlot !== void 0) {
        return bodySlot(
          getBodyScope({
            key,
            row,
            pageIndex,
            __trClass: selected ? "selected" : ""
          })
        );
      }
      const bodyCell = slots["body-cell"], child = computedCols.value.map((col) => {
        const bodyCellCol = slots[`body-cell-${col.name}`], slot = bodyCellCol !== void 0 ? bodyCellCol : bodyCell;
        return slot !== void 0 ? slot(getBodyCellScope({ key, row, pageIndex, col })) : h("td", {
          class: col.__tdClass(row),
          style: col.__tdStyle(row)
        }, getCellValue(col, row));
      });
      if (hasSelectionMode.value === true) {
        const slot = slots["body-selection"];
        const content = slot !== void 0 ? slot(getBodySelectionScope({ key, row, pageIndex })) : [
          h(QCheckbox, {
            modelValue: selected,
            color: props.color,
            dark: isDark.value,
            dense: props.dense,
            "onUpdate:modelValue": (adding, evt) => {
              updateSelection([key], [row], adding, evt);
            }
          })
        ];
        child.unshift(
          h("td", { class: "q-table--col-auto-width" }, content)
        );
      }
      const data = { key, class: { selected } };
      if (props.onRowClick !== void 0) {
        data.class["cursor-pointer"] = true;
        data.onClick = (evt) => {
          emit("rowClick", evt, row, pageIndex);
        };
      }
      if (props.onRowDblclick !== void 0) {
        data.class["cursor-pointer"] = true;
        data.onDblclick = (evt) => {
          emit("rowDblclick", evt, row, pageIndex);
        };
      }
      if (props.onRowContextmenu !== void 0) {
        data.class["cursor-pointer"] = true;
        data.onContextmenu = (evt) => {
          emit("rowContextmenu", evt, row, pageIndex);
        };
      }
      return h("tr", data, child);
    }
    function getTBody() {
      const body = slots.body, topRow = slots["top-row"], bottomRow = slots["bottom-row"];
      let child = computedRows.value.map(
        (row, pageIndex) => getTBodyTR(row, body, pageIndex)
      );
      if (topRow !== void 0) {
        child = topRow({ cols: computedCols.value }).concat(child);
      }
      if (bottomRow !== void 0) {
        child = child.concat(bottomRow({ cols: computedCols.value }));
      }
      return h("tbody", child);
    }
    function getBodyScope(data) {
      injectBodyCommonScope(data);
      data.cols = data.cols.map(
        (col) => injectProp({ ...col }, "value", () => getCellValue(col, data.row))
      );
      return data;
    }
    function getBodyCellScope(data) {
      injectBodyCommonScope(data);
      injectProp(data, "value", () => getCellValue(data.col, data.row));
      return data;
    }
    function getBodySelectionScope(data) {
      injectBodyCommonScope(data);
      return data;
    }
    function injectBodyCommonScope(data) {
      Object.assign(data, {
        cols: computedCols.value,
        colsMap: computedColsMap.value,
        sort,
        rowIndex: firstRowIndex.value + data.pageIndex,
        color: props.color,
        dark: isDark.value,
        dense: props.dense
      });
      hasSelectionMode.value === true && injectProp(
        data,
        "selected",
        () => isRowSelected(data.key),
        (adding, evt) => {
          updateSelection([data.key], [data.row], adding, evt);
        }
      );
      injectProp(
        data,
        "expand",
        () => isRowExpanded(data.key),
        (adding) => {
          updateExpanded(data.key, adding);
        }
      );
    }
    function getCellValue(col, row) {
      const val = typeof col.field === "function" ? col.field(row) : row[col.field];
      return col.format !== void 0 ? col.format(val, row) : val;
    }
    const marginalsScope = computed(() => ({
      pagination: computedPagination.value,
      pagesNumber: pagesNumber.value,
      isFirstPage: isFirstPage.value,
      isLastPage: isLastPage.value,
      firstPage,
      prevPage,
      nextPage,
      lastPage,
      inFullscreen: inFullscreen.value,
      toggleFullscreen
    }));
    function getTopDiv() {
      const top = slots.top, topLeft = slots["top-left"], topRight = slots["top-right"], topSelection = slots["top-selection"], hasSelection = hasSelectionMode.value === true && topSelection !== void 0 && rowsSelectedNumber.value > 0, topClass = "q-table__top relative-position row items-center";
      if (top !== void 0) {
        return h("div", { class: topClass }, [top(marginalsScope.value)]);
      }
      let child;
      if (hasSelection === true) {
        child = topSelection(marginalsScope.value).slice();
      } else {
        child = [];
        if (topLeft !== void 0) {
          child.push(
            h("div", { class: "q-table__control" }, [
              topLeft(marginalsScope.value)
            ])
          );
        } else if (props.title) {
          child.push(
            h("div", { class: "q-table__control" }, [
              h("div", {
                class: ["q-table__title", props.titleClass]
              }, props.title)
            ])
          );
        }
      }
      if (topRight !== void 0) {
        child.push(
          h("div", { class: "q-table__separator col" })
        );
        child.push(
          h("div", { class: "q-table__control" }, [
            topRight(marginalsScope.value)
          ])
        );
      }
      if (child.length === 0) {
        return;
      }
      return h("div", { class: topClass }, child);
    }
    const headerSelectedValue = computed(() => someRowsSelected.value === true ? null : allRowsSelected.value);
    function getTHead() {
      const child = getTHeadTR();
      if (props.loading === true && slots.loading === void 0) {
        child.push(
          h("tr", { class: "q-table__progress" }, [
            h("th", {
              class: "relative-position",
              colspan: computedColspan.value
            }, getProgress())
          ])
        );
      }
      return h("thead", child);
    }
    function getTHeadTR() {
      const header = slots.header, headerCell = slots["header-cell"];
      if (header !== void 0) {
        return header(
          getHeaderScope({ header: true })
        ).slice();
      }
      const child = computedCols.value.map((col) => {
        const headerCellCol = slots[`header-cell-${col.name}`], slot = headerCellCol !== void 0 ? headerCellCol : headerCell, props2 = getHeaderScope({ col });
        return slot !== void 0 ? slot(props2) : h(QTh, {
          key: col.name,
          props: props2
        }, () => col.label);
      });
      if (singleSelection.value === true && props.grid !== true) {
        child.unshift(
          h("th", { class: "q-table--col-auto-width" }, " ")
        );
      } else if (multipleSelection.value === true) {
        const slot = slots["header-selection"];
        const content = slot !== void 0 ? slot(getHeaderScope({})) : [
          h(QCheckbox, {
            color: props.color,
            modelValue: headerSelectedValue.value,
            dark: isDark.value,
            dense: props.dense,
            "onUpdate:modelValue": onMultipleSelectionSet
          })
        ];
        child.unshift(
          h("th", { class: "q-table--col-auto-width" }, content)
        );
      }
      return [
        h("tr", {
          class: props.tableHeaderClass,
          style: props.tableHeaderStyle
        }, child)
      ];
    }
    function getHeaderScope(data) {
      Object.assign(data, {
        cols: computedCols.value,
        sort,
        colsMap: computedColsMap.value,
        color: props.color,
        dark: isDark.value,
        dense: props.dense
      });
      if (multipleSelection.value === true) {
        injectProp(
          data,
          "selected",
          () => headerSelectedValue.value,
          onMultipleSelectionSet
        );
      }
      return data;
    }
    function onMultipleSelectionSet(val) {
      if (someRowsSelected.value === true) {
        val = false;
      }
      updateSelection(
        computedRows.value.map(getRowKey.value),
        computedRows.value,
        val
      );
    }
    const navIcon = computed(() => {
      const ico = [
        props.iconFirstPage || $q.iconSet.table.firstPage,
        props.iconPrevPage || $q.iconSet.table.prevPage,
        props.iconNextPage || $q.iconSet.table.nextPage,
        props.iconLastPage || $q.iconSet.table.lastPage
      ];
      return $q.lang.rtl === true ? ico.reverse() : ico;
    });
    function getBottomDiv() {
      if (props.hideBottom === true) {
        return;
      }
      if (nothingToDisplay.value === true) {
        if (props.hideNoData === true) {
          return;
        }
        const message = props.loading === true ? props.loadingLabel || $q.lang.table.loading : props.filter ? props.noResultsLabel || $q.lang.table.noResults : props.noDataLabel || $q.lang.table.noData;
        const noData = slots["no-data"];
        const children = noData !== void 0 ? [noData({ message, icon: $q.iconSet.table.warning, filter: props.filter })] : [
          h(QIcon, {
            class: "q-table__bottom-nodata-icon",
            name: $q.iconSet.table.warning
          }),
          message
        ];
        return h("div", { class: bottomClass + " q-table__bottom--nodata" }, children);
      }
      const bottom = slots.bottom;
      if (bottom !== void 0) {
        return h("div", { class: bottomClass }, [bottom(marginalsScope.value)]);
      }
      const child = props.hideSelectedBanner !== true && hasSelectionMode.value === true && rowsSelectedNumber.value > 0 ? [
        h("div", { class: "q-table__control" }, [
          h("div", [
            (props.selectedRowsLabel || $q.lang.table.selectedRecords)(rowsSelectedNumber.value)
          ])
        ])
      ] : [];
      if (props.hidePagination !== true) {
        return h("div", {
          class: bottomClass + " justify-end"
        }, getPaginationDiv(child));
      }
      if (child.length !== 0) {
        return h("div", { class: bottomClass }, child);
      }
    }
    function onPagSelection(pag) {
      setPagination({
        page: 1,
        rowsPerPage: pag.value
      });
    }
    function getPaginationDiv(child) {
      let control;
      const { rowsPerPage } = computedPagination.value, paginationLabel = props.paginationLabel || $q.lang.table.pagination, paginationSlot = slots.pagination, hasOpts = props.rowsPerPageOptions.length > 1;
      child.push(
        h("div", { class: "q-table__separator col" })
      );
      if (hasOpts === true) {
        child.push(
          h("div", { class: "q-table__control" }, [
            h("span", { class: "q-table__bottom-item" }, [
              props.rowsPerPageLabel || $q.lang.table.recordsPerPage
            ]),
            h(QSelect, {
              class: "q-table__select inline q-table__bottom-item",
              color: props.color,
              modelValue: rowsPerPage,
              options: computedRowsPerPageOptions.value,
              displayValue: rowsPerPage === 0 ? $q.lang.table.allRows : rowsPerPage,
              dark: isDark.value,
              borderless: true,
              dense: true,
              optionsDense: true,
              optionsCover: true,
              "onUpdate:modelValue": onPagSelection
            })
          ])
        );
      }
      if (paginationSlot !== void 0) {
        control = paginationSlot(marginalsScope.value);
      } else {
        control = [
          h("span", rowsPerPage !== 0 ? { class: "q-table__bottom-item" } : {}, [
            rowsPerPage ? paginationLabel(firstRowIndex.value + 1, Math.min(lastRowIndex.value, computedRowsNumber.value), computedRowsNumber.value) : paginationLabel(1, filteredSortedRowsNumber.value, computedRowsNumber.value)
          ])
        ];
        if (rowsPerPage !== 0 && pagesNumber.value > 1) {
          const btnProps = {
            color: props.color,
            round: true,
            dense: true,
            flat: true
          };
          if (props.dense === true) {
            btnProps.size = "sm";
          }
          pagesNumber.value > 2 && control.push(
            h(QBtn, {
              key: "pgFirst",
              ...btnProps,
              icon: navIcon.value[0],
              disable: isFirstPage.value,
              onClick: firstPage
            })
          );
          control.push(
            h(QBtn, {
              key: "pgPrev",
              ...btnProps,
              icon: navIcon.value[1],
              disable: isFirstPage.value,
              onClick: prevPage
            }),
            h(QBtn, {
              key: "pgNext",
              ...btnProps,
              icon: navIcon.value[2],
              disable: isLastPage.value,
              onClick: nextPage
            })
          );
          pagesNumber.value > 2 && control.push(
            h(QBtn, {
              key: "pgLast",
              ...btnProps,
              icon: navIcon.value[3],
              disable: isLastPage.value,
              onClick: lastPage
            })
          );
        }
      }
      child.push(
        h("div", { class: "q-table__control" }, control)
      );
      return child;
    }
    function getGridHeader() {
      const child = props.gridHeader === true ? [
        h("table", { class: "q-table" }, [
          getTHead()
        ])
      ] : props.loading === true && slots.loading === void 0 ? getProgress() : void 0;
      return h("div", { class: "q-table__middle" }, child);
    }
    function getGridBody() {
      const item = slots.item !== void 0 ? slots.item : (scope) => {
        const child = scope.cols.map(
          (col) => h("div", { class: "q-table__grid-item-row" }, [
            h("div", { class: "q-table__grid-item-title" }, [col.label]),
            h("div", { class: "q-table__grid-item-value" }, [col.value])
          ])
        );
        if (hasSelectionMode.value === true) {
          const slot = slots["body-selection"];
          const content = slot !== void 0 ? slot(scope) : [
            h(QCheckbox, {
              modelValue: scope.selected,
              color: props.color,
              dark: isDark.value,
              dense: props.dense,
              "onUpdate:modelValue": (adding, evt) => {
                updateSelection([scope.key], [scope.row], adding, evt);
              }
            })
          ];
          child.unshift(
            h("div", { class: "q-table__grid-item-row" }, content),
            h(QSeparator, { dark: isDark.value })
          );
        }
        const data = {
          class: [
            "q-table__grid-item-card" + cardDefaultClass.value,
            props.cardClass
          ],
          style: props.cardStyle
        };
        if (props.onRowClick !== void 0 || props.onRowDblclick !== void 0) {
          data.class[0] += " cursor-pointer";
          if (props.onRowClick !== void 0) {
            data.onClick = (evt) => {
              emit("RowClick", evt, scope.row, scope.pageIndex);
            };
          }
          if (props.onRowDblclick !== void 0) {
            data.onDblclick = (evt) => {
              emit("RowDblclick", evt, scope.row, scope.pageIndex);
            };
          }
        }
        return h("div", {
          class: "q-table__grid-item col-xs-12 col-sm-6 col-md-4 col-lg-3" + (scope.selected === true ? " q-table__grid-item--selected" : "")
        }, [
          h("div", data, child)
        ]);
      };
      return h("div", {
        class: [
          "q-table__grid-content row",
          props.cardContainerClass
        ],
        style: props.cardContainerStyle
      }, computedRows.value.map((row, pageIndex) => {
        return item(getBodyScope({
          key: getRowKey.value(row),
          row,
          pageIndex
        }));
      }));
    }
    Object.assign(vm.proxy, {
      requestServerInteraction,
      setPagination,
      firstPage,
      prevPage,
      nextPage,
      lastPage,
      isRowSelected,
      clearSelection: clearSelection2,
      isRowExpanded,
      setExpanded,
      sort,
      resetVirtualScroll,
      scrollTo,
      getCellValue
    });
    injectMultipleProps(vm.proxy, {
      filteredSortedRows: () => filteredSortedRows.value,
      computedRows: () => computedRows.value,
      computedRowsNumber: () => computedRowsNumber.value
    });
    return () => {
      const child = [getTopDiv()];
      const data = { ref: rootRef, class: containerClass.value };
      if (props.grid === true) {
        child.push(getGridHeader());
      } else {
        Object.assign(data, {
          class: [data.class, props.cardClass],
          style: props.cardStyle
        });
      }
      child.push(
        getBody(),
        getBottomDiv()
      );
      if (props.loading === true && slots.loading !== void 0) {
        child.push(
          slots.loading()
        );
      }
      return h("div", data, child);
    };
  }
});
var QCardSection = createComponent({
  name: "QCardSection",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    horizontal: Boolean
  },
  setup(props, { slots }) {
    const classes = computed(
      () => `q-card__section q-card__section--${props.horizontal === true ? "horiz row no-wrap" : "vert"}`
    );
    return () => h(props.tag, { class: classes.value }, hSlot(slots.default));
  }
});
var QCardActions = createComponent({
  name: "QCardActions",
  props: {
    ...useAlignProps,
    vertical: Boolean
  },
  setup(props, { slots }) {
    const alignClass = useAlign(props);
    const classes = computed(
      () => `q-card__actions ${alignClass.value} q-card__actions--${props.vertical === true ? "vert column" : "horiz row"}`
    );
    return () => h("div", { class: classes.value }, hSlot(slots.default));
  }
});
var QCard = createComponent({
  name: "QCard",
  props: {
    ...useDarkProps,
    tag: {
      type: String,
      default: "div"
    },
    square: Boolean,
    flat: Boolean,
    bordered: Boolean
  },
  setup(props, { slots }) {
    const { proxy: { $q } } = getCurrentInstance();
    const isDark = useDark(props, $q);
    const classes = computed(
      () => "q-card" + (isDark.value === true ? " q-card--dark q-dark" : "") + (props.bordered === true ? " q-card--bordered" : "") + (props.square === true ? " q-card--square no-border-radius" : "") + (props.flat === true ? " q-card--flat no-shadow" : "")
    );
    return () => h(props.tag, { class: classes.value }, hSlot(slots.default));
  }
});
function getDepth(value) {
  if (value === false) {
    return 0;
  }
  if (value === true || value === void 0) {
    return 1;
  }
  const depth = parseInt(value, 10);
  return isNaN(depth) ? 0 : depth;
}
var ClosePopup = createDirective(
  {
    name: "close-popup",
    beforeMount(el, { value }) {
      const ctx = {
        depth: getDepth(value),
        handler(evt) {
          ctx.depth !== 0 && setTimeout(() => {
            const proxy = getPortalProxy(el);
            if (proxy !== void 0) {
              closePortals(proxy, evt, ctx.depth);
            }
          });
        },
        handlerKey(evt) {
          isKeyCode(evt, 13) === true && ctx.handler(evt);
        }
      };
      el.__qclosepopup = ctx;
      el.addEventListener("click", ctx.handler);
      el.addEventListener("keyup", ctx.handlerKey);
    },
    updated(el, { value, oldValue }) {
      if (value !== oldValue) {
        el.__qclosepopup.depth = getDepth(value);
      }
    },
    beforeUnmount(el) {
      const ctx = el.__qclosepopup;
      el.removeEventListener("click", ctx.handler);
      el.removeEventListener("keyup", ctx.handlerKey);
      delete el.__qclosepopup;
    }
  }
);
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var dayjs_min = { exports: {} };
(function(module, exports) {
  !function(t, e) {
    module.exports = e();
  }(commonjsGlobal, function() {
    var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", c = "month", f = "quarter", h2 = "year", d = "date", l = "Invalid Date", $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t2) {
      var e2 = ["th", "st", "nd", "rd"], n2 = t2 % 100;
      return "[" + t2 + (e2[(n2 - 20) % 10] || e2[n2] || e2[0]) + "]";
    } }, m = function(t2, e2, n2) {
      var r2 = String(t2);
      return !r2 || r2.length >= e2 ? t2 : "" + Array(e2 + 1 - r2.length).join(n2) + t2;
    }, v = { s: m, z: function(t2) {
      var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r2 = Math.floor(n2 / 60), i2 = n2 % 60;
      return (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i2, 2, "0");
    }, m: function t2(e2, n2) {
      if (e2.date() < n2.date())
        return -t2(n2, e2);
      var r2 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2 = e2.clone().add(r2, c), s2 = n2 - i2 < 0, u2 = e2.clone().add(r2 + (s2 ? -1 : 1), c);
      return +(-(r2 + (n2 - i2) / (s2 ? i2 - u2 : u2 - i2)) || 0);
    }, a: function(t2) {
      return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
    }, p: function(t2) {
      return { M: c, y: h2, w: o, d: a, D: d, h: u, m: s, s: i, ms: r, Q: f }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
    }, u: function(t2) {
      return void 0 === t2;
    } }, g = "en", D = {};
    D[g] = M;
    var p = "$isDayjsObject", S = function(t2) {
      return t2 instanceof _ || !(!t2 || !t2[p]);
    }, w = function t2(e2, n2, r2) {
      var i2;
      if (!e2)
        return g;
      if ("string" == typeof e2) {
        var s2 = e2.toLowerCase();
        D[s2] && (i2 = s2), n2 && (D[s2] = n2, i2 = s2);
        var u2 = e2.split("-");
        if (!i2 && u2.length > 1)
          return t2(u2[0]);
      } else {
        var a2 = e2.name;
        D[a2] = e2, i2 = a2;
      }
      return !r2 && i2 && (g = i2), i2 || !r2 && g;
    }, O = function(t2, e2) {
      if (S(t2))
        return t2.clone();
      var n2 = "object" == typeof e2 ? e2 : {};
      return n2.date = t2, n2.args = arguments, new _(n2);
    }, b = v;
    b.l = w, b.i = S, b.w = function(t2, e2) {
      return O(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
    };
    var _ = function() {
      function M2(t2) {
        this.$L = w(t2.locale, null, true), this.parse(t2), this.$x = this.$x || t2.x || {}, this[p] = true;
      }
      var m2 = M2.prototype;
      return m2.parse = function(t2) {
        this.$d = function(t3) {
          var e2 = t3.date, n2 = t3.utc;
          if (null === e2)
            return new Date(NaN);
          if (b.u(e2))
            return new Date();
          if (e2 instanceof Date)
            return new Date(e2);
          if ("string" == typeof e2 && !/Z$/i.test(e2)) {
            var r2 = e2.match($);
            if (r2) {
              var i2 = r2[2] - 1 || 0, s2 = (r2[7] || "0").substring(0, 3);
              return n2 ? new Date(Date.UTC(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2)) : new Date(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2);
            }
          }
          return new Date(e2);
        }(t2), this.init();
      }, m2.init = function() {
        var t2 = this.$d;
        this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
      }, m2.$utils = function() {
        return b;
      }, m2.isValid = function() {
        return !(this.$d.toString() === l);
      }, m2.isSame = function(t2, e2) {
        var n2 = O(t2);
        return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
      }, m2.isAfter = function(t2, e2) {
        return O(t2) < this.startOf(e2);
      }, m2.isBefore = function(t2, e2) {
        return this.endOf(e2) < O(t2);
      }, m2.$g = function(t2, e2, n2) {
        return b.u(t2) ? this[e2] : this.set(n2, t2);
      }, m2.unix = function() {
        return Math.floor(this.valueOf() / 1e3);
      }, m2.valueOf = function() {
        return this.$d.getTime();
      }, m2.startOf = function(t2, e2) {
        var n2 = this, r2 = !!b.u(e2) || e2, f2 = b.p(t2), l2 = function(t3, e3) {
          var i2 = b.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
          return r2 ? i2 : i2.endOf(a);
        }, $2 = function(t3, e3) {
          return b.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
        }, y2 = this.$W, M3 = this.$M, m3 = this.$D, v2 = "set" + (this.$u ? "UTC" : "");
        switch (f2) {
          case h2:
            return r2 ? l2(1, 0) : l2(31, 11);
          case c:
            return r2 ? l2(1, M3) : l2(0, M3 + 1);
          case o:
            var g2 = this.$locale().weekStart || 0, D2 = (y2 < g2 ? y2 + 7 : y2) - g2;
            return l2(r2 ? m3 - D2 : m3 + (6 - D2), M3);
          case a:
          case d:
            return $2(v2 + "Hours", 0);
          case u:
            return $2(v2 + "Minutes", 1);
          case s:
            return $2(v2 + "Seconds", 2);
          case i:
            return $2(v2 + "Milliseconds", 3);
          default:
            return this.clone();
        }
      }, m2.endOf = function(t2) {
        return this.startOf(t2, false);
      }, m2.$set = function(t2, e2) {
        var n2, o2 = b.p(t2), f2 = "set" + (this.$u ? "UTC" : ""), l2 = (n2 = {}, n2[a] = f2 + "Date", n2[d] = f2 + "Date", n2[c] = f2 + "Month", n2[h2] = f2 + "FullYear", n2[u] = f2 + "Hours", n2[s] = f2 + "Minutes", n2[i] = f2 + "Seconds", n2[r] = f2 + "Milliseconds", n2)[o2], $2 = o2 === a ? this.$D + (e2 - this.$W) : e2;
        if (o2 === c || o2 === h2) {
          var y2 = this.clone().set(d, 1);
          y2.$d[l2]($2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
        } else
          l2 && this.$d[l2]($2);
        return this.init(), this;
      }, m2.set = function(t2, e2) {
        return this.clone().$set(t2, e2);
      }, m2.get = function(t2) {
        return this[b.p(t2)]();
      }, m2.add = function(r2, f2) {
        var d2, l2 = this;
        r2 = Number(r2);
        var $2 = b.p(f2), y2 = function(t2) {
          var e2 = O(l2);
          return b.w(e2.date(e2.date() + Math.round(t2 * r2)), l2);
        };
        if ($2 === c)
          return this.set(c, this.$M + r2);
        if ($2 === h2)
          return this.set(h2, this.$y + r2);
        if ($2 === a)
          return y2(1);
        if ($2 === o)
          return y2(7);
        var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i] = t, d2)[$2] || 1, m3 = this.$d.getTime() + r2 * M3;
        return b.w(m3, this);
      }, m2.subtract = function(t2, e2) {
        return this.add(-1 * t2, e2);
      }, m2.format = function(t2) {
        var e2 = this, n2 = this.$locale();
        if (!this.isValid())
          return n2.invalidDate || l;
        var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i2 = b.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, c2 = n2.months, f2 = n2.meridiem, h3 = function(t3, n3, i3, s3) {
          return t3 && (t3[n3] || t3(e2, r2)) || i3[n3].slice(0, s3);
        }, d2 = function(t3) {
          return b.s(s2 % 12 || 12, t3, "0");
        }, $2 = f2 || function(t3, e3, n3) {
          var r3 = t3 < 12 ? "AM" : "PM";
          return n3 ? r3.toLowerCase() : r3;
        };
        return r2.replace(y, function(t3, r3) {
          return r3 || function(t4) {
            switch (t4) {
              case "YY":
                return String(e2.$y).slice(-2);
              case "YYYY":
                return b.s(e2.$y, 4, "0");
              case "M":
                return a2 + 1;
              case "MM":
                return b.s(a2 + 1, 2, "0");
              case "MMM":
                return h3(n2.monthsShort, a2, c2, 3);
              case "MMMM":
                return h3(c2, a2);
              case "D":
                return e2.$D;
              case "DD":
                return b.s(e2.$D, 2, "0");
              case "d":
                return String(e2.$W);
              case "dd":
                return h3(n2.weekdaysMin, e2.$W, o2, 2);
              case "ddd":
                return h3(n2.weekdaysShort, e2.$W, o2, 3);
              case "dddd":
                return o2[e2.$W];
              case "H":
                return String(s2);
              case "HH":
                return b.s(s2, 2, "0");
              case "h":
                return d2(1);
              case "hh":
                return d2(2);
              case "a":
                return $2(s2, u2, true);
              case "A":
                return $2(s2, u2, false);
              case "m":
                return String(u2);
              case "mm":
                return b.s(u2, 2, "0");
              case "s":
                return String(e2.$s);
              case "ss":
                return b.s(e2.$s, 2, "0");
              case "SSS":
                return b.s(e2.$ms, 3, "0");
              case "Z":
                return i2;
            }
            return null;
          }(t3) || i2.replace(":", "");
        });
      }, m2.utcOffset = function() {
        return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
      }, m2.diff = function(r2, d2, l2) {
        var $2, y2 = this, M3 = b.p(d2), m3 = O(r2), v2 = (m3.utcOffset() - this.utcOffset()) * e, g2 = this - m3, D2 = function() {
          return b.m(y2, m3);
        };
        switch (M3) {
          case h2:
            $2 = D2() / 12;
            break;
          case c:
            $2 = D2();
            break;
          case f:
            $2 = D2() / 3;
            break;
          case o:
            $2 = (g2 - v2) / 6048e5;
            break;
          case a:
            $2 = (g2 - v2) / 864e5;
            break;
          case u:
            $2 = g2 / n;
            break;
          case s:
            $2 = g2 / e;
            break;
          case i:
            $2 = g2 / t;
            break;
          default:
            $2 = g2;
        }
        return l2 ? $2 : b.a($2);
      }, m2.daysInMonth = function() {
        return this.endOf(c).$D;
      }, m2.$locale = function() {
        return D[this.$L];
      }, m2.locale = function(t2, e2) {
        if (!t2)
          return this.$L;
        var n2 = this.clone(), r2 = w(t2, e2, true);
        return r2 && (n2.$L = r2), n2;
      }, m2.clone = function() {
        return b.w(this.$d, this);
      }, m2.toDate = function() {
        return new Date(this.valueOf());
      }, m2.toJSON = function() {
        return this.isValid() ? this.toISOString() : null;
      }, m2.toISOString = function() {
        return this.$d.toISOString();
      }, m2.toString = function() {
        return this.$d.toUTCString();
      }, M2;
    }(), k = _.prototype;
    return O.prototype = k, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", c], ["$y", h2], ["$D", d]].forEach(function(t2) {
      k[t2[1]] = function(e2) {
        return this.$g(e2, t2[0], t2[1]);
      };
    }), O.extend = function(t2, e2) {
      return t2.$i || (t2(e2, _, O), t2.$i = true), O;
    }, O.locale = w, O.isDayjs = S, O.unix = function(t2) {
      return O(1e3 * t2);
    }, O.en = D[g], O.Ls = D, O.p = {}, O;
  });
})(dayjs_min);
var dayjs = dayjs_min.exports;
var customParseFormat = { exports: {} };
(function(module, exports) {
  !function(e, t) {
    module.exports = t();
  }(commonjsGlobal, function() {
    var e = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" }, t = /(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|Q|YYYY|YY?|ww?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g, n = /\d/, r = /\d\d/, i = /\d\d?/, o = /\d*[^-_:/,()\s\d]+/, s = {}, a = function(e2) {
      return (e2 = +e2) + (e2 > 68 ? 1900 : 2e3);
    };
    var f = function(e2) {
      return function(t2) {
        this[e2] = +t2;
      };
    }, h2 = [/[+-]\d\d:?(\d\d)?|Z/, function(e2) {
      (this.zone || (this.zone = {})).offset = function(e3) {
        if (!e3)
          return 0;
        if ("Z" === e3)
          return 0;
        var t2 = e3.match(/([+-]|\d\d)/g), n2 = 60 * t2[1] + (+t2[2] || 0);
        return 0 === n2 ? 0 : "+" === t2[0] ? -n2 : n2;
      }(e2);
    }], u = function(e2) {
      var t2 = s[e2];
      return t2 && (t2.indexOf ? t2 : t2.s.concat(t2.f));
    }, d = function(e2, t2) {
      var n2, r2 = s.meridiem;
      if (r2) {
        for (var i2 = 1; i2 <= 24; i2 += 1)
          if (e2.indexOf(r2(i2, 0, t2)) > -1) {
            n2 = i2 > 12;
            break;
          }
      } else
        n2 = e2 === (t2 ? "pm" : "PM");
      return n2;
    }, c = { A: [o, function(e2) {
      this.afternoon = d(e2, false);
    }], a: [o, function(e2) {
      this.afternoon = d(e2, true);
    }], Q: [n, function(e2) {
      this.month = 3 * (e2 - 1) + 1;
    }], S: [n, function(e2) {
      this.milliseconds = 100 * +e2;
    }], SS: [r, function(e2) {
      this.milliseconds = 10 * +e2;
    }], SSS: [/\d{3}/, function(e2) {
      this.milliseconds = +e2;
    }], s: [i, f("seconds")], ss: [i, f("seconds")], m: [i, f("minutes")], mm: [i, f("minutes")], H: [i, f("hours")], h: [i, f("hours")], HH: [i, f("hours")], hh: [i, f("hours")], D: [i, f("day")], DD: [r, f("day")], Do: [o, function(e2) {
      var t2 = s.ordinal, n2 = e2.match(/\d+/);
      if (this.day = n2[0], t2)
        for (var r2 = 1; r2 <= 31; r2 += 1)
          t2(r2).replace(/\[|\]/g, "") === e2 && (this.day = r2);
    }], w: [i, f("week")], ww: [r, f("week")], M: [i, f("month")], MM: [r, f("month")], MMM: [o, function(e2) {
      var t2 = u("months"), n2 = (u("monthsShort") || t2.map(function(e3) {
        return e3.slice(0, 3);
      })).indexOf(e2) + 1;
      if (n2 < 1)
        throw new Error();
      this.month = n2 % 12 || n2;
    }], MMMM: [o, function(e2) {
      var t2 = u("months").indexOf(e2) + 1;
      if (t2 < 1)
        throw new Error();
      this.month = t2 % 12 || t2;
    }], Y: [/[+-]?\d+/, f("year")], YY: [r, function(e2) {
      this.year = a(e2);
    }], YYYY: [/\d{4}/, f("year")], Z: h2, ZZ: h2 };
    function l(n2) {
      var r2, i2;
      r2 = n2, i2 = s && s.formats;
      for (var o2 = (n2 = r2.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(t2, n3, r3) {
        var o3 = r3 && r3.toUpperCase();
        return n3 || i2[r3] || e[r3] || i2[o3].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(e2, t3, n4) {
          return t3 || n4.slice(1);
        });
      })).match(t), a2 = o2.length, f2 = 0; f2 < a2; f2 += 1) {
        var h3 = o2[f2], u2 = c[h3], d2 = u2 && u2[0], l2 = u2 && u2[1];
        o2[f2] = l2 ? { regex: d2, parser: l2 } : h3.replace(/^\[|\]$/g, "");
      }
      return function(e2) {
        for (var t2 = {}, n3 = 0, r3 = 0; n3 < a2; n3 += 1) {
          var i3 = o2[n3];
          if ("string" == typeof i3)
            r3 += i3.length;
          else {
            var s2 = i3.regex, f3 = i3.parser, h4 = e2.slice(r3), u3 = s2.exec(h4)[0];
            f3.call(t2, u3), e2 = e2.replace(u3, "");
          }
        }
        return function(e3) {
          var t3 = e3.afternoon;
          if (void 0 !== t3) {
            var n4 = e3.hours;
            t3 ? n4 < 12 && (e3.hours += 12) : 12 === n4 && (e3.hours = 0), delete e3.afternoon;
          }
        }(t2), t2;
      };
    }
    return function(e2, t2, n2) {
      n2.p.customParseFormat = true, e2 && e2.parseTwoDigitYear && (a = e2.parseTwoDigitYear);
      var r2 = t2.prototype, i2 = r2.parse;
      r2.parse = function(e3) {
        var t3 = e3.date, r3 = e3.utc, o2 = e3.args;
        this.$u = r3;
        var a2 = o2[1];
        if ("string" == typeof a2) {
          var f2 = true === o2[2], h3 = true === o2[3], u2 = f2 || h3, d2 = o2[2];
          h3 && (d2 = o2[2]), s = this.$locale(), !f2 && d2 && (s = n2.Ls[d2]), this.$d = function(e4, t4, n3, r4) {
            try {
              if (["x", "X"].indexOf(t4) > -1)
                return new Date(("X" === t4 ? 1e3 : 1) * e4);
              var i3 = l(t4)(e4), o3 = i3.year, s2 = i3.month, a3 = i3.day, f3 = i3.hours, h4 = i3.minutes, u3 = i3.seconds, d3 = i3.milliseconds, c3 = i3.zone, m2 = i3.week, M2 = new Date(), Y = a3 || (o3 || s2 ? 1 : M2.getDate()), p = o3 || M2.getFullYear(), v = 0;
              o3 && !s2 || (v = s2 > 0 ? s2 - 1 : M2.getMonth());
              var D, w = f3 || 0, g = h4 || 0, y = u3 || 0, L = d3 || 0;
              return c3 ? new Date(Date.UTC(p, v, Y, w, g, y, L + 60 * c3.offset * 1e3)) : n3 ? new Date(Date.UTC(p, v, Y, w, g, y, L)) : (D = new Date(p, v, Y, w, g, y, L), m2 && (D = r4(D).week(m2).toDate()), D);
            } catch (e5) {
              return new Date("");
            }
          }(t3, a2, r3, n2), this.init(), d2 && true !== d2 && (this.$L = this.locale(d2).$L), u2 && t3 != this.format(a2) && (this.$d = new Date("")), s = {};
        } else if (a2 instanceof Array)
          for (var c2 = a2.length, m = 1; m <= c2; m += 1) {
            o2[1] = a2[m - 1];
            var M = n2.apply(this, o2);
            if (M.isValid()) {
              this.$d = M.$d, this.$L = M.$L, this.init();
              break;
            }
            m === c2 && (this.$d = new Date(""));
          }
        else
          i2.call(this, e3);
      };
    };
  });
})(customParseFormat);
var customParseFormatPlugin = customParseFormat.exports;
var config = {
  defaultUserAgent: `WiseOldMan JS Client v${{}.npm_package_version}`,
  baseAPIUrl: "https://api.wiseoldman.net/v2"
};
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
dayjs.extend(customParseFormatPlugin);
function traverseTransform(input, transformation) {
  if (Array.isArray(input)) {
    return input.map((item) => traverseTransform(item, transformation));
  }
  if (input !== null && typeof input === "object") {
    return Object.fromEntries(Object.keys(input).map((key) => [key, traverseTransform(input[key], transformation)]));
  }
  return transformation(input);
}
function isValidISODate(input) {
  if (!input || typeof input !== "string")
    return false;
  return input.endsWith("Z") && dayjs(input.slice(0, -1), "YYYY-MM-DDTHH:mm:ss.SSS", true).isValid();
}
function transformDates(input) {
  return traverseTransform(input, (val) => isValidISODate(val) ? new Date(val) : val);
}
function handleError(status, path, data) {
  if (!data)
    return;
  if (status === 400) {
    throw new BadRequestError(path, data.message, data.data);
  }
  if (status === 403) {
    throw new ForbiddenError(path, data.message);
  }
  if (status === 404) {
    throw new NotFoundError(path, data.message);
  }
  if (status === 429) {
    throw new RateLimitError(path, data.message);
  }
  if (status === 500) {
    throw new InternalServerError(path, data.message);
  }
}
class BadRequestError extends Error {
  constructor(resource, message, data) {
    super(message);
    this.name = "BadRequestError";
    this.resource = resource;
    this.statusCode = 400;
    this.data = data;
  }
}
class ForbiddenError extends Error {
  constructor(resource, message) {
    super(message);
    this.name = "ForbiddenError";
    this.resource = resource;
    this.statusCode = 403;
  }
}
class NotFoundError extends Error {
  constructor(resource, message) {
    super(message);
    this.name = "NotFoundError";
    this.resource = resource;
    this.statusCode = 404;
  }
}
class RateLimitError extends Error {
  constructor(resource, message) {
    super(message);
    this.name = "RateLimitError";
    this.resource = resource;
    this.statusCode = 429;
  }
}
class InternalServerError extends Error {
  constructor(resource, message) {
    super(message);
    this.name = "InternalServerError";
    this.resource = resource;
    this.statusCode = 500;
  }
}
class BaseAPIClient {
  constructor(headers, baseUrl) {
    this.baseUrl = baseUrl;
    this.headers = Object.assign({ Accept: "application/json", "Content-Type": "application/json" }, headers);
  }
  buildParams(_a) {
    var params = __rest(_a, []);
    const builder = new URLSearchParams();
    Object.keys(params).filter((k) => params[k] !== void 0).forEach((k) => builder.set(k, params[k]));
    const query = builder.toString();
    return query ? `?${query}` : "";
  }
  fetch({ method, path, body, params }) {
    return __awaiter(this, void 0, void 0, function* () {
      const req = { method, body: void 0, headers: this.headers };
      let query = "";
      if (body) {
        req.body = JSON.stringify(body);
      }
      if (params) {
        query = this.buildParams(params);
      }
      return yield fetch(this.baseUrl + path + query, req);
    });
  }
  request({ method, path, body, params }) {
    return __awaiter(this, void 0, void 0, function* () {
      const res = yield this.fetch({ method, path, body, params });
      const data = yield res.json();
      if (res.ok) {
        return transformDates(data);
      }
      handleError(res.status, path, data);
    });
  }
  requestText({ method, path, body, params }) {
    return __awaiter(this, void 0, void 0, function* () {
      const res = yield this.fetch({ method, path, body, params });
      const text = yield res.text();
      if (res.ok) {
        return text;
      }
      handleError(res.status, path, JSON.parse(text));
    });
  }
  postRequest(path, body) {
    return __awaiter(this, void 0, void 0, function* () {
      return yield this.request({ method: "POST", path, body: body || {} });
    });
  }
  putRequest(path, body) {
    return __awaiter(this, void 0, void 0, function* () {
      return yield this.request({ method: "PUT", path, body: body || {} });
    });
  }
  deleteRequest(path, body) {
    return __awaiter(this, void 0, void 0, function* () {
      return yield this.request({ method: "DELETE", path, body: body || {} });
    });
  }
  getRequest(path, params) {
    return __awaiter(this, void 0, void 0, function* () {
      return yield this.request({ method: "GET", path, params });
    });
  }
  getText(path, params) {
    return __awaiter(this, void 0, void 0, function* () {
      return yield this.requestText({ method: "GET", path, params });
    });
  }
}
class DeltasClient extends BaseAPIClient {
  getDeltaLeaderboard(filter) {
    return this.getRequest("/deltas/leaderboard", filter);
  }
}
class GroupsClient extends BaseAPIClient {
  searchGroups(name, pagination) {
    return this.getRequest("/groups", Object.assign({ name }, pagination));
  }
  getGroupDetails(id) {
    return this.getRequest(`/groups/${id}`);
  }
  createGroup(payload) {
    return this.postRequest("/groups", payload);
  }
  editGroup(id, payload, verificationCode) {
    return this.putRequest(`/groups/${id}`, Object.assign(Object.assign({}, payload), { verificationCode }));
  }
  deleteGroup(id, verificationCode) {
    return this.deleteRequest(`/groups/${id}`, { verificationCode });
  }
  addMembers(id, members, verificationCode) {
    return this.postRequest(`/groups/${id}/members`, {
      verificationCode,
      members
    });
  }
  removeMembers(id, usernames, verificationCode) {
    return this.deleteRequest(`/groups/${id}/members`, {
      verificationCode,
      members: usernames
    });
  }
  changeRole(id, payload, verificationCode) {
    return this.putRequest(`/groups/${id}/role`, Object.assign(Object.assign({}, payload), { verificationCode }));
  }
  updateAll(id, verificationCode) {
    return this.postRequest(`/groups/${id}/update-all`, {
      verificationCode
    });
  }
  getGroupCompetitions(id, pagination) {
    return this.getRequest(`/groups/${id}/competitions`, Object.assign({}, pagination));
  }
  getGroupGains(id, filter, pagination) {
    return this.getRequest(`/groups/${id}/gained`, Object.assign(Object.assign({}, pagination), filter));
  }
  getGroupAchievements(id, pagination) {
    return this.getRequest(`/groups/${id}/achievements`, Object.assign({}, pagination));
  }
  getGroupRecords(id, filter, pagination) {
    return this.getRequest(`/groups/${id}/records`, Object.assign(Object.assign({}, pagination), filter));
  }
  getGroupHiscores(id, metric, pagination) {
    return this.getRequest(`/groups/${id}/hiscores`, Object.assign(Object.assign({}, pagination), { metric }));
  }
  getGroupNameChanges(id, pagination) {
    return this.getRequest(`/groups/${id}/name-changes`, Object.assign({}, pagination));
  }
  getGroupStatistics(id) {
    return this.getRequest(`/groups/${id}/statistics`);
  }
  getGroupActivity(id, pagination) {
    return this.getRequest(`/groups/${id}/activity`, Object.assign({}, pagination));
  }
  getMembersCSV(id) {
    return this.getText(`/groups/${id}/csv`);
  }
}
class PlayersClient extends BaseAPIClient {
  searchPlayers(partialUsername, pagination) {
    return this.getRequest("/players/search", Object.assign({ username: partialUsername }, pagination));
  }
  updatePlayer(username) {
    return this.postRequest(`/players/${username}`);
  }
  assertPlayerType(username) {
    return this.postRequest(`/players/${username}/assert-type`);
  }
  getPlayerDetails(username) {
    return this.getRequest(`/players/${username}`);
  }
  getPlayerDetailsById(id) {
    return this.getRequest(`/players/id/${id}`);
  }
  getPlayerAchievements(username) {
    return this.getRequest(`/players/${username}/achievements`);
  }
  getPlayerAchievementProgress(username) {
    return this.getRequest(`/players/${username}/achievements/progress`);
  }
  getPlayerCompetitions(username, filter, pagination) {
    return this.getRequest(`/players/${username}/competitions`, Object.assign(Object.assign({}, filter), pagination));
  }
  getPlayerCompetitionStandings(username, filter) {
    return this.getRequest(`/players/${username}/competitions/standings`, filter);
  }
  getPlayerGroups(username, pagination) {
    return this.getRequest(`/players/${username}/groups`, pagination);
  }
  getPlayerGains(username, options) {
    return this.getRequest(`/players/${username}/gained`, options);
  }
  getPlayerRecords(username, options) {
    return this.getRequest(`/players/${username}/records`, options);
  }
  getPlayerSnapshots(username, filter, pagination) {
    return this.getRequest(`/players/${username}/snapshots`, Object.assign(Object.assign({}, filter), pagination));
  }
  getPlayerSnapshotTimeline(username, metric, options) {
    return this.getRequest(`/players/${username}/snapshots/timeline`, Object.assign(Object.assign({}, options), { metric }));
  }
  getPlayerNames(username) {
    return this.getRequest(`/players/${username}/names`);
  }
  getPlayerArchives(username) {
    return this.getRequest(`/players/${username}/archives`);
  }
}
class RecordsClient extends BaseAPIClient {
  getRecordLeaderboard(filter) {
    return this.getRequest("/records/leaderboard", filter);
  }
}
const Skill = {
  OVERALL: "overall",
  ATTACK: "attack",
  DEFENCE: "defence",
  STRENGTH: "strength",
  HITPOINTS: "hitpoints",
  RANGED: "ranged",
  PRAYER: "prayer",
  MAGIC: "magic",
  COOKING: "cooking",
  WOODCUTTING: "woodcutting",
  FLETCHING: "fletching",
  FISHING: "fishing",
  FIREMAKING: "firemaking",
  CRAFTING: "crafting",
  SMITHING: "smithing",
  MINING: "mining",
  HERBLORE: "herblore",
  AGILITY: "agility",
  THIEVING: "thieving",
  SLAYER: "slayer",
  FARMING: "farming",
  RUNECRAFTING: "runecrafting",
  HUNTER: "hunter",
  CONSTRUCTION: "construction"
};
const Activity = {
  LEAGUE_POINTS: "league_points",
  BOUNTY_HUNTER_HUNTER: "bounty_hunter_hunter",
  BOUNTY_HUNTER_ROGUE: "bounty_hunter_rogue",
  CLUE_SCROLLS_ALL: "clue_scrolls_all",
  CLUE_SCROLLS_BEGINNER: "clue_scrolls_beginner",
  CLUE_SCROLLS_EASY: "clue_scrolls_easy",
  CLUE_SCROLLS_MEDIUM: "clue_scrolls_medium",
  CLUE_SCROLLS_HARD: "clue_scrolls_hard",
  CLUE_SCROLLS_ELITE: "clue_scrolls_elite",
  CLUE_SCROLLS_MASTER: "clue_scrolls_master",
  LAST_MAN_STANDING: "last_man_standing",
  PVP_ARENA: "pvp_arena",
  SOUL_WARS_ZEAL: "soul_wars_zeal",
  GUARDIANS_OF_THE_RIFT: "guardians_of_the_rift",
  COLOSSEUM_GLORY: "colosseum_glory"
};
const Boss = {
  ABYSSAL_SIRE: "abyssal_sire",
  ALCHEMICAL_HYDRA: "alchemical_hydra",
  AMOXLIATL: "amoxliatl",
  ARAXXOR: "araxxor",
  ARTIO: "artio",
  BARROWS_CHESTS: "barrows_chests",
  BRYOPHYTA: "bryophyta",
  CALLISTO: "callisto",
  CALVARION: "calvarion",
  CERBERUS: "cerberus",
  CHAMBERS_OF_XERIC: "chambers_of_xeric",
  CHAMBERS_OF_XERIC_CM: "chambers_of_xeric_challenge_mode",
  CHAOS_ELEMENTAL: "chaos_elemental",
  CHAOS_FANATIC: "chaos_fanatic",
  COMMANDER_ZILYANA: "commander_zilyana",
  CORPOREAL_BEAST: "corporeal_beast",
  CRAZY_ARCHAEOLOGIST: "crazy_archaeologist",
  DAGANNOTH_PRIME: "dagannoth_prime",
  DAGANNOTH_REX: "dagannoth_rex",
  DAGANNOTH_SUPREME: "dagannoth_supreme",
  DERANGED_ARCHAEOLOGIST: "deranged_archaeologist",
  DUKE_SUCELLUS: "duke_sucellus",
  GENERAL_GRAARDOR: "general_graardor",
  GIANT_MOLE: "giant_mole",
  GROTESQUE_GUARDIANS: "grotesque_guardians",
  HESPORI: "hespori",
  KALPHITE_QUEEN: "kalphite_queen",
  KING_BLACK_DRAGON: "king_black_dragon",
  KRAKEN: "kraken",
  KREEARRA: "kreearra",
  KRIL_TSUTSAROTH: "kril_tsutsaroth",
  LUNAR_CHESTS: "lunar_chests",
  MIMIC: "mimic",
  NEX: "nex",
  NIGHTMARE: "nightmare",
  PHOSANIS_NIGHTMARE: "phosanis_nightmare",
  OBOR: "obor",
  PHANTOM_MUSPAH: "phantom_muspah",
  SARACHNIS: "sarachnis",
  SCORPIA: "scorpia",
  SCURRIUS: "scurrius",
  SKOTIZO: "skotizo",
  SOL_HEREDIT: "sol_heredit",
  SPINDEL: "spindel",
  TEMPOROSS: "tempoross",
  THE_GAUNTLET: "the_gauntlet",
  THE_CORRUPTED_GAUNTLET: "the_corrupted_gauntlet",
  THE_HUEYCOATL: "the_hueycoatl",
  THE_LEVIATHAN: "the_leviathan",
  THE_WHISPERER: "the_whisperer",
  THEATRE_OF_BLOOD: "theatre_of_blood",
  THEATRE_OF_BLOOD_HARD_MODE: "theatre_of_blood_hard_mode",
  THERMONUCLEAR_SMOKE_DEVIL: "thermonuclear_smoke_devil",
  TOMBS_OF_AMASCUT: "tombs_of_amascut",
  TOMBS_OF_AMASCUT_EXPERT: "tombs_of_amascut_expert",
  TZKAL_ZUK: "tzkal_zuk",
  TZTOK_JAD: "tztok_jad",
  VARDORVIS: "vardorvis",
  VENENATIS: "venenatis",
  VETION: "vetion",
  VORKATH: "vorkath",
  WINTERTODT: "wintertodt",
  ZALCANO: "zalcano",
  ZULRAH: "zulrah"
};
const ComputedMetric = {
  EHP: "ehp",
  EHB: "ehb"
};
const Metric = Object.assign(Object.assign(Object.assign(Object.assign({}, Skill), Activity), Boss), ComputedMetric);
const Period = {
  FIVE_MIN: "five_min",
  DAY: "day",
  WEEK: "week",
  MONTH: "month",
  YEAR: "year"
};
const PlayerType = {
  UNKNOWN: "unknown",
  REGULAR: "regular",
  IRONMAN: "ironman",
  HARDCORE: "hardcore",
  ULTIMATE: "ultimate"
};
const PlayerBuild = {
  MAIN: "main",
  F2P: "f2p",
  F2P_LVL3: "f2p_lvl3",
  LVL3: "lvl3",
  ZERKER: "zerker",
  DEF1: "def1",
  HP10: "hp10"
};
const PlayerStatus = {
  ACTIVE: "active",
  UNRANKED: "unranked",
  FLAGGED: "flagged",
  ARCHIVED: "archived",
  BANNED: "banned"
};
const CompetitionType = {
  CLASSIC: "classic",
  TEAM: "team"
};
const GroupRole = {
  ACHIEVER: "achiever",
  ADAMANT: "adamant",
  ADEPT: "adept",
  ADMINISTRATOR: "administrator",
  ADMIRAL: "admiral",
  ADVENTURER: "adventurer",
  AIR: "air",
  ANCHOR: "anchor",
  APOTHECARY: "apothecary",
  ARCHER: "archer",
  ARMADYLEAN: "armadylean",
  ARTILLERY: "artillery",
  ARTISAN: "artisan",
  ASGARNIAN: "asgarnian",
  ASSASSIN: "assassin",
  ASSISTANT: "assistant",
  ASTRAL: "astral",
  ATHLETE: "athlete",
  ATTACKER: "attacker",
  BANDIT: "bandit",
  BANDOSIAN: "bandosian",
  BARBARIAN: "barbarian",
  BATTLEMAGE: "battlemage",
  BEAST: "beast",
  BERSERKER: "berserker",
  BLISTERWOOD: "blisterwood",
  BLOOD: "blood",
  BLUE: "blue",
  BOB: "bob",
  BODY: "body",
  BRASSICAN: "brassican",
  BRAWLER: "brawler",
  BRIGADIER: "brigadier",
  BRIGAND: "brigand",
  BRONZE: "bronze",
  BRUISER: "bruiser",
  BULWARK: "bulwark",
  BURGLAR: "burglar",
  BURNT: "burnt",
  CADET: "cadet",
  CAPTAIN: "captain",
  CARRY: "carry",
  CHAMPION: "champion",
  CHAOS: "chaos",
  CLERIC: "cleric",
  COLLECTOR: "collector",
  COLONEL: "colonel",
  COMMANDER: "commander",
  COMPETITOR: "competitor",
  COMPLETIONIST: "completionist",
  CONSTRUCTOR: "constructor",
  COOK: "cook",
  COORDINATOR: "coordinator",
  CORPORAL: "corporal",
  COSMIC: "cosmic",
  COUNCILLOR: "councillor",
  CRAFTER: "crafter",
  CREW: "crew",
  CRUSADER: "crusader",
  CUTPURSE: "cutpurse",
  DEATH: "death",
  DEFENDER: "defender",
  DEFILER: "defiler",
  DEPUTY_OWNER: "deputy_owner",
  DESTROYER: "destroyer",
  DIAMOND: "diamond",
  DISEASED: "diseased",
  DOCTOR: "doctor",
  DOGSBODY: "dogsbody",
  DRAGON: "dragon",
  DRAGONSTONE: "dragonstone",
  DRUID: "druid",
  DUELLIST: "duellist",
  EARTH: "earth",
  ELITE: "elite",
  EMERALD: "emerald",
  ENFORCER: "enforcer",
  EPIC: "epic",
  EXECUTIVE: "executive",
  EXPERT: "expert",
  EXPLORER: "explorer",
  FARMER: "farmer",
  FEEDER: "feeder",
  FIGHTER: "fighter",
  FIRE: "fire",
  FIREMAKER: "firemaker",
  FIRESTARTER: "firestarter",
  FISHER: "fisher",
  FLETCHER: "fletcher",
  FORAGER: "forager",
  FREMENNIK: "fremennik",
  GAMER: "gamer",
  GATHERER: "gatherer",
  GENERAL: "general",
  GNOME_CHILD: "gnome_child",
  GNOME_ELDER: "gnome_elder",
  GOBLIN: "goblin",
  GOLD: "gold",
  GOON: "goon",
  GREEN: "green",
  GREY: "grey",
  GUARDIAN: "guardian",
  GUTHIXIAN: "guthixian",
  HARPOON: "harpoon",
  HEALER: "healer",
  HELLCAT: "hellcat",
  HELPER: "helper",
  HERBOLOGIST: "herbologist",
  HERO: "hero",
  HOLY: "holy",
  HOARDER: "hoarder",
  HUNTER: "hunter",
  IGNITOR: "ignitor",
  ILLUSIONIST: "illusionist",
  IMP: "imp",
  INFANTRY: "infantry",
  INQUISITOR: "inquisitor",
  IRON: "iron",
  JADE: "jade",
  JUSTICIAR: "justiciar",
  KANDARIN: "kandarin",
  KARAMJAN: "karamjan",
  KHARIDIAN: "kharidian",
  KITTEN: "kitten",
  KNIGHT: "knight",
  LABOURER: "labourer",
  LAW: "law",
  LEADER: "leader",
  LEARNER: "learner",
  LEGACY: "legacy",
  LEGEND: "legend",
  LEGIONNAIRE: "legionnaire",
  LIEUTENANT: "lieutenant",
  LOOTER: "looter",
  LUMBERJACK: "lumberjack",
  MAGIC: "magic",
  MAGICIAN: "magician",
  MAJOR: "major",
  MAPLE: "maple",
  MARSHAL: "marshal",
  MASTER: "master",
  MAXED: "maxed",
  MEDIATOR: "mediator",
  MEDIC: "medic",
  MENTOR: "mentor",
  MEMBER: "member",
  MERCHANT: "merchant",
  MIND: "mind",
  MINER: "miner",
  MINION: "minion",
  MISTHALINIAN: "misthalinian",
  MITHRIL: "mithril",
  MODERATOR: "moderator",
  MONARCH: "monarch",
  MORYTANIAN: "morytanian",
  MYSTIC: "mystic",
  MYTH: "myth",
  NATURAL: "natural",
  NATURE: "nature",
  NECROMANCER: "necromancer",
  NINJA: "ninja",
  NOBLE: "noble",
  NOVICE: "novice",
  NURSE: "nurse",
  OAK: "oak",
  OFFICER: "officer",
  ONYX: "onyx",
  OPAL: "opal",
  ORACLE: "oracle",
  ORANGE: "orange",
  OWNER: "owner",
  PAGE: "page",
  PALADIN: "paladin",
  PAWN: "pawn",
  PILGRIM: "pilgrim",
  PINE: "pine",
  PINK: "pink",
  PREFECT: "prefect",
  PRIEST: "priest",
  PRIVATE: "private",
  PRODIGY: "prodigy",
  PROSELYTE: "proselyte",
  PROSPECTOR: "prospector",
  PROTECTOR: "protector",
  PURE: "pure",
  PURPLE: "purple",
  PYROMANCER: "pyromancer",
  QUESTER: "quester",
  RACER: "racer",
  RAIDER: "raider",
  RANGER: "ranger",
  RECORD_CHASER: "record_chaser",
  RECRUIT: "recruit",
  RECRUITER: "recruiter",
  RED_TOPAZ: "red_topaz",
  RED: "red",
  ROGUE: "rogue",
  RUBY: "ruby",
  RUNE: "rune",
  RUNECRAFTER: "runecrafter",
  SAGE: "sage",
  SAPPHIRE: "sapphire",
  SARADOMINIST: "saradominist",
  SAVIOUR: "saviour",
  SCAVENGER: "scavenger",
  SCHOLAR: "scholar",
  SCOURGE: "scourge",
  SCOUT: "scout",
  SCRIBE: "scribe",
  SEER: "seer",
  SENATOR: "senator",
  SENTRY: "sentry",
  SERENIST: "serenist",
  SERGEANT: "sergeant",
  SHAMAN: "shaman",
  SHERIFF: "sheriff",
  SHORT_GREEN_GUY: "short_green_guy",
  SKILLER: "skiller",
  SKULLED: "skulled",
  SLAYER: "slayer",
  SMITER: "smiter",
  SMITH: "smith",
  SMUGGLER: "smuggler",
  SNIPER: "sniper",
  SOUL: "soul",
  SPECIALIST: "specialist",
  SPEED_RUNNER: "speed_runner",
  SPELLCASTER: "spellcaster",
  SQUIRE: "squire",
  STAFF: "staff",
  STEEL: "steel",
  STRIDER: "strider",
  STRIKER: "striker",
  SUMMONER: "summoner",
  SUPERIOR: "superior",
  SUPERVISOR: "supervisor",
  TEACHER: "teacher",
  TEMPLAR: "templar",
  THERAPIST: "therapist",
  THIEF: "thief",
  TIRANNIAN: "tirannian",
  TRIALIST: "trialist",
  TRICKSTER: "trickster",
  TZKAL: "tzkal",
  TZTOK: "tztok",
  UNHOLY: "unholy",
  VAGRANT: "vagrant",
  VANGUARD: "vanguard",
  WALKER: "walker",
  WANDERER: "wanderer",
  WARDEN: "warden",
  WARLOCK: "warlock",
  WARRIOR: "warrior",
  WATER: "water",
  WILD: "wild",
  WILLOW: "willow",
  WILY: "wily",
  WINTUMBER: "wintumber",
  WITCH: "witch",
  WIZARD: "wizard",
  WORKER: "worker",
  WRATH: "wrath",
  XERICIAN: "xerician",
  YELLOW: "yellow",
  YEW: "yew",
  ZAMORAKIAN: "zamorakian",
  ZAROSIAN: "zarosian",
  ZEALOT: "zealot",
  ZENYTE: "zenyte"
};
const Country = {
  AD: "AD",
  AE: "AE",
  AF: "AF",
  AG: "AG",
  AI: "AI",
  AL: "AL",
  AM: "AM",
  AO: "AO",
  AQ: "AQ",
  AR: "AR",
  AS: "AS",
  AT: "AT",
  AU: "AU",
  AW: "AW",
  AX: "AX",
  AZ: "AZ",
  BA: "BA",
  BB: "BB",
  BD: "BD",
  BE: "BE",
  BF: "BF",
  BG: "BG",
  BH: "BH",
  BI: "BI",
  BJ: "BJ",
  BL: "BL",
  BM: "BM",
  BN: "BN",
  BO: "BO",
  BQ: "BQ",
  BR: "BR",
  BS: "BS",
  BT: "BT",
  BV: "BV",
  BW: "BW",
  BY: "BY",
  BZ: "BZ",
  CA: "CA",
  CC: "CC",
  CD: "CD",
  CF: "CF",
  CG: "CG",
  CH: "CH",
  CI: "CI",
  CK: "CK",
  CL: "CL",
  CM: "CM",
  CN: "CN",
  CO: "CO",
  CR: "CR",
  CU: "CU",
  CV: "CV",
  CW: "CW",
  CX: "CX",
  CY: "CY",
  CZ: "CZ",
  DE: "DE",
  DJ: "DJ",
  DK: "DK",
  DM: "DM",
  DO: "DO",
  DZ: "DZ",
  EC: "EC",
  EE: "EE",
  EG: "EG",
  EH: "EH",
  ER: "ER",
  ES: "ES",
  ET: "ET",
  FI: "FI",
  FJ: "FJ",
  FK: "FK",
  FM: "FM",
  FO: "FO",
  FR: "FR",
  GA: "GA",
  GB: "GB",
  GB_NIR: "GB_NIR",
  GB_SCT: "GB_SCT",
  GB_WLS: "GB_WLS",
  GD: "GD",
  GE: "GE",
  GF: "GF",
  GG: "GG",
  GH: "GH",
  GI: "GI",
  GL: "GL",
  GM: "GM",
  GN: "GN",
  GP: "GP",
  GQ: "GQ",
  GR: "GR",
  GS: "GS",
  GT: "GT",
  GU: "GU",
  GW: "GW",
  GY: "GY",
  HK: "HK",
  HM: "HM",
  HN: "HN",
  HR: "HR",
  HT: "HT",
  HU: "HU",
  ID: "ID",
  IE: "IE",
  IL: "IL",
  IM: "IM",
  IN: "IN",
  IO: "IO",
  IQ: "IQ",
  IR: "IR",
  IS: "IS",
  IT: "IT",
  JE: "JE",
  JM: "JM",
  JO: "JO",
  JP: "JP",
  KE: "KE",
  KG: "KG",
  KH: "KH",
  KI: "KI",
  KM: "KM",
  KN: "KN",
  KP: "KP",
  KR: "KR",
  KW: "KW",
  KY: "KY",
  KZ: "KZ",
  LA: "LA",
  LB: "LB",
  LC: "LC",
  LI: "LI",
  LK: "LK",
  LR: "LR",
  LS: "LS",
  LT: "LT",
  LU: "LU",
  LV: "LV",
  LY: "LY",
  MA: "MA",
  MC: "MC",
  MD: "MD",
  ME: "ME",
  MF: "MF",
  MG: "MG",
  MH: "MH",
  MK: "MK",
  ML: "ML",
  MM: "MM",
  MN: "MN",
  MO: "MO",
  MP: "MP",
  MQ: "MQ",
  MR: "MR",
  MS: "MS",
  MT: "MT",
  MU: "MU",
  MV: "MV",
  MW: "MW",
  MX: "MX",
  MY: "MY",
  MZ: "MZ",
  NA: "NA",
  NC: "NC",
  NE: "NE",
  NF: "NF",
  NG: "NG",
  NI: "NI",
  NL: "NL",
  NO: "NO",
  NP: "NP",
  NR: "NR",
  NU: "NU",
  NZ: "NZ",
  OM: "OM",
  PA: "PA",
  PE: "PE",
  PF: "PF",
  PG: "PG",
  PH: "PH",
  PK: "PK",
  PL: "PL",
  PM: "PM",
  PN: "PN",
  PR: "PR",
  PS: "PS",
  PT: "PT",
  PW: "PW",
  PY: "PY",
  QA: "QA",
  RE: "RE",
  RO: "RO",
  RS: "RS",
  RU: "RU",
  RW: "RW",
  SA: "SA",
  SB: "SB",
  SC: "SC",
  SD: "SD",
  SE: "SE",
  SG: "SG",
  SH: "SH",
  SI: "SI",
  SJ: "SJ",
  SK: "SK",
  SL: "SL",
  SM: "SM",
  SN: "SN",
  SO: "SO",
  SR: "SR",
  SS: "SS",
  ST: "ST",
  SV: "SV",
  SX: "SX",
  SY: "SY",
  SZ: "SZ",
  TC: "TC",
  TD: "TD",
  TF: "TF",
  TG: "TG",
  TH: "TH",
  TJ: "TJ",
  TK: "TK",
  TL: "TL",
  TM: "TM",
  TN: "TN",
  TO: "TO",
  TR: "TR",
  TT: "TT",
  TV: "TV",
  TW: "TW",
  TZ: "TZ",
  UA: "UA",
  UG: "UG",
  UM: "UM",
  US: "US",
  UY: "UY",
  UZ: "UZ",
  VA: "VA",
  VC: "VC",
  VE: "VE",
  VG: "VG",
  VI: "VI",
  VN: "VN",
  VU: "VU",
  WF: "WF",
  WS: "WS",
  YE: "YE",
  YT: "YT",
  ZA: "ZA",
  ZM: "ZM",
  ZW: "ZW"
};
var CompetitionStatus;
(function(CompetitionStatus2) {
  CompetitionStatus2["UPCOMING"] = "upcoming";
  CompetitionStatus2["ONGOING"] = "ongoing";
  CompetitionStatus2["FINISHED"] = "finished";
})(CompetitionStatus || (CompetitionStatus = {}));
var CompetitionCSVTableType;
(function(CompetitionCSVTableType2) {
  CompetitionCSVTableType2["TEAM"] = "team";
  CompetitionCSVTableType2["TEAMS"] = "teams";
  CompetitionCSVTableType2["PARTICIPANTS"] = "participants";
})(CompetitionCSVTableType || (CompetitionCSVTableType = {}));
({
  [CompetitionType.CLASSIC]: { name: "Classic" },
  [CompetitionType.TEAM]: { name: "Team" }
});
({
  [CompetitionStatus.UPCOMING]: { name: "Upcoming" },
  [CompetitionStatus.ONGOING]: { name: "Ongoing" },
  [CompetitionStatus.FINISHED]: { name: "Finished" }
});
Object.values(CompetitionType);
Object.values(CompetitionStatus);
({
  [Country.AD]: { code: "AD", name: "Andorra" },
  [Country.AE]: { code: "AE", name: "United Arab Emirates" },
  [Country.AF]: { code: "AF", name: "Afghanistan" },
  [Country.AG]: { code: "AG", name: "Antigua and Barbuda" },
  [Country.AI]: { code: "AI", name: "Anguilla" },
  [Country.AL]: { code: "AL", name: "Albania" },
  [Country.AM]: { code: "AM", name: "Armenia" },
  [Country.AO]: { code: "AO", name: "Angola" },
  [Country.AQ]: { code: "AQ", name: "Antarctica" },
  [Country.AR]: { code: "AR", name: "Argentina" },
  [Country.AS]: { code: "AS", name: "American Samoa" },
  [Country.AT]: { code: "AT", name: "Austria" },
  [Country.AU]: { code: "AU", name: "Australia" },
  [Country.AW]: { code: "AW", name: "Aruba" },
  [Country.AX]: { code: "AX", name: "\xC5land Islands" },
  [Country.AZ]: { code: "AZ", name: "Azerbaijan" },
  [Country.BA]: { code: "BA", name: "Bosnia and Herzegovina" },
  [Country.BB]: { code: "BB", name: "Barbados" },
  [Country.BD]: { code: "BD", name: "Bangladesh" },
  [Country.BE]: { code: "BE", name: "Belgium" },
  [Country.BF]: { code: "BF", name: "Burkina Faso" },
  [Country.BG]: { code: "BG", name: "Bulgaria" },
  [Country.BH]: { code: "BH", name: "Bahrain" },
  [Country.BI]: { code: "BI", name: "Burundi" },
  [Country.BJ]: { code: "BJ", name: "Benin" },
  [Country.BL]: { code: "BL", name: "Saint Barth\xE9lemy" },
  [Country.BM]: { code: "BM", name: "Bermuda" },
  [Country.BN]: { code: "BN", name: "Brunei Darussalam" },
  [Country.BO]: { code: "BO", name: "Bolivia" },
  [Country.BQ]: { code: "BQ", name: "Bonaire" },
  [Country.BR]: { code: "BR", name: "Brazil" },
  [Country.BS]: { code: "BS", name: "Bahamas" },
  [Country.BT]: { code: "BT", name: "Bhutan" },
  [Country.BV]: { code: "BV", name: "Bouvet Island" },
  [Country.BW]: { code: "BW", name: "Botswana" },
  [Country.BY]: { code: "BY", name: "Belarus" },
  [Country.BZ]: { code: "BZ", name: "Belize" },
  [Country.CA]: { code: "CA", name: "Canada" },
  [Country.CC]: { code: "CC", name: "Cocos (Keeling) Islands" },
  [Country.CD]: { code: "CD", name: "Congo" },
  [Country.CF]: { code: "CF", name: "Central African Republic" },
  [Country.CG]: { code: "CG", name: "Congo" },
  [Country.CH]: { code: "CH", name: "Switzerland" },
  [Country.CI]: { code: "CI", name: "C\xF4te d'Ivoire" },
  [Country.CK]: { code: "CK", name: "Cook Islands" },
  [Country.CL]: { code: "CL", name: "Chile" },
  [Country.CM]: { code: "CM", name: "Cameroon" },
  [Country.CN]: { code: "CN", name: "China" },
  [Country.CO]: { code: "CO", name: "Colombia" },
  [Country.CR]: { code: "CR", name: "Costa Rica" },
  [Country.CU]: { code: "CU", name: "Cuba" },
  [Country.CV]: { code: "CV", name: "Cabo Verde" },
  [Country.CW]: { code: "CW", name: "Cura\xE7ao" },
  [Country.CX]: { code: "CX", name: "Christmas Island" },
  [Country.CY]: { code: "CY", name: "Cyprus" },
  [Country.CZ]: { code: "CZ", name: "Czechia" },
  [Country.DE]: { code: "DE", name: "Germany" },
  [Country.DJ]: { code: "DJ", name: "Djibouti" },
  [Country.DK]: { code: "DK", name: "Denmark" },
  [Country.DM]: { code: "DM", name: "Dominica" },
  [Country.DO]: { code: "DO", name: "Dominican Republic" },
  [Country.DZ]: { code: "DZ", name: "Algeria" },
  [Country.EC]: { code: "EC", name: "Ecuador" },
  [Country.EE]: { code: "EE", name: "Estonia" },
  [Country.EG]: { code: "EG", name: "Egypt" },
  [Country.EH]: { code: "EH", name: "Western Sahara" },
  [Country.ER]: { code: "ER", name: "Eritrea" },
  [Country.ES]: { code: "ES", name: "Spain" },
  [Country.ET]: { code: "ET", name: "Ethiopia" },
  [Country.FI]: { code: "FI", name: "Finland" },
  [Country.FJ]: { code: "FJ", name: "Fiji" },
  [Country.FK]: { code: "FK", name: "Falkland Islands (Malvinas)" },
  [Country.FM]: { code: "FM", name: "Micronesia (Federated States of)" },
  [Country.FO]: { code: "FO", name: "Faroe Islands" },
  [Country.FR]: { code: "FR", name: "France" },
  [Country.GA]: { code: "GA", name: "Gabon" },
  [Country.GB]: { code: "GB", name: "United Kingdom" },
  [Country.GB_NIR]: { code: "GB_NIR", name: "Northen Ireland" },
  [Country.GB_SCT]: { code: "GB_SCT", name: "Scotland" },
  [Country.GB_WLS]: { code: "GB_WLS", name: "Wales" },
  [Country.GD]: { code: "GD", name: "Grenada" },
  [Country.GE]: { code: "GE", name: "Georgia" },
  [Country.GF]: { code: "GF", name: "French Guiana" },
  [Country.GG]: { code: "GG", name: "Guernsey" },
  [Country.GH]: { code: "GH", name: "Ghana" },
  [Country.GI]: { code: "GI", name: "Gibraltar" },
  [Country.GL]: { code: "GL", name: "Greenland" },
  [Country.GM]: { code: "GM", name: "Gambia" },
  [Country.GN]: { code: "GN", name: "Guinea" },
  [Country.GP]: { code: "GP", name: "Guadeloupe" },
  [Country.GQ]: { code: "GQ", name: "Equatorial Guinea" },
  [Country.GR]: { code: "GR", name: "Greece" },
  [Country.GS]: { code: "GS", name: "South Georgia and the South Sandwich Islands" },
  [Country.GT]: { code: "GT", name: "Guatemala" },
  [Country.GU]: { code: "GU", name: "Guam" },
  [Country.GW]: { code: "GW", name: "Guinea-Bissau" },
  [Country.GY]: { code: "GY", name: "Guyana" },
  [Country.HK]: { code: "HK", name: "Hong Kong" },
  [Country.HM]: { code: "HM", name: "Heard Island and McDonald Islands" },
  [Country.HN]: { code: "HN", name: "Honduras" },
  [Country.HR]: { code: "HR", name: "Croatia" },
  [Country.HT]: { code: "HT", name: "Haiti" },
  [Country.HU]: { code: "HU", name: "Hungary" },
  [Country.ID]: { code: "ID", name: "Indonesia" },
  [Country.IE]: { code: "IE", name: "Ireland" },
  [Country.IL]: { code: "IL", name: "Israel" },
  [Country.IM]: { code: "IM", name: "Isle of Man" },
  [Country.IN]: { code: "IN", name: "India" },
  [Country.IO]: { code: "IO", name: "British Indian Ocean Territory" },
  [Country.IQ]: { code: "IQ", name: "Iraq" },
  [Country.IR]: { code: "IR", name: "Iran (Islamic Republic of)" },
  [Country.IS]: { code: "IS", name: "Iceland" },
  [Country.IT]: { code: "IT", name: "Italy" },
  [Country.JE]: { code: "JE", name: "Jersey" },
  [Country.JM]: { code: "JM", name: "Jamaica" },
  [Country.JO]: { code: "JO", name: "Jordan" },
  [Country.JP]: { code: "JP", name: "Japan" },
  [Country.KE]: { code: "KE", name: "Kenya" },
  [Country.KG]: { code: "KG", name: "Kyrgyzstan" },
  [Country.KH]: { code: "KH", name: "Cambodia" },
  [Country.KI]: { code: "KI", name: "Kiribati" },
  [Country.KM]: { code: "KM", name: "Comoros" },
  [Country.KN]: { code: "KN", name: "Saint Kitts and Nevis" },
  [Country.KP]: { code: "KP", name: "Korea (Democratic People's Republic of)" },
  [Country.KR]: { code: "KR", name: "Korea" },
  [Country.KW]: { code: "KW", name: "Kuwait" },
  [Country.KY]: { code: "KY", name: "Cayman Islands" },
  [Country.KZ]: { code: "KZ", name: "Kazakhstan" },
  [Country.LA]: { code: "LA", name: "Lao People's Democratic Republic" },
  [Country.LB]: { code: "LB", name: "Lebanon" },
  [Country.LC]: { code: "LC", name: "Saint Lucia" },
  [Country.LI]: { code: "LI", name: "Liechtenstein" },
  [Country.LK]: { code: "LK", name: "Sri Lanka" },
  [Country.LR]: { code: "LR", name: "Liberia" },
  [Country.LS]: { code: "LS", name: "Lesotho" },
  [Country.LT]: { code: "LT", name: "Lithuania" },
  [Country.LU]: { code: "LU", name: "Luxembourg" },
  [Country.LV]: { code: "LV", name: "Latvia" },
  [Country.LY]: { code: "LY", name: "Libya" },
  [Country.MA]: { code: "MA", name: "Morocco" },
  [Country.MC]: { code: "MC", name: "Monaco" },
  [Country.MD]: { code: "MD", name: "Moldova" },
  [Country.ME]: { code: "ME", name: "Montenegro" },
  [Country.MF]: { code: "MF", name: "Saint Martin (French part)" },
  [Country.MG]: { code: "MG", name: "Madagascar" },
  [Country.MH]: { code: "MH", name: "Marshall Islands" },
  [Country.MK]: { code: "MK", name: "North Macedonia" },
  [Country.ML]: { code: "ML", name: "Mali" },
  [Country.MM]: { code: "MM", name: "Myanmar" },
  [Country.MN]: { code: "MN", name: "Mongolia" },
  [Country.MO]: { code: "MO", name: "Macao" },
  [Country.MP]: { code: "MP", name: "Northern Mariana Islands" },
  [Country.MQ]: { code: "MQ", name: "Martinique" },
  [Country.MR]: { code: "MR", name: "Mauritania" },
  [Country.MS]: { code: "MS", name: "Montserrat" },
  [Country.MT]: { code: "MT", name: "Malta" },
  [Country.MU]: { code: "MU", name: "Mauritius" },
  [Country.MV]: { code: "MV", name: "Maldives" },
  [Country.MW]: { code: "MW", name: "Malawi" },
  [Country.MX]: { code: "MX", name: "Mexico" },
  [Country.MY]: { code: "MY", name: "Malaysia" },
  [Country.MZ]: { code: "MZ", name: "Mozambique" },
  [Country.NA]: { code: "NA", name: "Namibia" },
  [Country.NC]: { code: "NC", name: "New Caledonia" },
  [Country.NE]: { code: "NE", name: "Niger" },
  [Country.NF]: { code: "NF", name: "Norfolk Island" },
  [Country.NG]: { code: "NG", name: "Nigeria" },
  [Country.NI]: { code: "NI", name: "Nicaragua" },
  [Country.NL]: { code: "NL", name: "Netherlands" },
  [Country.NO]: { code: "NO", name: "Norway" },
  [Country.NP]: { code: "NP", name: "Nepal" },
  [Country.NR]: { code: "NR", name: "Nauru" },
  [Country.NU]: { code: "NU", name: "Niue" },
  [Country.NZ]: { code: "NZ", name: "New Zealand" },
  [Country.OM]: { code: "OM", name: "Oman" },
  [Country.PA]: { code: "PA", name: "Panama" },
  [Country.PE]: { code: "PE", name: "Peru" },
  [Country.PF]: { code: "PF", name: "French Polynesia" },
  [Country.PG]: { code: "PG", name: "Papua New Guinea" },
  [Country.PH]: { code: "PH", name: "Philippines" },
  [Country.PK]: { code: "PK", name: "Pakistan" },
  [Country.PL]: { code: "PL", name: "Poland" },
  [Country.PM]: { code: "PM", name: "Saint Pierre and Miquelon" },
  [Country.PN]: { code: "PN", name: "Pitcairn" },
  [Country.PR]: { code: "PR", name: "Puerto Rico" },
  [Country.PS]: { code: "PS", name: "Palestine" },
  [Country.PT]: { code: "PT", name: "Portugal" },
  [Country.PW]: { code: "PW", name: "Palau" },
  [Country.PY]: { code: "PY", name: "Paraguay" },
  [Country.QA]: { code: "QA", name: "Qatar" },
  [Country.RE]: { code: "RE", name: "R\xE9union" },
  [Country.RO]: { code: "RO", name: "Romania" },
  [Country.RS]: { code: "RS", name: "Serbia" },
  [Country.RU]: { code: "RU", name: "Russian Federation" },
  [Country.RW]: { code: "RW", name: "Rwanda" },
  [Country.SA]: { code: "SA", name: "Saudi Arabia" },
  [Country.SB]: { code: "SB", name: "Solomon Islands" },
  [Country.SC]: { code: "SC", name: "Seychelles" },
  [Country.SD]: { code: "SD", name: "Sudan" },
  [Country.SE]: { code: "SE", name: "Sweden" },
  [Country.SG]: { code: "SG", name: "Singapore" },
  [Country.SH]: { code: "SH", name: "Saint Helena" },
  [Country.SI]: { code: "SI", name: "Slovenia" },
  [Country.SJ]: { code: "SJ", name: "Svalbard and Jan Mayen" },
  [Country.SK]: { code: "SK", name: "Slovakia" },
  [Country.SL]: { code: "SL", name: "Sierra Leone" },
  [Country.SM]: { code: "SM", name: "San Marino" },
  [Country.SN]: { code: "SN", name: "Senegal" },
  [Country.SO]: { code: "SO", name: "Somalia" },
  [Country.SR]: { code: "SR", name: "Suriname" },
  [Country.SS]: { code: "SS", name: "South Sudan" },
  [Country.ST]: { code: "ST", name: "Sao Tome and Principe" },
  [Country.SV]: { code: "SV", name: "El Salvador" },
  [Country.SX]: { code: "SX", name: "Sint Maarten (Dutch part)" },
  [Country.SY]: { code: "SY", name: "Syrian Arab Republic" },
  [Country.SZ]: { code: "SZ", name: "Eswatini" },
  [Country.TC]: { code: "TC", name: "Turks and Caicos Islands" },
  [Country.TD]: { code: "TD", name: "Chad" },
  [Country.TF]: { code: "TF", name: "French Southern Territories" },
  [Country.TG]: { code: "TG", name: "Togo" },
  [Country.TH]: { code: "TH", name: "Thailand" },
  [Country.TJ]: { code: "TJ", name: "Tajikistan" },
  [Country.TK]: { code: "TK", name: "Tokelau" },
  [Country.TL]: { code: "TL", name: "Timor-Leste" },
  [Country.TM]: { code: "TM", name: "Turkmenistan" },
  [Country.TN]: { code: "TN", name: "Tunisia" },
  [Country.TO]: { code: "TO", name: "Tonga" },
  [Country.TR]: { code: "TR", name: "Turkey" },
  [Country.TT]: { code: "TT", name: "Trinidad and Tobago" },
  [Country.TV]: { code: "TV", name: "Tuvalu" },
  [Country.TW]: { code: "TW", name: "Taiwan" },
  [Country.TZ]: { code: "TZ", name: "Tanzania" },
  [Country.UA]: { code: "UA", name: "Ukraine" },
  [Country.UG]: { code: "UG", name: "Uganda" },
  [Country.UM]: { code: "UM", name: "United States Minor Outlying Islands" },
  [Country.US]: { code: "US", name: "United States of America" },
  [Country.UY]: { code: "UY", name: "Uruguay" },
  [Country.UZ]: { code: "UZ", name: "Uzbekistan" },
  [Country.VA]: { code: "VA", name: "Holy See" },
  [Country.VC]: { code: "VC", name: "Saint Vincent and the Grenadines" },
  [Country.VE]: { code: "VE", name: "Venezuela (Bolivarian Republic of)" },
  [Country.VG]: { code: "VG", name: "Virgin Islands (British)" },
  [Country.VI]: { code: "VI", name: "Virgin Islands (U.S.)" },
  [Country.VN]: { code: "VN", name: "Viet Nam" },
  [Country.VU]: { code: "VU", name: "Vanuatu" },
  [Country.WF]: { code: "WF", name: "Wallis and Futuna" },
  [Country.WS]: { code: "WS", name: "Samoa" },
  [Country.YE]: { code: "YE", name: "Yemen" },
  [Country.YT]: { code: "YT", name: "Mayotte" },
  [Country.ZA]: { code: "ZA", name: "South Africa" },
  [Country.ZM]: { code: "ZM", name: "Zambia" },
  [Country.ZW]: { code: "ZW", name: "Zimbabwe" }
});
Object.values(Country);
function mapValues(obj, callback) {
  const clone = {};
  Object.keys(obj).forEach((k) => {
    const key = k;
    clone[key] = callback(obj[key], key, obj);
  });
  return clone;
}
Object.values(GroupRole);
const PRIVELEGED_GROUP_ROLES = [
  GroupRole.ADMINISTRATOR,
  GroupRole.OWNER,
  GroupRole.LEADER,
  GroupRole.DEPUTY_OWNER,
  GroupRole.MODERATOR
];
mapValues({
  [GroupRole.ACHIEVER]: { name: "Achiever" },
  [GroupRole.ADAMANT]: { name: "Adamant" },
  [GroupRole.ADEPT]: { name: "Adept" },
  [GroupRole.ADMINISTRATOR]: { name: "Administrator" },
  [GroupRole.ADMIRAL]: { name: "Admiral" },
  [GroupRole.ADVENTURER]: { name: "Adventurer" },
  [GroupRole.AIR]: { name: "Air" },
  [GroupRole.ANCHOR]: { name: "Anchor" },
  [GroupRole.APOTHECARY]: { name: "Apothecary" },
  [GroupRole.ARCHER]: { name: "Archer" },
  [GroupRole.ARMADYLEAN]: { name: "Armadylean" },
  [GroupRole.ARTILLERY]: { name: "Artillery" },
  [GroupRole.ARTISAN]: { name: "Artisan" },
  [GroupRole.ASGARNIAN]: { name: "Asgarnian" },
  [GroupRole.ASSASSIN]: { name: "Assassin" },
  [GroupRole.ASSISTANT]: { name: "Assistant" },
  [GroupRole.ASTRAL]: { name: "Astral" },
  [GroupRole.ATHLETE]: { name: "Athlete" },
  [GroupRole.ATTACKER]: { name: "Attacker" },
  [GroupRole.BANDIT]: { name: "Bandit" },
  [GroupRole.BANDOSIAN]: { name: "Bandosian" },
  [GroupRole.BARBARIAN]: { name: "Barbarian" },
  [GroupRole.BATTLEMAGE]: { name: "Battlemage" },
  [GroupRole.BEAST]: { name: "Beast" },
  [GroupRole.BERSERKER]: { name: "Berserker" },
  [GroupRole.BLISTERWOOD]: { name: "Blisterwood" },
  [GroupRole.BLOOD]: { name: "Blood" },
  [GroupRole.BLUE]: { name: "Blue" },
  [GroupRole.BOB]: { name: "Bob" },
  [GroupRole.BODY]: { name: "Body" },
  [GroupRole.BRASSICAN]: { name: "Brassican" },
  [GroupRole.BRAWLER]: { name: "Brawler" },
  [GroupRole.BRIGADIER]: { name: "Brigadier" },
  [GroupRole.BRIGAND]: { name: "Brigand" },
  [GroupRole.BRONZE]: { name: "Bronze" },
  [GroupRole.BRUISER]: { name: "Bruiser" },
  [GroupRole.BULWARK]: { name: "Bulwark" },
  [GroupRole.BURGLAR]: { name: "Burglar" },
  [GroupRole.BURNT]: { name: "Burnt" },
  [GroupRole.CADET]: { name: "Cadet" },
  [GroupRole.CAPTAIN]: { name: "Captain" },
  [GroupRole.CARRY]: { name: "Carry" },
  [GroupRole.CHAMPION]: { name: "Champion" },
  [GroupRole.CHAOS]: { name: "Chaos" },
  [GroupRole.CLERIC]: { name: "Cleric" },
  [GroupRole.COLLECTOR]: { name: "Collector" },
  [GroupRole.COLONEL]: { name: "Colonel" },
  [GroupRole.COMMANDER]: { name: "Commander" },
  [GroupRole.COMPETITOR]: { name: "Competitor" },
  [GroupRole.COMPLETIONIST]: { name: "Completionist" },
  [GroupRole.CONSTRUCTOR]: { name: "Constructor" },
  [GroupRole.COOK]: { name: "Cook" },
  [GroupRole.COORDINATOR]: { name: "Coordinator" },
  [GroupRole.CORPORAL]: { name: "Corporal" },
  [GroupRole.COSMIC]: { name: "Cosmic" },
  [GroupRole.COUNCILLOR]: { name: "Councillor" },
  [GroupRole.CRAFTER]: { name: "Crafter" },
  [GroupRole.CREW]: { name: "Crew" },
  [GroupRole.CRUSADER]: { name: "Crusader" },
  [GroupRole.CUTPURSE]: { name: "Cutpurse" },
  [GroupRole.DEATH]: { name: "Death" },
  [GroupRole.DEFENDER]: { name: "Defender" },
  [GroupRole.DEFILER]: { name: "Defiler" },
  [GroupRole.DEPUTY_OWNER]: { name: "Deputy Owner" },
  [GroupRole.DESTROYER]: { name: "Destroyer" },
  [GroupRole.DIAMOND]: { name: "Diamond" },
  [GroupRole.DISEASED]: { name: "Diseased" },
  [GroupRole.DOCTOR]: { name: "Doctor" },
  [GroupRole.DOGSBODY]: { name: "Dogsbody" },
  [GroupRole.DRAGON]: { name: "Dragon" },
  [GroupRole.DRAGONSTONE]: { name: "Dragonstone" },
  [GroupRole.DRUID]: { name: "Druid" },
  [GroupRole.DUELLIST]: { name: "Duellist" },
  [GroupRole.EARTH]: { name: "Earth" },
  [GroupRole.ELITE]: { name: "Elite" },
  [GroupRole.EMERALD]: { name: "Emerald" },
  [GroupRole.ENFORCER]: { name: "Enforcer" },
  [GroupRole.EPIC]: { name: "Epic" },
  [GroupRole.EXECUTIVE]: { name: "Executive" },
  [GroupRole.EXPERT]: { name: "Expert" },
  [GroupRole.EXPLORER]: { name: "Explorer" },
  [GroupRole.FARMER]: { name: "Farmer" },
  [GroupRole.FEEDER]: { name: "Feeder" },
  [GroupRole.FIGHTER]: { name: "Fighter" },
  [GroupRole.FIRE]: { name: "Fire" },
  [GroupRole.FIREMAKER]: { name: "Firemaker" },
  [GroupRole.FIRESTARTER]: { name: "Firestarter" },
  [GroupRole.FISHER]: { name: "Fisher" },
  [GroupRole.FLETCHER]: { name: "Fletcher" },
  [GroupRole.FORAGER]: { name: "Forager" },
  [GroupRole.FREMENNIK]: { name: "Fremennik" },
  [GroupRole.GAMER]: { name: "Gamer" },
  [GroupRole.GATHERER]: { name: "Gatherer" },
  [GroupRole.GENERAL]: { name: "General" },
  [GroupRole.GNOME_CHILD]: { name: "Gnome Child" },
  [GroupRole.GNOME_ELDER]: { name: "Gnome Elder" },
  [GroupRole.GOBLIN]: { name: "Goblin" },
  [GroupRole.GOLD]: { name: "Gold" },
  [GroupRole.GOON]: { name: "Goon" },
  [GroupRole.GREEN]: { name: "Green" },
  [GroupRole.GREY]: { name: "Grey" },
  [GroupRole.GUARDIAN]: { name: "Guardian" },
  [GroupRole.GUTHIXIAN]: { name: "Guthixian" },
  [GroupRole.HARPOON]: { name: "Harpoon" },
  [GroupRole.HEALER]: { name: "Healer" },
  [GroupRole.HELLCAT]: { name: "Hellcat" },
  [GroupRole.HELPER]: { name: "Helper" },
  [GroupRole.HERBOLOGIST]: { name: "Herbologist" },
  [GroupRole.HERO]: { name: "Hero" },
  [GroupRole.HOLY]: { name: "Holy" },
  [GroupRole.HOARDER]: { name: "Hoarder" },
  [GroupRole.HUNTER]: { name: "Hunter" },
  [GroupRole.IGNITOR]: { name: "Ignitor" },
  [GroupRole.ILLUSIONIST]: { name: "Illusionist" },
  [GroupRole.IMP]: { name: "Imp" },
  [GroupRole.INFANTRY]: { name: "Infantry" },
  [GroupRole.INQUISITOR]: { name: "Inquisitor" },
  [GroupRole.IRON]: { name: "Iron" },
  [GroupRole.JADE]: { name: "Jade" },
  [GroupRole.JUSTICIAR]: { name: "Justiciar" },
  [GroupRole.KANDARIN]: { name: "Kandarin" },
  [GroupRole.KARAMJAN]: { name: "Karamjan" },
  [GroupRole.KHARIDIAN]: { name: "Kharidian" },
  [GroupRole.KITTEN]: { name: "Kitten" },
  [GroupRole.KNIGHT]: { name: "Knight" },
  [GroupRole.LABOURER]: { name: "Labourer" },
  [GroupRole.LAW]: { name: "Law" },
  [GroupRole.LEADER]: { name: "Leader" },
  [GroupRole.LEARNER]: { name: "Learner" },
  [GroupRole.LEGACY]: { name: "Legacy" },
  [GroupRole.LEGEND]: { name: "Legend" },
  [GroupRole.LEGIONNAIRE]: { name: "Legionnaire" },
  [GroupRole.LIEUTENANT]: { name: "Lieutenant" },
  [GroupRole.LOOTER]: { name: "Looter" },
  [GroupRole.LUMBERJACK]: { name: "Lumberjack" },
  [GroupRole.MAGIC]: { name: "Magic" },
  [GroupRole.MAGICIAN]: { name: "Magician" },
  [GroupRole.MAJOR]: { name: "Major" },
  [GroupRole.MAPLE]: { name: "Maple" },
  [GroupRole.MARSHAL]: { name: "Marshal" },
  [GroupRole.MASTER]: { name: "Master" },
  [GroupRole.MAXED]: { name: "Maxed" },
  [GroupRole.MEDIATOR]: { name: "Mediator" },
  [GroupRole.MEDIC]: { name: "Medic" },
  [GroupRole.MENTOR]: { name: "Mentor" },
  [GroupRole.MEMBER]: { name: "Member" },
  [GroupRole.MERCHANT]: { name: "Merchant" },
  [GroupRole.MIND]: { name: "Mind" },
  [GroupRole.MINER]: { name: "Miner" },
  [GroupRole.MINION]: { name: "Minion" },
  [GroupRole.MISTHALINIAN]: { name: "Misthalinian" },
  [GroupRole.MITHRIL]: { name: "Mithril" },
  [GroupRole.MODERATOR]: { name: "Moderator" },
  [GroupRole.MONARCH]: { name: "Monarch" },
  [GroupRole.MORYTANIAN]: { name: "Morytanian" },
  [GroupRole.MYSTIC]: { name: "Mystic" },
  [GroupRole.MYTH]: { name: "Myth" },
  [GroupRole.NATURAL]: { name: "Natural" },
  [GroupRole.NATURE]: { name: "Nature" },
  [GroupRole.NECROMANCER]: { name: "Necromancer" },
  [GroupRole.NINJA]: { name: "Ninja" },
  [GroupRole.NOBLE]: { name: "Noble" },
  [GroupRole.NOVICE]: { name: "Novice" },
  [GroupRole.NURSE]: { name: "Nurse" },
  [GroupRole.OAK]: { name: "Oak" },
  [GroupRole.OFFICER]: { name: "Officer" },
  [GroupRole.ONYX]: { name: "Onyx" },
  [GroupRole.OPAL]: { name: "Opal" },
  [GroupRole.ORACLE]: { name: "Oracle" },
  [GroupRole.ORANGE]: { name: "Orange" },
  [GroupRole.OWNER]: { name: "Owner" },
  [GroupRole.PAGE]: { name: "Page" },
  [GroupRole.PALADIN]: { name: "Paladin" },
  [GroupRole.PAWN]: { name: "Pawn" },
  [GroupRole.PILGRIM]: { name: "Pilgrim" },
  [GroupRole.PINE]: { name: "Pine" },
  [GroupRole.PINK]: { name: "Pink" },
  [GroupRole.PREFECT]: { name: "Prefect" },
  [GroupRole.PRIEST]: { name: "Priest" },
  [GroupRole.PRIVATE]: { name: "Private" },
  [GroupRole.PRODIGY]: { name: "Prodigy" },
  [GroupRole.PROSELYTE]: { name: "Proselyte" },
  [GroupRole.PROSPECTOR]: { name: "Prospector" },
  [GroupRole.PROTECTOR]: { name: "Protector" },
  [GroupRole.PURE]: { name: "Pure" },
  [GroupRole.PURPLE]: { name: "Purple" },
  [GroupRole.PYROMANCER]: { name: "Pyromancer" },
  [GroupRole.QUESTER]: { name: "Quester" },
  [GroupRole.RACER]: { name: "Racer" },
  [GroupRole.RAIDER]: { name: "Raider" },
  [GroupRole.RANGER]: { name: "Ranger" },
  [GroupRole.RECORD_CHASER]: { name: "Record-Chaser" },
  [GroupRole.RECRUIT]: { name: "Recruit" },
  [GroupRole.RECRUITER]: { name: "Recruiter" },
  [GroupRole.RED_TOPAZ]: { name: "Red Topaz" },
  [GroupRole.RED]: { name: "Red" },
  [GroupRole.ROGUE]: { name: "Rogue" },
  [GroupRole.RUBY]: { name: "Ruby" },
  [GroupRole.RUNE]: { name: "Rune" },
  [GroupRole.RUNECRAFTER]: { name: "Runecrafter" },
  [GroupRole.SAGE]: { name: "Sage" },
  [GroupRole.SAPPHIRE]: { name: "Sapphire" },
  [GroupRole.SARADOMINIST]: { name: "Saradominist" },
  [GroupRole.SAVIOUR]: { name: "Saviour" },
  [GroupRole.SCAVENGER]: { name: "Scavenger" },
  [GroupRole.SCHOLAR]: { name: "Scholar" },
  [GroupRole.SCOURGE]: { name: "Scourge" },
  [GroupRole.SCOUT]: { name: "Scout" },
  [GroupRole.SCRIBE]: { name: "Scribe" },
  [GroupRole.SEER]: { name: "Seer" },
  [GroupRole.SENATOR]: { name: "Senator" },
  [GroupRole.SENTRY]: { name: "Sentry" },
  [GroupRole.SERENIST]: { name: "Serenist" },
  [GroupRole.SERGEANT]: { name: "Sergeant" },
  [GroupRole.SHAMAN]: { name: "Shaman" },
  [GroupRole.SHERIFF]: { name: "Sheriff" },
  [GroupRole.SHORT_GREEN_GUY]: { name: "Short Green Guy" },
  [GroupRole.SKILLER]: { name: "Skiller" },
  [GroupRole.SKULLED]: { name: "Skulled" },
  [GroupRole.SLAYER]: { name: "Slayer" },
  [GroupRole.SMITER]: { name: "Smiter" },
  [GroupRole.SMITH]: { name: "Smith" },
  [GroupRole.SMUGGLER]: { name: "Smuggler" },
  [GroupRole.SNIPER]: { name: "Sniper" },
  [GroupRole.SOUL]: { name: "Soul" },
  [GroupRole.SPECIALIST]: { name: "Specialist" },
  [GroupRole.SPEED_RUNNER]: { name: "Speed-Runner" },
  [GroupRole.SPELLCASTER]: { name: "Spellcaster" },
  [GroupRole.SQUIRE]: { name: "Squire" },
  [GroupRole.STAFF]: { name: "Staff" },
  [GroupRole.STEEL]: { name: "Steel" },
  [GroupRole.STRIDER]: { name: "Strider" },
  [GroupRole.STRIKER]: { name: "Striker" },
  [GroupRole.SUMMONER]: { name: "Summoner" },
  [GroupRole.SUPERIOR]: { name: "Superior" },
  [GroupRole.SUPERVISOR]: { name: "Supervisor" },
  [GroupRole.TEACHER]: { name: "Teacher" },
  [GroupRole.TEMPLAR]: { name: "Templar" },
  [GroupRole.THERAPIST]: { name: "Therapist" },
  [GroupRole.THIEF]: { name: "Thief" },
  [GroupRole.TIRANNIAN]: { name: "Tirannian" },
  [GroupRole.TRIALIST]: { name: "Trialist" },
  [GroupRole.TRICKSTER]: { name: "Trickster" },
  [GroupRole.TZKAL]: { name: "TzKal" },
  [GroupRole.TZTOK]: { name: "TzTok" },
  [GroupRole.UNHOLY]: { name: "Unholy" },
  [GroupRole.VAGRANT]: { name: "Vagrant" },
  [GroupRole.VANGUARD]: { name: "Vanguard" },
  [GroupRole.WALKER]: { name: "Walker" },
  [GroupRole.WANDERER]: { name: "Wanderer" },
  [GroupRole.WARDEN]: { name: "Warden" },
  [GroupRole.WARLOCK]: { name: "Warlock" },
  [GroupRole.WARRIOR]: { name: "Warrior" },
  [GroupRole.WATER]: { name: "Water" },
  [GroupRole.WILD]: { name: "Wild" },
  [GroupRole.WILLOW]: { name: "Willow" },
  [GroupRole.WILY]: { name: "Wily" },
  [GroupRole.WINTUMBER]: { name: "Wintumber" },
  [GroupRole.WITCH]: { name: "Witch" },
  [GroupRole.WIZARD]: { name: "Wizard" },
  [GroupRole.WORKER]: { name: "Worker" },
  [GroupRole.WRATH]: { name: "Wrath" },
  [GroupRole.XERICIAN]: { name: "Xerician" },
  [GroupRole.YELLOW]: { name: "Yellow" },
  [GroupRole.YEW]: { name: "Yew" },
  [GroupRole.ZAMORAKIAN]: { name: "Zamorakian" },
  [GroupRole.ZAROSIAN]: { name: "Zarosian" },
  [GroupRole.ZEALOT]: { name: "Zealot" },
  [GroupRole.ZENYTE]: { name: "Zenyte" }
}, (props, key) => Object.assign(Object.assign({}, props), { isPriveleged: PRIVELEGED_GROUP_ROLES.includes(key) }));
var MetricType;
(function(MetricType2) {
  MetricType2["SKILL"] = "skill";
  MetricType2["BOSS"] = "boss";
  MetricType2["ACTIVITY"] = "activity";
  MetricType2["COMPUTED"] = "computed";
})(MetricType || (MetricType = {}));
var MetricMeasure;
(function(MetricMeasure2) {
  MetricMeasure2["EXPERIENCE"] = "experience";
  MetricMeasure2["KILLS"] = "kills";
  MetricMeasure2["SCORE"] = "score";
  MetricMeasure2["VALUE"] = "value";
})(MetricMeasure || (MetricMeasure = {}));
const SkillProps = mapValues({
  [Skill.OVERALL]: { name: "Overall" },
  [Skill.ATTACK]: { name: "Attack", isCombat: true },
  [Skill.DEFENCE]: { name: "Defence", isCombat: true },
  [Skill.STRENGTH]: { name: "Strength", isCombat: true },
  [Skill.HITPOINTS]: { name: "Hitpoints", isCombat: true },
  [Skill.RANGED]: { name: "Ranged", isCombat: true },
  [Skill.PRAYER]: { name: "Prayer", isCombat: true },
  [Skill.MAGIC]: { name: "Magic", isCombat: true },
  [Skill.COOKING]: { name: "Cooking" },
  [Skill.WOODCUTTING]: { name: "Woodcutting" },
  [Skill.FLETCHING]: { name: "Fletching", isMembers: true },
  [Skill.FISHING]: { name: "Fishing" },
  [Skill.FIREMAKING]: { name: "Firemaking" },
  [Skill.CRAFTING]: { name: "Crafting" },
  [Skill.SMITHING]: { name: "Smithing" },
  [Skill.MINING]: { name: "Mining" },
  [Skill.HERBLORE]: { name: "Herblore", isMembers: true },
  [Skill.AGILITY]: { name: "Agility", isMembers: true },
  [Skill.THIEVING]: { name: "Thieving", isMembers: true },
  [Skill.SLAYER]: { name: "Slayer", isMembers: true },
  [Skill.FARMING]: { name: "Farming", isMembers: true },
  [Skill.RUNECRAFTING]: { name: "Runecrafting" },
  [Skill.HUNTER]: { name: "Hunter", isMembers: true },
  [Skill.CONSTRUCTION]: { name: "Construction", isMembers: true }
}, (props) => Object.assign(Object.assign({}, props), { type: MetricType.SKILL, measure: MetricMeasure.EXPERIENCE, isCombat: "isCombat" in props ? props.isCombat : false, isMembers: "isMembers" in props ? props.isMembers : false }));
const BossProps = mapValues({
  [Boss.ABYSSAL_SIRE]: { name: "Abyssal Sire" },
  [Boss.ALCHEMICAL_HYDRA]: { name: "Alchemical Hydra" },
  [Boss.AMOXLIATL]: { name: "Amoxliatl" },
  [Boss.ARAXXOR]: { name: "Araxxor" },
  [Boss.ARTIO]: { name: "Artio" },
  [Boss.BARROWS_CHESTS]: { name: "Barrows Chests" },
  [Boss.BRYOPHYTA]: { name: "Bryophyta", isMembers: false },
  [Boss.CALLISTO]: { name: "Callisto" },
  [Boss.CALVARION]: { name: "Calvar'ion" },
  [Boss.CERBERUS]: { name: "Cerberus" },
  [Boss.CHAMBERS_OF_XERIC]: { name: "Chambers Of Xeric" },
  [Boss.CHAMBERS_OF_XERIC_CM]: { name: "Chambers Of Xeric (CM)" },
  [Boss.CHAOS_ELEMENTAL]: { name: "Chaos Elemental" },
  [Boss.CHAOS_FANATIC]: { name: "Chaos Fanatic" },
  [Boss.COMMANDER_ZILYANA]: { name: "Commander Zilyana" },
  [Boss.CORPOREAL_BEAST]: { name: "Corporeal Beast" },
  [Boss.CRAZY_ARCHAEOLOGIST]: { name: "Crazy Archaeologist" },
  [Boss.DAGANNOTH_PRIME]: { name: "Dagannoth Prime" },
  [Boss.DAGANNOTH_REX]: { name: "Dagannoth Rex" },
  [Boss.DAGANNOTH_SUPREME]: { name: "Dagannoth Supreme" },
  [Boss.DERANGED_ARCHAEOLOGIST]: { name: "Deranged Archaeologist" },
  [Boss.DUKE_SUCELLUS]: { name: "Duke Sucellus" },
  [Boss.GENERAL_GRAARDOR]: { name: "General Graardor" },
  [Boss.GIANT_MOLE]: { name: "Giant Mole" },
  [Boss.GROTESQUE_GUARDIANS]: { name: "Grotesque Guardians" },
  [Boss.HESPORI]: { name: "Hespori" },
  [Boss.THE_HUEYCOATL]: { name: "The Hueycoatl" },
  [Boss.KALPHITE_QUEEN]: { name: "Kalphite Queen" },
  [Boss.KING_BLACK_DRAGON]: { name: "King Black Dragon" },
  [Boss.KRAKEN]: { name: "Kraken" },
  [Boss.KREEARRA]: { name: "Kree'Arra" },
  [Boss.KRIL_TSUTSAROTH]: { name: "K'ril Tsutsaroth" },
  [Boss.LUNAR_CHESTS]: { name: "Lunar Chests" },
  [Boss.MIMIC]: { name: "Mimic", minimumValue: 1 },
  [Boss.NEX]: { name: "Nex" },
  [Boss.NIGHTMARE]: { name: "Nightmare" },
  [Boss.PHOSANIS_NIGHTMARE]: { name: "Phosani's Nightmare" },
  [Boss.OBOR]: { name: "Obor", isMembers: false },
  [Boss.PHANTOM_MUSPAH]: { name: "Phantom Muspah" },
  [Boss.SARACHNIS]: { name: "Sarachnis" },
  [Boss.SCORPIA]: { name: "Scorpia" },
  [Boss.SCURRIUS]: { name: "Scurrius" },
  [Boss.SKOTIZO]: { name: "Skotizo" },
  [Boss.SOL_HEREDIT]: { name: "Sol Heredit" },
  [Boss.SPINDEL]: { name: "Spindel" },
  [Boss.TEMPOROSS]: { name: "Tempoross" },
  [Boss.THE_GAUNTLET]: { name: "The Gauntlet" },
  [Boss.THE_CORRUPTED_GAUNTLET]: { name: "The Corrupted Gauntlet" },
  [Boss.THE_LEVIATHAN]: { name: "The Leviathan" },
  [Boss.THE_WHISPERER]: { name: "The Whisperer" },
  [Boss.THEATRE_OF_BLOOD]: { name: "Theatre Of Blood" },
  [Boss.THEATRE_OF_BLOOD_HARD_MODE]: { name: "Theatre Of Blood (HM)" },
  [Boss.THERMONUCLEAR_SMOKE_DEVIL]: { name: "Thermonuclear Smoke Devil" },
  [Boss.TOMBS_OF_AMASCUT]: { name: "Tombs of Amascut" },
  [Boss.TOMBS_OF_AMASCUT_EXPERT]: { name: "Tombs of Amascut (Expert Mode)" },
  [Boss.TZKAL_ZUK]: { name: "TzKal-Zuk", minimumValue: 1 },
  [Boss.TZTOK_JAD]: { name: "TzTok-Jad" },
  [Boss.VARDORVIS]: { name: "Vardorvis" },
  [Boss.VENENATIS]: { name: "Venenatis" },
  [Boss.VETION]: { name: "Vet'ion" },
  [Boss.VORKATH]: { name: "Vorkath" },
  [Boss.WINTERTODT]: { name: "Wintertodt" },
  [Boss.ZALCANO]: { name: "Zalcano" },
  [Boss.ZULRAH]: { name: "Zulrah" }
}, (props) => Object.assign(Object.assign({}, props), { type: MetricType.BOSS, measure: MetricMeasure.KILLS, isMembers: "isMembers" in props ? props.isMembers : true, minimumValue: "minimumValue" in props ? props.minimumValue : 5 }));
const ActivityProps = mapValues({
  [Activity.LEAGUE_POINTS]: { name: "League Points", minimumValue: 100 },
  [Activity.BOUNTY_HUNTER_HUNTER]: { name: "Bounty Hunter (Hunter)", minimumValue: 2 },
  [Activity.BOUNTY_HUNTER_ROGUE]: { name: "Bounty Hunter (Rogue)", minimumValue: 2 },
  [Activity.CLUE_SCROLLS_ALL]: { name: "Clue Scrolls (All)" },
  [Activity.CLUE_SCROLLS_BEGINNER]: { name: "Clue Scrolls (Beginner)" },
  [Activity.CLUE_SCROLLS_EASY]: { name: "Clue Scrolls (Easy)" },
  [Activity.CLUE_SCROLLS_MEDIUM]: { name: "Clue Scrolls (Medium)" },
  [Activity.CLUE_SCROLLS_HARD]: { name: "Clue Scrolls (Hard)" },
  [Activity.CLUE_SCROLLS_ELITE]: { name: "Clue Scrolls (Elite)" },
  [Activity.CLUE_SCROLLS_MASTER]: { name: "Clue Scrolls (Master)" },
  [Activity.LAST_MAN_STANDING]: { name: "Last Man Standing", minimumValue: 500 },
  [Activity.PVP_ARENA]: { name: "PvP Arena", minimumValue: 2525 },
  [Activity.SOUL_WARS_ZEAL]: { name: "Soul Wars Zeal", minimumValue: 200 },
  [Activity.GUARDIANS_OF_THE_RIFT]: { name: "Guardians of the Rift", minimumValue: 2 },
  [Activity.COLOSSEUM_GLORY]: { name: "Colosseum Glory", minimumValue: 300 }
}, (props) => Object.assign(Object.assign({}, props), { type: MetricType.ACTIVITY, measure: MetricMeasure.SCORE, minimumValue: "minimumValue" in props ? props.minimumValue : 1 }));
const ComputedMetricProps = mapValues({
  [ComputedMetric.EHP]: { name: "EHP" },
  [ComputedMetric.EHB]: { name: "EHB" }
}, (props) => Object.assign(Object.assign({}, props), { type: MetricType.COMPUTED, measure: MetricMeasure.VALUE }));
const MetricProps = Object.assign(Object.assign(Object.assign(Object.assign({}, SkillProps), BossProps), ActivityProps), ComputedMetricProps);
Object.values(Metric);
const SKILLS = Object.values(Skill);
const BOSSES = Object.values(Boss);
const ACTIVITIES = Object.values(Activity);
Object.values(ComputedMetric);
SKILLS.filter((s) => s !== Skill.OVERALL);
BOSSES.filter((b) => !MetricProps[b].isMembers);
SKILLS.filter((s) => MetricProps[s].isMembers);
SKILLS.filter((s) => MetricProps[s].isCombat);
[...SKILLS, ...BOSSES, ...ACTIVITIES];
({
  [Period.FIVE_MIN]: { name: "5 Min", milliseconds: 3e5 },
  [Period.DAY]: { name: "Day", milliseconds: 864e5 },
  [Period.WEEK]: { name: "Week", milliseconds: 6048e5 },
  [Period.MONTH]: { name: "Month", milliseconds: 26784e5 },
  [Period.YEAR]: { name: "Year", milliseconds: 31556926e3 }
});
Object.values(Period);
({
  [PlayerType.UNKNOWN]: { name: "Unknown" },
  [PlayerType.REGULAR]: { name: "Regular" },
  [PlayerType.IRONMAN]: { name: "Ironman" },
  [PlayerType.HARDCORE]: { name: "Hardcore" },
  [PlayerType.ULTIMATE]: { name: "Ultimate" }
});
({
  [PlayerBuild.MAIN]: { name: "Main" },
  [PlayerBuild.F2P]: { name: "F2P" },
  [PlayerBuild.F2P_LVL3]: { name: "F2P & Level 3" },
  [PlayerBuild.LVL3]: { name: "Level 3" },
  [PlayerBuild.ZERKER]: { name: "Zerker Pure" },
  [PlayerBuild.DEF1]: { name: "1 Defence Pure" },
  [PlayerBuild.HP10]: { name: "10 Hitpoints Pure" }
});
({
  [PlayerStatus.ACTIVE]: { name: "Active" },
  [PlayerStatus.UNRANKED]: { name: "Unranked" },
  [PlayerStatus.FLAGGED]: { name: "Flagged" },
  [PlayerStatus.ARCHIVED]: { name: "Archived" },
  [PlayerStatus.BANNED]: { name: "Banned" }
});
Object.values(PlayerType);
Object.values(PlayerBuild);
Object.values(PlayerStatus);
var EfficiencyAlgorithmType;
(function(EfficiencyAlgorithmType2) {
  EfficiencyAlgorithmType2["MAIN"] = "main";
  EfficiencyAlgorithmType2["IRONMAN"] = "ironman";
  EfficiencyAlgorithmType2["ULTIMATE"] = "ultimate";
  EfficiencyAlgorithmType2["LVL3"] = "lvl3";
  EfficiencyAlgorithmType2["F2P"] = "f2p";
  EfficiencyAlgorithmType2["F2P_LVL3"] = "f2p_lvl3";
  EfficiencyAlgorithmType2["F2P_IRONMAN"] = "f2p_ironman";
  EfficiencyAlgorithmType2["F2P_LVL3_IRONMAN"] = "f2p_lvl3_ironman";
})(EfficiencyAlgorithmType || (EfficiencyAlgorithmType = {}));
class EfficiencyClient extends BaseAPIClient {
  getEfficiencyLeaderboards(filter, pagination) {
    return this.getRequest("/efficiency/leaderboard", Object.assign(Object.assign({}, filter), pagination));
  }
  getEHPRates(algorithmType) {
    return this.getRequest("/efficiency/rates", {
      metric: Metric.EHP,
      type: algorithmType
    });
  }
  getEHBRates(algorithmType) {
    return this.getRequest("/efficiency/rates", {
      metric: Metric.EHB,
      type: algorithmType
    });
  }
}
class NameChangesClient extends BaseAPIClient {
  searchNameChanges(filter, pagination) {
    return this.getRequest("/names", Object.assign(Object.assign({}, filter), pagination));
  }
  submitNameChange(oldName, newName) {
    return this.postRequest("/names", { oldName, newName });
  }
}
class CompetitionsClient extends BaseAPIClient {
  searchCompetitions(filter, pagination) {
    return this.getRequest("/competitions", Object.assign(Object.assign({}, filter), pagination));
  }
  getCompetitionDetails(id, previewMetric) {
    return this.getRequest(`/competitions/${id}`, { metric: previewMetric });
  }
  getCompetitionDetailsCSV(id, params) {
    return this.getText(`/competitions/${id}/csv`, Object.assign({ metric: params.previewMetric }, params));
  }
  getCompetitionTopHistory(id, previewMetric) {
    return this.getRequest(`/competitions/${id}/top-history`, {
      metric: previewMetric
    });
  }
  createCompetition(payload) {
    return this.postRequest("/competitions", payload);
  }
  editCompetition(id, payload, verificationCode) {
    return this.putRequest(`/competitions/${id}`, Object.assign(Object.assign({}, payload), { verificationCode }));
  }
  deleteCompetition(id, verificationCode) {
    return this.deleteRequest(`/competitions/${id}`, { verificationCode });
  }
  addParticipants(id, participants, verificationCode) {
    return this.postRequest(`/competitions/${id}/participants`, {
      verificationCode,
      participants
    });
  }
  removeParticipants(id, participants, verificationCode) {
    return this.deleteRequest(`/competitions/${id}/participants`, {
      verificationCode,
      participants
    });
  }
  addTeams(id, teams, verificationCode) {
    return this.postRequest(`/competitions/${id}/teams`, {
      verificationCode,
      teams
    });
  }
  removeTeams(id, teamNames, verificationCode) {
    return this.deleteRequest(`/competitions/${id}/teams`, {
      verificationCode,
      teamNames
    });
  }
  updateAll(id, verificationCode) {
    return this.postRequest(`/competitions/${id}/update-all`, {
      verificationCode
    });
  }
}
class WOMClient extends BaseAPIClient {
  constructor(options) {
    const baseApiUrl = (options === null || options === void 0 ? void 0 : options.baseAPIUrl) || config.baseAPIUrl;
    const headers = {
      "x-user-agent": (options === null || options === void 0 ? void 0 : options.userAgent) || config.defaultUserAgent
    };
    if (options === null || options === void 0 ? void 0 : options.apiKey) {
      headers["x-api-key"] = options.apiKey;
    }
    super(headers, baseApiUrl);
    this.deltas = new DeltasClient(headers, baseApiUrl);
    this.groups = new GroupsClient(headers, baseApiUrl);
    this.players = new PlayersClient(headers, baseApiUrl);
    this.records = new RecordsClient(headers, baseApiUrl);
    this.efficiency = new EfficiencyClient(headers, baseApiUrl);
    this.nameChanges = new NameChangesClient(headers, baseApiUrl);
    this.competitions = new CompetitionsClient(headers, baseApiUrl);
  }
}
const minutesInMonth = 43200;
const minutesInDay = 1440;
const constructFromSymbol = Symbol.for("constructDateFrom");
function constructFrom(date, value) {
  if (typeof date === "function")
    return date(value);
  if (date && typeof date === "object" && constructFromSymbol in date)
    return date[constructFromSymbol](value);
  if (date instanceof Date)
    return new date.constructor(value);
  return new Date(value);
}
function toDate(argument, context) {
  return constructFrom(context || argument, argument);
}
let defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}
function getTimezoneOffsetInMilliseconds(date) {
  const _date = toDate(date);
  const utcDate = new Date(
    Date.UTC(
      _date.getFullYear(),
      _date.getMonth(),
      _date.getDate(),
      _date.getHours(),
      _date.getMinutes(),
      _date.getSeconds(),
      _date.getMilliseconds()
    )
  );
  utcDate.setUTCFullYear(_date.getFullYear());
  return +date - +utcDate;
}
function normalizeDates(context, ...dates) {
  const normalize = constructFrom.bind(
    null,
    context || dates.find((date) => typeof date === "object")
  );
  return dates.map(normalize);
}
function compareAsc(dateLeft, dateRight) {
  const diff = +toDate(dateLeft) - +toDate(dateRight);
  if (diff < 0)
    return -1;
  else if (diff > 0)
    return 1;
  return diff;
}
function differenceInCalendarMonths(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options == null ? void 0 : options.in,
    laterDate,
    earlierDate
  );
  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();
  const monthsDiff = laterDate_.getMonth() - earlierDate_.getMonth();
  return yearsDiff * 12 + monthsDiff;
}
function getRoundingMethod(method) {
  return (number) => {
    const round = method ? Math[method] : Math.trunc;
    const result = round(number);
    return result === 0 ? 0 : result;
  };
}
function differenceInMilliseconds(laterDate, earlierDate) {
  return +toDate(laterDate) - +toDate(earlierDate);
}
function endOfDay(date, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  _date.setHours(23, 59, 59, 999);
  return _date;
}
function endOfMonth(date, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  const month = _date.getMonth();
  _date.setFullYear(_date.getFullYear(), month + 1, 0);
  _date.setHours(23, 59, 59, 999);
  return _date;
}
function isLastDayOfMonth(date, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  return +endOfDay(_date, options) === +endOfMonth(_date, options);
}
function differenceInMonths(laterDate, earlierDate, options) {
  const [laterDate_, workingLaterDate, earlierDate_] = normalizeDates(
    options == null ? void 0 : options.in,
    laterDate,
    laterDate,
    earlierDate
  );
  const sign = compareAsc(workingLaterDate, earlierDate_);
  const difference = Math.abs(
    differenceInCalendarMonths(workingLaterDate, earlierDate_)
  );
  if (difference < 1)
    return 0;
  if (workingLaterDate.getMonth() === 1 && workingLaterDate.getDate() > 27)
    workingLaterDate.setDate(30);
  workingLaterDate.setMonth(workingLaterDate.getMonth() - sign * difference);
  let isLastMonthNotFull = compareAsc(workingLaterDate, earlierDate_) === -sign;
  if (isLastDayOfMonth(laterDate_) && difference === 1 && compareAsc(laterDate_, earlierDate_) === 1) {
    isLastMonthNotFull = false;
  }
  const result = sign * (difference - +isLastMonthNotFull);
  return result === 0 ? 0 : result;
}
function differenceInSeconds(laterDate, earlierDate, options) {
  const diff = differenceInMilliseconds(laterDate, earlierDate) / 1e3;
  return getRoundingMethod(options == null ? void 0 : options.roundingMethod)(diff);
}
const formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
const formatDistance$1 = (token, count, options) => {
  let result;
  const tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options == null ? void 0 : options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
function buildFormatLongFn(args) {
  return (options = {}) => {
    const width2 = options.width ? String(options.width) : args.defaultWidth;
    const format = args.formats[width2] || args.formats[args.defaultWidth];
    return format;
  };
}
const dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
const timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
const dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
const formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
const formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
const formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
function buildLocalizeFn(args) {
  return (value, options) => {
    const context = (options == null ? void 0 : options.context) ? String(options.context) : "standalone";
    let valuesArray;
    if (context === "formatting" && args.formattingValues) {
      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      const width2 = (options == null ? void 0 : options.width) ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width2] || args.formattingValues[defaultWidth];
    } else {
      const defaultWidth = args.defaultWidth;
      const width2 = (options == null ? void 0 : options.width) ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[width2] || args.values[defaultWidth];
    }
    const index = args.argumentCallback ? args.argumentCallback(value) : value;
    return valuesArray[index];
  };
}
const eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
const quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
const monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ],
  wide: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ]
};
const dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ]
};
const dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
const formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
const ordinalNumber = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  const rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
const localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
function buildMatchFn(args) {
  return (string, options = {}) => {
    const width2 = options.width;
    const matchPattern = width2 && args.matchPatterns[width2] || args.matchPatterns[args.defaultMatchWidth];
    const matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    const matchedString = matchResult[0];
    const parsePatterns = width2 && args.parsePatterns[width2] || args.parsePatterns[args.defaultParseWidth];
    const key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString)) : findKey(parsePatterns, (pattern) => pattern.test(matchedString));
    let value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    const rest = string.slice(matchedString.length);
    return { value, rest };
  };
}
function findKey(object, predicate) {
  for (const key in object) {
    if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (let key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}
function buildMatchPatternFn(args) {
  return (string, options = {}) => {
    const matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    const matchedString = matchResult[0];
    const parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    let value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    const rest = string.slice(matchedString.length);
    return { value, rest };
  };
}
const matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
const parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
const matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
const parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
const matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
const parseMonthPatterns = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i
  ],
  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^may/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i
  ]
};
const matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
const parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
const matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
const parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
const match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: (value) => parseInt(value, 10)
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
const enUS = {
  code: "en-US",
  formatDistance: formatDistance$1,
  formatLong,
  formatRelative,
  localize,
  match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
function formatDistance(laterDate, earlierDate, options) {
  var _a, _b;
  const defaultOptions2 = getDefaultOptions();
  const locale = (_b = (_a = options == null ? void 0 : options.locale) != null ? _a : defaultOptions2.locale) != null ? _b : enUS;
  const minutesInAlmostTwoDays = 2520;
  const comparison = compareAsc(laterDate, earlierDate);
  if (isNaN(comparison))
    throw new RangeError("Invalid time value");
  const localizeOptions = Object.assign({}, options, {
    addSuffix: options == null ? void 0 : options.addSuffix,
    comparison
  });
  const [laterDate_, earlierDate_] = normalizeDates(
    options == null ? void 0 : options.in,
    ...comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]
  );
  const seconds = differenceInSeconds(earlierDate_, laterDate_);
  const offsetInSeconds = (getTimezoneOffsetInMilliseconds(earlierDate_) - getTimezoneOffsetInMilliseconds(laterDate_)) / 1e3;
  const minutes = Math.round((seconds - offsetInSeconds) / 60);
  let months;
  if (minutes < 2) {
    if (options == null ? void 0 : options.includeSeconds) {
      if (seconds < 5) {
        return locale.formatDistance("lessThanXSeconds", 5, localizeOptions);
      } else if (seconds < 10) {
        return locale.formatDistance("lessThanXSeconds", 10, localizeOptions);
      } else if (seconds < 20) {
        return locale.formatDistance("lessThanXSeconds", 20, localizeOptions);
      } else if (seconds < 40) {
        return locale.formatDistance("halfAMinute", 0, localizeOptions);
      } else if (seconds < 60) {
        return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale.formatDistance("xMinutes", 1, localizeOptions);
      }
    } else {
      if (minutes === 0) {
        return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale.formatDistance("xMinutes", minutes, localizeOptions);
      }
    }
  } else if (minutes < 45) {
    return locale.formatDistance("xMinutes", minutes, localizeOptions);
  } else if (minutes < 90) {
    return locale.formatDistance("aboutXHours", 1, localizeOptions);
  } else if (minutes < minutesInDay) {
    const hours = Math.round(minutes / 60);
    return locale.formatDistance("aboutXHours", hours, localizeOptions);
  } else if (minutes < minutesInAlmostTwoDays) {
    return locale.formatDistance("xDays", 1, localizeOptions);
  } else if (minutes < minutesInMonth) {
    const days = Math.round(minutes / minutesInDay);
    return locale.formatDistance("xDays", days, localizeOptions);
  } else if (minutes < minutesInMonth * 2) {
    months = Math.round(minutes / minutesInMonth);
    return locale.formatDistance("aboutXMonths", months, localizeOptions);
  }
  months = differenceInMonths(earlierDate_, laterDate_);
  if (months < 12) {
    const nearestMonth = Math.round(minutes / minutesInMonth);
    return locale.formatDistance("xMonths", nearestMonth, localizeOptions);
  } else {
    const monthsSinceStartOfYear = months % 12;
    const years = Math.trunc(months / 12);
    if (monthsSinceStartOfYear < 3) {
      return locale.formatDistance("aboutXYears", years, localizeOptions);
    } else if (monthsSinceStartOfYear < 9) {
      return locale.formatDistance("overXYears", years, localizeOptions);
    } else {
      return locale.formatDistance("almostXYears", years + 1, localizeOptions);
    }
  }
}
var GroupTable_vue_vue_type_style_index_0_lang = "";
var QSpace = createComponent({
  name: "QSpace",
  setup() {
    const space = h("div", { class: "q-space" });
    return () => space;
  }
});
var QTd = createComponent({
  name: "QTd",
  props: {
    props: Object,
    autoWidth: Boolean,
    noHover: Boolean
  },
  setup(props, { slots }) {
    const vm = getCurrentInstance();
    const classes = computed(
      () => "q-td" + (props.autoWidth === true ? " q-table--col-auto-width" : "") + (props.noHover === true ? " q-td--no-hover" : "") + " "
    );
    return () => {
      if (props.props === void 0) {
        return h("td", { class: classes.value }, hSlot(slots.default));
      }
      const name = vm.vnode.key;
      const col = (props.props.colsMap !== void 0 ? props.props.colsMap[name] : null) || props.props.col;
      if (col === void 0)
        return;
      const { row } = props.props;
      return h("td", {
        class: classes.value + col.__tdClass(row),
        style: col.__tdStyle(row)
      }, hSlot(slots.default));
    };
  }
});
function isObject$2(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_1 = isObject$2;
var freeGlobal$1 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var _freeGlobal = freeGlobal$1;
var freeGlobal = _freeGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root$2 = freeGlobal || freeSelf || Function("return this")();
var _root = root$2;
var root$1 = _root;
var now$1 = function() {
  return root$1.Date.now();
};
var now_1 = now$1;
var reWhitespace = /\s/;
function trimmedEndIndex$1(string) {
  var index = string.length;
  while (index-- && reWhitespace.test(string.charAt(index))) {
  }
  return index;
}
var _trimmedEndIndex = trimmedEndIndex$1;
var trimmedEndIndex = _trimmedEndIndex;
var reTrimStart = /^\s+/;
function baseTrim$1(string) {
  return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
}
var _baseTrim = baseTrim$1;
var root = _root;
var Symbol$3 = root.Symbol;
var _Symbol = Symbol$3;
var Symbol$2 = _Symbol;
var objectProto$1 = Object.prototype;
var hasOwnProperty = objectProto$1.hasOwnProperty;
var nativeObjectToString$1 = objectProto$1.toString;
var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : void 0;
function getRawTag$1(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag$1), tag = value[symToStringTag$1];
  try {
    value[symToStringTag$1] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}
var _getRawTag = getRawTag$1;
var objectProto = Object.prototype;
var nativeObjectToString = objectProto.toString;
function objectToString$1(value) {
  return nativeObjectToString.call(value);
}
var _objectToString = objectToString$1;
var Symbol$1 = _Symbol, getRawTag = _getRawTag, objectToString = _objectToString;
var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : void 0;
function baseGetTag$1(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
var _baseGetTag = baseGetTag$1;
function isObjectLike$1(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_1 = isObjectLike$1;
var baseGetTag = _baseGetTag, isObjectLike = isObjectLike_1;
var symbolTag = "[object Symbol]";
function isSymbol$1(value) {
  return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
}
var isSymbol_1 = isSymbol$1;
var baseTrim = _baseTrim, isObject$1 = isObject_1, isSymbol = isSymbol_1;
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber$1(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject$1(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject$1(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var toNumber_1 = toNumber$1;
var isObject = isObject_1, now = now_1, toNumber = toNumber_1;
var FUNC_ERROR_TEXT = "Expected a function";
var nativeMax = Math.max, nativeMin = Math.min;
function debounce(func, wait, options) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = "maxWait" in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  function invokeFunc(time) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time) {
    lastInvokeTime = time;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time) : result;
  }
  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    timerId = setTimeout(timerExpired, remainingWait(time));
  }
  function trailingEdge(time) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(now());
  }
  function debounced() {
    var time = now(), isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
var debounce_1 = debounce;
var GroupTable6_vue_vue_type_style_index_0_lang = "";
const _sfc_main$1 = {
  setup() {
    ref([]);
    const tableData = ref([]);
    const searchQuery = ref("");
    const highlightedId = ref(null);
    const playerNotFoundDialog = ref(false);
    const loading = ref(false);
    const typeImages = {
      regular: "/icons/maxed.png",
      ironman: "/icons/ironman.png",
      ultimate: "/icons/uim.png",
      hardcore: "/icons/hcim.png"
    };
    const columns = ref([
      {
        name: "username",
        required: true,
        label: "Username",
        align: "left",
        field: "username",
        sortable: true
      },
      { name: "type", label: "Type", align: "left", field: "type" },
      {
        name: "exp",
        label: "Experience",
        align: "right",
        field: "exp",
        sortable: true
      },
      {
        name: "lastChangedAt",
        label: "Last Change",
        align: "right",
        field: "lastChangedAt"
      },
      {
        name: "achievementName",
        label: "Latest Achievement",
        align: "right",
        field: "achievementName",
        sortable: true
      }
    ]);
    const fetchGroupData = async () => {
      loading.value = true;
      const client2 = new WOMClient({ apiKey: {}.VUE_APP_WOM_API_KEY });
      try {
        const groupId = 6847;
        const group = await client2.groups.getGroupDetails(groupId);
        const achievements = await client2.groups.getGroupAchievements(groupId);
        tableData.value = group.memberships.map((membership) => {
          const relatedAchievement = achievements.find(
            (ach) => ach.playerId === membership.player.id
          );
          return {
            id: membership.player.id,
            username: membership.player.username,
            type: membership.player.type,
            exp: membership.player.exp,
            lastChangedAt: formatDistance(
              new Date(membership.player.lastChangedAt),
              new Date(),
              { addSuffix: true }
            ),
            achievementName: (relatedAchievement == null ? void 0 : relatedAchievement.name) || "None"
          };
        });
      } catch (error) {
        console.error("Failed to fetch group data:", error);
      } finally {
        loading.value = false;
      }
    };
    const getRowClass = (row) => highlightedId.value === row.id ? "highlighted-row" : "";
    const highlightRow = (id) => {
      highlightedId.value = id;
      setTimeout(() => {
        highlightedId.value = null;
      }, 2e3);
    };
    const debouncedSearch = debounce_1(() => {
      if (!searchQuery.value.trim()) {
        return;
      }
      const match2 = tableData.value.find(
        (row) => row.username.toLowerCase().includes(searchQuery.value.toLowerCase())
      );
      if (match2) {
        const index = tableData.value.findIndex((row) => row.id === match2.id);
        if (index !== -1) {
          const [foundPlayer] = tableData.value.splice(index, 1);
          tableData.value.unshift(foundPlayer);
          highlightRow(foundPlayer.id);
        }
      } else {
        playerNotFoundDialog.value = true;
      }
    }, 300);
    const filteredRows = computed(() => {
      if (!searchQuery.value.trim())
        return tableData.value;
      return tableData.value.filter(
        (row) => row.username.toLowerCase().includes(searchQuery.value.toLowerCase())
      );
    });
    onMounted(fetchGroupData);
    return {
      columns,
      filteredRows,
      searchQuery,
      highlightedId,
      getRowClass,
      debouncedSearch,
      playerNotFoundDialog,
      loading,
      typeImages
    };
  }
};
const _hoisted_1 = { class: "q-pa-md" };
const _hoisted_2 = ["src", "alt"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [
    createVNode(QInput, {
      filled: "",
      modelValue: $setup.searchQuery,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.searchQuery = $event),
      label: "Search Player by Username...",
      onInput: $setup.debouncedSearch,
      class: "q-mb-md"
    }, null, 8, ["modelValue", "onInput"]),
    createVNode(QTable, {
      title: "Lords of RNG Members",
      rows: $setup.filteredRows,
      columns: $setup.columns,
      "row-key": "id",
      "virtual-scroll": "",
      "virtual-scroll-item-size": 48,
      "row-class": $setup.getRowClass,
      loading: "loading"
    }, {
      top: withCtx(() => [
        createVNode(QBtn, { flat: "" }, {
          default: withCtx(() => _cache[2] || (_cache[2] = [
            createBaseVNode("img", { src: "/icons/WITCHNEW.png" }, null, -1)
          ])),
          _: 1
        }),
        createVNode(QSpace),
        createVNode(QBtn, { flat: "" }, {
          default: withCtx(() => _cache[3] || (_cache[3] = [
            createBaseVNode("img", { src: "/icons/wild.png" }, null, -1)
          ])),
          _: 1
        }),
        createVNode(QSpace),
        createVNode(QBtn, { flat: "" }, {
          default: withCtx(() => _cache[4] || (_cache[4] = [
            createBaseVNode("img", { src: "/icons/leagues.png" }, null, -1)
          ])),
          _: 1
        })
      ]),
      default: withCtx(() => [
        _cache[5] || (_cache[5] = createBaseVNode("header", { class: "header-fancy" }, "Members", -1))
      ]),
      "body-cell-type": withCtx((props) => [
        createVNode(QTd, { props }, {
          default: withCtx(() => [
            createBaseVNode("img", {
              src: $setup.typeImages[props.row.type],
              alt: props.row.type,
              width: "28",
              height: "28"
            }, null, 8, _hoisted_2)
          ]),
          _: 2
        }, 1032, ["props"])
      ]),
      _: 1
    }, 8, ["rows", "columns", "row-class"]),
    createVNode(QDialog, {
      modelValue: $setup.playerNotFoundDialog,
      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $setup.playerNotFoundDialog = $event)
    }, {
      default: withCtx(() => [
        createVNode(QCard, null, {
          default: withCtx(() => [
            createVNode(QCardSection, null, {
              default: withCtx(() => _cache[6] || (_cache[6] = [
                createBaseVNode("div", { class: "text-h6" }, "Player Not Found", -1)
              ])),
              _: 1
            }),
            createVNode(QCardSection, null, {
              default: withCtx(() => _cache[7] || (_cache[7] = [
                createTextVNode(" Sorry, no player matching the search criteria was found. ")
              ])),
              _: 1
            }),
            createVNode(QCardActions, { align: "right" }, {
              default: withCtx(() => [
                withDirectives(createVNode(QBtn, {
                  flat: "",
                  label: "Close"
                }, null, 512), [
                  [ClosePopup]
                ])
              ]),
              _: 1
            })
          ]),
          _: 1
        })
      ]),
      _: 1
    }, 8, ["modelValue"])
  ]);
}
var GroupTable6 = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render], ["__file", "GroupTable6.vue"]]);
var GroupTable5_vue_vue_type_style_index_0_lang = "";
var GroupTable4_vue_vue_type_style_index_0_scoped_true_lang = "";
const _sfc_main = Object.assign({
  name: "IndexPage"
}, {
  __name: "IndexPage",
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createBlock(QPage, { class: "relative flex flex-center" }, {
        default: withCtx(() => [
          createVNode(GroupTable6)
        ]),
        _: 1
      });
    };
  }
});
var IndexPage = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "IndexPage.vue"]]);
export { IndexPage as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5kZXhQYWdlLmRiYjljNDE1LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb25lbnRzL3BhZ2UvUVBhZ2UuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy91dGlscy91aWQvdWlkLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9zYWJsZXMvdXNlLWlkL3VzZS1pZC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvc2FibGVzL3VzZS1zcGxpdC1hdHRycy91c2Utc3BsaXQtYXR0cnMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb3NhYmxlcy91c2UtZm9ybS91c2UtZm9ybS1jaGlsZC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL3V0aWxzL3BhdHRlcm5zL3BhdHRlcm5zLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9zYWJsZXMvcHJpdmF0ZS51c2UtdmFsaWRhdGUvdXNlLXZhbGlkYXRlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvdXRpbHMvcHJpdmF0ZS5mb2N1cy9mb2N1cy1tYW5hZ2VyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9zYWJsZXMvcHJpdmF0ZS51c2UtZmllbGQvdXNlLWZpZWxkLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy9pbnB1dC91c2UtbWFzay5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvc2FibGVzL3VzZS1mb3JtL3ByaXZhdGUudXNlLWZvcm0uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb3NhYmxlcy9wcml2YXRlLnVzZS1maWxlL3VzZS1maWxlLWRvbS1wcm9wcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLWtleS1jb21wb3NpdGlvbi91c2Uta2V5LWNvbXBvc2l0aW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy9pbnB1dC9RSW5wdXQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb25lbnRzL3RhYmxlL1FUaC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvbmVudHMvc2VwYXJhdG9yL1FTZXBhcmF0b3IuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb25lbnRzL21hcmt1cC10YWJsZS9RTWFya3VwVGFibGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb25lbnRzL3RhYmxlL2dldC10YWJsZS1taWRkbGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy91dGlscy9wcml2YXRlLnJ0bC9ydGwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb25lbnRzL3ZpcnR1YWwtc2Nyb2xsL3VzZS12aXJ0dWFsLXNjcm9sbC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvbmVudHMvdmlydHVhbC1zY3JvbGwvUVZpcnR1YWxTY3JvbGwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb25lbnRzL2ZpZWxkL1FGaWVsZC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvbmVudHMvY2hpcC9RQ2hpcC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLWFuY2hvci91c2UtYW5jaG9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9zYWJsZXMvcHJpdmF0ZS51c2Utc2Nyb2xsLXRhcmdldC91c2Utc2Nyb2xsLXRhcmdldC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL3V0aWxzL3ByaXZhdGUuY29uZmlnL25vZGVzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvdXRpbHMvcHJpdmF0ZS5wb3J0YWwvcG9ydGFsLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9zYWJsZXMvcHJpdmF0ZS51c2UtcG9ydGFsL3VzZS1wb3J0YWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb3NhYmxlcy9wcml2YXRlLnVzZS10cmFuc2l0aW9uL3VzZS10cmFuc2l0aW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9zYWJsZXMvdXNlLXRpY2svdXNlLXRpY2suanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy91dGlscy9wcml2YXRlLmtleWJvYXJkL2VzY2FwZS1rZXkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy91dGlscy9wcml2YXRlLmZvY3VzL2ZvY3Vzb3V0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvdXRpbHMvcHJpdmF0ZS5jbGljay1vdXRzaWRlL2NsaWNrLW91dHNpZGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy91dGlscy9wcml2YXRlLnBvc2l0aW9uLWVuZ2luZS9wb3NpdGlvbi1lbmdpbmUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb25lbnRzL21lbnUvUU1lbnUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb25lbnRzL2RpYWxvZy9RRGlhbG9nLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy9zZWxlY3QvUVNlbGVjdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvbmVudHMvbGluZWFyLXByb2dyZXNzL1FMaW5lYXJQcm9ncmVzcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLXJlZm9jdXMtdGFyZ2V0L3VzZS1yZWZvY3VzLXRhcmdldC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL3V0aWxzL3ByaXZhdGUub3B0aW9uLXNpemVzL29wdGlvbi1zaXplcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvbmVudHMvY2hlY2tib3gvdXNlLWNoZWNrYm94LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy9jaGVja2JveC9RQ2hlY2tib3guanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb3NhYmxlcy9wcml2YXRlLnVzZS1mdWxsc2NyZWVuL3VzZS1mdWxsc2NyZWVuLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvdXRpbHMvcHJpdmF0ZS5zb3J0L3NvcnQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb25lbnRzL3RhYmxlL3RhYmxlLXNvcnQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb25lbnRzL3RhYmxlL3RhYmxlLWZpbHRlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvbmVudHMvdGFibGUvdGFibGUtcGFnaW5hdGlvbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvbmVudHMvdGFibGUvdGFibGUtcm93LXNlbGVjdGlvbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvbmVudHMvdGFibGUvdGFibGUtcm93LWV4cGFuZC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvbmVudHMvdGFibGUvdGFibGUtY29sdW1uLXNlbGVjdGlvbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvbmVudHMvdGFibGUvUVRhYmxlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy9jYXJkL1FDYXJkU2VjdGlvbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvbmVudHMvY2FyZC9RQ2FyZEFjdGlvbnMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb25lbnRzL2NhcmQvUUNhcmQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9kaXJlY3RpdmVzL2Nsb3NlLXBvcHVwL0Nsb3NlUG9wdXAuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF5anMvZGF5anMubWluLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi9jdXN0b21QYXJzZUZvcm1hdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ad2lzZS1vbGQtbWFuL3V0aWxzL2Rpc3QvZXMvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvY29uc3RhbnRzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2NvbnN0cnVjdEZyb20uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvdG9EYXRlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvZGVmYXVsdE9wdGlvbnMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvbm9ybWFsaXplRGF0ZXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvY29tcGFyZUFzYy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9kaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2dldFJvdW5kaW5nTWV0aG9kLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2RpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lbmRPZkRheS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lbmRPZk1vbnRoLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2lzTGFzdERheU9mTW9udGguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZGlmZmVyZW5jZUluTW9udGhzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2RpZmZlcmVuY2VJblNlY29uZHMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL19saWIvYnVpbGRGb3JtYXRMb25nRm4uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvbG9jYWxpemUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL19saWIvYnVpbGRNYXRjaEZuLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvbWF0Y2guanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2Zvcm1hdERpc3RhbmNlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy9zcGFjZS9RU3BhY2UuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb25lbnRzL3RhYmxlL1FUZC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbm93LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdHJpbW1lZEVuZEluZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRyaW0uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTnVtYmVyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kZWJvdW5jZS5qcyIsIi4uLy4uLy4uL0dyb3VwVGFibGU2LnZ1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoLCBjb21wdXRlZCwgaW5qZWN0LCBnZXRDdXJyZW50SW5zdGFuY2UgfSBmcm9tICd2dWUnXG5cbmltcG9ydCB7IGNyZWF0ZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUuY3JlYXRlL2NyZWF0ZS5qcydcbmltcG9ydCB7IGhTbG90IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5yZW5kZXIvcmVuZGVyLmpzJ1xuaW1wb3J0IHsgcGFnZUNvbnRhaW5lcktleSwgbGF5b3V0S2V5LCBlbXB0eVJlbmRlckZuIH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5zeW1ib2xzL3N5bWJvbHMuanMnXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRUGFnZScsXG5cbiAgcHJvcHM6IHtcbiAgICBwYWRkaW5nOiBCb29sZWFuLFxuICAgIHN0eWxlRm46IEZ1bmN0aW9uXG4gIH0sXG5cbiAgc2V0dXAgKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCB7IHByb3h5OiB7ICRxIH0gfSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpXG5cbiAgICBjb25zdCAkbGF5b3V0ID0gaW5qZWN0KGxheW91dEtleSwgZW1wdHlSZW5kZXJGbilcbiAgICBpZiAoJGxheW91dCA9PT0gZW1wdHlSZW5kZXJGbikge1xuICAgICAgY29uc29sZS5lcnJvcignUVBhZ2UgbmVlZHMgdG8gYmUgYSBkZWVwIGNoaWxkIG9mIFFMYXlvdXQnKVxuICAgICAgcmV0dXJuIGVtcHR5UmVuZGVyRm5cbiAgICB9XG5cbiAgICBjb25zdCAkcGFnZUNvbnRhaW5lciA9IGluamVjdChwYWdlQ29udGFpbmVyS2V5LCBlbXB0eVJlbmRlckZuKVxuICAgIGlmICgkcGFnZUNvbnRhaW5lciA9PT0gZW1wdHlSZW5kZXJGbikge1xuICAgICAgY29uc29sZS5lcnJvcignUVBhZ2UgbmVlZHMgdG8gYmUgY2hpbGQgb2YgUVBhZ2VDb250YWluZXInKVxuICAgICAgcmV0dXJuIGVtcHR5UmVuZGVyRm5cbiAgICB9XG5cbiAgICBjb25zdCBzdHlsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IG9mZnNldFxuICAgICAgICA9ICgkbGF5b3V0LmhlYWRlci5zcGFjZSA9PT0gdHJ1ZSA/ICRsYXlvdXQuaGVhZGVyLnNpemUgOiAwKVxuICAgICAgICArICgkbGF5b3V0LmZvb3Rlci5zcGFjZSA9PT0gdHJ1ZSA/ICRsYXlvdXQuZm9vdGVyLnNpemUgOiAwKVxuXG4gICAgICBpZiAodHlwZW9mIHByb3BzLnN0eWxlRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gJGxheW91dC5pc0NvbnRhaW5lci52YWx1ZSA9PT0gdHJ1ZVxuICAgICAgICAgID8gJGxheW91dC5jb250YWluZXJIZWlnaHQudmFsdWVcbiAgICAgICAgICA6ICRxLnNjcmVlbi5oZWlnaHRcblxuICAgICAgICByZXR1cm4gcHJvcHMuc3R5bGVGbihvZmZzZXQsIGhlaWdodClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWluSGVpZ2h0OiAkbGF5b3V0LmlzQ29udGFpbmVyLnZhbHVlID09PSB0cnVlXG4gICAgICAgICAgPyAoJGxheW91dC5jb250YWluZXJIZWlnaHQudmFsdWUgLSBvZmZzZXQpICsgJ3B4J1xuICAgICAgICAgIDogKFxuICAgICAgICAgICAgICAkcS5zY3JlZW4uaGVpZ2h0ID09PSAwXG4gICAgICAgICAgICAgICAgPyAob2Zmc2V0ICE9PSAwID8gYGNhbGMoMTAwdmggLSAkeyBvZmZzZXQgfXB4KWAgOiAnMTAwdmgnKVxuICAgICAgICAgICAgICAgIDogKCRxLnNjcmVlbi5oZWlnaHQgLSBvZmZzZXQpICsgJ3B4J1xuICAgICAgICAgICAgKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgIGBxLXBhZ2UkeyBwcm9wcy5wYWRkaW5nID09PSB0cnVlID8gJyBxLWxheW91dC1wYWRkaW5nJyA6ICcnIH1gXG4gICAgKVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ21haW4nLCB7XG4gICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgIHN0eWxlOiBzdHlsZS52YWx1ZVxuICAgIH0sIGhTbG90KHNsb3RzLmRlZmF1bHQpKVxuICB9XG59KVxuIiwiLyoqXG4gKiBCYXNlZCBvbiB0aGUgd29yayBvZiBodHRwczovL2dpdGh1Yi5jb20vamNob29rL3V1aWQtcmFuZG9tXG4gKi9cblxubGV0XG4gIGJ1ZixcbiAgYnVmSWR4ID0gMFxuY29uc3QgaGV4Qnl0ZXMgPSBuZXcgQXJyYXkoMjU2KVxuXG4vLyBQcmUtY2FsY3VsYXRlIHRvU3RyaW5nKDE2KSBmb3Igc3BlZWRcbmZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgaGV4Qnl0ZXNbIGkgXSA9IChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSlcbn1cblxuLy8gVXNlIGJlc3QgYXZhaWxhYmxlIFBSTkdcbmNvbnN0IHJhbmRvbUJ5dGVzID0gKCgpID0+IHtcbiAgLy8gTm9kZSAmIEJyb3dzZXIgc3VwcG9ydFxuICBjb25zdCBsaWIgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJ1xuICAgID8gY3J5cHRvXG4gICAgOiAoXG4gICAgICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgPyB3aW5kb3cuY3J5cHRvIHx8IHdpbmRvdy5tc0NyeXB0b1xuICAgICAgICAgIDogdm9pZCAwXG4gICAgICApXG5cbiAgaWYgKGxpYiAhPT0gdm9pZCAwKSB7XG4gICAgaWYgKGxpYi5yYW5kb21CeXRlcyAhPT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gbGliLnJhbmRvbUJ5dGVzXG4gICAgfVxuICAgIGlmIChsaWIuZ2V0UmFuZG9tVmFsdWVzICE9PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBuID0+IHtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShuKVxuICAgICAgICBsaWIuZ2V0UmFuZG9tVmFsdWVzKGJ5dGVzKVxuICAgICAgICByZXR1cm4gYnl0ZXNcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbiA9PiB7XG4gICAgY29uc3QgciA9IFtdXG4gICAgZm9yIChsZXQgaSA9IG47IGkgPiAwOyBpLS0pIHtcbiAgICAgIHIucHVzaChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTYpKVxuICAgIH1cbiAgICByZXR1cm4gclxuICB9XG59KSgpXG5cbi8vIEJ1ZmZlciByYW5kb20gbnVtYmVycyBmb3Igc3BlZWRcbi8vIFJlZHVjZSBtZW1vcnkgdXNhZ2UgYnkgZGVjcmVhc2luZyB0aGlzIG51bWJlciAobWluIDE2KVxuLy8gb3IgaW1wcm92ZSBzcGVlZCBieSBpbmNyZWFzaW5nIHRoaXMgbnVtYmVyICh0cnkgMTYzODQpXG5jb25zdCBCVUZGRVJfU0laRSA9IDQwOTZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICAvLyBCdWZmZXIgc29tZSByYW5kb20gYnl0ZXMgZm9yIHNwZWVkXG4gIGlmIChidWYgPT09IHZvaWQgMCB8fCAoYnVmSWR4ICsgMTYgPiBCVUZGRVJfU0laRSkpIHtcbiAgICBidWZJZHggPSAwXG4gICAgYnVmID0gcmFuZG9tQnl0ZXMoQlVGRkVSX1NJWkUpXG4gIH1cblxuICBjb25zdCBiID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYnVmLCBidWZJZHgsIChidWZJZHggKz0gMTYpKVxuICBiWyA2IF0gPSAoYlsgNiBdICYgMHgwZikgfCAweDQwXG4gIGJbIDggXSA9IChiWyA4IF0gJiAweDNmKSB8IDB4ODBcblxuICByZXR1cm4gaGV4Qnl0ZXNbIGJbIDAgXSBdICsgaGV4Qnl0ZXNbIGJbIDEgXSBdXG4gICAgKyBoZXhCeXRlc1sgYlsgMiBdIF0gKyBoZXhCeXRlc1sgYlsgMyBdIF0gKyAnLSdcbiAgICArIGhleEJ5dGVzWyBiWyA0IF0gXSArIGhleEJ5dGVzWyBiWyA1IF0gXSArICctJ1xuICAgICsgaGV4Qnl0ZXNbIGJbIDYgXSBdICsgaGV4Qnl0ZXNbIGJbIDcgXSBdICsgJy0nXG4gICAgKyBoZXhCeXRlc1sgYlsgOCBdIF0gKyBoZXhCeXRlc1sgYlsgOSBdIF0gKyAnLSdcbiAgICArIGhleEJ5dGVzWyBiWyAxMCBdIF0gKyBoZXhCeXRlc1sgYlsgMTEgXSBdXG4gICAgKyBoZXhCeXRlc1sgYlsgMTIgXSBdICsgaGV4Qnl0ZXNbIGJbIDEzIF0gXVxuICAgICsgaGV4Qnl0ZXNbIGJbIDE0IF0gXSArIGhleEJ5dGVzWyBiWyAxNSBdIF1cbn1cbiIsImltcG9ydCB7IHJlZiwgY29tcHV0ZWQsIHdhdGNoLCBvbk1vdW50ZWQgfSBmcm9tICd2dWUnXG5cbmltcG9ydCB1aWQgZnJvbSAnLi4vLi4vdXRpbHMvdWlkL3VpZC5qcydcblxuaW1wb3J0IHsgaXNSdW50aW1lU3NyUHJlSHlkcmF0aW9uIH0gZnJvbSAnLi4vLi4vcGx1Z2lucy9wbGF0Zm9ybS9QbGF0Zm9ybS5qcydcblxuZnVuY3Rpb24gcGFyc2VWYWx1ZSAodmFsKSB7XG4gIHJldHVybiB2YWwgPT09IHZvaWQgMCB8fCB2YWwgPT09IG51bGxcbiAgICA/IG51bGxcbiAgICA6IHZhbFxufVxuXG5mdW5jdGlvbiBnZXRJZCAodmFsLCByZXF1aXJlZCkge1xuICByZXR1cm4gdmFsID09PSB2b2lkIDAgfHwgdmFsID09PSBudWxsXG4gICAgPyAocmVxdWlyZWQgPT09IHRydWUgPyBgZl8keyB1aWQoKSB9YCA6IG51bGwpXG4gICAgOiB2YWxcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIFwiaWRcIiB3aGljaCBpcyBhIHJlZigpIHRoYXQgY2FuIGJlIHVzZWQgYXNcbiAqIGEgdW5pcXVlIGlkZW50aWZpZXIgdG8gYXBwbHkgdG8gYSBET00gbm9kZSBhdHRyaWJ1dGUuXG4gKlxuICogT24gU1NSLCBpdCB0YWtlcyBjYXJlIG9mIGdlbmVyYXRpbmcgdGhlIGlkIG9uIHRoZSBjbGllbnQgc2lkZSAob25seSkgdG9cbiAqIGF2b2lkIGh5ZHJhdGlvbiBlcnJvcnMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh7IGdldFZhbHVlLCByZXF1aXJlZCA9IHRydWUgfSA9IHt9KSB7XG4gIGlmIChpc1J1bnRpbWVTc3JQcmVIeWRyYXRpb24udmFsdWUgPT09IHRydWUpIHtcbiAgICBjb25zdCBpZCA9IGdldFZhbHVlICE9PSB2b2lkIDBcbiAgICAgID8gcmVmKHBhcnNlVmFsdWUoZ2V0VmFsdWUoKSkpXG4gICAgICA6IHJlZihudWxsKVxuXG4gICAgaWYgKHJlcXVpcmVkID09PSB0cnVlICYmIGlkLnZhbHVlID09PSBudWxsKSB7XG4gICAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgICBpZC52YWx1ZSA9IGBmXyR7IHVpZCgpIH1gIC8vIGdldElkKG51bGwsIHRydWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChnZXRWYWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgICB3YXRjaChnZXRWYWx1ZSwgbmV3SWQgPT4ge1xuICAgICAgICBpZC52YWx1ZSA9IGdldElkKG5ld0lkLCByZXF1aXJlZClcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIGlkXG4gIH1cblxuICByZXR1cm4gZ2V0VmFsdWUgIT09IHZvaWQgMFxuICAgID8gY29tcHV0ZWQoKCkgPT4gZ2V0SWQoZ2V0VmFsdWUoKSwgcmVxdWlyZWQpKVxuICAgIDogcmVmKGBmXyR7IHVpZCgpIH1gKSAvLyBnZXRJZChudWxsLCB0cnVlKVxufVxuIiwiaW1wb3J0IHsgcmVmLCBvbkJlZm9yZVVwZGF0ZSwgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJ1xuXG5jb25zdCBsaXN0ZW5lclJFID0gL15vbltBLVpdL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHsgYXR0cnMsIHZub2RlIH0gPSBnZXRDdXJyZW50SW5zdGFuY2UoKVxuXG4gIGNvbnN0IGFjYyA9IHtcbiAgICBsaXN0ZW5lcnM6IHJlZih7fSksXG4gICAgYXR0cmlidXRlczogcmVmKHt9KVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0ge31cbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB7fVxuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcbiAgICAgIGlmIChrZXkgIT09ICdjbGFzcycgJiYga2V5ICE9PSAnc3R5bGUnICYmIGxpc3RlbmVyUkUudGVzdChrZXkpID09PSBmYWxzZSkge1xuICAgICAgICBhdHRyaWJ1dGVzWyBrZXkgXSA9IGF0dHJzWyBrZXkgXVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3Qga2V5IGluIHZub2RlLnByb3BzKSB7XG4gICAgICBpZiAobGlzdGVuZXJSRS50ZXN0KGtleSkgPT09IHRydWUpIHtcbiAgICAgICAgbGlzdGVuZXJzWyBrZXkgXSA9IHZub2RlLnByb3BzWyBrZXkgXVxuICAgICAgfVxuICAgIH1cblxuICAgIGFjYy5hdHRyaWJ1dGVzLnZhbHVlID0gYXR0cmlidXRlc1xuICAgIGFjYy5saXN0ZW5lcnMudmFsdWUgPSBsaXN0ZW5lcnNcbiAgfVxuXG4gIG9uQmVmb3JlVXBkYXRlKHVwZGF0ZSlcblxuICB1cGRhdGUoKVxuXG4gIHJldHVybiBhY2Ncbn1cbiIsImltcG9ydCB7IGluamVjdCwgd2F0Y2gsIGdldEN1cnJlbnRJbnN0YW5jZSwgb25Nb3VudGVkLCBvbkJlZm9yZVVubW91bnQgfSBmcm9tICd2dWUnXG5cbmltcG9ydCB7IGZvcm1LZXkgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLnN5bWJvbHMvc3ltYm9scy5qcydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHsgdmFsaWRhdGUsIHJlc2V0VmFsaWRhdGlvbiwgcmVxdWlyZXNRRm9ybSB9KSB7XG4gIGNvbnN0ICRmb3JtID0gaW5qZWN0KGZvcm1LZXksIGZhbHNlKVxuXG4gIGlmICgkZm9ybSAhPT0gZmFsc2UpIHtcbiAgICBjb25zdCB7IHByb3BzLCBwcm94eSB9ID0gZ2V0Q3VycmVudEluc3RhbmNlKClcblxuICAgIC8vIGV4cG9ydCBwdWJsaWMgbWV0aG9kIChzbyBpdCBjYW4gYmUgdXNlZCBpbiBRRm9ybSlcbiAgICBPYmplY3QuYXNzaWduKHByb3h5LCB7IHZhbGlkYXRlLCByZXNldFZhbGlkYXRpb24gfSlcblxuICAgIHdhdGNoKCgpID0+IHByb3BzLmRpc2FibGUsIHZhbCA9PiB7XG4gICAgICBpZiAodmFsID09PSB0cnVlKSB7XG4gICAgICAgIHR5cGVvZiByZXNldFZhbGlkYXRpb24gPT09ICdmdW5jdGlvbicgJiYgcmVzZXRWYWxpZGF0aW9uKClcbiAgICAgICAgJGZvcm0udW5iaW5kQ29tcG9uZW50KHByb3h5KVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICRmb3JtLmJpbmRDb21wb25lbnQocHJveHkpXG4gICAgICB9XG4gICAgfSlcblxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICAvLyByZWdpc3RlciB0byBwYXJlbnQgUUZvcm1cbiAgICAgIHByb3BzLmRpc2FibGUgIT09IHRydWUgJiYgJGZvcm0uYmluZENvbXBvbmVudChwcm94eSlcbiAgICB9KVxuXG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIC8vIHVuLXJlZ2lzdGVyIGZyb20gcGFyZW50IFFGb3JtXG4gICAgICBwcm9wcy5kaXNhYmxlICE9PSB0cnVlICYmICRmb3JtLnVuYmluZENvbXBvbmVudChwcm94eSlcbiAgICB9KVxuICB9XG4gIGVsc2UgaWYgKHJlcXVpcmVzUUZvcm0gPT09IHRydWUpIHtcbiAgICBjb25zb2xlLmVycm9yKCdQYXJlbnQgUUZvcm0gbm90IGZvdW5kIG9uIHVzZUZvcm1DaGlsZCgpIScpXG4gIH1cbn1cbiIsIi8vIGZpbGUgcmVmZXJlbmNlZCBmcm9tIGRvY3NcblxuY29uc3RcbiAgaGV4ID0gL14jWzAtOWEtZkEtRl17M30oWzAtOWEtZkEtRl17M30pPyQvLFxuICBoZXhhID0gL14jWzAtOWEtZkEtRl17NH0oWzAtOWEtZkEtRl17NH0pPyQvLFxuICBoZXhPckhleGEgPSAvXiMoWzAtOWEtZkEtRl17M318WzAtOWEtZkEtRl17NH18WzAtOWEtZkEtRl17Nn18WzAtOWEtZkEtRl17OH0pJC8sXG4gIHJnYiA9IC9ecmdiXFwoKCgwfFsxLTldW1xcZF0/fDFbXFxkXXswLDJ9fDJbXFxkXT98MlswLTRdW1xcZF18MjVbMC01XSksKXsyfSgwfFsxLTldW1xcZF0/fDFbXFxkXXswLDJ9fDJbXFxkXT98MlswLTRdW1xcZF18MjVbMC01XSlcXCkkLyxcbiAgcmdiYSA9IC9ecmdiYVxcKCgoMHxbMS05XVtcXGRdP3wxW1xcZF17MCwyfXwyW1xcZF0/fDJbMC00XVtcXGRdfDI1WzAtNV0pLCl7Mn0oMHxbMS05XVtcXGRdP3wxW1xcZF17MCwyfXwyW1xcZF0/fDJbMC00XVtcXGRdfDI1WzAtNV0pLCgwfDBcXC5bMC05XStbMS05XXwwXFwuWzEtOV0rfDEpXFwpJC9cblxuLy8gS2VlcCBpbiBzeW5jIHdpdGggdWkvdHlwZXMvYXBpL3ZhbGlkYXRpb24uZC50c1xuZXhwb3J0IGNvbnN0IHRlc3RQYXR0ZXJuID0ge1xuICBkYXRlOiB2ID0+IC9eLT9bXFxkXStcXC9bMC0xXVxcZFxcL1swLTNdXFxkJC8udGVzdCh2KSxcbiAgdGltZTogdiA9PiAvXihbMC0xXT9cXGR8MlswLTNdKTpbMC01XVxcZCQvLnRlc3QodiksXG4gIGZ1bGx0aW1lOiB2ID0+IC9eKFswLTFdP1xcZHwyWzAtM10pOlswLTVdXFxkOlswLTVdXFxkJC8udGVzdCh2KSxcbiAgdGltZU9yRnVsbHRpbWU6IHYgPT4gL14oWzAtMV0/XFxkfDJbMC0zXSk6WzAtNV1cXGQoOlswLTVdXFxkKT8kLy50ZXN0KHYpLFxuXG4gIC8vIC0tIFJGQyA1MzIyIC0tXG4gIC8vIC0tIEFkZGVkIGluIHYyLjYuNiAtLVxuICAvLyBUaGlzIGlzIGEgYmFzaWMgaGVscGVyIHZhbGlkYXRpb24uXG4gIC8vIEZvciBzb21ldGhpbmcgbW9yZSBjb21wbGV4IChsaWtlIFJGQyA4MjIpIHlvdSBzaG91bGQgd3JpdGUgYW5kIHVzZSB5b3VyIG93biBydWxlLlxuICAvLyBXZSB3b24ndCBiZSBhY2NlcHRpbmcgUFJzIHRvIGVuaGFuY2UgdGhlIG9uZSBiZWxvdyBiZWNhdXNlIG9mIHRoZSByZWFzb24gYWJvdmUuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBlbWFpbDogdiA9PiAvXigoW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31dKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLy50ZXN0KHYpLFxuXG4gIGhleENvbG9yOiB2ID0+IGhleC50ZXN0KHYpLFxuICBoZXhhQ29sb3I6IHYgPT4gaGV4YS50ZXN0KHYpLFxuICBoZXhPckhleGFDb2xvcjogdiA9PiBoZXhPckhleGEudGVzdCh2KSxcblxuICByZ2JDb2xvcjogdiA9PiByZ2IudGVzdCh2KSxcbiAgcmdiYUNvbG9yOiB2ID0+IHJnYmEudGVzdCh2KSxcbiAgcmdiT3JSZ2JhQ29sb3I6IHYgPT4gcmdiLnRlc3QodikgfHwgcmdiYS50ZXN0KHYpLFxuXG4gIGhleE9yUmdiQ29sb3I6IHYgPT4gaGV4LnRlc3QodikgfHwgcmdiLnRlc3QodiksXG4gIGhleGFPclJnYmFDb2xvcjogdiA9PiBoZXhhLnRlc3QodikgfHwgcmdiYS50ZXN0KHYpLFxuICBhbnlDb2xvcjogdiA9PiBoZXhPckhleGEudGVzdCh2KSB8fCByZ2IudGVzdCh2KSB8fCByZ2JhLnRlc3Qodilcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICB0ZXN0UGF0dGVyblxufVxuIiwiaW1wb3J0IHsgcmVmLCBjb21wdXRlZCwgd2F0Y2gsIG9uQmVmb3JlVW5tb3VudCwgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgdXNlRm9ybUNoaWxkIGZyb20gJy4uL3VzZS1mb3JtL3VzZS1mb3JtLWNoaWxkLmpzJ1xuaW1wb3J0IHsgdGVzdFBhdHRlcm4gfSBmcm9tICcuLi8uLi91dGlscy9wYXR0ZXJucy9wYXR0ZXJucy5qcydcbmltcG9ydCBkZWJvdW5jZSBmcm9tICcuLi8uLi91dGlscy9kZWJvdW5jZS9kZWJvdW5jZS5qcydcbmltcG9ydCB7IGluamVjdFByb3AgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmluamVjdC1vYmotcHJvcC9pbmplY3Qtb2JqLXByb3AuanMnXG5cbmNvbnN0IGxhenlSdWxlc1ZhbHVlcyA9IFsgdHJ1ZSwgZmFsc2UsICdvbmRlbWFuZCcgXVxuXG5leHBvcnQgY29uc3QgdXNlVmFsaWRhdGVQcm9wcyA9IHtcbiAgbW9kZWxWYWx1ZToge30sXG5cbiAgZXJyb3I6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgZXJyb3JNZXNzYWdlOiBTdHJpbmcsXG4gIG5vRXJyb3JJY29uOiBCb29sZWFuLFxuXG4gIHJ1bGVzOiBBcnJheSxcbiAgcmVhY3RpdmVSdWxlczogQm9vbGVhbixcbiAgbGF6eVJ1bGVzOiB7XG4gICAgdHlwZTogWyBCb29sZWFuLCBTdHJpbmcgXSxcbiAgICBkZWZhdWx0OiBmYWxzZSwgLy8gc3RhdGVtZW50IHVubmVlZGVkIGJ1dCBhdm9pZHMgZnV0dXJlIHZ1ZSBpbXBsZW1lbnRhdGlvbiBjaGFuZ2VzXG4gICAgdmFsaWRhdG9yOiB2ID0+IGxhenlSdWxlc1ZhbHVlcy5pbmNsdWRlcyh2KVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChmb2N1c2VkLCBpbm5lckxvYWRpbmcpIHtcbiAgY29uc3QgeyBwcm9wcywgcHJveHkgfSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpXG5cbiAgY29uc3QgaW5uZXJFcnJvciA9IHJlZihmYWxzZSlcbiAgY29uc3QgaW5uZXJFcnJvck1lc3NhZ2UgPSByZWYobnVsbClcbiAgY29uc3QgaXNEaXJ0eU1vZGVsID0gcmVmKGZhbHNlKVxuXG4gIHVzZUZvcm1DaGlsZCh7IHZhbGlkYXRlLCByZXNldFZhbGlkYXRpb24gfSlcblxuICBsZXQgdmFsaWRhdGVJbmRleCA9IDAsIHVud2F0Y2hSdWxlc1xuXG4gIGNvbnN0IGhhc1J1bGVzID0gY29tcHV0ZWQoKCkgPT5cbiAgICBwcm9wcy5ydWxlcyAhPT0gdm9pZCAwXG4gICAgJiYgcHJvcHMucnVsZXMgIT09IG51bGxcbiAgICAmJiBwcm9wcy5ydWxlcy5sZW5ndGggIT09IDBcbiAgKVxuXG4gIGNvbnN0IGNhbkRlYm91bmNlVmFsaWRhdGUgPSBjb21wdXRlZCgoKSA9PiAoXG4gICAgcHJvcHMuZGlzYWJsZSAhPT0gdHJ1ZVxuICAgICYmIGhhc1J1bGVzLnZhbHVlID09PSB0cnVlXG4gICAgLy8gU2hvdWxkIG5vdCBoYXZlIGEgdmFsaWRhdGlvbiBpbiBwcm9ncmVzcyBhbHJlYWR5O1xuICAgIC8vIEl0IG1pZ2h0IG1lYW4gdGhhdCBmb2N1cyBzd2l0Y2hlZCB0byBzdWJtaXQgYnRuIGFuZFxuICAgIC8vIFFGb3JtJ3Mgc3VibWl0KCkgaGFzIGJlZW4gY2FsbGVkIGFscmVhZHkgKEVOVEVSIGtleSlcbiAgICAmJiBpbm5lckxvYWRpbmcudmFsdWUgPT09IGZhbHNlXG4gICkpXG5cbiAgY29uc3QgaGFzRXJyb3IgPSBjb21wdXRlZCgoKSA9PlxuICAgIHByb3BzLmVycm9yID09PSB0cnVlIHx8IGlubmVyRXJyb3IudmFsdWUgPT09IHRydWVcbiAgKVxuXG4gIGNvbnN0IGVycm9yTWVzc2FnZSA9IGNvbXB1dGVkKCgpID0+IChcbiAgICB0eXBlb2YgcHJvcHMuZXJyb3JNZXNzYWdlID09PSAnc3RyaW5nJyAmJiBwcm9wcy5lcnJvck1lc3NhZ2UubGVuZ3RoICE9PSAwXG4gICAgICA/IHByb3BzLmVycm9yTWVzc2FnZVxuICAgICAgOiBpbm5lckVycm9yTWVzc2FnZS52YWx1ZVxuICApKVxuXG4gIHdhdGNoKCgpID0+IHByb3BzLm1vZGVsVmFsdWUsICgpID0+IHtcbiAgICBpc0RpcnR5TW9kZWwudmFsdWUgPSB0cnVlXG5cbiAgICBpZiAoXG4gICAgICBjYW5EZWJvdW5jZVZhbGlkYXRlLnZhbHVlID09PSB0cnVlXG4gICAgICAvLyB0cmlnZ2VyIHZhbGlkYXRpb24gaWYgbm90IHVzaW5nIGFueSBraW5kIG9mIGxhenktcnVsZXNcbiAgICAgICYmIHByb3BzLmxhenlSdWxlcyA9PT0gZmFsc2VcbiAgICApIHtcbiAgICAgIGRlYm91bmNlZFZhbGlkYXRlKClcbiAgICB9XG4gIH0pXG5cbiAgZnVuY3Rpb24gb25SdWxlc0NoYW5nZSAoKSB7XG4gICAgaWYgKFxuICAgICAgcHJvcHMubGF6eVJ1bGVzICE9PSAnb25kZW1hbmQnXG4gICAgICAmJiBjYW5EZWJvdW5jZVZhbGlkYXRlLnZhbHVlID09PSB0cnVlXG4gICAgICAmJiBpc0RpcnR5TW9kZWwudmFsdWUgPT09IHRydWVcbiAgICApIHtcbiAgICAgIGRlYm91bmNlZFZhbGlkYXRlKClcbiAgICB9XG4gIH1cblxuICB3YXRjaCgoKSA9PiBwcm9wcy5yZWFjdGl2ZVJ1bGVzLCB2YWwgPT4ge1xuICAgIGlmICh2YWwgPT09IHRydWUpIHtcbiAgICAgIGlmICh1bndhdGNoUnVsZXMgPT09IHZvaWQgMCkge1xuICAgICAgICB1bndhdGNoUnVsZXMgPSB3YXRjaCgoKSA9PiBwcm9wcy5ydWxlcywgb25SdWxlc0NoYW5nZSwgeyBpbW1lZGlhdGU6IHRydWUsIGRlZXA6IHRydWUgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodW53YXRjaFJ1bGVzICE9PSB2b2lkIDApIHtcbiAgICAgIHVud2F0Y2hSdWxlcygpXG4gICAgICB1bndhdGNoUnVsZXMgPSB2b2lkIDBcbiAgICB9XG4gIH0sIHsgaW1tZWRpYXRlOiB0cnVlIH0pXG5cbiAgd2F0Y2goKCkgPT4gcHJvcHMubGF6eVJ1bGVzLCBvblJ1bGVzQ2hhbmdlKVxuXG4gIHdhdGNoKGZvY3VzZWQsIHZhbCA9PiB7XG4gICAgaWYgKHZhbCA9PT0gdHJ1ZSkge1xuICAgICAgaXNEaXJ0eU1vZGVsLnZhbHVlID0gdHJ1ZVxuICAgIH1cbiAgICBlbHNlIGlmIChcbiAgICAgIGNhbkRlYm91bmNlVmFsaWRhdGUudmFsdWUgPT09IHRydWVcbiAgICAgICYmIHByb3BzLmxhenlSdWxlcyAhPT0gJ29uZGVtYW5kJ1xuICAgICkge1xuICAgICAgZGVib3VuY2VkVmFsaWRhdGUoKVxuICAgIH1cbiAgfSlcblxuICBmdW5jdGlvbiByZXNldFZhbGlkYXRpb24gKCkge1xuICAgIHZhbGlkYXRlSW5kZXgrK1xuICAgIGlubmVyTG9hZGluZy52YWx1ZSA9IGZhbHNlXG4gICAgaXNEaXJ0eU1vZGVsLnZhbHVlID0gZmFsc2VcbiAgICBpbm5lckVycm9yLnZhbHVlID0gZmFsc2VcbiAgICBpbm5lckVycm9yTWVzc2FnZS52YWx1ZSA9IG51bGxcbiAgICBkZWJvdW5jZWRWYWxpZGF0ZS5jYW5jZWwoKVxuICB9XG5cbiAgLypcbiAgICogUmV0dXJuIHZhbHVlXG4gICAqICAgLSB0cnVlICh2YWxpZGF0aW9uIHN1Y2NlZWRlZClcbiAgICogICAtIGZhbHNlICh2YWxpZGF0aW9uIGZhaWxlZClcbiAgICogICAtIFByb21pc2UgKHBlbmRpbmcgYXN5bmMgdmFsaWRhdGlvbilcbiAgICovXG4gIGZ1bmN0aW9uIHZhbGlkYXRlICh2YWwgPSBwcm9wcy5tb2RlbFZhbHVlKSB7XG4gICAgaWYgKFxuICAgICAgcHJvcHMuZGlzYWJsZSA9PT0gdHJ1ZVxuICAgICAgfHwgaGFzUnVsZXMudmFsdWUgPT09IGZhbHNlXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGNvbnN0IGluZGV4ID0gKyt2YWxpZGF0ZUluZGV4XG5cbiAgICBjb25zdCBzZXREaXJ0eSA9IGlubmVyTG9hZGluZy52YWx1ZSAhPT0gdHJ1ZVxuICAgICAgPyAoKSA9PiB7IGlzRGlydHlNb2RlbC52YWx1ZSA9IHRydWUgfVxuICAgICAgOiAoKSA9PiB7fVxuXG4gICAgY29uc3QgdXBkYXRlID0gKGVyciwgbXNnKSA9PiB7XG4gICAgICBlcnIgPT09IHRydWUgJiYgc2V0RGlydHkoKVxuXG4gICAgICBpbm5lckVycm9yLnZhbHVlID0gZXJyXG4gICAgICBpbm5lckVycm9yTWVzc2FnZS52YWx1ZSA9IG1zZyB8fCBudWxsXG4gICAgICBpbm5lckxvYWRpbmcudmFsdWUgPSBmYWxzZVxuICAgIH1cblxuICAgIGNvbnN0IHByb21pc2VzID0gW11cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHMucnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHJ1bGUgPSBwcm9wcy5ydWxlc1sgaSBdXG4gICAgICBsZXQgcmVzXG5cbiAgICAgIGlmICh0eXBlb2YgcnVsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXMgPSBydWxlKHZhbCwgdGVzdFBhdHRlcm4pXG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0eXBlb2YgcnVsZSA9PT0gJ3N0cmluZycgJiYgdGVzdFBhdHRlcm5bIHJ1bGUgXSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHJlcyA9IHRlc3RQYXR0ZXJuWyBydWxlIF0odmFsKVxuICAgICAgfVxuXG4gICAgICBpZiAocmVzID09PSBmYWxzZSB8fCB0eXBlb2YgcmVzID09PSAnc3RyaW5nJykge1xuICAgICAgICB1cGRhdGUodHJ1ZSwgcmVzKVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHJlcyAhPT0gdHJ1ZSAmJiByZXMgIT09IHZvaWQgMCkge1xuICAgICAgICBwcm9taXNlcy5wdXNoKHJlcylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJvbWlzZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB1cGRhdGUoZmFsc2UpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGlubmVyTG9hZGluZy52YWx1ZSA9IHRydWVcblxuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihcbiAgICAgIHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMgPT09IHZvaWQgMCB8fCBBcnJheS5pc0FycmF5KHJlcykgPT09IGZhbHNlIHx8IHJlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpbmRleCA9PT0gdmFsaWRhdGVJbmRleCAmJiB1cGRhdGUoZmFsc2UpXG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1zZyA9IHJlcy5maW5kKHIgPT4gciA9PT0gZmFsc2UgfHwgdHlwZW9mIHIgPT09ICdzdHJpbmcnKVxuICAgICAgICBpbmRleCA9PT0gdmFsaWRhdGVJbmRleCAmJiB1cGRhdGUobXNnICE9PSB2b2lkIDAsIG1zZylcbiAgICAgICAgcmV0dXJuIG1zZyA9PT0gdm9pZCAwXG4gICAgICB9LFxuICAgICAgZSA9PiB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdmFsaWRhdGVJbmRleCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSlcbiAgICAgICAgICB1cGRhdGUodHJ1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIGNvbnN0IGRlYm91bmNlZFZhbGlkYXRlID0gZGVib3VuY2UodmFsaWRhdGUsIDApXG5cbiAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICB1bndhdGNoUnVsZXMgIT09IHZvaWQgMCAmJiB1bndhdGNoUnVsZXMoKVxuICAgIGRlYm91bmNlZFZhbGlkYXRlLmNhbmNlbCgpXG4gIH0pXG5cbiAgLy8gZXhwb3NlIHB1YmxpYyBtZXRob2RzICYgcHJvcHNcbiAgT2JqZWN0LmFzc2lnbihwcm94eSwgeyByZXNldFZhbGlkYXRpb24sIHZhbGlkYXRlIH0pXG4gIGluamVjdFByb3AocHJveHksICdoYXNFcnJvcicsICgpID0+IGhhc0Vycm9yLnZhbHVlKVxuXG4gIHJldHVybiB7XG4gICAgaXNEaXJ0eU1vZGVsLFxuICAgIGhhc1J1bGVzLFxuICAgIGhhc0Vycm9yLFxuICAgIGVycm9yTWVzc2FnZSxcblxuICAgIHZhbGlkYXRlLFxuICAgIHJlc2V0VmFsaWRhdGlvblxuICB9XG59XG4iLCJsZXQgcXVldWUgPSBbXVxubGV0IHdhaXRGbGFncyA9IFtdXG5cbmZ1bmN0aW9uIGNsZWFyRmxhZyAoZmxhZykge1xuICB3YWl0RmxhZ3MgPSB3YWl0RmxhZ3MuZmlsdGVyKGVudHJ5ID0+IGVudHJ5ICE9PSBmbGFnKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkRm9jdXNXYWl0RmxhZyAoZmxhZykge1xuICBjbGVhckZsYWcoZmxhZylcbiAgd2FpdEZsYWdzLnB1c2goZmxhZylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUZvY3VzV2FpdEZsYWcgKGZsYWcpIHtcbiAgY2xlYXJGbGFnKGZsYWcpXG5cbiAgaWYgKHdhaXRGbGFncy5sZW5ndGggPT09IDAgJiYgcXVldWUubGVuZ3RoICE9PSAwKSB7XG4gICAgLy8gb25seSBjYWxsIGxhc3QgZm9jdXMgaGFuZGxlciAoY2FuJ3QgZm9jdXMgbXVsdGlwbGUgdGhpbmdzIGF0IG9uY2UpXG4gICAgcXVldWVbIHF1ZXVlLmxlbmd0aCAtIDEgXSgpXG4gICAgcXVldWUgPSBbXVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRGb2N1c0ZuIChmbikge1xuICBpZiAod2FpdEZsYWdzLmxlbmd0aCA9PT0gMCkge1xuICAgIGZuKClcbiAgfVxuICBlbHNlIHtcbiAgICBxdWV1ZS5wdXNoKGZuKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGb2N1c0ZuIChmbikge1xuICBxdWV1ZSA9IHF1ZXVlLmZpbHRlcihlbnRyeSA9PiBlbnRyeSAhPT0gZm4pXG59XG4iLCJpbXBvcnQgeyBoLCByZWYsIGNvbXB1dGVkLCBUcmFuc2l0aW9uLCBuZXh0VGljaywgb25BY3RpdmF0ZWQsIG9uRGVhY3RpdmF0ZWQsIG9uQmVmb3JlVW5tb3VudCwgb25Nb3VudGVkLCBnZXRDdXJyZW50SW5zdGFuY2UgfSBmcm9tICd2dWUnXG5cbmltcG9ydCBRSWNvbiBmcm9tICcuLi8uLi9jb21wb25lbnRzL2ljb24vUUljb24uanMnXG5pbXBvcnQgUVNwaW5uZXIgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9zcGlubmVyL1FTcGlubmVyLmpzJ1xuXG5pbXBvcnQgdXNlSWQgZnJvbSAnLi4vdXNlLWlkL3VzZS1pZC5qcydcbmltcG9ydCB1c2VTcGxpdEF0dHJzIGZyb20gJy4uL3VzZS1zcGxpdC1hdHRycy91c2Utc3BsaXQtYXR0cnMuanMnXG5pbXBvcnQgdXNlRGFyaywgeyB1c2VEYXJrUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wcml2YXRlLnVzZS1kYXJrL3VzZS1kYXJrLmpzJ1xuaW1wb3J0IHVzZVZhbGlkYXRlLCB7IHVzZVZhbGlkYXRlUHJvcHMgfSBmcm9tICcuLi9wcml2YXRlLnVzZS12YWxpZGF0ZS91c2UtdmFsaWRhdGUuanMnXG5cbmltcG9ydCB7IGhTbG90IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5yZW5kZXIvcmVuZGVyLmpzJ1xuaW1wb3J0IHsgcHJldmVudCwgc3RvcEFuZFByZXZlbnQgfSBmcm9tICcuLi8uLi91dGlscy9ldmVudC9ldmVudC5qcydcbmltcG9ydCB7IGFkZEZvY3VzRm4sIHJlbW92ZUZvY3VzRm4gfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmZvY3VzL2ZvY3VzLW1hbmFnZXIuanMnXG5cbmV4cG9ydCBmdW5jdGlvbiBmaWVsZFZhbHVlSXNGaWxsZWQgKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2b2lkIDBcbiAgICAmJiB2YWwgIT09IG51bGxcbiAgICAmJiAoJycgKyB2YWwpLmxlbmd0aCAhPT0gMFxufVxuXG5leHBvcnQgY29uc3QgdXNlTm9uSW5wdXRGaWVsZFByb3BzID0ge1xuICAuLi51c2VEYXJrUHJvcHMsXG4gIC4uLnVzZVZhbGlkYXRlUHJvcHMsXG5cbiAgbGFiZWw6IFN0cmluZyxcbiAgc3RhY2tMYWJlbDogQm9vbGVhbixcbiAgaGludDogU3RyaW5nLFxuICBoaWRlSGludDogQm9vbGVhbixcbiAgcHJlZml4OiBTdHJpbmcsXG4gIHN1ZmZpeDogU3RyaW5nLFxuXG4gIGxhYmVsQ29sb3I6IFN0cmluZyxcbiAgY29sb3I6IFN0cmluZyxcbiAgYmdDb2xvcjogU3RyaW5nLFxuXG4gIGZpbGxlZDogQm9vbGVhbixcbiAgb3V0bGluZWQ6IEJvb2xlYW4sXG4gIGJvcmRlcmxlc3M6IEJvb2xlYW4sXG4gIHN0YW5kb3V0OiBbIEJvb2xlYW4sIFN0cmluZyBdLFxuXG4gIHNxdWFyZTogQm9vbGVhbixcblxuICBsb2FkaW5nOiBCb29sZWFuLFxuXG4gIGxhYmVsU2xvdDogQm9vbGVhbixcblxuICBib3R0b21TbG90czogQm9vbGVhbixcbiAgaGlkZUJvdHRvbVNwYWNlOiBCb29sZWFuLFxuXG4gIHJvdW5kZWQ6IEJvb2xlYW4sXG4gIGRlbnNlOiBCb29sZWFuLFxuICBpdGVtQWxpZ25lZDogQm9vbGVhbixcblxuICBjb3VudGVyOiBCb29sZWFuLFxuXG4gIGNsZWFyYWJsZTogQm9vbGVhbixcbiAgY2xlYXJJY29uOiBTdHJpbmcsXG5cbiAgZGlzYWJsZTogQm9vbGVhbixcbiAgcmVhZG9ubHk6IEJvb2xlYW4sXG5cbiAgYXV0b2ZvY3VzOiBCb29sZWFuLFxuXG4gIGZvcjogU3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCB1c2VGaWVsZFByb3BzID0ge1xuICAuLi51c2VOb25JbnB1dEZpZWxkUHJvcHMsXG4gIG1heGxlbmd0aDogWyBOdW1iZXIsIFN0cmluZyBdXG59XG5cbmV4cG9ydCBjb25zdCB1c2VGaWVsZEVtaXRzID0gWyAndXBkYXRlOm1vZGVsVmFsdWUnLCAnY2xlYXInLCAnZm9jdXMnLCAnYmx1cicgXVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlRmllbGRTdGF0ZSAoeyByZXF1aXJlZEZvckF0dHIgPSB0cnVlLCB0YWdQcm9wLCBjaGFuZ2VFdmVudCA9IGZhbHNlIH0gPSB7fSkge1xuICBjb25zdCB7IHByb3BzLCBwcm94eSB9ID0gZ2V0Q3VycmVudEluc3RhbmNlKClcblxuICBjb25zdCBpc0RhcmsgPSB1c2VEYXJrKHByb3BzLCBwcm94eS4kcSlcbiAgY29uc3QgdGFyZ2V0VWlkID0gdXNlSWQoe1xuICAgIHJlcXVpcmVkOiByZXF1aXJlZEZvckF0dHIsXG4gICAgZ2V0VmFsdWU6ICgpID0+IHByb3BzLmZvclxuICB9KVxuXG4gIHJldHVybiB7XG4gICAgcmVxdWlyZWRGb3JBdHRyLFxuICAgIGNoYW5nZUV2ZW50LFxuICAgIHRhZzogdGFnUHJvcCA9PT0gdHJ1ZVxuICAgICAgPyBjb21wdXRlZCgoKSA9PiBwcm9wcy50YWcpXG4gICAgICA6IHsgdmFsdWU6ICdsYWJlbCcgfSxcblxuICAgIGlzRGFyayxcblxuICAgIGVkaXRhYmxlOiBjb21wdXRlZCgoKSA9PlxuICAgICAgcHJvcHMuZGlzYWJsZSAhPT0gdHJ1ZSAmJiBwcm9wcy5yZWFkb25seSAhPT0gdHJ1ZVxuICAgICksXG5cbiAgICBpbm5lckxvYWRpbmc6IHJlZihmYWxzZSksXG4gICAgZm9jdXNlZDogcmVmKGZhbHNlKSxcbiAgICBoYXNQb3B1cE9wZW46IGZhbHNlLFxuXG4gICAgc3BsaXRBdHRyczogdXNlU3BsaXRBdHRycygpLFxuICAgIHRhcmdldFVpZCxcblxuICAgIHJvb3RSZWY6IHJlZihudWxsKSxcbiAgICB0YXJnZXRSZWY6IHJlZihudWxsKSxcbiAgICBjb250cm9sUmVmOiByZWYobnVsbClcblxuICAgIC8qKlxuICAgICAqIHVzZXIgc3VwcGxpZWQgYWRkaXRpb25hbHM6XG5cbiAgICAgKiBpbm5lclZhbHVlIC0gY29tcHV0ZWRcbiAgICAgKiBmbG9hdGluZ0xhYmVsIC0gY29tcHV0ZWRcbiAgICAgKiBpbnB1dFJlZiAtIGNvbXB1dGVkXG5cbiAgICAgKiBmaWVsZENsYXNzIC0gY29tcHV0ZWRcbiAgICAgKiBoYXNTaGFkb3cgLSBjb21wdXRlZFxuXG4gICAgICogY29udHJvbEV2ZW50cyAtIE9iamVjdCB3aXRoIGZuKGUpXG5cbiAgICAgKiBnZXRDb250cm9sIC0gZm5cbiAgICAgKiBnZXRJbm5lckFwcGVuZCAtIGZuXG4gICAgICogZ2V0Q29udHJvbENoaWxkIC0gZm5cbiAgICAgKiBnZXRTaGFkb3dDb250cm9sIC0gZm5cbiAgICAgKiBzaG93UG9wdXAgLSBmblxuICAgICAqL1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzdGF0ZSkge1xuICBjb25zdCB7IHByb3BzLCBlbWl0LCBzbG90cywgYXR0cnMsIHByb3h5IH0gPSBnZXRDdXJyZW50SW5zdGFuY2UoKVxuICBjb25zdCB7ICRxIH0gPSBwcm94eVxuXG4gIGxldCBmb2N1c291dFRpbWVyID0gbnVsbFxuXG4gIGlmIChzdGF0ZS5oYXNWYWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgc3RhdGUuaGFzVmFsdWUgPSBjb21wdXRlZCgoKSA9PiBmaWVsZFZhbHVlSXNGaWxsZWQocHJvcHMubW9kZWxWYWx1ZSkpXG4gIH1cblxuICBpZiAoc3RhdGUuZW1pdFZhbHVlID09PSB2b2lkIDApIHtcbiAgICBzdGF0ZS5lbWl0VmFsdWUgPSB2YWx1ZSA9PiB7XG4gICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIHZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS5jb250cm9sRXZlbnRzID09PSB2b2lkIDApIHtcbiAgICBzdGF0ZS5jb250cm9sRXZlbnRzID0ge1xuICAgICAgb25Gb2N1c2luOiBvbkNvbnRyb2xGb2N1c2luLFxuICAgICAgb25Gb2N1c291dDogb25Db250cm9sRm9jdXNvdXRcbiAgICB9XG4gIH1cblxuICBPYmplY3QuYXNzaWduKHN0YXRlLCB7XG4gICAgY2xlYXJWYWx1ZSxcbiAgICBvbkNvbnRyb2xGb2N1c2luLFxuICAgIG9uQ29udHJvbEZvY3Vzb3V0LFxuICAgIGZvY3VzXG4gIH0pXG5cbiAgaWYgKHN0YXRlLmNvbXB1dGVkQ291bnRlciA9PT0gdm9pZCAwKSB7XG4gICAgc3RhdGUuY29tcHV0ZWRDb3VudGVyID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLmNvdW50ZXIgIT09IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IGxlbiA9IHR5cGVvZiBwcm9wcy5tb2RlbFZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgcHJvcHMubW9kZWxWYWx1ZSA9PT0gJ251bWJlcidcbiAgICAgICAgICA/ICgnJyArIHByb3BzLm1vZGVsVmFsdWUpLmxlbmd0aFxuICAgICAgICAgIDogKEFycmF5LmlzQXJyYXkocHJvcHMubW9kZWxWYWx1ZSkgPT09IHRydWUgPyBwcm9wcy5tb2RlbFZhbHVlLmxlbmd0aCA6IDApXG5cbiAgICAgICAgY29uc3QgbWF4ID0gcHJvcHMubWF4bGVuZ3RoICE9PSB2b2lkIDBcbiAgICAgICAgICA/IHByb3BzLm1heGxlbmd0aFxuICAgICAgICAgIDogcHJvcHMubWF4VmFsdWVzXG5cbiAgICAgICAgcmV0dXJuIGxlbiArIChtYXggIT09IHZvaWQgMCA/ICcgLyAnICsgbWF4IDogJycpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBpc0RpcnR5TW9kZWwsXG4gICAgaGFzUnVsZXMsXG4gICAgaGFzRXJyb3IsXG4gICAgZXJyb3JNZXNzYWdlLFxuICAgIHJlc2V0VmFsaWRhdGlvblxuICB9ID0gdXNlVmFsaWRhdGUoc3RhdGUuZm9jdXNlZCwgc3RhdGUuaW5uZXJMb2FkaW5nKVxuXG4gIGNvbnN0IGZsb2F0aW5nTGFiZWwgPSBzdGF0ZS5mbG9hdGluZ0xhYmVsICE9PSB2b2lkIDBcbiAgICA/IGNvbXB1dGVkKCgpID0+IHByb3BzLnN0YWNrTGFiZWwgPT09IHRydWUgfHwgc3RhdGUuZm9jdXNlZC52YWx1ZSA9PT0gdHJ1ZSB8fCBzdGF0ZS5mbG9hdGluZ0xhYmVsLnZhbHVlID09PSB0cnVlKVxuICAgIDogY29tcHV0ZWQoKCkgPT4gcHJvcHMuc3RhY2tMYWJlbCA9PT0gdHJ1ZSB8fCBzdGF0ZS5mb2N1c2VkLnZhbHVlID09PSB0cnVlIHx8IHN0YXRlLmhhc1ZhbHVlLnZhbHVlID09PSB0cnVlKVxuXG4gIGNvbnN0IHNob3VsZFJlbmRlckJvdHRvbSA9IGNvbXB1dGVkKCgpID0+XG4gICAgcHJvcHMuYm90dG9tU2xvdHMgPT09IHRydWVcbiAgICB8fCBwcm9wcy5oaW50ICE9PSB2b2lkIDBcbiAgICB8fCBoYXNSdWxlcy52YWx1ZSA9PT0gdHJ1ZVxuICAgIHx8IHByb3BzLmNvdW50ZXIgPT09IHRydWVcbiAgICB8fCBwcm9wcy5lcnJvciAhPT0gbnVsbFxuICApXG5cbiAgY29uc3Qgc3R5bGVUeXBlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmIChwcm9wcy5maWxsZWQgPT09IHRydWUpIHsgcmV0dXJuICdmaWxsZWQnIH1cbiAgICBpZiAocHJvcHMub3V0bGluZWQgPT09IHRydWUpIHsgcmV0dXJuICdvdXRsaW5lZCcgfVxuICAgIGlmIChwcm9wcy5ib3JkZXJsZXNzID09PSB0cnVlKSB7IHJldHVybiAnYm9yZGVybGVzcycgfVxuICAgIGlmIChwcm9wcy5zdGFuZG91dCkgeyByZXR1cm4gJ3N0YW5kb3V0JyB9XG4gICAgcmV0dXJuICdzdGFuZGFyZCdcbiAgfSlcblxuICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQoKCkgPT5cbiAgICBgcS1maWVsZCByb3cgbm8td3JhcCBpdGVtcy1zdGFydCBxLWZpZWxkLS0keyBzdHlsZVR5cGUudmFsdWUgfWBcbiAgICArIChzdGF0ZS5maWVsZENsYXNzICE9PSB2b2lkIDAgPyBgICR7IHN0YXRlLmZpZWxkQ2xhc3MudmFsdWUgfWAgOiAnJylcbiAgICArIChwcm9wcy5yb3VuZGVkID09PSB0cnVlID8gJyBxLWZpZWxkLS1yb3VuZGVkJyA6ICcnKVxuICAgICsgKHByb3BzLnNxdWFyZSA9PT0gdHJ1ZSA/ICcgcS1maWVsZC0tc3F1YXJlJyA6ICcnKVxuICAgICsgKGZsb2F0aW5nTGFiZWwudmFsdWUgPT09IHRydWUgPyAnIHEtZmllbGQtLWZsb2F0JyA6ICcnKVxuICAgICsgKGhhc0xhYmVsLnZhbHVlID09PSB0cnVlID8gJyBxLWZpZWxkLS1sYWJlbGVkJyA6ICcnKVxuICAgICsgKHByb3BzLmRlbnNlID09PSB0cnVlID8gJyBxLWZpZWxkLS1kZW5zZScgOiAnJylcbiAgICArIChwcm9wcy5pdGVtQWxpZ25lZCA9PT0gdHJ1ZSA/ICcgcS1maWVsZC0taXRlbS1hbGlnbmVkIHEtaXRlbS10eXBlJyA6ICcnKVxuICAgICsgKHN0YXRlLmlzRGFyay52YWx1ZSA9PT0gdHJ1ZSA/ICcgcS1maWVsZC0tZGFyaycgOiAnJylcbiAgICArIChzdGF0ZS5nZXRDb250cm9sID09PSB2b2lkIDAgPyAnIHEtZmllbGQtLWF1dG8taGVpZ2h0JyA6ICcnKVxuICAgICsgKHN0YXRlLmZvY3VzZWQudmFsdWUgPT09IHRydWUgPyAnIHEtZmllbGQtLWZvY3VzZWQnIDogJycpXG4gICAgKyAoaGFzRXJyb3IudmFsdWUgPT09IHRydWUgPyAnIHEtZmllbGQtLWVycm9yJyA6ICcnKVxuICAgICsgKGhhc0Vycm9yLnZhbHVlID09PSB0cnVlIHx8IHN0YXRlLmZvY3VzZWQudmFsdWUgPT09IHRydWUgPyAnIHEtZmllbGQtLWhpZ2hsaWdodGVkJyA6ICcnKVxuICAgICsgKHByb3BzLmhpZGVCb3R0b21TcGFjZSAhPT0gdHJ1ZSAmJiBzaG91bGRSZW5kZXJCb3R0b20udmFsdWUgPT09IHRydWUgPyAnIHEtZmllbGQtLXdpdGgtYm90dG9tJyA6ICcnKVxuICAgICsgKHByb3BzLmRpc2FibGUgPT09IHRydWUgPyAnIHEtZmllbGQtLWRpc2FibGVkJyA6IChwcm9wcy5yZWFkb25seSA9PT0gdHJ1ZSA/ICcgcS1maWVsZC0tcmVhZG9ubHknIDogJycpKVxuICApXG5cbiAgY29uc3QgY29udGVudENsYXNzID0gY29tcHV0ZWQoKCkgPT5cbiAgICAncS1maWVsZF9fY29udHJvbCByZWxhdGl2ZS1wb3NpdGlvbiByb3cgbm8td3JhcCdcbiAgICArIChwcm9wcy5iZ0NvbG9yICE9PSB2b2lkIDAgPyBgIGJnLSR7IHByb3BzLmJnQ29sb3IgfWAgOiAnJylcbiAgICArIChcbiAgICAgIGhhc0Vycm9yLnZhbHVlID09PSB0cnVlXG4gICAgICAgID8gJyB0ZXh0LW5lZ2F0aXZlJ1xuICAgICAgICA6IChcbiAgICAgICAgICAgIHR5cGVvZiBwcm9wcy5zdGFuZG91dCA9PT0gJ3N0cmluZycgJiYgcHJvcHMuc3RhbmRvdXQubGVuZ3RoICE9PSAwICYmIHN0YXRlLmZvY3VzZWQudmFsdWUgPT09IHRydWVcbiAgICAgICAgICAgICAgPyBgICR7IHByb3BzLnN0YW5kb3V0IH1gXG4gICAgICAgICAgICAgIDogKHByb3BzLmNvbG9yICE9PSB2b2lkIDAgPyBgIHRleHQtJHsgcHJvcHMuY29sb3IgfWAgOiAnJylcbiAgICAgICAgICApXG4gICAgKVxuICApXG5cbiAgY29uc3QgaGFzTGFiZWwgPSBjb21wdXRlZCgoKSA9PlxuICAgIHByb3BzLmxhYmVsU2xvdCA9PT0gdHJ1ZSB8fCBwcm9wcy5sYWJlbCAhPT0gdm9pZCAwXG4gIClcblxuICBjb25zdCBsYWJlbENsYXNzID0gY29tcHV0ZWQoKCkgPT5cbiAgICAncS1maWVsZF9fbGFiZWwgbm8tcG9pbnRlci1ldmVudHMgYWJzb2x1dGUgZWxsaXBzaXMnXG4gICAgKyAocHJvcHMubGFiZWxDb2xvciAhPT0gdm9pZCAwICYmIGhhc0Vycm9yLnZhbHVlICE9PSB0cnVlID8gYCB0ZXh0LSR7IHByb3BzLmxhYmVsQ29sb3IgfWAgOiAnJylcbiAgKVxuXG4gIGNvbnN0IGNvbnRyb2xTbG90U2NvcGUgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgIGlkOiBzdGF0ZS50YXJnZXRVaWQudmFsdWUsXG4gICAgZWRpdGFibGU6IHN0YXRlLmVkaXRhYmxlLnZhbHVlLFxuICAgIGZvY3VzZWQ6IHN0YXRlLmZvY3VzZWQudmFsdWUsXG4gICAgZmxvYXRpbmdMYWJlbDogZmxvYXRpbmdMYWJlbC52YWx1ZSxcbiAgICBtb2RlbFZhbHVlOiBwcm9wcy5tb2RlbFZhbHVlLFxuICAgIGVtaXRWYWx1ZTogc3RhdGUuZW1pdFZhbHVlXG4gIH0pKVxuXG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgYWNjID0ge31cblxuICAgIGlmIChzdGF0ZS50YXJnZXRVaWQudmFsdWUpIHtcbiAgICAgIGFjYy5mb3IgPSBzdGF0ZS50YXJnZXRVaWQudmFsdWVcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuZGlzYWJsZSA9PT0gdHJ1ZSkge1xuICAgICAgYWNjWyAnYXJpYS1kaXNhYmxlZCcgXSA9ICd0cnVlJ1xuICAgIH1cblxuICAgIHJldHVybiBhY2NcbiAgfSlcblxuICBmdW5jdGlvbiBmb2N1c0hhbmRsZXIgKCkge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudFxuICAgIGxldCB0YXJnZXQgPSBzdGF0ZS50YXJnZXRSZWYgIT09IHZvaWQgMCAmJiBzdGF0ZS50YXJnZXRSZWYudmFsdWVcblxuICAgIGlmICh0YXJnZXQgJiYgKGVsID09PSBudWxsIHx8IGVsLmlkICE9PSBzdGF0ZS50YXJnZXRVaWQudmFsdWUpKSB7XG4gICAgICB0YXJnZXQuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpID09PSB0cnVlIHx8ICh0YXJnZXQgPSB0YXJnZXQucXVlcnlTZWxlY3RvcignW3RhYmluZGV4XScpKVxuICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQgIT09IGVsKSB7XG4gICAgICAgIHRhcmdldC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmb2N1cyAoKSB7XG4gICAgYWRkRm9jdXNGbihmb2N1c0hhbmRsZXIpXG4gIH1cblxuICBmdW5jdGlvbiBibHVyICgpIHtcbiAgICByZW1vdmVGb2N1c0ZuKGZvY3VzSGFuZGxlcilcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICBpZiAoZWwgIT09IG51bGwgJiYgc3RhdGUucm9vdFJlZi52YWx1ZS5jb250YWlucyhlbCkpIHtcbiAgICAgIGVsLmJsdXIoKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ29udHJvbEZvY3VzaW4gKGUpIHtcbiAgICBpZiAoZm9jdXNvdXRUaW1lciAhPT0gbnVsbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGZvY3Vzb3V0VGltZXIpXG4gICAgICBmb2N1c291dFRpbWVyID0gbnVsbFxuICAgIH1cblxuICAgIGlmIChzdGF0ZS5lZGl0YWJsZS52YWx1ZSA9PT0gdHJ1ZSAmJiBzdGF0ZS5mb2N1c2VkLnZhbHVlID09PSBmYWxzZSkge1xuICAgICAgc3RhdGUuZm9jdXNlZC52YWx1ZSA9IHRydWVcbiAgICAgIGVtaXQoJ2ZvY3VzJywgZSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkNvbnRyb2xGb2N1c291dCAoZSwgdGhlbikge1xuICAgIGZvY3Vzb3V0VGltZXIgIT09IG51bGwgJiYgY2xlYXJUaW1lb3V0KGZvY3Vzb3V0VGltZXIpXG4gICAgZm9jdXNvdXRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZm9jdXNvdXRUaW1lciA9IG51bGxcblxuICAgICAgaWYgKFxuICAgICAgICBkb2N1bWVudC5oYXNGb2N1cygpID09PSB0cnVlICYmIChcbiAgICAgICAgICBzdGF0ZS5oYXNQb3B1cE9wZW4gPT09IHRydWVcbiAgICAgICAgICB8fCBzdGF0ZS5jb250cm9sUmVmID09PSB2b2lkIDBcbiAgICAgICAgICB8fCBzdGF0ZS5jb250cm9sUmVmLnZhbHVlID09PSBudWxsXG4gICAgICAgICAgfHwgc3RhdGUuY29udHJvbFJlZi52YWx1ZS5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSAhPT0gZmFsc2VcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuZm9jdXNlZC52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICBzdGF0ZS5mb2N1c2VkLnZhbHVlID0gZmFsc2VcbiAgICAgICAgZW1pdCgnYmx1cicsIGUpXG4gICAgICB9XG5cbiAgICAgIHRoZW4gIT09IHZvaWQgMCAmJiB0aGVuKClcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJWYWx1ZSAoZSkge1xuICAgIC8vIHByZXZlbnQgYWN0aXZhdGluZyB0aGUgZmllbGQgYnV0IGtlZXAgZm9jdXMgb24gZGVza3RvcFxuICAgIHN0b3BBbmRQcmV2ZW50KGUpXG5cbiAgICBpZiAoJHEucGxhdGZvcm0uaXMubW9iaWxlICE9PSB0cnVlKSB7XG4gICAgICBjb25zdCBlbCA9IChzdGF0ZS50YXJnZXRSZWYgIT09IHZvaWQgMCAmJiBzdGF0ZS50YXJnZXRSZWYudmFsdWUpIHx8IHN0YXRlLnJvb3RSZWYudmFsdWVcbiAgICAgIGVsLmZvY3VzKClcbiAgICB9XG4gICAgZWxzZSBpZiAoc3RhdGUucm9vdFJlZi52YWx1ZS5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSA9PT0gdHJ1ZSkge1xuICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKClcbiAgICB9XG5cbiAgICBpZiAocHJvcHMudHlwZSA9PT0gJ2ZpbGUnKSB7XG4gICAgICAvLyBkbyBub3QgbGV0IGZvY3VzIGJlIHRyaWdnZXJlZFxuICAgICAgLy8gYXMgaXQgd2lsbCBtYWtlIHRoZSBuYXRpdmUgZmlsZSBkaWFsb2dcbiAgICAgIC8vIGFwcGVhciBmb3IgYW5vdGhlciBzZWxlY3Rpb25cbiAgICAgIHN0YXRlLmlucHV0UmVmLnZhbHVlLnZhbHVlID0gbnVsbFxuICAgIH1cblxuICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgbnVsbClcbiAgICBzdGF0ZS5jaGFuZ2VFdmVudCA9PT0gdHJ1ZSAmJiBlbWl0KCdjaGFuZ2UnLCBudWxsKVxuICAgIGVtaXQoJ2NsZWFyJywgcHJvcHMubW9kZWxWYWx1ZSlcblxuICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgIGNvbnN0IGlzRGlydHkgPSBpc0RpcnR5TW9kZWwudmFsdWVcbiAgICAgIHJlc2V0VmFsaWRhdGlvbigpXG4gICAgICBpc0RpcnR5TW9kZWwudmFsdWUgPSBpc0RpcnR5XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2xlYXJhYmxlS2V5dXAgKGV2dCkge1xuICAgIFsgMTMsIDMyIF0uaW5jbHVkZXMoZXZ0LmtleUNvZGUpICYmIGNsZWFyVmFsdWUoZXZ0KVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q29udGVudCAoKSB7XG4gICAgY29uc3Qgbm9kZSA9IFtdXG5cbiAgICBzbG90cy5wcmVwZW5kICE9PSB2b2lkIDAgJiYgbm9kZS5wdXNoKFxuICAgICAgaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3EtZmllbGRfX3ByZXBlbmQgcS1maWVsZF9fbWFyZ2luYWwgcm93IG5vLXdyYXAgaXRlbXMtY2VudGVyJyxcbiAgICAgICAga2V5OiAncHJlcGVuZCcsXG4gICAgICAgIG9uQ2xpY2s6IHByZXZlbnRcbiAgICAgIH0sIHNsb3RzLnByZXBlbmQoKSlcbiAgICApXG5cbiAgICBub2RlLnB1c2goXG4gICAgICBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAncS1maWVsZF9fY29udHJvbC1jb250YWluZXIgY29sIHJlbGF0aXZlLXBvc2l0aW9uIHJvdyBuby13cmFwIHEtYW5jaG9yLS1za2lwJ1xuICAgICAgfSwgZ2V0Q29udHJvbENvbnRhaW5lcigpKVxuICAgIClcblxuICAgIGhhc0Vycm9yLnZhbHVlID09PSB0cnVlICYmIHByb3BzLm5vRXJyb3JJY29uID09PSBmYWxzZSAmJiBub2RlLnB1c2goXG4gICAgICBnZXRJbm5lckFwcGVuZE5vZGUoJ2Vycm9yJywgW1xuICAgICAgICBoKFFJY29uLCB7IG5hbWU6ICRxLmljb25TZXQuZmllbGQuZXJyb3IsIGNvbG9yOiAnbmVnYXRpdmUnIH0pXG4gICAgICBdKVxuICAgIClcblxuICAgIGlmIChwcm9wcy5sb2FkaW5nID09PSB0cnVlIHx8IHN0YXRlLmlubmVyTG9hZGluZy52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgbm9kZS5wdXNoKFxuICAgICAgICBnZXRJbm5lckFwcGVuZE5vZGUoXG4gICAgICAgICAgJ2lubmVyLWxvYWRpbmctYXBwZW5kJyxcbiAgICAgICAgICBzbG90cy5sb2FkaW5nICE9PSB2b2lkIDBcbiAgICAgICAgICAgID8gc2xvdHMubG9hZGluZygpXG4gICAgICAgICAgICA6IFsgaChRU3Bpbm5lciwgeyBjb2xvcjogcHJvcHMuY29sb3IgfSkgXVxuICAgICAgICApXG4gICAgICApXG4gICAgfVxuICAgIGVsc2UgaWYgKHByb3BzLmNsZWFyYWJsZSA9PT0gdHJ1ZSAmJiBzdGF0ZS5oYXNWYWx1ZS52YWx1ZSA9PT0gdHJ1ZSAmJiBzdGF0ZS5lZGl0YWJsZS52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgbm9kZS5wdXNoKFxuICAgICAgICBnZXRJbm5lckFwcGVuZE5vZGUoJ2lubmVyLWNsZWFyYWJsZS1hcHBlbmQnLCBbXG4gICAgICAgICAgaChRSWNvbiwge1xuICAgICAgICAgICAgY2xhc3M6ICdxLWZpZWxkX19mb2N1c2FibGUtYWN0aW9uJyxcbiAgICAgICAgICAgIG5hbWU6IHByb3BzLmNsZWFySWNvbiB8fCAkcS5pY29uU2V0LmZpZWxkLmNsZWFyLFxuICAgICAgICAgICAgdGFiaW5kZXg6IDAsXG4gICAgICAgICAgICByb2xlOiAnYnV0dG9uJyxcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6ICdmYWxzZScsXG4gICAgICAgICAgICAnYXJpYS1sYWJlbCc6ICRxLmxhbmcubGFiZWwuY2xlYXIsXG4gICAgICAgICAgICBvbktleXVwOiBvbkNsZWFyYWJsZUtleXVwLFxuICAgICAgICAgICAgb25DbGljazogY2xlYXJWYWx1ZVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICApXG4gICAgfVxuXG4gICAgc2xvdHMuYXBwZW5kICE9PSB2b2lkIDAgJiYgbm9kZS5wdXNoKFxuICAgICAgaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogJ3EtZmllbGRfX2FwcGVuZCBxLWZpZWxkX19tYXJnaW5hbCByb3cgbm8td3JhcCBpdGVtcy1jZW50ZXInLFxuICAgICAgICBrZXk6ICdhcHBlbmQnLFxuICAgICAgICBvbkNsaWNrOiBwcmV2ZW50XG4gICAgICB9LCBzbG90cy5hcHBlbmQoKSlcbiAgICApXG5cbiAgICBzdGF0ZS5nZXRJbm5lckFwcGVuZCAhPT0gdm9pZCAwICYmIG5vZGUucHVzaChcbiAgICAgIGdldElubmVyQXBwZW5kTm9kZSgnaW5uZXItYXBwZW5kJywgc3RhdGUuZ2V0SW5uZXJBcHBlbmQoKSlcbiAgICApXG5cbiAgICBzdGF0ZS5nZXRDb250cm9sQ2hpbGQgIT09IHZvaWQgMCAmJiBub2RlLnB1c2goXG4gICAgICBzdGF0ZS5nZXRDb250cm9sQ2hpbGQoKVxuICAgIClcblxuICAgIHJldHVybiBub2RlXG4gIH1cblxuICBmdW5jdGlvbiBnZXRDb250cm9sQ29udGFpbmVyICgpIHtcbiAgICBjb25zdCBub2RlID0gW11cblxuICAgIHByb3BzLnByZWZpeCAhPT0gdm9pZCAwICYmIHByb3BzLnByZWZpeCAhPT0gbnVsbCAmJiBub2RlLnB1c2goXG4gICAgICBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAncS1maWVsZF9fcHJlZml4IG5vLXBvaW50ZXItZXZlbnRzIHJvdyBpdGVtcy1jZW50ZXInXG4gICAgICB9LCBwcm9wcy5wcmVmaXgpXG4gICAgKVxuXG4gICAgaWYgKHN0YXRlLmdldFNoYWRvd0NvbnRyb2wgIT09IHZvaWQgMCAmJiBzdGF0ZS5oYXNTaGFkb3cudmFsdWUgPT09IHRydWUpIHtcbiAgICAgIG5vZGUucHVzaChcbiAgICAgICAgc3RhdGUuZ2V0U2hhZG93Q29udHJvbCgpXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLmdldENvbnRyb2wgIT09IHZvaWQgMCkge1xuICAgICAgbm9kZS5wdXNoKHN0YXRlLmdldENvbnRyb2woKSlcbiAgICB9XG4gICAgLy8gaW50ZXJuYWwgdXNhZ2Ugb25seTpcbiAgICBlbHNlIGlmIChzbG90cy5yYXdDb250cm9sICE9PSB2b2lkIDApIHtcbiAgICAgIG5vZGUucHVzaChzbG90cy5yYXdDb250cm9sKCkpXG4gICAgfVxuICAgIGVsc2UgaWYgKHNsb3RzLmNvbnRyb2wgIT09IHZvaWQgMCkge1xuICAgICAgbm9kZS5wdXNoKFxuICAgICAgICBoKCdkaXYnLCB7XG4gICAgICAgICAgcmVmOiBzdGF0ZS50YXJnZXRSZWYsXG4gICAgICAgICAgY2xhc3M6ICdxLWZpZWxkX19uYXRpdmUgcm93JyxcbiAgICAgICAgICB0YWJpbmRleDogLTEsXG4gICAgICAgICAgLi4uc3RhdGUuc3BsaXRBdHRycy5hdHRyaWJ1dGVzLnZhbHVlLFxuICAgICAgICAgICdkYXRhLWF1dG9mb2N1cyc6IHByb3BzLmF1dG9mb2N1cyA9PT0gdHJ1ZSB8fCB2b2lkIDBcbiAgICAgICAgfSwgc2xvdHMuY29udHJvbChjb250cm9sU2xvdFNjb3BlLnZhbHVlKSlcbiAgICAgIClcbiAgICB9XG5cbiAgICBoYXNMYWJlbC52YWx1ZSA9PT0gdHJ1ZSAmJiBub2RlLnB1c2goXG4gICAgICBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiBsYWJlbENsYXNzLnZhbHVlXG4gICAgICB9LCBoU2xvdChzbG90cy5sYWJlbCwgcHJvcHMubGFiZWwpKVxuICAgIClcblxuICAgIHByb3BzLnN1ZmZpeCAhPT0gdm9pZCAwICYmIHByb3BzLnN1ZmZpeCAhPT0gbnVsbCAmJiBub2RlLnB1c2goXG4gICAgICBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiAncS1maWVsZF9fc3VmZml4IG5vLXBvaW50ZXItZXZlbnRzIHJvdyBpdGVtcy1jZW50ZXInXG4gICAgICB9LCBwcm9wcy5zdWZmaXgpXG4gICAgKVxuXG4gICAgcmV0dXJuIG5vZGUuY29uY2F0KGhTbG90KHNsb3RzLmRlZmF1bHQpKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Qm90dG9tICgpIHtcbiAgICBsZXQgbXNnLCBrZXlcblxuICAgIGlmIChoYXNFcnJvci52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgaWYgKGVycm9yTWVzc2FnZS52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICBtc2cgPSBbIGgoJ2RpdicsIHsgcm9sZTogJ2FsZXJ0JyB9LCBlcnJvck1lc3NhZ2UudmFsdWUpIF1cbiAgICAgICAga2V5ID0gYHEtLXNsb3QtZXJyb3ItJHsgZXJyb3JNZXNzYWdlLnZhbHVlIH1gXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbXNnID0gaFNsb3Qoc2xvdHMuZXJyb3IpXG4gICAgICAgIGtleSA9ICdxLS1zbG90LWVycm9yJ1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChwcm9wcy5oaWRlSGludCAhPT0gdHJ1ZSB8fCBzdGF0ZS5mb2N1c2VkLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICBpZiAocHJvcHMuaGludCAhPT0gdm9pZCAwKSB7XG4gICAgICAgIG1zZyA9IFsgaCgnZGl2JywgcHJvcHMuaGludCkgXVxuICAgICAgICBrZXkgPSBgcS0tc2xvdC1oaW50LSR7IHByb3BzLmhpbnQgfWBcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBtc2cgPSBoU2xvdChzbG90cy5oaW50KVxuICAgICAgICBrZXkgPSAncS0tc2xvdC1oaW50J1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGhhc0NvdW50ZXIgPSBwcm9wcy5jb3VudGVyID09PSB0cnVlIHx8IHNsb3RzLmNvdW50ZXIgIT09IHZvaWQgMFxuXG4gICAgaWYgKHByb3BzLmhpZGVCb3R0b21TcGFjZSA9PT0gdHJ1ZSAmJiBoYXNDb3VudGVyID09PSBmYWxzZSAmJiBtc2cgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgbWFpbiA9IGgoJ2RpdicsIHtcbiAgICAgIGtleSxcbiAgICAgIGNsYXNzOiAncS1maWVsZF9fbWVzc2FnZXMgY29sJ1xuICAgIH0sIG1zZylcblxuICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICBjbGFzczogJ3EtZmllbGRfX2JvdHRvbSByb3cgaXRlbXMtc3RhcnQgcS1maWVsZF9fYm90dG9tLS0nXG4gICAgICAgICsgKHByb3BzLmhpZGVCb3R0b21TcGFjZSAhPT0gdHJ1ZSA/ICdhbmltYXRlZCcgOiAnc3RhbGUnKSxcbiAgICAgIG9uQ2xpY2s6IHByZXZlbnRcbiAgICB9LCBbXG4gICAgICBwcm9wcy5oaWRlQm90dG9tU3BhY2UgPT09IHRydWVcbiAgICAgICAgPyBtYWluXG4gICAgICAgIDogaChUcmFuc2l0aW9uLCB7IG5hbWU6ICdxLXRyYW5zaXRpb24tLWZpZWxkLW1lc3NhZ2UnIH0sICgpID0+IG1haW4pLFxuXG4gICAgICBoYXNDb3VudGVyID09PSB0cnVlXG4gICAgICAgID8gaCgnZGl2Jywge1xuICAgICAgICAgIGNsYXNzOiAncS1maWVsZF9fY291bnRlcidcbiAgICAgICAgfSwgc2xvdHMuY291bnRlciAhPT0gdm9pZCAwID8gc2xvdHMuY291bnRlcigpIDogc3RhdGUuY29tcHV0ZWRDb3VudGVyLnZhbHVlKVxuICAgICAgICA6IG51bGxcbiAgICBdKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW5uZXJBcHBlbmROb2RlIChrZXksIGNvbnRlbnQpIHtcbiAgICByZXR1cm4gY29udGVudCA9PT0gbnVsbFxuICAgICAgPyBudWxsXG4gICAgICA6IGgoJ2RpdicsIHtcbiAgICAgICAga2V5LFxuICAgICAgICBjbGFzczogJ3EtZmllbGRfX2FwcGVuZCBxLWZpZWxkX19tYXJnaW5hbCByb3cgbm8td3JhcCBpdGVtcy1jZW50ZXIgcS1hbmNob3ItLXNraXAnXG4gICAgICB9LCBjb250ZW50KVxuICB9XG5cbiAgbGV0IHNob3VsZEFjdGl2YXRlID0gZmFsc2VcblxuICBvbkRlYWN0aXZhdGVkKCgpID0+IHtcbiAgICBzaG91bGRBY3RpdmF0ZSA9IHRydWVcbiAgfSlcblxuICBvbkFjdGl2YXRlZCgoKSA9PiB7XG4gICAgc2hvdWxkQWN0aXZhdGUgPT09IHRydWUgJiYgcHJvcHMuYXV0b2ZvY3VzID09PSB0cnVlICYmIHByb3h5LmZvY3VzKClcbiAgfSlcblxuICBwcm9wcy5hdXRvZm9jdXMgPT09IHRydWUgJiYgb25Nb3VudGVkKCgpID0+IHtcbiAgICBwcm94eS5mb2N1cygpXG4gIH0pXG5cbiAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICBmb2N1c291dFRpbWVyICE9PSBudWxsICYmIGNsZWFyVGltZW91dChmb2N1c291dFRpbWVyKVxuICB9KVxuXG4gIC8vIGV4cG9zZSBwdWJsaWMgbWV0aG9kc1xuICBPYmplY3QuYXNzaWduKHByb3h5LCB7IGZvY3VzLCBibHVyIH0pXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHJlbmRlckZpZWxkICgpIHtcbiAgICBjb25zdCBsYWJlbEF0dHJzID0gc3RhdGUuZ2V0Q29udHJvbCA9PT0gdm9pZCAwICYmIHNsb3RzLmNvbnRyb2wgPT09IHZvaWQgMFxuICAgICAgPyB7XG4gICAgICAgICAgLi4uc3RhdGUuc3BsaXRBdHRycy5hdHRyaWJ1dGVzLnZhbHVlLFxuICAgICAgICAgICdkYXRhLWF1dG9mb2N1cyc6IHByb3BzLmF1dG9mb2N1cyA9PT0gdHJ1ZSB8fCB2b2lkIDAsXG4gICAgICAgICAgLi4uYXR0cmlidXRlcy52YWx1ZVxuICAgICAgICB9XG4gICAgICA6IGF0dHJpYnV0ZXMudmFsdWVcblxuICAgIHJldHVybiBoKHN0YXRlLnRhZy52YWx1ZSwge1xuICAgICAgcmVmOiBzdGF0ZS5yb290UmVmLFxuICAgICAgY2xhc3M6IFtcbiAgICAgICAgY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgYXR0cnMuY2xhc3NcbiAgICAgIF0sXG4gICAgICBzdHlsZTogYXR0cnMuc3R5bGUsXG4gICAgICAuLi5sYWJlbEF0dHJzXG4gICAgfSwgW1xuICAgICAgc2xvdHMuYmVmb3JlICE9PSB2b2lkIDBcbiAgICAgICAgPyBoKCdkaXYnLCB7XG4gICAgICAgICAgY2xhc3M6ICdxLWZpZWxkX19iZWZvcmUgcS1maWVsZF9fbWFyZ2luYWwgcm93IG5vLXdyYXAgaXRlbXMtY2VudGVyJyxcbiAgICAgICAgICBvbkNsaWNrOiBwcmV2ZW50XG4gICAgICAgIH0sIHNsb3RzLmJlZm9yZSgpKVxuICAgICAgICA6IG51bGwsXG5cbiAgICAgIGgoJ2RpdicsIHtcbiAgICAgICAgY2xhc3M6ICdxLWZpZWxkX19pbm5lciByZWxhdGl2ZS1wb3NpdGlvbiBjb2wgc2VsZi1zdHJldGNoJ1xuICAgICAgfSwgW1xuICAgICAgICBoKCdkaXYnLCB7XG4gICAgICAgICAgcmVmOiBzdGF0ZS5jb250cm9sUmVmLFxuICAgICAgICAgIGNsYXNzOiBjb250ZW50Q2xhc3MudmFsdWUsXG4gICAgICAgICAgdGFiaW5kZXg6IC0xLFxuICAgICAgICAgIC4uLnN0YXRlLmNvbnRyb2xFdmVudHNcbiAgICAgICAgfSwgZ2V0Q29udGVudCgpKSxcblxuICAgICAgICBzaG91bGRSZW5kZXJCb3R0b20udmFsdWUgPT09IHRydWVcbiAgICAgICAgICA/IGdldEJvdHRvbSgpXG4gICAgICAgICAgOiBudWxsXG4gICAgICBdKSxcblxuICAgICAgc2xvdHMuYWZ0ZXIgIT09IHZvaWQgMFxuICAgICAgICA/IGgoJ2RpdicsIHtcbiAgICAgICAgICBjbGFzczogJ3EtZmllbGRfX2FmdGVyIHEtZmllbGRfX21hcmdpbmFsIHJvdyBuby13cmFwIGl0ZW1zLWNlbnRlcicsXG4gICAgICAgICAgb25DbGljazogcHJldmVudFxuICAgICAgICB9LCBzbG90cy5hZnRlcigpKVxuICAgICAgICA6IG51bGxcbiAgICBdKVxuICB9XG59XG4iLCJpbXBvcnQgeyByZWYsIHdhdGNoLCBuZXh0VGljayB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IHsgc2hvdWxkSWdub3JlS2V5IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5rZXlib2FyZC9rZXktY29tcG9zaXRpb24uanMnXG5cbi8vIGxlYXZlIE5BTUVEX01BU0tTIGF0IHRvcCBvZiBmaWxlIChjb2RlIHJlZmVyZW5jZWQgZnJvbSBkb2NzKVxuY29uc3QgTkFNRURfTUFTS1MgPSB7XG4gIGRhdGU6ICcjIyMjLyMjLyMjJyxcbiAgZGF0ZXRpbWU6ICcjIyMjLyMjLyMjICMjOiMjJyxcbiAgdGltZTogJyMjOiMjJyxcbiAgZnVsbHRpbWU6ICcjIzojIzojIycsXG4gIHBob25lOiAnKCMjIykgIyMjIC0gIyMjIycsXG4gIGNhcmQ6ICcjIyMjICMjIyMgIyMjIyAjIyMjJ1xufVxuXG5jb25zdCBUT0tFTlMgPSB7XG4gICcjJzogeyBwYXR0ZXJuOiAnW1xcXFxkXScsIG5lZ2F0ZTogJ1teXFxcXGRdJyB9LFxuXG4gIFM6IHsgcGF0dGVybjogJ1thLXpBLVpdJywgbmVnYXRlOiAnW15hLXpBLVpdJyB9LFxuICBOOiB7IHBhdHRlcm46ICdbMC05YS16QS1aXScsIG5lZ2F0ZTogJ1teMC05YS16QS1aXScgfSxcblxuICBBOiB7IHBhdHRlcm46ICdbYS16QS1aXScsIG5lZ2F0ZTogJ1teYS16QS1aXScsIHRyYW5zZm9ybTogdiA9PiB2LnRvTG9jYWxlVXBwZXJDYXNlKCkgfSxcbiAgYTogeyBwYXR0ZXJuOiAnW2EtekEtWl0nLCBuZWdhdGU6ICdbXmEtekEtWl0nLCB0cmFuc2Zvcm06IHYgPT4gdi50b0xvY2FsZUxvd2VyQ2FzZSgpIH0sXG5cbiAgWDogeyBwYXR0ZXJuOiAnWzAtOWEtekEtWl0nLCBuZWdhdGU6ICdbXjAtOWEtekEtWl0nLCB0cmFuc2Zvcm06IHYgPT4gdi50b0xvY2FsZVVwcGVyQ2FzZSgpIH0sXG4gIHg6IHsgcGF0dGVybjogJ1swLTlhLXpBLVpdJywgbmVnYXRlOiAnW14wLTlhLXpBLVpdJywgdHJhbnNmb3JtOiB2ID0+IHYudG9Mb2NhbGVMb3dlckNhc2UoKSB9XG59XG5cbmNvbnN0IEtFWVMgPSBPYmplY3Qua2V5cyhUT0tFTlMpXG5LRVlTLmZvckVhY2goa2V5ID0+IHtcbiAgVE9LRU5TWyBrZXkgXS5yZWdleCA9IG5ldyBSZWdFeHAoVE9LRU5TWyBrZXkgXS5wYXR0ZXJuKVxufSlcblxuY29uc3RcbiAgdG9rZW5SZWdleE1hc2sgPSBuZXcgUmVnRXhwKCdcXFxcXFxcXChbXi4qKz9eJHt9KCl8KFtcXFxcXV0pfChbLiorP14ke30oKXxbXFxcXF1dKXwoWycgKyBLRVlTLmpvaW4oJycpICsgJ10pfCguKScsICdnJyksXG4gIGVzY1JlZ2V4ID0gL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nXG5cbmNvbnN0IE1BUktFUiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMSlcblxuZXhwb3J0IGNvbnN0IHVzZU1hc2tQcm9wcyA9IHtcbiAgbWFzazogU3RyaW5nLFxuICByZXZlcnNlRmlsbE1hc2s6IEJvb2xlYW4sXG4gIGZpbGxNYXNrOiBbIEJvb2xlYW4sIFN0cmluZyBdLFxuICB1bm1hc2tlZFZhbHVlOiBCb29sZWFuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChwcm9wcywgZW1pdCwgZW1pdFZhbHVlLCBpbnB1dFJlZikge1xuICBsZXQgbWFza01hcmtlZCwgbWFza1JlcGxhY2VkLCBjb21wdXRlZE1hc2ssIGNvbXB1dGVkVW5tYXNrLCBwYXN0ZWRUZXh0U3RhcnQsIHNlbGVjdGlvbkFuY2hvclxuXG4gIGNvbnN0IGhhc01hc2sgPSByZWYobnVsbClcbiAgY29uc3QgaW5uZXJWYWx1ZSA9IHJlZihnZXRJbml0aWFsTWFza2VkVmFsdWUoKSlcblxuICBmdW5jdGlvbiBnZXRJc1R5cGVUZXh0ICgpIHtcbiAgICByZXR1cm4gcHJvcHMuYXV0b2dyb3cgPT09IHRydWVcbiAgICAgIHx8IFsgJ3RleHRhcmVhJywgJ3RleHQnLCAnc2VhcmNoJywgJ3VybCcsICd0ZWwnLCAncGFzc3dvcmQnIF0uaW5jbHVkZXMocHJvcHMudHlwZSlcbiAgfVxuXG4gIHdhdGNoKCgpID0+IHByb3BzLnR5cGUgKyBwcm9wcy5hdXRvZ3JvdywgdXBkYXRlTWFza0ludGVybmFscylcblxuICB3YXRjaCgoKSA9PiBwcm9wcy5tYXNrLCB2ID0+IHtcbiAgICBpZiAodiAhPT0gdm9pZCAwKSB7XG4gICAgICB1cGRhdGVNYXNrVmFsdWUoaW5uZXJWYWx1ZS52YWx1ZSwgdHJ1ZSlcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCB2YWwgPSB1bm1hc2tWYWx1ZShpbm5lclZhbHVlLnZhbHVlKVxuICAgICAgdXBkYXRlTWFza0ludGVybmFscygpXG4gICAgICBwcm9wcy5tb2RlbFZhbHVlICE9PSB2YWwgJiYgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCB2YWwpXG4gICAgfVxuICB9KVxuXG4gIHdhdGNoKCgpID0+IHByb3BzLmZpbGxNYXNrICsgcHJvcHMucmV2ZXJzZUZpbGxNYXNrLCAoKSA9PiB7XG4gICAgaGFzTWFzay52YWx1ZSA9PT0gdHJ1ZSAmJiB1cGRhdGVNYXNrVmFsdWUoaW5uZXJWYWx1ZS52YWx1ZSwgdHJ1ZSlcbiAgfSlcblxuICB3YXRjaCgoKSA9PiBwcm9wcy51bm1hc2tlZFZhbHVlLCAoKSA9PiB7XG4gICAgaGFzTWFzay52YWx1ZSA9PT0gdHJ1ZSAmJiB1cGRhdGVNYXNrVmFsdWUoaW5uZXJWYWx1ZS52YWx1ZSlcbiAgfSlcblxuICBmdW5jdGlvbiBnZXRJbml0aWFsTWFza2VkVmFsdWUgKCkge1xuICAgIHVwZGF0ZU1hc2tJbnRlcm5hbHMoKVxuXG4gICAgaWYgKGhhc01hc2sudmFsdWUgPT09IHRydWUpIHtcbiAgICAgIGNvbnN0IG1hc2tlZCA9IG1hc2tWYWx1ZSh1bm1hc2tWYWx1ZShwcm9wcy5tb2RlbFZhbHVlKSlcblxuICAgICAgcmV0dXJuIHByb3BzLmZpbGxNYXNrICE9PSBmYWxzZVxuICAgICAgICA/IGZpbGxXaXRoTWFzayhtYXNrZWQpXG4gICAgICAgIDogbWFza2VkXG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BzLm1vZGVsVmFsdWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFBhZGRlZE1hc2tNYXJrZWQgKHNpemUpIHtcbiAgICBpZiAoc2l6ZSA8IG1hc2tNYXJrZWQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbWFza01hcmtlZC5zbGljZSgtc2l6ZSlcbiAgICB9XG5cbiAgICBsZXQgcGFkID0gJycsIGxvY2FsTWFza01hcmtlZCA9IG1hc2tNYXJrZWRcbiAgICBjb25zdCBwYWRQb3MgPSBsb2NhbE1hc2tNYXJrZWQuaW5kZXhPZihNQVJLRVIpXG5cbiAgICBpZiAocGFkUG9zICE9PSAtMSkge1xuICAgICAgZm9yIChsZXQgaSA9IHNpemUgLSBsb2NhbE1hc2tNYXJrZWQubGVuZ3RoOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIHBhZCArPSBNQVJLRVJcbiAgICAgIH1cblxuICAgICAgbG9jYWxNYXNrTWFya2VkID0gbG9jYWxNYXNrTWFya2VkLnNsaWNlKDAsIHBhZFBvcykgKyBwYWQgKyBsb2NhbE1hc2tNYXJrZWQuc2xpY2UocGFkUG9zKVxuICAgIH1cblxuICAgIHJldHVybiBsb2NhbE1hc2tNYXJrZWRcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU1hc2tJbnRlcm5hbHMgKCkge1xuICAgIGhhc01hc2sudmFsdWUgPSBwcm9wcy5tYXNrICE9PSB2b2lkIDBcbiAgICAgICYmIHByb3BzLm1hc2subGVuZ3RoICE9PSAwXG4gICAgICAmJiBnZXRJc1R5cGVUZXh0KClcblxuICAgIGlmIChoYXNNYXNrLnZhbHVlID09PSBmYWxzZSkge1xuICAgICAgY29tcHV0ZWRVbm1hc2sgPSB2b2lkIDBcbiAgICAgIG1hc2tNYXJrZWQgPSAnJ1xuICAgICAgbWFza1JlcGxhY2VkID0gJydcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0XG4gICAgICBsb2NhbENvbXB1dGVkTWFzayA9IE5BTUVEX01BU0tTWyBwcm9wcy5tYXNrIF0gPT09IHZvaWQgMFxuICAgICAgICA/IHByb3BzLm1hc2tcbiAgICAgICAgOiBOQU1FRF9NQVNLU1sgcHJvcHMubWFzayBdLFxuICAgICAgZmlsbENoYXIgPSB0eXBlb2YgcHJvcHMuZmlsbE1hc2sgPT09ICdzdHJpbmcnICYmIHByb3BzLmZpbGxNYXNrLmxlbmd0aCAhPT0gMFxuICAgICAgICA/IHByb3BzLmZpbGxNYXNrLnNsaWNlKDAsIDEpXG4gICAgICAgIDogJ18nLFxuICAgICAgZmlsbENoYXJFc2NhcGVkID0gZmlsbENoYXIucmVwbGFjZShlc2NSZWdleCwgJ1xcXFwkJicpLFxuICAgICAgdW5tYXNrID0gW10sXG4gICAgICBleHRyYWN0ID0gW10sXG4gICAgICBtYXNrID0gW11cblxuICAgIGxldFxuICAgICAgZmlyc3RNYXRjaCA9IHByb3BzLnJldmVyc2VGaWxsTWFzayA9PT0gdHJ1ZSxcbiAgICAgIHVubWFza0NoYXIgPSAnJyxcbiAgICAgIG5lZ2F0ZUNoYXIgPSAnJ1xuXG4gICAgbG9jYWxDb21wdXRlZE1hc2sucmVwbGFjZSh0b2tlblJlZ2V4TWFzaywgKF8sIGNoYXIxLCBlc2MsIHRva2VuLCBjaGFyMikgPT4ge1xuICAgICAgaWYgKHRva2VuICE9PSB2b2lkIDApIHtcbiAgICAgICAgY29uc3QgYyA9IFRPS0VOU1sgdG9rZW4gXVxuICAgICAgICBtYXNrLnB1c2goYylcbiAgICAgICAgbmVnYXRlQ2hhciA9IGMubmVnYXRlXG4gICAgICAgIGlmIChmaXJzdE1hdGNoID09PSB0cnVlKSB7XG4gICAgICAgICAgZXh0cmFjdC5wdXNoKCcoPzonICsgbmVnYXRlQ2hhciArICcrKT8oJyArIGMucGF0dGVybiArICcrKT8oPzonICsgbmVnYXRlQ2hhciArICcrKT8oJyArIGMucGF0dGVybiArICcrKT8nKVxuICAgICAgICAgIGZpcnN0TWF0Y2ggPSBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIGV4dHJhY3QucHVzaCgnKD86JyArIG5lZ2F0ZUNoYXIgKyAnKyk/KCcgKyBjLnBhdHRlcm4gKyAnKT8nKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZXNjICE9PSB2b2lkIDApIHtcbiAgICAgICAgdW5tYXNrQ2hhciA9ICdcXFxcJyArIChlc2MgPT09ICdcXFxcJyA/ICcnIDogZXNjKVxuICAgICAgICBtYXNrLnB1c2goZXNjKVxuICAgICAgICB1bm1hc2sucHVzaCgnKFteJyArIHVubWFza0NoYXIgKyAnXSspPycgKyB1bm1hc2tDaGFyICsgJz8nKVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGMgPSBjaGFyMSAhPT0gdm9pZCAwID8gY2hhcjEgOiBjaGFyMlxuICAgICAgICB1bm1hc2tDaGFyID0gYyA9PT0gJ1xcXFwnID8gJ1xcXFxcXFxcXFxcXFxcXFwnIDogYy5yZXBsYWNlKGVzY1JlZ2V4LCAnXFxcXFxcXFwkJicpXG4gICAgICAgIG1hc2sucHVzaChjKVxuICAgICAgICB1bm1hc2sucHVzaCgnKFteJyArIHVubWFza0NoYXIgKyAnXSspPycgKyB1bm1hc2tDaGFyICsgJz8nKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdFxuICAgICAgdW5tYXNrTWF0Y2hlciA9IG5ldyBSZWdFeHAoXG4gICAgICAgICdeJ1xuICAgICAgICArIHVubWFzay5qb2luKCcnKVxuICAgICAgICArICcoJyArICh1bm1hc2tDaGFyID09PSAnJyA/ICcuJyA6ICdbXicgKyB1bm1hc2tDaGFyICsgJ10nKSArICcrKT8nXG4gICAgICAgICsgKHVubWFza0NoYXIgPT09ICcnID8gJycgOiAnWycgKyB1bm1hc2tDaGFyICsgJ10qJykgKyAnJCdcbiAgICAgICksXG4gICAgICBleHRyYWN0TGFzdCA9IGV4dHJhY3QubGVuZ3RoIC0gMSxcbiAgICAgIGV4dHJhY3RNYXRjaGVyID0gZXh0cmFjdC5tYXAoKHJlLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgcHJvcHMucmV2ZXJzZUZpbGxNYXNrID09PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgZmlsbENoYXJFc2NhcGVkICsgJyonICsgcmUpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5kZXggPT09IGV4dHJhY3RMYXN0KSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXicgKyByZVxuICAgICAgICAgICAgKyAnKCcgKyAobmVnYXRlQ2hhciA9PT0gJycgPyAnLicgOiBuZWdhdGVDaGFyKSArICcrKT8nXG4gICAgICAgICAgICArIChwcm9wcy5yZXZlcnNlRmlsbE1hc2sgPT09IHRydWUgPyAnJCcgOiBmaWxsQ2hhckVzY2FwZWQgKyAnKicpXG4gICAgICAgICAgKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcmUpXG4gICAgICB9KVxuXG4gICAgY29tcHV0ZWRNYXNrID0gbWFza1xuICAgIGNvbXB1dGVkVW5tYXNrID0gdmFsID0+IHtcbiAgICAgIGNvbnN0IHVubWFza01hdGNoID0gdW5tYXNrTWF0Y2hlci5leGVjKHByb3BzLnJldmVyc2VGaWxsTWFzayA9PT0gdHJ1ZSA/IHZhbCA6IHZhbC5zbGljZSgwLCBtYXNrLmxlbmd0aCArIDEpKVxuICAgICAgaWYgKHVubWFza01hdGNoICE9PSBudWxsKSB7XG4gICAgICAgIHZhbCA9IHVubWFza01hdGNoLnNsaWNlKDEpLmpvaW4oJycpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0XG4gICAgICAgIGV4dHJhY3RNYXRjaCA9IFtdLFxuICAgICAgICBleHRyYWN0TWF0Y2hlckxlbmd0aCA9IGV4dHJhY3RNYXRjaGVyLmxlbmd0aFxuXG4gICAgICBmb3IgKGxldCBpID0gMCwgc3RyID0gdmFsOyBpIDwgZXh0cmFjdE1hdGNoZXJMZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBtID0gZXh0cmFjdE1hdGNoZXJbIGkgXS5leGVjKHN0cilcblxuICAgICAgICBpZiAobSA9PT0gbnVsbCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cblxuICAgICAgICBzdHIgPSBzdHIuc2xpY2UobS5zaGlmdCgpLmxlbmd0aClcbiAgICAgICAgZXh0cmFjdE1hdGNoLnB1c2goLi4ubSlcbiAgICAgIH1cbiAgICAgIGlmIChleHRyYWN0TWF0Y2gubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBleHRyYWN0TWF0Y2guam9pbignJylcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbFxuICAgIH1cbiAgICBtYXNrTWFya2VkID0gbWFzay5tYXAodiA9PiAodHlwZW9mIHYgPT09ICdzdHJpbmcnID8gdiA6IE1BUktFUikpLmpvaW4oJycpXG4gICAgbWFza1JlcGxhY2VkID0gbWFza01hcmtlZC5zcGxpdChNQVJLRVIpLmpvaW4oZmlsbENoYXIpXG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVNYXNrVmFsdWUgKHJhd1ZhbCwgdXBkYXRlTWFza0ludGVybmFsc0ZsYWcsIGlucHV0VHlwZSkge1xuICAgIGNvbnN0XG4gICAgICBpbnAgPSBpbnB1dFJlZi52YWx1ZSxcbiAgICAgIGVuZCA9IGlucC5zZWxlY3Rpb25FbmQsXG4gICAgICBlbmRSZXZlcnNlID0gaW5wLnZhbHVlLmxlbmd0aCAtIGVuZCxcbiAgICAgIHVubWFza2VkID0gdW5tYXNrVmFsdWUocmF3VmFsKVxuXG4gICAgLy8gVXBkYXRlIGhlcmUgc28gdW5tYXNrIHVzZXMgdGhlIG9yaWdpbmFsIGZpbGxDaGFyXG4gICAgdXBkYXRlTWFza0ludGVybmFsc0ZsYWcgPT09IHRydWUgJiYgdXBkYXRlTWFza0ludGVybmFscygpXG5cbiAgICBjb25zdFxuICAgICAgcHJlTWFza2VkID0gbWFza1ZhbHVlKHVubWFza2VkKSxcbiAgICAgIG1hc2tlZCA9IHByb3BzLmZpbGxNYXNrICE9PSBmYWxzZVxuICAgICAgICA/IGZpbGxXaXRoTWFzayhwcmVNYXNrZWQpXG4gICAgICAgIDogcHJlTWFza2VkLFxuICAgICAgY2hhbmdlZCA9IGlubmVyVmFsdWUudmFsdWUgIT09IG1hc2tlZFxuXG4gICAgLy8gV2Ugd2FudCB0byBhdm9pZCBcImZsaWNrZXJpbmdcIiBzbyB3ZSBzZXQgdmFsdWUgaW1tZWRpYXRlbHlcbiAgICBpbnAudmFsdWUgIT09IG1hc2tlZCAmJiAoaW5wLnZhbHVlID0gbWFza2VkKVxuXG4gICAgY2hhbmdlZCA9PT0gdHJ1ZSAmJiAoaW5uZXJWYWx1ZS52YWx1ZSA9IG1hc2tlZClcblxuICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGlucCAmJiBuZXh0VGljaygoKSA9PiB7XG4gICAgICBpZiAobWFza2VkID09PSBtYXNrUmVwbGFjZWQpIHtcbiAgICAgICAgY29uc3QgY3Vyc29yID0gcHJvcHMucmV2ZXJzZUZpbGxNYXNrID09PSB0cnVlID8gbWFza1JlcGxhY2VkLmxlbmd0aCA6IDBcbiAgICAgICAgaW5wLnNldFNlbGVjdGlvblJhbmdlKGN1cnNvciwgY3Vyc29yLCAnZm9yd2FyZCcpXG5cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChpbnB1dFR5cGUgPT09ICdpbnNlcnRGcm9tUGFzdGUnICYmIHByb3BzLnJldmVyc2VGaWxsTWFzayAhPT0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBtYXhFbmQgPSBpbnAuc2VsZWN0aW9uRW5kXG4gICAgICAgIGxldCBjdXJzb3IgPSBlbmQgLSAxXG4gICAgICAgIC8vIGVhY2ggbm9uLW1hcmtlciBjaGFyIG1lYW5zIHdlIG1vdmUgb25jZSB0byByaWdodFxuICAgICAgICBmb3IgKGxldCBpID0gcGFzdGVkVGV4dFN0YXJ0OyBpIDw9IGN1cnNvciAmJiBpIDwgbWF4RW5kOyBpKyspIHtcbiAgICAgICAgICBpZiAobWFza01hcmtlZFsgaSBdICE9PSBNQVJLRVIpIHtcbiAgICAgICAgICAgIGN1cnNvcisrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1vdmVDdXJzb3IucmlnaHQoaW5wLCBjdXJzb3IpXG5cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChbICdkZWxldGVDb250ZW50QmFja3dhcmQnLCAnZGVsZXRlQ29udGVudEZvcndhcmQnIF0uaW5kZXhPZihpbnB1dFR5cGUpICE9PSAtMSkge1xuICAgICAgICBjb25zdCBjdXJzb3IgPSBwcm9wcy5yZXZlcnNlRmlsbE1hc2sgPT09IHRydWVcbiAgICAgICAgICA/IChcbiAgICAgICAgICAgICAgZW5kID09PSAwXG4gICAgICAgICAgICAgICAgPyAobWFza2VkLmxlbmd0aCA+IHByZU1hc2tlZC5sZW5ndGggPyAxIDogMClcbiAgICAgICAgICAgICAgICA6IE1hdGgubWF4KDAsIG1hc2tlZC5sZW5ndGggLSAobWFza2VkID09PSBtYXNrUmVwbGFjZWQgPyAwIDogTWF0aC5taW4ocHJlTWFza2VkLmxlbmd0aCwgZW5kUmV2ZXJzZSkgKyAxKSkgKyAxXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiBlbmRcblxuICAgICAgICBpbnAuc2V0U2VsZWN0aW9uUmFuZ2UoY3Vyc29yLCBjdXJzb3IsICdmb3J3YXJkJylcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wcy5yZXZlcnNlRmlsbE1hc2sgPT09IHRydWUpIHtcbiAgICAgICAgaWYgKGNoYW5nZWQgPT09IHRydWUpIHtcbiAgICAgICAgICBjb25zdCBjdXJzb3IgPSBNYXRoLm1heCgwLCBtYXNrZWQubGVuZ3RoIC0gKG1hc2tlZCA9PT0gbWFza1JlcGxhY2VkID8gMCA6IE1hdGgubWluKHByZU1hc2tlZC5sZW5ndGgsIGVuZFJldmVyc2UgKyAxKSkpXG5cbiAgICAgICAgICBpZiAoY3Vyc29yID09PSAxICYmIGVuZCA9PT0gMSkge1xuICAgICAgICAgICAgaW5wLnNldFNlbGVjdGlvblJhbmdlKGN1cnNvciwgY3Vyc29yLCAnZm9yd2FyZCcpXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbW92ZUN1cnNvci5yaWdodFJldmVyc2UoaW5wLCBjdXJzb3IpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGN1cnNvciA9IG1hc2tlZC5sZW5ndGggLSBlbmRSZXZlcnNlXG4gICAgICAgICAgaW5wLnNldFNlbGVjdGlvblJhbmdlKGN1cnNvciwgY3Vyc29yLCAnYmFja3dhcmQnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKGNoYW5nZWQgPT09IHRydWUpIHtcbiAgICAgICAgICBjb25zdCBjdXJzb3IgPSBNYXRoLm1heCgwLCBtYXNrTWFya2VkLmluZGV4T2YoTUFSS0VSKSwgTWF0aC5taW4ocHJlTWFza2VkLmxlbmd0aCwgZW5kKSAtIDEpXG4gICAgICAgICAgbW92ZUN1cnNvci5yaWdodChpbnAsIGN1cnNvcilcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb25zdCBjdXJzb3IgPSBlbmQgLSAxXG4gICAgICAgICAgbW92ZUN1cnNvci5yaWdodChpbnAsIGN1cnNvcilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCB2YWwgPSBwcm9wcy51bm1hc2tlZFZhbHVlID09PSB0cnVlXG4gICAgICA/IHVubWFza1ZhbHVlKG1hc2tlZClcbiAgICAgIDogbWFza2VkXG5cbiAgICBpZiAoXG4gICAgICBTdHJpbmcocHJvcHMubW9kZWxWYWx1ZSkgIT09IHZhbFxuICAgICAgJiYgKHByb3BzLm1vZGVsVmFsdWUgIT09IG51bGwgfHwgdmFsICE9PSAnJylcbiAgICApIHtcbiAgICAgIGVtaXRWYWx1ZSh2YWwsIHRydWUpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbW92ZUN1cnNvckZvclBhc3RlIChpbnAsIHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zdCBwcmVNYXNrZWQgPSBtYXNrVmFsdWUodW5tYXNrVmFsdWUoaW5wLnZhbHVlKSlcblxuICAgIHN0YXJ0ID0gTWF0aC5tYXgoMCwgbWFza01hcmtlZC5pbmRleE9mKE1BUktFUiksIE1hdGgubWluKHByZU1hc2tlZC5sZW5ndGgsIHN0YXJ0KSlcbiAgICBwYXN0ZWRUZXh0U3RhcnQgPSBzdGFydFxuXG4gICAgaW5wLnNldFNlbGVjdGlvblJhbmdlKHN0YXJ0LCBlbmQsICdmb3J3YXJkJylcbiAgfVxuXG4gIGNvbnN0IG1vdmVDdXJzb3IgPSB7XG4gICAgbGVmdCAoaW5wLCBjdXJzb3IpIHtcbiAgICAgIGNvbnN0IG5vTWFya0JlZm9yZSA9IG1hc2tNYXJrZWQuc2xpY2UoY3Vyc29yIC0gMSkuaW5kZXhPZihNQVJLRVIpID09PSAtMVxuICAgICAgbGV0IGkgPSBNYXRoLm1heCgwLCBjdXJzb3IgLSAxKVxuXG4gICAgICBmb3IgKDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgaWYgKG1hc2tNYXJrZWRbIGkgXSA9PT0gTUFSS0VSKSB7XG4gICAgICAgICAgY3Vyc29yID0gaVxuICAgICAgICAgIG5vTWFya0JlZm9yZSA9PT0gdHJ1ZSAmJiBjdXJzb3IrK1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBpIDwgMFxuICAgICAgICAmJiBtYXNrTWFya2VkWyBjdXJzb3IgXSAhPT0gdm9pZCAwXG4gICAgICAgICYmIG1hc2tNYXJrZWRbIGN1cnNvciBdICE9PSBNQVJLRVJcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gbW92ZUN1cnNvci5yaWdodChpbnAsIDApXG4gICAgICB9XG5cbiAgICAgIGN1cnNvciA+PSAwICYmIGlucC5zZXRTZWxlY3Rpb25SYW5nZShjdXJzb3IsIGN1cnNvciwgJ2JhY2t3YXJkJylcbiAgICB9LFxuXG4gICAgcmlnaHQgKGlucCwgY3Vyc29yKSB7XG4gICAgICBjb25zdCBsaW1pdCA9IGlucC52YWx1ZS5sZW5ndGhcbiAgICAgIGxldCBpID0gTWF0aC5taW4obGltaXQsIGN1cnNvciArIDEpXG5cbiAgICAgIGZvciAoOyBpIDw9IGxpbWl0OyBpKyspIHtcbiAgICAgICAgaWYgKG1hc2tNYXJrZWRbIGkgXSA9PT0gTUFSS0VSKSB7XG4gICAgICAgICAgY3Vyc29yID0gaVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWFza01hcmtlZFsgaSAtIDEgXSA9PT0gTUFSS0VSKSB7XG4gICAgICAgICAgY3Vyc29yID0gaVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgaSA+IGxpbWl0XG4gICAgICAgICYmIG1hc2tNYXJrZWRbIGN1cnNvciAtIDEgXSAhPT0gdm9pZCAwXG4gICAgICAgICYmIG1hc2tNYXJrZWRbIGN1cnNvciAtIDEgXSAhPT0gTUFSS0VSXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG1vdmVDdXJzb3IubGVmdChpbnAsIGxpbWl0KVxuICAgICAgfVxuXG4gICAgICBpbnAuc2V0U2VsZWN0aW9uUmFuZ2UoY3Vyc29yLCBjdXJzb3IsICdmb3J3YXJkJylcbiAgICB9LFxuXG4gICAgbGVmdFJldmVyc2UgKGlucCwgY3Vyc29yKSB7XG4gICAgICBjb25zdFxuICAgICAgICBsb2NhbE1hc2tNYXJrZWQgPSBnZXRQYWRkZWRNYXNrTWFya2VkKGlucC52YWx1ZS5sZW5ndGgpXG4gICAgICBsZXQgaSA9IE1hdGgubWF4KDAsIGN1cnNvciAtIDEpXG5cbiAgICAgIGZvciAoOyBpID49IDA7IGktLSkge1xuICAgICAgICBpZiAobG9jYWxNYXNrTWFya2VkWyBpIC0gMSBdID09PSBNQVJLRVIpIHtcbiAgICAgICAgICBjdXJzb3IgPSBpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsb2NhbE1hc2tNYXJrZWRbIGkgXSA9PT0gTUFSS0VSKSB7XG4gICAgICAgICAgY3Vyc29yID0gaVxuICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIGkgPCAwXG4gICAgICAgICYmIGxvY2FsTWFza01hcmtlZFsgY3Vyc29yIF0gIT09IHZvaWQgMFxuICAgICAgICAmJiBsb2NhbE1hc2tNYXJrZWRbIGN1cnNvciBdICE9PSBNQVJLRVJcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gbW92ZUN1cnNvci5yaWdodFJldmVyc2UoaW5wLCAwKVxuICAgICAgfVxuXG4gICAgICBjdXJzb3IgPj0gMCAmJiBpbnAuc2V0U2VsZWN0aW9uUmFuZ2UoY3Vyc29yLCBjdXJzb3IsICdiYWNrd2FyZCcpXG4gICAgfSxcblxuICAgIHJpZ2h0UmV2ZXJzZSAoaW5wLCBjdXJzb3IpIHtcbiAgICAgIGNvbnN0XG4gICAgICAgIGxpbWl0ID0gaW5wLnZhbHVlLmxlbmd0aCxcbiAgICAgICAgbG9jYWxNYXNrTWFya2VkID0gZ2V0UGFkZGVkTWFza01hcmtlZChsaW1pdCksXG4gICAgICAgIG5vTWFya0JlZm9yZSA9IGxvY2FsTWFza01hcmtlZC5zbGljZSgwLCBjdXJzb3IgKyAxKS5pbmRleE9mKE1BUktFUikgPT09IC0xXG4gICAgICBsZXQgaSA9IE1hdGgubWluKGxpbWl0LCBjdXJzb3IgKyAxKVxuXG4gICAgICBmb3IgKDsgaSA8PSBsaW1pdDsgaSsrKSB7XG4gICAgICAgIGlmIChsb2NhbE1hc2tNYXJrZWRbIGkgLSAxIF0gPT09IE1BUktFUikge1xuICAgICAgICAgIGN1cnNvciA9IGlcbiAgICAgICAgICBjdXJzb3IgPiAwICYmIG5vTWFya0JlZm9yZSA9PT0gdHJ1ZSAmJiBjdXJzb3ItLVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBpID4gbGltaXRcbiAgICAgICAgJiYgbG9jYWxNYXNrTWFya2VkWyBjdXJzb3IgLSAxIF0gIT09IHZvaWQgMFxuICAgICAgICAmJiBsb2NhbE1hc2tNYXJrZWRbIGN1cnNvciAtIDEgXSAhPT0gTUFSS0VSXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG1vdmVDdXJzb3IubGVmdFJldmVyc2UoaW5wLCBsaW1pdClcbiAgICAgIH1cblxuICAgICAgaW5wLnNldFNlbGVjdGlvblJhbmdlKGN1cnNvciwgY3Vyc29yLCAnZm9yd2FyZCcpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25NYXNrZWRDbGljayAoZSkge1xuICAgIGVtaXQoJ2NsaWNrJywgZSlcblxuICAgIHNlbGVjdGlvbkFuY2hvciA9IHZvaWQgMFxuICB9XG5cbiAgZnVuY3Rpb24gb25NYXNrZWRLZXlkb3duIChlKSB7XG4gICAgZW1pdCgna2V5ZG93bicsIGUpXG5cbiAgICBpZiAoXG4gICAgICBzaG91bGRJZ25vcmVLZXkoZSkgPT09IHRydWVcbiAgICAgIHx8IGUuYWx0S2V5ID09PSB0cnVlIC8vIGxldCBicm93c2VyIGhhbmRsZSB0aGVzZVxuICAgICkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3RcbiAgICAgIGlucCA9IGlucHV0UmVmLnZhbHVlLFxuICAgICAgc3RhcnQgPSBpbnAuc2VsZWN0aW9uU3RhcnQsXG4gICAgICBlbmQgPSBpbnAuc2VsZWN0aW9uRW5kXG5cbiAgICBpZiAoIWUuc2hpZnRLZXkpIHtcbiAgICAgIHNlbGVjdGlvbkFuY2hvciA9IHZvaWQgMFxuICAgIH1cblxuICAgIGlmIChlLmtleUNvZGUgPT09IDM3IHx8IGUua2V5Q29kZSA9PT0gMzkpIHsgLy8gTGVmdCAvIFJpZ2h0XG4gICAgICBpZiAoZS5zaGlmdEtleSAmJiBzZWxlY3Rpb25BbmNob3IgPT09IHZvaWQgMCkge1xuICAgICAgICBzZWxlY3Rpb25BbmNob3IgPSBpbnAuc2VsZWN0aW9uRGlyZWN0aW9uID09PSAnZm9yd2FyZCcgPyBzdGFydCA6IGVuZFxuICAgICAgfVxuXG4gICAgICBjb25zdCBmbiA9IG1vdmVDdXJzb3JbIChlLmtleUNvZGUgPT09IDM5ID8gJ3JpZ2h0JyA6ICdsZWZ0JykgKyAocHJvcHMucmV2ZXJzZUZpbGxNYXNrID09PSB0cnVlID8gJ1JldmVyc2UnIDogJycpIF1cblxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBmbihpbnAsIHNlbGVjdGlvbkFuY2hvciA9PT0gc3RhcnQgPyBlbmQgOiBzdGFydClcblxuICAgICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgY29uc3QgY3Vyc29yID0gaW5wLnNlbGVjdGlvblN0YXJ0XG4gICAgICAgIGlucC5zZXRTZWxlY3Rpb25SYW5nZShNYXRoLm1pbihzZWxlY3Rpb25BbmNob3IsIGN1cnNvciksIE1hdGgubWF4KHNlbGVjdGlvbkFuY2hvciwgY3Vyc29yKSwgJ2ZvcndhcmQnKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChcbiAgICAgIGUua2V5Q29kZSA9PT0gOCAvLyBCYWNrc3BhY2VcbiAgICAgICYmIHByb3BzLnJldmVyc2VGaWxsTWFzayAhPT0gdHJ1ZVxuICAgICAgJiYgc3RhcnQgPT09IGVuZFxuICAgICkge1xuICAgICAgbW92ZUN1cnNvci5sZWZ0KGlucCwgc3RhcnQpXG4gICAgICBpbnAuc2V0U2VsZWN0aW9uUmFuZ2UoaW5wLnNlbGVjdGlvblN0YXJ0LCBlbmQsICdiYWNrd2FyZCcpXG4gICAgfVxuICAgIGVsc2UgaWYgKFxuICAgICAgZS5rZXlDb2RlID09PSA0NiAvLyBEZWxldGVcbiAgICAgICYmIHByb3BzLnJldmVyc2VGaWxsTWFzayA9PT0gdHJ1ZVxuICAgICAgJiYgc3RhcnQgPT09IGVuZFxuICAgICkge1xuICAgICAgbW92ZUN1cnNvci5yaWdodFJldmVyc2UoaW5wLCBlbmQpXG4gICAgICBpbnAuc2V0U2VsZWN0aW9uUmFuZ2Uoc3RhcnQsIGlucC5zZWxlY3Rpb25FbmQsICdmb3J3YXJkJylcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtYXNrVmFsdWUgKHZhbCkge1xuICAgIGlmICh2YWwgPT09IHZvaWQgMCB8fCB2YWwgPT09IG51bGwgfHwgdmFsID09PSAnJykgeyByZXR1cm4gJycgfVxuXG4gICAgaWYgKHByb3BzLnJldmVyc2VGaWxsTWFzayA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIG1hc2tWYWx1ZVJldmVyc2UodmFsKVxuICAgIH1cblxuICAgIGNvbnN0IG1hc2sgPSBjb21wdXRlZE1hc2tcblxuICAgIGxldCB2YWxJbmRleCA9IDAsIG91dHB1dCA9ICcnXG5cbiAgICBmb3IgKGxldCBtYXNrSW5kZXggPSAwOyBtYXNrSW5kZXggPCBtYXNrLmxlbmd0aDsgbWFza0luZGV4KyspIHtcbiAgICAgIGNvbnN0XG4gICAgICAgIHZhbENoYXIgPSB2YWxbIHZhbEluZGV4IF0sXG4gICAgICAgIG1hc2tEZWYgPSBtYXNrWyBtYXNrSW5kZXggXVxuXG4gICAgICBpZiAodHlwZW9mIG1hc2tEZWYgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG91dHB1dCArPSBtYXNrRGVmXG4gICAgICAgIHZhbENoYXIgPT09IG1hc2tEZWYgJiYgdmFsSW5kZXgrK1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodmFsQ2hhciAhPT0gdm9pZCAwICYmIG1hc2tEZWYucmVnZXgudGVzdCh2YWxDaGFyKSkge1xuICAgICAgICBvdXRwdXQgKz0gbWFza0RlZi50cmFuc2Zvcm0gIT09IHZvaWQgMFxuICAgICAgICAgID8gbWFza0RlZi50cmFuc2Zvcm0odmFsQ2hhcilcbiAgICAgICAgICA6IHZhbENoYXJcbiAgICAgICAgdmFsSW5kZXgrK1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBvdXRwdXRcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0XG4gIH1cblxuICBmdW5jdGlvbiBtYXNrVmFsdWVSZXZlcnNlICh2YWwpIHtcbiAgICBjb25zdFxuICAgICAgbWFzayA9IGNvbXB1dGVkTWFzayxcbiAgICAgIGZpcnN0VG9rZW5JbmRleCA9IG1hc2tNYXJrZWQuaW5kZXhPZihNQVJLRVIpXG5cbiAgICBsZXQgdmFsSW5kZXggPSB2YWwubGVuZ3RoIC0gMSwgb3V0cHV0ID0gJydcblxuICAgIGZvciAobGV0IG1hc2tJbmRleCA9IG1hc2subGVuZ3RoIC0gMTsgbWFza0luZGV4ID49IDAgJiYgdmFsSW5kZXggIT09IC0xOyBtYXNrSW5kZXgtLSkge1xuICAgICAgY29uc3QgbWFza0RlZiA9IG1hc2tbIG1hc2tJbmRleCBdXG5cbiAgICAgIGxldCB2YWxDaGFyID0gdmFsWyB2YWxJbmRleCBdXG5cbiAgICAgIGlmICh0eXBlb2YgbWFza0RlZiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgb3V0cHV0ID0gbWFza0RlZiArIG91dHB1dFxuICAgICAgICB2YWxDaGFyID09PSBtYXNrRGVmICYmIHZhbEluZGV4LS1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHZhbENoYXIgIT09IHZvaWQgMCAmJiBtYXNrRGVmLnJlZ2V4LnRlc3QodmFsQ2hhcikpIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIG91dHB1dCA9IChtYXNrRGVmLnRyYW5zZm9ybSAhPT0gdm9pZCAwID8gbWFza0RlZi50cmFuc2Zvcm0odmFsQ2hhcikgOiB2YWxDaGFyKSArIG91dHB1dFxuICAgICAgICAgIHZhbEluZGV4LS1cbiAgICAgICAgICB2YWxDaGFyID0gdmFsWyB2YWxJbmRleCBdXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bm1vZGlmaWVkLWxvb3AtY29uZGl0aW9uXG4gICAgICAgIH0gd2hpbGUgKGZpcnN0VG9rZW5JbmRleCA9PT0gbWFza0luZGV4ICYmIHZhbENoYXIgIT09IHZvaWQgMCAmJiBtYXNrRGVmLnJlZ2V4LnRlc3QodmFsQ2hhcikpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG91dHB1dFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXRcbiAgfVxuXG4gIGZ1bmN0aW9uIHVubWFza1ZhbHVlICh2YWwpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbCAhPT0gJ3N0cmluZycgfHwgY29tcHV0ZWRVbm1hc2sgPT09IHZvaWQgMFxuICAgICAgPyAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicgPyBjb21wdXRlZFVubWFzaygnJyArIHZhbCkgOiB2YWwpXG4gICAgICA6IGNvbXB1dGVkVW5tYXNrKHZhbClcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbGxXaXRoTWFzayAodmFsKSB7XG4gICAgaWYgKG1hc2tSZXBsYWNlZC5sZW5ndGggLSB2YWwubGVuZ3RoIDw9IDApIHtcbiAgICAgIHJldHVybiB2YWxcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcHMucmV2ZXJzZUZpbGxNYXNrID09PSB0cnVlICYmIHZhbC5sZW5ndGggIT09IDBcbiAgICAgID8gbWFza1JlcGxhY2VkLnNsaWNlKDAsIC12YWwubGVuZ3RoKSArIHZhbFxuICAgICAgOiB2YWwgKyBtYXNrUmVwbGFjZWQuc2xpY2UodmFsLmxlbmd0aClcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaW5uZXJWYWx1ZSxcbiAgICBoYXNNYXNrLFxuICAgIG1vdmVDdXJzb3JGb3JQYXN0ZSxcbiAgICB1cGRhdGVNYXNrVmFsdWUsXG4gICAgb25NYXNrZWRLZXlkb3duLFxuICAgIG9uTWFza2VkQ2xpY2tcbiAgfVxufVxuIiwiaW1wb3J0IHsgaCwgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG5cbmV4cG9ydCBjb25zdCB1c2VGb3JtUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlRm9ybUF0dHJzIChwcm9wcykge1xuICByZXR1cm4gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICB0eXBlOiAnaGlkZGVuJyxcbiAgICBuYW1lOiBwcm9wcy5uYW1lLFxuICAgIHZhbHVlOiBwcm9wcy5tb2RlbFZhbHVlXG4gIH0pKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlRm9ybUluamVjdCAoZm9ybUF0dHJzID0ge30pIHtcbiAgcmV0dXJuIChjaGlsZCwgYWN0aW9uLCBjbGFzc05hbWUpID0+IHtcbiAgICBjaGlsZFsgYWN0aW9uIF0oXG4gICAgICBoKCdpbnB1dCcsIHtcbiAgICAgICAgY2xhc3M6ICdoaWRkZW4nICsgKGNsYXNzTmFtZSB8fCAnJyksXG4gICAgICAgIC4uLmZvcm1BdHRycy52YWx1ZVxuICAgICAgfSlcbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUZvcm1JbnB1dE5hbWVBdHRyIChwcm9wcykge1xuICByZXR1cm4gY29tcHV0ZWQoKCkgPT4gcHJvcHMubmFtZSB8fCBwcm9wcy5mb3IpXG59XG4iLCJpbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHByb3BzLCB0eXBlR3VhcmQpIHtcbiAgZnVuY3Rpb24gZ2V0Rm9ybURvbVByb3BzICgpIHtcbiAgICBjb25zdCBtb2RlbCA9IHByb3BzLm1vZGVsVmFsdWVcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBkdCA9ICdEYXRhVHJhbnNmZXInIGluIHdpbmRvd1xuICAgICAgICA/IG5ldyBEYXRhVHJhbnNmZXIoKVxuICAgICAgICA6ICgnQ2xpcGJvYXJkRXZlbnQnIGluIHdpbmRvd1xuICAgICAgICAgICAgPyBuZXcgQ2xpcGJvYXJkRXZlbnQoJycpLmNsaXBib2FyZERhdGFcbiAgICAgICAgICAgIDogdm9pZCAwXG4gICAgICAgICAgKVxuXG4gICAgICBpZiAoT2JqZWN0KG1vZGVsKSA9PT0gbW9kZWwpIHtcbiAgICAgICAgKCdsZW5ndGgnIGluIG1vZGVsXG4gICAgICAgICAgPyBBcnJheS5mcm9tKG1vZGVsKVxuICAgICAgICAgIDogWyBtb2RlbCBdXG4gICAgICAgICkuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgICAgICBkdC5pdGVtcy5hZGQoZmlsZSlcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsZXM6IGR0LmZpbGVzXG4gICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaWxlczogdm9pZCAwXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHR5cGVHdWFyZCA9PT0gdHJ1ZVxuICAgID8gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLnR5cGUgIT09ICdmaWxlJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldEZvcm1Eb21Qcm9wcygpXG4gICAgfSlcbiAgICA6IGNvbXB1dGVkKGdldEZvcm1Eb21Qcm9wcylcbn1cbiIsImltcG9ydCB7IGNsaWVudCB9IGZyb20gJy4uLy4uL3BsdWdpbnMvcGxhdGZvcm0vUGxhdGZvcm0uanMnXG5cbmNvbnN0IGlzSmFwYW5lc2UgPSAvW1xcdTMwMDAtXFx1MzAzZlxcdTMwNDAtXFx1MzA5ZlxcdTMwYTAtXFx1MzBmZlxcdWZmMDAtXFx1ZmY5ZlxcdTRlMDAtXFx1OWZhZlxcdTM0MDAtXFx1NGRiZl0vXG5jb25zdCBpc0NoaW5lc2UgPSAvW1xcdTRlMDAtXFx1OWZmZlxcdTM0MDAtXFx1NGRiZlxcdXsyMDAwMH0tXFx1ezJhNmRmfVxcdXsyYTcwMH0tXFx1ezJiNzNmfVxcdXsyYjc0MH0tXFx1ezJiODFmfVxcdXsyYjgyMH0tXFx1ezJjZWFmfVxcdWY5MDAtXFx1ZmFmZlxcdTMzMDAtXFx1MzNmZlxcdWZlMzAtXFx1ZmU0ZlxcdWY5MDAtXFx1ZmFmZlxcdXsyZjgwMH0tXFx1ezJmYTFmfV0vdVxuY29uc3QgaXNLb3JlYW4gPSAvW1xcdTMxMzEtXFx1MzE0ZVxcdTMxNGYtXFx1MzE2M1xcdWFjMDAtXFx1ZDdhM10vXG5jb25zdCBpc1BsYWluVGV4dCA9IC9bYS16MC05XyAtXSQvaVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAob25JbnB1dCkge1xuICByZXR1cm4gZnVuY3Rpb24gb25Db21wb3NpdGlvbiAoZSkge1xuICAgIGlmIChlLnR5cGUgPT09ICdjb21wb3NpdGlvbmVuZCcgfHwgZS50eXBlID09PSAnY2hhbmdlJykge1xuICAgICAgaWYgKGUudGFyZ2V0LnFDb21wb3NpbmcgIT09IHRydWUpIHJldHVyblxuICAgICAgZS50YXJnZXQucUNvbXBvc2luZyA9IGZhbHNlXG4gICAgICBvbklucHV0KGUpXG4gICAgfVxuICAgIGVsc2UgaWYgKFxuICAgICAgZS50eXBlID09PSAnY29tcG9zaXRpb251cGRhdGUnXG4gICAgICAmJiBlLnRhcmdldC5xQ29tcG9zaW5nICE9PSB0cnVlXG4gICAgICAmJiB0eXBlb2YgZS5kYXRhID09PSAnc3RyaW5nJ1xuICAgICkge1xuICAgICAgY29uc3QgaXNDb21wb3NpbmcgPSBjbGllbnQuaXMuZmlyZWZveCA9PT0gdHJ1ZVxuICAgICAgICA/IGlzUGxhaW5UZXh0LnRlc3QoZS5kYXRhKSA9PT0gZmFsc2VcbiAgICAgICAgOiBpc0phcGFuZXNlLnRlc3QoZS5kYXRhKSA9PT0gdHJ1ZSB8fCBpc0NoaW5lc2UudGVzdChlLmRhdGEpID09PSB0cnVlIHx8IGlzS29yZWFuLnRlc3QoZS5kYXRhKSA9PT0gdHJ1ZVxuXG4gICAgICBpZiAoaXNDb21wb3NpbmcgPT09IHRydWUpIHtcbiAgICAgICAgZS50YXJnZXQucUNvbXBvc2luZyA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IGgsIHJlZiwgY29tcHV0ZWQsIHdhdGNoLCBvbkJlZm9yZVVubW91bnQsIG9uTW91bnRlZCwgbmV4dFRpY2ssIGdldEN1cnJlbnRJbnN0YW5jZSB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IHVzZUZpZWxkLCB7IHVzZUZpZWxkU3RhdGUsIHVzZUZpZWxkUHJvcHMsIHVzZUZpZWxkRW1pdHMsIGZpZWxkVmFsdWVJc0ZpbGxlZCB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLWZpZWxkL3VzZS1maWVsZC5qcydcbmltcG9ydCB1c2VNYXNrLCB7IHVzZU1hc2tQcm9wcyB9IGZyb20gJy4vdXNlLW1hc2suanMnXG5pbXBvcnQgeyB1c2VGb3JtUHJvcHMsIHVzZUZvcm1JbnB1dE5hbWVBdHRyIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLWZvcm0vcHJpdmF0ZS51c2UtZm9ybS5qcydcbmltcG9ydCB1c2VGaWxlRm9ybURvbVByb3BzIGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLWZpbGUvdXNlLWZpbGUtZG9tLXByb3BzLmpzJ1xuaW1wb3J0IHVzZUtleUNvbXBvc2l0aW9uIGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLWtleS1jb21wb3NpdGlvbi91c2Uta2V5LWNvbXBvc2l0aW9uLmpzJ1xuXG5pbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmNyZWF0ZS9jcmVhdGUuanMnXG5pbXBvcnQgeyBzdG9wIH0gZnJvbSAnLi4vLi4vdXRpbHMvZXZlbnQvZXZlbnQuanMnXG5pbXBvcnQgeyBhZGRGb2N1c0ZuIH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5mb2N1cy9mb2N1cy1tYW5hZ2VyLmpzJ1xuaW1wb3J0IHsgaW5qZWN0UHJvcCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUuaW5qZWN0LW9iai1wcm9wL2luamVjdC1vYmotcHJvcC5qcydcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29tcG9uZW50KHtcbiAgbmFtZTogJ1FJbnB1dCcsXG5cbiAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcblxuICBwcm9wczoge1xuICAgIC4uLnVzZUZpZWxkUHJvcHMsXG4gICAgLi4udXNlTWFza1Byb3BzLFxuICAgIC4uLnVzZUZvcm1Qcm9wcyxcblxuICAgIC8vIG92ZXJyaWRlIG9mIHVzZUZpZWxkUHJvcHMgPiBtb2RlbFZhbHVlXG4gICAgbW9kZWxWYWx1ZTogX19RVUFTQVJfU1NSX1NFUlZFUl9fXG4gICAgICA/IHt9IC8vIFNTUiBkb2VzIG5vdCBrbm93IGFib3V0IEZpbGVMaXN0XG4gICAgICA6IFsgU3RyaW5nLCBOdW1iZXIsIEZpbGVMaXN0IF0sXG5cbiAgICBzaGFkb3dUZXh0OiBTdHJpbmcsXG5cbiAgICB0eXBlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAndGV4dCdcbiAgICB9LFxuXG4gICAgZGVib3VuY2U6IFsgU3RyaW5nLCBOdW1iZXIgXSxcblxuICAgIGF1dG9ncm93OiBCb29sZWFuLCAvLyBtYWtlcyBhIHRleHRhcmVhXG5cbiAgICBpbnB1dENsYXNzOiBbIEFycmF5LCBTdHJpbmcsIE9iamVjdCBdLFxuICAgIGlucHV0U3R5bGU6IFsgQXJyYXksIFN0cmluZywgT2JqZWN0IF1cbiAgfSxcblxuICBlbWl0czogW1xuICAgIC4uLnVzZUZpZWxkRW1pdHMsXG4gICAgJ3Bhc3RlJywgJ2NoYW5nZScsXG4gICAgJ2tleWRvd24nLCAnY2xpY2snLCAnYW5pbWF0aW9uZW5kJ1xuICBdLFxuXG4gIHNldHVwIChwcm9wcywgeyBlbWl0LCBhdHRycyB9KSB7XG4gICAgY29uc3QgeyBwcm94eSB9ID0gZ2V0Q3VycmVudEluc3RhbmNlKClcbiAgICBjb25zdCB7ICRxIH0gPSBwcm94eVxuXG4gICAgY29uc3QgdGVtcCA9IHt9XG4gICAgbGV0IGVtaXRDYWNoZWRWYWx1ZSA9IE5hTiwgdHlwZWROdW1iZXIsIHN0b3BWYWx1ZVdhdGNoZXIsIGVtaXRUaW1lciA9IG51bGwsIGVtaXRWYWx1ZUZuXG5cbiAgICBjb25zdCBpbnB1dFJlZiA9IHJlZihudWxsKVxuICAgIGNvbnN0IG5hbWVQcm9wID0gdXNlRm9ybUlucHV0TmFtZUF0dHIocHJvcHMpXG5cbiAgICBjb25zdCB7XG4gICAgICBpbm5lclZhbHVlLFxuICAgICAgaGFzTWFzayxcbiAgICAgIG1vdmVDdXJzb3JGb3JQYXN0ZSxcbiAgICAgIHVwZGF0ZU1hc2tWYWx1ZSxcbiAgICAgIG9uTWFza2VkS2V5ZG93bixcbiAgICAgIG9uTWFza2VkQ2xpY2tcbiAgICB9ID0gdXNlTWFzayhwcm9wcywgZW1pdCwgZW1pdFZhbHVlLCBpbnB1dFJlZilcblxuICAgIGNvbnN0IGZvcm1Eb21Qcm9wcyA9IHVzZUZpbGVGb3JtRG9tUHJvcHMocHJvcHMsIC8qIHR5cGUgZ3VhcmQgKi8gdHJ1ZSlcbiAgICBjb25zdCBoYXNWYWx1ZSA9IGNvbXB1dGVkKCgpID0+IGZpZWxkVmFsdWVJc0ZpbGxlZChpbm5lclZhbHVlLnZhbHVlKSlcblxuICAgIGNvbnN0IG9uQ29tcG9zaXRpb24gPSB1c2VLZXlDb21wb3NpdGlvbihvbklucHV0KVxuXG4gICAgY29uc3Qgc3RhdGUgPSB1c2VGaWVsZFN0YXRlKHsgY2hhbmdlRXZlbnQ6IHRydWUgfSlcblxuICAgIGNvbnN0IGlzVGV4dGFyZWEgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgcHJvcHMudHlwZSA9PT0gJ3RleHRhcmVhJyB8fCBwcm9wcy5hdXRvZ3JvdyA9PT0gdHJ1ZVxuICAgIClcblxuICAgIGNvbnN0IGlzVHlwZVRleHQgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgaXNUZXh0YXJlYS52YWx1ZSA9PT0gdHJ1ZVxuICAgICAgfHwgWyAndGV4dCcsICdzZWFyY2gnLCAndXJsJywgJ3RlbCcsICdwYXNzd29yZCcgXS5pbmNsdWRlcyhwcm9wcy50eXBlKVxuICAgIClcblxuICAgIGNvbnN0IG9uRXZlbnRzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgZXZ0ID0ge1xuICAgICAgICAuLi5zdGF0ZS5zcGxpdEF0dHJzLmxpc3RlbmVycy52YWx1ZSxcbiAgICAgICAgb25JbnB1dCxcbiAgICAgICAgb25QYXN0ZSxcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIG9uQ2hhbmdlLFxuICAgICAgICBvbkJsdXI6IG9uRmluaXNoRWRpdGluZyxcbiAgICAgICAgb25Gb2N1czogc3RvcFxuICAgICAgfVxuXG4gICAgICBldnQub25Db21wb3NpdGlvbnN0YXJ0ID0gZXZ0Lm9uQ29tcG9zaXRpb251cGRhdGUgPSBldnQub25Db21wb3NpdGlvbmVuZCA9IG9uQ29tcG9zaXRpb25cblxuICAgICAgaWYgKGhhc01hc2sudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgZXZ0Lm9uS2V5ZG93biA9IG9uTWFza2VkS2V5ZG93blxuICAgICAgICAvLyByZXNldCBzZWxlY3Rpb24gYW5jaG9yIG9uIHBvaW50ZXIgc2VsZWN0aW9uXG4gICAgICAgIGV2dC5vbkNsaWNrID0gb25NYXNrZWRDbGlja1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvcHMuYXV0b2dyb3cgPT09IHRydWUpIHtcbiAgICAgICAgZXZ0Lm9uQW5pbWF0aW9uZW5kID0gb25BbmltYXRpb25lbmRcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGV2dFxuICAgIH0pXG5cbiAgICBjb25zdCBpbnB1dEF0dHJzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgYXR0cnMgPSB7XG4gICAgICAgIHRhYmluZGV4OiAwLFxuICAgICAgICAnZGF0YS1hdXRvZm9jdXMnOiBwcm9wcy5hdXRvZm9jdXMgPT09IHRydWUgfHwgdm9pZCAwLFxuICAgICAgICByb3dzOiBwcm9wcy50eXBlID09PSAndGV4dGFyZWEnID8gNiA6IHZvaWQgMCxcbiAgICAgICAgJ2FyaWEtbGFiZWwnOiBwcm9wcy5sYWJlbCxcbiAgICAgICAgbmFtZTogbmFtZVByb3AudmFsdWUsXG4gICAgICAgIC4uLnN0YXRlLnNwbGl0QXR0cnMuYXR0cmlidXRlcy52YWx1ZSxcbiAgICAgICAgaWQ6IHN0YXRlLnRhcmdldFVpZC52YWx1ZSxcbiAgICAgICAgbWF4bGVuZ3RoOiBwcm9wcy5tYXhsZW5ndGgsXG4gICAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlID09PSB0cnVlLFxuICAgICAgICByZWFkb25seTogcHJvcHMucmVhZG9ubHkgPT09IHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKGlzVGV4dGFyZWEudmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIGF0dHJzLnR5cGUgPSBwcm9wcy50eXBlXG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wcy5hdXRvZ3JvdyA9PT0gdHJ1ZSkge1xuICAgICAgICBhdHRycy5yb3dzID0gMVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXR0cnNcbiAgICB9KVxuXG4gICAgLy8gc29tZSBicm93c2VycyBsb3NlIHRoZSBuYXRpdmUgaW5wdXQgdmFsdWVcbiAgICAvLyBzbyB3ZSBuZWVkIHRvIHJlYXR0YWNoIGl0IGR5bmFtaWNhbGx5XG4gICAgLy8gKGxpa2UgdHlwZT1cInBhc3N3b3JkXCIgPC0+IHR5cGU9XCJ0ZXh0XCI7IHNlZSAjMTIwNzgpXG4gICAgd2F0Y2goKCkgPT4gcHJvcHMudHlwZSwgKCkgPT4ge1xuICAgICAgaWYgKGlucHV0UmVmLnZhbHVlKSB7XG4gICAgICAgIGlucHV0UmVmLnZhbHVlLnZhbHVlID0gcHJvcHMubW9kZWxWYWx1ZVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5tb2RlbFZhbHVlLCB2ID0+IHtcbiAgICAgIGlmIChoYXNNYXNrLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIGlmIChzdG9wVmFsdWVXYXRjaGVyID09PSB0cnVlKSB7XG4gICAgICAgICAgc3RvcFZhbHVlV2F0Y2hlciA9IGZhbHNlXG5cbiAgICAgICAgICBpZiAoU3RyaW5nKHYpID09PSBlbWl0Q2FjaGVkVmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZU1hc2tWYWx1ZSh2KVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaW5uZXJWYWx1ZS52YWx1ZSAhPT0gdikge1xuICAgICAgICBpbm5lclZhbHVlLnZhbHVlID0gdlxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcm9wcy50eXBlID09PSAnbnVtYmVyJ1xuICAgICAgICAgICYmIHRlbXAuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgPT09IHRydWVcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKHR5cGVkTnVtYmVyID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0eXBlZE51bWJlciA9IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIHRlbXAudmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gdGV4dGFyZWEgb25seVxuICAgICAgcHJvcHMuYXV0b2dyb3cgPT09IHRydWUgJiYgbmV4dFRpY2soYWRqdXN0SGVpZ2h0KVxuICAgIH0pXG5cbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5hdXRvZ3JvdywgdmFsID0+IHtcbiAgICAgIC8vIHRleHRhcmVhIG9ubHlcbiAgICAgIGlmICh2YWwgPT09IHRydWUpIHtcbiAgICAgICAgbmV4dFRpY2soYWRqdXN0SGVpZ2h0KVxuICAgICAgfVxuICAgICAgLy8gaWYgaXQgaGFzIGEgbnVtYmVyIG9mIHJvd3Mgc2V0IHJlc3BlY3QgaXRcbiAgICAgIGVsc2UgaWYgKGlucHV0UmVmLnZhbHVlICE9PSBudWxsICYmIGF0dHJzLnJvd3MgPiAwKSB7XG4gICAgICAgIGlucHV0UmVmLnZhbHVlLnN0eWxlLmhlaWdodCA9ICdhdXRvJ1xuICAgICAgfVxuICAgIH0pXG5cbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5kZW5zZSwgKCkgPT4ge1xuICAgICAgcHJvcHMuYXV0b2dyb3cgPT09IHRydWUgJiYgbmV4dFRpY2soYWRqdXN0SGVpZ2h0KVxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBmb2N1cyAoKSB7XG4gICAgICBhZGRGb2N1c0ZuKCgpID0+IHtcbiAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50XG4gICAgICAgIGlmIChcbiAgICAgICAgICBpbnB1dFJlZi52YWx1ZSAhPT0gbnVsbFxuICAgICAgICAgICYmIGlucHV0UmVmLnZhbHVlICE9PSBlbFxuICAgICAgICAgICYmIChlbCA9PT0gbnVsbCB8fCBlbC5pZCAhPT0gc3RhdGUudGFyZ2V0VWlkLnZhbHVlKVxuICAgICAgICApIHtcbiAgICAgICAgICBpbnB1dFJlZi52YWx1ZS5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZWxlY3QgKCkge1xuICAgICAgaW5wdXRSZWYudmFsdWUgIT09IG51bGwgJiYgaW5wdXRSZWYudmFsdWUuc2VsZWN0KClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblBhc3RlIChlKSB7XG4gICAgICBpZiAoaGFzTWFzay52YWx1ZSA9PT0gdHJ1ZSAmJiBwcm9wcy5yZXZlcnNlRmlsbE1hc2sgIT09IHRydWUpIHtcbiAgICAgICAgY29uc3QgaW5wID0gZS50YXJnZXRcbiAgICAgICAgbW92ZUN1cnNvckZvclBhc3RlKGlucCwgaW5wLnNlbGVjdGlvblN0YXJ0LCBpbnAuc2VsZWN0aW9uRW5kKVxuICAgICAgfVxuXG4gICAgICBlbWl0KCdwYXN0ZScsIGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25JbnB1dCAoZSkge1xuICAgICAgaWYgKCFlIHx8ICFlLnRhcmdldCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BzLnR5cGUgPT09ICdmaWxlJykge1xuICAgICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIGUudGFyZ2V0LmZpbGVzKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgdmFsID0gZS50YXJnZXQudmFsdWVcblxuICAgICAgaWYgKGUudGFyZ2V0LnFDb21wb3NpbmcgPT09IHRydWUpIHtcbiAgICAgICAgdGVtcC52YWx1ZSA9IHZhbFxuXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoaGFzTWFzay52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICB1cGRhdGVNYXNrVmFsdWUodmFsLCBmYWxzZSwgZS5pbnB1dFR5cGUpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZW1pdFZhbHVlKHZhbClcblxuICAgICAgICBpZiAoaXNUeXBlVGV4dC52YWx1ZSA9PT0gdHJ1ZSAmJiBlLnRhcmdldCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgIGNvbnN0IHsgc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCB9ID0gZS50YXJnZXRcblxuICAgICAgICAgIGlmIChzZWxlY3Rpb25TdGFydCAhPT0gdm9pZCAwICYmIHNlbGVjdGlvbkVuZCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiB2YWwuaW5kZXhPZihlLnRhcmdldC52YWx1ZSkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5zZXRTZWxlY3Rpb25SYW5nZShzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyB3ZSBuZWVkIHRvIHRyaWdnZXIgaXQgaW1tZWRpYXRlbHkgdG9vLFxuICAgICAgLy8gdG8gYXZvaWQgXCJmbGlja2VyaW5nXCJcbiAgICAgIHByb3BzLmF1dG9ncm93ID09PSB0cnVlICYmIGFkanVzdEhlaWdodCgpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25BbmltYXRpb25lbmQgKGUpIHtcbiAgICAgIGVtaXQoJ2FuaW1hdGlvbmVuZCcsIGUpXG4gICAgICBhZGp1c3RIZWlnaHQoKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVtaXRWYWx1ZSAodmFsLCBzdG9wV2F0Y2hlcikge1xuICAgICAgZW1pdFZhbHVlRm4gPSAoKSA9PiB7XG4gICAgICAgIGVtaXRUaW1lciA9IG51bGxcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJvcHMudHlwZSAhPT0gJ251bWJlcidcbiAgICAgICAgICAmJiB0ZW1wLmhhc093blByb3BlcnR5KCd2YWx1ZScpID09PSB0cnVlXG4gICAgICAgICkge1xuICAgICAgICAgIGRlbGV0ZSB0ZW1wLnZhbHVlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvcHMubW9kZWxWYWx1ZSAhPT0gdmFsICYmIGVtaXRDYWNoZWRWYWx1ZSAhPT0gdmFsKSB7XG4gICAgICAgICAgZW1pdENhY2hlZFZhbHVlID0gdmFsXG5cbiAgICAgICAgICBzdG9wV2F0Y2hlciA9PT0gdHJ1ZSAmJiAoc3RvcFZhbHVlV2F0Y2hlciA9IHRydWUpXG4gICAgICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCB2YWwpXG5cbiAgICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICBlbWl0Q2FjaGVkVmFsdWUgPT09IHZhbCAmJiAoZW1pdENhY2hlZFZhbHVlID0gTmFOKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBlbWl0VmFsdWVGbiA9IHZvaWQgMFxuICAgICAgfVxuXG4gICAgICBpZiAocHJvcHMudHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdHlwZWROdW1iZXIgPSB0cnVlXG4gICAgICAgIHRlbXAudmFsdWUgPSB2YWxcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BzLmRlYm91bmNlICE9PSB2b2lkIDApIHtcbiAgICAgICAgZW1pdFRpbWVyICE9PSBudWxsICYmIGNsZWFyVGltZW91dChlbWl0VGltZXIpXG4gICAgICAgIHRlbXAudmFsdWUgPSB2YWxcbiAgICAgICAgZW1pdFRpbWVyID0gc2V0VGltZW91dChlbWl0VmFsdWVGbiwgcHJvcHMuZGVib3VuY2UpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZW1pdFZhbHVlRm4oKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHRleHRhcmVhIG9ubHlcbiAgICBmdW5jdGlvbiBhZGp1c3RIZWlnaHQgKCkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgY29uc3QgaW5wID0gaW5wdXRSZWYudmFsdWVcbiAgICAgICAgaWYgKGlucCAhPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnN0IHBhcmVudFN0eWxlID0gaW5wLnBhcmVudE5vZGUuc3R5bGVcbiAgICAgICAgICAvLyBjaHJvbWUgZG9lcyBub3Qga2VlcCBzY3JvbGwgIzE1NDk4XG4gICAgICAgICAgY29uc3QgeyBzY3JvbGxUb3AgfSA9IGlucFxuICAgICAgICAgIC8vIGNocm9tZSBjYWxjdWxhdGVzIGEgc21hbGxlciBzY3JvbGxIZWlnaHQgd2hlbiBpbiBhIC5jb2x1bW4gY29udGFpbmVyXG4gICAgICAgICAgY29uc3QgeyBvdmVyZmxvd1ksIG1heEhlaWdodCB9ID0gJHEucGxhdGZvcm0uaXMuZmlyZWZveCA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyB7fVxuICAgICAgICAgICAgOiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpbnApXG4gICAgICAgICAgLy8gb24gZmlyZWZveCBvciBpZiBvdmVyZmxvd1kgaXMgc3BlY2lmaWVkIGFzIHNjcm9sbCAjMTQyNjMsICMxNDM0NFxuICAgICAgICAgIC8vIHdlIGRvbid0IHRvdWNoIG92ZXJmbG93XG4gICAgICAgICAgLy8gZmlyZWZveCBpcyBub3Qgc28gYmFkIGluIHRoZSBlbmRcbiAgICAgICAgICBjb25zdCBjaGFuZ2VPdmVyZmxvdyA9IG92ZXJmbG93WSAhPT0gdm9pZCAwICYmIG92ZXJmbG93WSAhPT0gJ3Njcm9sbCdcblxuICAgICAgICAgIC8vIHJlc2V0IGhlaWdodCBvZiB0ZXh0YXJlYSB0byBhIHNtYWxsIHNpemUgdG8gZGV0ZWN0IHRoZSByZWFsIGhlaWdodFxuICAgICAgICAgIC8vIGJ1dCBrZWVwIHRoZSB0b3RhbCBjb250cm9sIHNpemUgdGhlIHNhbWVcbiAgICAgICAgICBjaGFuZ2VPdmVyZmxvdyA9PT0gdHJ1ZSAmJiAoaW5wLnN0eWxlLm92ZXJmbG93WSA9ICdoaWRkZW4nKVxuICAgICAgICAgIHBhcmVudFN0eWxlLm1hcmdpbkJvdHRvbSA9IChpbnAuc2Nyb2xsSGVpZ2h0IC0gMSkgKyAncHgnXG4gICAgICAgICAgaW5wLnN0eWxlLmhlaWdodCA9ICcxcHgnXG5cbiAgICAgICAgICBpbnAuc3R5bGUuaGVpZ2h0ID0gaW5wLnNjcm9sbEhlaWdodCArICdweCdcbiAgICAgICAgICAvLyB3ZSBzaG91bGQgYWxsb3cgc2Nyb2xsYmFycyBvbmx5XG4gICAgICAgICAgLy8gaWYgdGhlcmUgaXMgbWF4SGVpZ2h0IGFuZCBjb250ZW50IGlzIHRhbGxlciB0aGFuIG1heEhlaWdodFxuICAgICAgICAgIGNoYW5nZU92ZXJmbG93ID09PSB0cnVlICYmIChpbnAuc3R5bGUub3ZlcmZsb3dZID0gcGFyc2VJbnQobWF4SGVpZ2h0LCAxMCkgPCBpbnAuc2Nyb2xsSGVpZ2h0ID8gJ2F1dG8nIDogJ2hpZGRlbicpXG4gICAgICAgICAgcGFyZW50U3R5bGUubWFyZ2luQm90dG9tID0gJydcbiAgICAgICAgICBpbnAuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25DaGFuZ2UgKGUpIHtcbiAgICAgIG9uQ29tcG9zaXRpb24oZSlcblxuICAgICAgaWYgKGVtaXRUaW1lciAhPT0gbnVsbCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoZW1pdFRpbWVyKVxuICAgICAgICBlbWl0VGltZXIgPSBudWxsXG4gICAgICB9XG5cbiAgICAgIGVtaXRWYWx1ZUZuICE9PSB2b2lkIDAgJiYgZW1pdFZhbHVlRm4oKVxuXG4gICAgICBlbWl0KCdjaGFuZ2UnLCBlLnRhcmdldC52YWx1ZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkZpbmlzaEVkaXRpbmcgKGUpIHtcbiAgICAgIGUgIT09IHZvaWQgMCAmJiBzdG9wKGUpXG5cbiAgICAgIGlmIChlbWl0VGltZXIgIT09IG51bGwpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGVtaXRUaW1lcilcbiAgICAgICAgZW1pdFRpbWVyID0gbnVsbFxuICAgICAgfVxuXG4gICAgICBlbWl0VmFsdWVGbiAhPT0gdm9pZCAwICYmIGVtaXRWYWx1ZUZuKClcblxuICAgICAgdHlwZWROdW1iZXIgPSBmYWxzZVxuICAgICAgc3RvcFZhbHVlV2F0Y2hlciA9IGZhbHNlXG4gICAgICBkZWxldGUgdGVtcC52YWx1ZVxuXG4gICAgICAvLyB3ZSBuZWVkIHRvIHVzZSBzZXRUaW1lb3V0IGluc3RlYWQgb2YgdGhpcy4kbmV4dFRpY2tcbiAgICAgIC8vIHRvIGF2b2lkIGEgYnVnIHdoZXJlIGZvY3Vzb3V0IGlzIG5vdCBlbWl0dGVkIGZvciB0eXBlIGRhdGUvdGltZS93ZWVrLy4uLlxuICAgICAgcHJvcHMudHlwZSAhPT0gJ2ZpbGUnICYmIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAoaW5wdXRSZWYudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICBpbnB1dFJlZi52YWx1ZS52YWx1ZSA9IGlubmVyVmFsdWUudmFsdWUgIT09IHZvaWQgMCA/IGlubmVyVmFsdWUudmFsdWUgOiAnJ1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEN1clZhbHVlICgpIHtcbiAgICAgIHJldHVybiB0ZW1wLmhhc093blByb3BlcnR5KCd2YWx1ZScpID09PSB0cnVlXG4gICAgICAgID8gdGVtcC52YWx1ZVxuICAgICAgICA6IChpbm5lclZhbHVlLnZhbHVlICE9PSB2b2lkIDAgPyBpbm5lclZhbHVlLnZhbHVlIDogJycpXG4gICAgfVxuXG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIG9uRmluaXNoRWRpdGluZygpXG4gICAgfSlcblxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICAvLyB0ZXh0YXJlYSBvbmx5XG4gICAgICBwcm9wcy5hdXRvZ3JvdyA9PT0gdHJ1ZSAmJiBhZGp1c3RIZWlnaHQoKVxuICAgIH0pXG5cbiAgICBPYmplY3QuYXNzaWduKHN0YXRlLCB7XG4gICAgICBpbm5lclZhbHVlLFxuXG4gICAgICBmaWVsZENsYXNzOiBjb21wdXRlZCgoKSA9PlxuICAgICAgICBgcS0keyBpc1RleHRhcmVhLnZhbHVlID09PSB0cnVlID8gJ3RleHRhcmVhJyA6ICdpbnB1dCcgfWBcbiAgICAgICAgKyAocHJvcHMuYXV0b2dyb3cgPT09IHRydWUgPyAnIHEtdGV4dGFyZWEtLWF1dG9ncm93JyA6ICcnKVxuICAgICAgKSxcblxuICAgICAgaGFzU2hhZG93OiBjb21wdXRlZCgoKSA9PlxuICAgICAgICBwcm9wcy50eXBlICE9PSAnZmlsZSdcbiAgICAgICAgJiYgdHlwZW9mIHByb3BzLnNoYWRvd1RleHQgPT09ICdzdHJpbmcnXG4gICAgICAgICYmIHByb3BzLnNoYWRvd1RleHQubGVuZ3RoICE9PSAwXG4gICAgICApLFxuXG4gICAgICBpbnB1dFJlZixcblxuICAgICAgZW1pdFZhbHVlLFxuXG4gICAgICBoYXNWYWx1ZSxcblxuICAgICAgZmxvYXRpbmdMYWJlbDogY29tcHV0ZWQoKCkgPT5cbiAgICAgICAgKFxuICAgICAgICAgIGhhc1ZhbHVlLnZhbHVlID09PSB0cnVlXG4gICAgICAgICAgJiYgKHByb3BzLnR5cGUgIT09ICdudW1iZXInIHx8IGlzTmFOKGlubmVyVmFsdWUudmFsdWUpID09PSBmYWxzZSlcbiAgICAgICAgKVxuICAgICAgICB8fCBmaWVsZFZhbHVlSXNGaWxsZWQocHJvcHMuZGlzcGxheVZhbHVlKVxuICAgICAgKSxcblxuICAgICAgZ2V0Q29udHJvbDogKCkgPT4ge1xuICAgICAgICByZXR1cm4gaChpc1RleHRhcmVhLnZhbHVlID09PSB0cnVlID8gJ3RleHRhcmVhJyA6ICdpbnB1dCcsIHtcbiAgICAgICAgICByZWY6IGlucHV0UmVmLFxuICAgICAgICAgIGNsYXNzOiBbXG4gICAgICAgICAgICAncS1maWVsZF9fbmF0aXZlIHEtcGxhY2Vob2xkZXInLFxuICAgICAgICAgICAgcHJvcHMuaW5wdXRDbGFzc1xuICAgICAgICAgIF0sXG4gICAgICAgICAgc3R5bGU6IHByb3BzLmlucHV0U3R5bGUsXG4gICAgICAgICAgLi4uaW5wdXRBdHRycy52YWx1ZSxcbiAgICAgICAgICAuLi5vbkV2ZW50cy52YWx1ZSxcbiAgICAgICAgICAuLi4oXG4gICAgICAgICAgICBwcm9wcy50eXBlICE9PSAnZmlsZSdcbiAgICAgICAgICAgICAgPyB7IHZhbHVlOiBnZXRDdXJWYWx1ZSgpIH1cbiAgICAgICAgICAgICAgOiBmb3JtRG9tUHJvcHMudmFsdWVcbiAgICAgICAgICApXG4gICAgICAgIH0pXG4gICAgICB9LFxuXG4gICAgICBnZXRTaGFkb3dDb250cm9sOiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgICAgY2xhc3M6ICdxLWZpZWxkX19uYXRpdmUgcS1maWVsZF9fc2hhZG93IGFic29sdXRlLWJvdHRvbSBuby1wb2ludGVyLWV2ZW50cydcbiAgICAgICAgICAgICsgKGlzVGV4dGFyZWEudmFsdWUgPT09IHRydWUgPyAnJyA6ICcgdGV4dC1uby13cmFwJylcbiAgICAgICAgfSwgW1xuICAgICAgICAgIGgoJ3NwYW4nLCB7IGNsYXNzOiAnaW52aXNpYmxlJyB9LCBnZXRDdXJWYWx1ZSgpKSxcbiAgICAgICAgICBoKCdzcGFuJywgcHJvcHMuc2hhZG93VGV4dClcbiAgICAgICAgXSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uc3QgcmVuZGVyRm4gPSB1c2VGaWVsZChzdGF0ZSlcblxuICAgIC8vIGV4cG9zZSBwdWJsaWMgbWV0aG9kc1xuICAgIE9iamVjdC5hc3NpZ24ocHJveHksIHtcbiAgICAgIGZvY3VzLFxuICAgICAgc2VsZWN0LFxuICAgICAgZ2V0TmF0aXZlRWxlbWVudDogKCkgPT4gaW5wdXRSZWYudmFsdWUgLy8gZGVwcmVjYXRlZFxuICAgIH0pXG5cbiAgICBpbmplY3RQcm9wKHByb3h5LCAnbmF0aXZlRWwnLCAoKSA9PiBpbnB1dFJlZi52YWx1ZSlcblxuICAgIHJldHVybiByZW5kZXJGblxuICB9XG59KVxuIiwiaW1wb3J0IHsgaCwgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgUUljb24gZnJvbSAnLi4vaWNvbi9RSWNvbi5qcydcblxuaW1wb3J0IHsgY3JlYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5jcmVhdGUvY3JlYXRlLmpzJ1xuaW1wb3J0IHsgaFNsb3QsIGhVbmlxdWVTbG90IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5yZW5kZXIvcmVuZGVyLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb21wb25lbnQoe1xuICBuYW1lOiAnUVRoJyxcblxuICBwcm9wczoge1xuICAgIHByb3BzOiBPYmplY3QsXG4gICAgYXV0b1dpZHRoOiBCb29sZWFuXG4gIH0sXG5cbiAgZW1pdHM6IFsgJ2NsaWNrJyBdLFxuXG4gIHNldHVwIChwcm9wcywgeyBzbG90cywgZW1pdCB9KSB7XG4gICAgY29uc3Qgdm0gPSBnZXRDdXJyZW50SW5zdGFuY2UoKVxuICAgIGNvbnN0IHsgcHJveHk6IHsgJHEgfSB9ID0gdm1cblxuICAgIGNvbnN0IG9uQ2xpY2sgPSBldnQgPT4geyBlbWl0KCdjbGljaycsIGV2dCkgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5wcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybiBoKCd0aCcsIHtcbiAgICAgICAgICBjbGFzczogcHJvcHMuYXV0b1dpZHRoID09PSB0cnVlID8gJ3EtdGFibGUtLWNvbC1hdXRvLXdpZHRoJyA6ICcnLFxuICAgICAgICAgIG9uQ2xpY2tcbiAgICAgICAgfSwgaFNsb3Qoc2xvdHMuZGVmYXVsdCkpXG4gICAgICB9XG5cbiAgICAgIGxldCBjb2wsIGNoaWxkXG4gICAgICBjb25zdCBuYW1lID0gdm0udm5vZGUua2V5XG5cbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIGNvbCA9IHByb3BzLnByb3BzLmNvbHNNYXBbIG5hbWUgXVxuICAgICAgICBpZiAoY29sID09PSB2b2lkIDApIHJldHVyblxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbCA9IHByb3BzLnByb3BzLmNvbFxuICAgICAgfVxuXG4gICAgICBpZiAoY29sLnNvcnRhYmxlID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGNvbC5hbGlnbiA9PT0gJ3JpZ2h0J1xuICAgICAgICAgID8gJ3Vuc2hpZnQnXG4gICAgICAgICAgOiAncHVzaCdcblxuICAgICAgICBjaGlsZCA9IGhVbmlxdWVTbG90KHNsb3RzLmRlZmF1bHQsIFtdKVxuICAgICAgICBjaGlsZFsgYWN0aW9uIF0oXG4gICAgICAgICAgaChRSWNvbiwge1xuICAgICAgICAgICAgY2xhc3M6IGNvbC5fX2ljb25DbGFzcyxcbiAgICAgICAgICAgIG5hbWU6ICRxLmljb25TZXQudGFibGUuYXJyb3dVcFxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjaGlsZCA9IGhTbG90KHNsb3RzLmRlZmF1bHQpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIGNsYXNzOiBjb2wuX190aENsYXNzXG4gICAgICAgICAgKyAocHJvcHMuYXV0b1dpZHRoID09PSB0cnVlID8gJyBxLXRhYmxlLS1jb2wtYXV0by13aWR0aCcgOiAnJyksXG4gICAgICAgIHN0eWxlOiBjb2wuaGVhZGVyU3R5bGUsXG4gICAgICAgIG9uQ2xpY2s6IGV2dCA9PiB7XG4gICAgICAgICAgY29sLnNvcnRhYmxlID09PSB0cnVlICYmIHByb3BzLnByb3BzLnNvcnQoY29sKVxuICAgICAgICAgIG9uQ2xpY2soZXZ0KVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCd0aCcsIGRhdGEsIGNoaWxkKVxuICAgIH1cbiAgfVxufSlcbiIsImltcG9ydCB7IGgsIGNvbXB1dGVkLCBnZXRDdXJyZW50SW5zdGFuY2UgfSBmcm9tICd2dWUnXG5cbmltcG9ydCB1c2VEYXJrLCB7IHVzZURhcmtQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLWRhcmsvdXNlLWRhcmsuanMnXG5cbmltcG9ydCB7IGNyZWF0ZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUuY3JlYXRlL2NyZWF0ZS5qcydcblxuY29uc3QgaW5zZXRNYXAgPSB7XG4gIHRydWU6ICdpbnNldCcsXG4gIGl0ZW06ICdpdGVtLWluc2V0JyxcbiAgJ2l0ZW0tdGh1bWJuYWlsJzogJ2l0ZW0tdGh1bWJuYWlsLWluc2V0J1xufVxuXG5leHBvcnQgY29uc3QgbWFyZ2lucyA9IHtcbiAgeHM6IDIsXG4gIHNtOiA0LFxuICBtZDogOCxcbiAgbGc6IDE2LFxuICB4bDogMjRcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29tcG9uZW50KHtcbiAgbmFtZTogJ1FTZXBhcmF0b3InLFxuXG4gIHByb3BzOiB7XG4gICAgLi4udXNlRGFya1Byb3BzLFxuXG4gICAgc3BhY2VkOiBbIEJvb2xlYW4sIFN0cmluZyBdLFxuICAgIGluc2V0OiBbIEJvb2xlYW4sIFN0cmluZyBdLFxuICAgIHZlcnRpY2FsOiBCb29sZWFuLFxuICAgIGNvbG9yOiBTdHJpbmcsXG4gICAgc2l6ZTogU3RyaW5nXG4gIH0sXG5cbiAgc2V0dXAgKHByb3BzKSB7XG4gICAgY29uc3Qgdm0gPSBnZXRDdXJyZW50SW5zdGFuY2UoKVxuICAgIGNvbnN0IGlzRGFyayA9IHVzZURhcmsocHJvcHMsIHZtLnByb3h5LiRxKVxuXG4gICAgY29uc3Qgb3JpZW50YXRpb24gPSBjb21wdXRlZCgoKSA9PiAoXG4gICAgICBwcm9wcy52ZXJ0aWNhbCA9PT0gdHJ1ZVxuICAgICAgICA/ICd2ZXJ0aWNhbCdcbiAgICAgICAgOiAnaG9yaXpvbnRhbCdcbiAgICApKVxuXG4gICAgY29uc3Qgb3JpZW50Q2xhc3MgPSBjb21wdXRlZCgoKSA9PiBgIHEtc2VwYXJhdG9yLS0keyBvcmllbnRhdGlvbi52YWx1ZSB9YClcblxuICAgIGNvbnN0IGluc2V0Q2xhc3MgPSBjb21wdXRlZCgoKSA9PiAoXG4gICAgICBwcm9wcy5pbnNldCAhPT0gZmFsc2VcbiAgICAgICAgPyBgJHsgb3JpZW50Q2xhc3MudmFsdWUgfS0keyBpbnNldE1hcFsgcHJvcHMuaW5zZXQgXSB9YFxuICAgICAgICA6ICcnXG4gICAgKSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgYHEtc2VwYXJhdG9yJHsgb3JpZW50Q2xhc3MudmFsdWUgfSR7IGluc2V0Q2xhc3MudmFsdWUgfWBcbiAgICAgICsgKHByb3BzLmNvbG9yICE9PSB2b2lkIDAgPyBgIGJnLSR7IHByb3BzLmNvbG9yIH1gIDogJycpXG4gICAgICArIChpc0RhcmsudmFsdWUgPT09IHRydWUgPyAnIHEtc2VwYXJhdG9yLS1kYXJrJyA6ICcnKVxuICAgIClcblxuICAgIGNvbnN0IHN0eWxlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgYWNjID0ge31cblxuICAgICAgaWYgKHByb3BzLnNpemUgIT09IHZvaWQgMCkge1xuICAgICAgICBhY2NbIHByb3BzLnZlcnRpY2FsID09PSB0cnVlID8gJ3dpZHRoJyA6ICdoZWlnaHQnIF0gPSBwcm9wcy5zaXplXG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wcy5zcGFjZWQgIT09IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHNpemUgPSBwcm9wcy5zcGFjZWQgPT09IHRydWVcbiAgICAgICAgICA/IGAkeyBtYXJnaW5zLm1kIH1weGBcbiAgICAgICAgICA6IHByb3BzLnNwYWNlZCBpbiBtYXJnaW5zID8gYCR7IG1hcmdpbnNbIHByb3BzLnNwYWNlZCBdIH1weGAgOiBwcm9wcy5zcGFjZWRcblxuICAgICAgICBjb25zdCBkaXIgPSBwcm9wcy52ZXJ0aWNhbCA9PT0gdHJ1ZVxuICAgICAgICAgID8gWyAnTGVmdCcsICdSaWdodCcgXVxuICAgICAgICAgIDogWyAnVG9wJywgJ0JvdHRvbScgXVxuXG4gICAgICAgIGFjY1sgYG1hcmdpbiR7IGRpclsgMCBdIH1gIF0gPSBhY2NbIGBtYXJnaW4keyBkaXJbIDEgXSB9YCBdID0gc2l6ZVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjXG4gICAgfSlcblxuICAgIHJldHVybiAoKSA9PiBoKCdocicsIHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgc3R5bGU6IHN0eWxlLnZhbHVlLFxuICAgICAgJ2FyaWEtb3JpZW50YXRpb24nOiBvcmllbnRhdGlvbi52YWx1ZVxuICAgIH0pXG4gIH1cbn0pXG4iLCJpbXBvcnQgeyBoLCBjb21wdXRlZCwgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgdXNlRGFyaywgeyB1c2VEYXJrUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wcml2YXRlLnVzZS1kYXJrL3VzZS1kYXJrLmpzJ1xuXG5pbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmNyZWF0ZS9jcmVhdGUuanMnXG5pbXBvcnQgeyBoU2xvdCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUucmVuZGVyL3JlbmRlci5qcydcblxuY29uc3Qgc2VwYXJhdG9yVmFsdWVzID0gWyAnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCcsICdjZWxsJywgJ25vbmUnIF1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29tcG9uZW50KHtcbiAgbmFtZTogJ1FNYXJrdXBUYWJsZScsXG5cbiAgcHJvcHM6IHtcbiAgICAuLi51c2VEYXJrUHJvcHMsXG5cbiAgICBkZW5zZTogQm9vbGVhbixcbiAgICBmbGF0OiBCb29sZWFuLFxuICAgIGJvcmRlcmVkOiBCb29sZWFuLFxuICAgIHNxdWFyZTogQm9vbGVhbixcbiAgICB3cmFwQ2VsbHM6IEJvb2xlYW4sXG5cbiAgICBzZXBhcmF0b3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdob3Jpem9udGFsJyxcbiAgICAgIHZhbGlkYXRvcjogdiA9PiBzZXBhcmF0b3JWYWx1ZXMuaW5jbHVkZXModilcbiAgICB9XG4gIH0sXG5cbiAgc2V0dXAgKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCB2bSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpXG4gICAgY29uc3QgaXNEYXJrID0gdXNlRGFyayhwcm9wcywgdm0ucHJveHkuJHEpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgICdxLW1hcmt1cC10YWJsZSBxLXRhYmxlX19jb250YWluZXIgcS10YWJsZV9fY2FyZCdcbiAgICAgICsgYCBxLXRhYmxlLS0keyBwcm9wcy5zZXBhcmF0b3IgfS1zZXBhcmF0b3JgXG4gICAgICArIChpc0RhcmsudmFsdWUgPT09IHRydWUgPyAnIHEtdGFibGUtLWRhcmsgcS10YWJsZV9fY2FyZC0tZGFyayBxLWRhcmsnIDogJycpXG4gICAgICArIChwcm9wcy5kZW5zZSA9PT0gdHJ1ZSA/ICcgcS10YWJsZS0tZGVuc2UnIDogJycpXG4gICAgICArIChwcm9wcy5mbGF0ID09PSB0cnVlID8gJyBxLXRhYmxlLS1mbGF0JyA6ICcnKVxuICAgICAgKyAocHJvcHMuYm9yZGVyZWQgPT09IHRydWUgPyAnIHEtdGFibGUtLWJvcmRlcmVkJyA6ICcnKVxuICAgICAgKyAocHJvcHMuc3F1YXJlID09PSB0cnVlID8gJyBxLXRhYmxlLS1zcXVhcmUnIDogJycpXG4gICAgICArIChwcm9wcy53cmFwQ2VsbHMgPT09IGZhbHNlID8gJyBxLXRhYmxlLS1uby13cmFwJyA6ICcnKVxuICAgIClcblxuICAgIHJldHVybiAoKSA9PiBoKCdkaXYnLCB7XG4gICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZVxuICAgIH0sIFtcbiAgICAgIGgoJ3RhYmxlJywgeyBjbGFzczogJ3EtdGFibGUnIH0sIGhTbG90KHNsb3RzLmRlZmF1bHQpKVxuICAgIF0pXG4gIH1cbn0pXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAocHJvcHMsIGNvbnRlbnQpIHtcbiAgcmV0dXJuIGgoJ2RpdicsIHByb3BzLCBbXG4gICAgaCgndGFibGUnLCB7IGNsYXNzOiAncS10YWJsZScgfSwgY29udGVudClcbiAgXSlcbn1cbiIsImxldCBydGxIYXNTY3JvbGxCdWcgPSBmYWxzZVxuXG4vLyBtb2JpbGUgQ2hyb21lIHRha2VzIHRoZSBjcm93biBmb3IgdGhpc1xuaWYgKCFfX1FVQVNBUl9TU1JfXykge1xuICBjb25zdCBzY3JvbGxlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gIHNjcm9sbGVyLnNldEF0dHJpYnV0ZSgnZGlyJywgJ3J0bCcpXG4gIE9iamVjdC5hc3NpZ24oc2Nyb2xsZXIuc3R5bGUsIHtcbiAgICB3aWR0aDogJzFweCcsXG4gICAgaGVpZ2h0OiAnMXB4JyxcbiAgICBvdmVyZmxvdzogJ2F1dG8nXG4gIH0pXG5cbiAgY29uc3Qgc3BhY2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgT2JqZWN0LmFzc2lnbihzcGFjZXIuc3R5bGUsIHtcbiAgICB3aWR0aDogJzEwMDBweCcsXG4gICAgaGVpZ2h0OiAnMXB4J1xuICB9KVxuXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsZXIpXG4gIHNjcm9sbGVyLmFwcGVuZENoaWxkKHNwYWNlcilcbiAgc2Nyb2xsZXIuc2Nyb2xsTGVmdCA9IC0xMDAwXG5cbiAgcnRsSGFzU2Nyb2xsQnVnID0gc2Nyb2xsZXIuc2Nyb2xsTGVmdCA+PSAwXG5cbiAgc2Nyb2xsZXIucmVtb3ZlKClcbn1cblxuZXhwb3J0IHtcbiAgcnRsSGFzU2Nyb2xsQnVnXG59XG4iLCJpbXBvcnQgeyBoLCByZWYsIGNvbXB1dGVkLCB3YXRjaCwgb25BY3RpdmF0ZWQsIG9uRGVhY3RpdmF0ZWQsIG9uQmVmb3JlTW91bnQsIG9uQmVmb3JlVW5tb3VudCwgbmV4dFRpY2ssIGdldEN1cnJlbnRJbnN0YW5jZSB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IGRlYm91bmNlIGZyb20gJy4uLy4uL3V0aWxzL2RlYm91bmNlL2RlYm91bmNlLmpzJ1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uLy4uL3V0aWxzL2V2ZW50L2V2ZW50LmpzJ1xuaW1wb3J0IHsgcnRsSGFzU2Nyb2xsQnVnIH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5ydGwvcnRsLmpzJ1xuXG5jb25zdCBhZ2dCdWNrZXRTaXplID0gMTAwMFxuXG5jb25zdCBzY3JvbGxUb0VkZ2VzID0gW1xuICAnc3RhcnQnLFxuICAnY2VudGVyJyxcbiAgJ2VuZCcsXG4gICdzdGFydC1mb3JjZScsXG4gICdjZW50ZXItZm9yY2UnLFxuICAnZW5kLWZvcmNlJ1xuXVxuXG5jb25zdCBmaWx0ZXJQcm90byA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXJcblxuY29uc3Qgc2V0T3ZlcmZsb3dBbmNob3IgPSBfX1FVQVNBUl9TU1JfXyB8fCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5KS5vdmVyZmxvd0FuY2hvciA9PT0gdm9pZCAwXG4gID8gbm9vcFxuICA6IGZ1bmN0aW9uIChjb250ZW50RWwsIGluZGV4KSB7XG4gICAgaWYgKGNvbnRlbnRFbCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGNvbnRlbnRFbC5fcU92ZXJmbG93QW5pbWF0aW9uRnJhbWUgIT09IHZvaWQgMCkge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoY29udGVudEVsLl9xT3ZlcmZsb3dBbmltYXRpb25GcmFtZSlcbiAgICB9XG5cbiAgICBjb250ZW50RWwuX3FPdmVyZmxvd0FuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGlmIChjb250ZW50RWwgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnRFbC5fcU92ZXJmbG93QW5pbWF0aW9uRnJhbWUgPSB2b2lkIDBcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gY29udGVudEVsLmNoaWxkcmVuIHx8IFtdXG5cbiAgICAgIGZpbHRlclByb3RvXG4gICAgICAgIC5jYWxsKGNoaWxkcmVuLCBlbCA9PiBlbC5kYXRhc2V0ICYmIGVsLmRhdGFzZXQucVZzQW5jaG9yICE9PSB2b2lkIDApXG4gICAgICAgIC5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICBkZWxldGUgZWwuZGF0YXNldC5xVnNBbmNob3JcbiAgICAgICAgfSlcblxuICAgICAgY29uc3QgZWwgPSBjaGlsZHJlblsgaW5kZXggXVxuXG4gICAgICBpZiAoZWwgJiYgZWwuZGF0YXNldCkge1xuICAgICAgICBlbC5kYXRhc2V0LnFWc0FuY2hvciA9ICcnXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG5mdW5jdGlvbiBzdW1GbiAoYWNjLCBoKSB7XG4gIHJldHVybiBhY2MgKyBoXG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbERldGFpbHMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICBiZWZvcmVSZWYsXG4gIGFmdGVyUmVmLFxuICBob3Jpem9udGFsLFxuICBydGwsXG4gIHN0aWNreVN0YXJ0LFxuICBzdGlja3lFbmRcbikge1xuICBjb25zdFxuICAgIHBhcmVudENhbGMgPSBwYXJlbnQgPT09IHdpbmRvdyA/IGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogcGFyZW50LFxuICAgIHByb3BFbFNpemUgPSBob3Jpem9udGFsID09PSB0cnVlID8gJ29mZnNldFdpZHRoJyA6ICdvZmZzZXRIZWlnaHQnLFxuICAgIGRldGFpbHMgPSB7XG4gICAgICBzY3JvbGxTdGFydDogMCxcbiAgICAgIHNjcm9sbFZpZXdTaXplOiAtc3RpY2t5U3RhcnQgLSBzdGlja3lFbmQsXG4gICAgICBzY3JvbGxNYXhTaXplOiAwLFxuICAgICAgb2Zmc2V0U3RhcnQ6IC1zdGlja3lTdGFydCxcbiAgICAgIG9mZnNldEVuZDogLXN0aWNreUVuZFxuICAgIH1cblxuICBpZiAoaG9yaXpvbnRhbCA9PT0gdHJ1ZSkge1xuICAgIGlmIChwYXJlbnQgPT09IHdpbmRvdykge1xuICAgICAgZGV0YWlscy5zY3JvbGxTdGFydCA9IHdpbmRvdy5wYWdlWE9mZnNldCB8fCB3aW5kb3cuc2Nyb2xsWCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQgfHwgMFxuICAgICAgZGV0YWlscy5zY3JvbGxWaWV3U2l6ZSArPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGhcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBkZXRhaWxzLnNjcm9sbFN0YXJ0ID0gcGFyZW50Q2FsYy5zY3JvbGxMZWZ0XG4gICAgICBkZXRhaWxzLnNjcm9sbFZpZXdTaXplICs9IHBhcmVudENhbGMuY2xpZW50V2lkdGhcbiAgICB9XG4gICAgZGV0YWlscy5zY3JvbGxNYXhTaXplID0gcGFyZW50Q2FsYy5zY3JvbGxXaWR0aFxuXG4gICAgaWYgKHJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgZGV0YWlscy5zY3JvbGxTdGFydCA9IChydGxIYXNTY3JvbGxCdWcgPT09IHRydWUgPyBkZXRhaWxzLnNjcm9sbE1heFNpemUgLSBkZXRhaWxzLnNjcm9sbFZpZXdTaXplIDogMCkgLSBkZXRhaWxzLnNjcm9sbFN0YXJ0XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGlmIChwYXJlbnQgPT09IHdpbmRvdykge1xuICAgICAgZGV0YWlscy5zY3JvbGxTdGFydCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCB3aW5kb3cuc2Nyb2xsWSB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCAwXG4gICAgICBkZXRhaWxzLnNjcm9sbFZpZXdTaXplICs9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBkZXRhaWxzLnNjcm9sbFN0YXJ0ID0gcGFyZW50Q2FsYy5zY3JvbGxUb3BcbiAgICAgIGRldGFpbHMuc2Nyb2xsVmlld1NpemUgKz0gcGFyZW50Q2FsYy5jbGllbnRIZWlnaHRcbiAgICB9XG4gICAgZGV0YWlscy5zY3JvbGxNYXhTaXplID0gcGFyZW50Q2FsYy5zY3JvbGxIZWlnaHRcbiAgfVxuXG4gIGlmIChiZWZvcmVSZWYgIT09IG51bGwpIHtcbiAgICBmb3IgKGxldCBlbCA9IGJlZm9yZVJlZi5wcmV2aW91c0VsZW1lbnRTaWJsaW5nOyBlbCAhPT0gbnVsbDsgZWwgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdxLXZpcnR1YWwtc2Nyb2xsLS1za2lwJykgPT09IGZhbHNlKSB7XG4gICAgICAgIGRldGFpbHMub2Zmc2V0U3RhcnQgKz0gZWxbIHByb3BFbFNpemUgXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChhZnRlclJlZiAhPT0gbnVsbCkge1xuICAgIGZvciAobGV0IGVsID0gYWZ0ZXJSZWYubmV4dEVsZW1lbnRTaWJsaW5nOyBlbCAhPT0gbnVsbDsgZWwgPSBlbC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICAgIGlmIChlbC5jbGFzc0xpc3QuY29udGFpbnMoJ3EtdmlydHVhbC1zY3JvbGwtLXNraXAnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZGV0YWlscy5vZmZzZXRFbmQgKz0gZWxbIHByb3BFbFNpemUgXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChjaGlsZCAhPT0gcGFyZW50KSB7XG4gICAgY29uc3RcbiAgICAgIHBhcmVudFJlY3QgPSBwYXJlbnRDYWxjLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgY2hpbGRSZWN0ID0gY2hpbGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICAgIGlmIChob3Jpem9udGFsID09PSB0cnVlKSB7XG4gICAgICBkZXRhaWxzLm9mZnNldFN0YXJ0ICs9IGNoaWxkUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0XG4gICAgICBkZXRhaWxzLm9mZnNldEVuZCAtPSBjaGlsZFJlY3Qud2lkdGhcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBkZXRhaWxzLm9mZnNldFN0YXJ0ICs9IGNoaWxkUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcFxuICAgICAgZGV0YWlscy5vZmZzZXRFbmQgLT0gY2hpbGRSZWN0LmhlaWdodFxuICAgIH1cblxuICAgIGlmIChwYXJlbnQgIT09IHdpbmRvdykge1xuICAgICAgZGV0YWlscy5vZmZzZXRTdGFydCArPSBkZXRhaWxzLnNjcm9sbFN0YXJ0XG4gICAgfVxuICAgIGRldGFpbHMub2Zmc2V0RW5kICs9IGRldGFpbHMuc2Nyb2xsTWF4U2l6ZSAtIGRldGFpbHMub2Zmc2V0U3RhcnRcbiAgfVxuXG4gIHJldHVybiBkZXRhaWxzXG59XG5cbmZ1bmN0aW9uIHNldFNjcm9sbCAocGFyZW50LCBzY3JvbGwsIGhvcml6b250YWwsIHJ0bCkge1xuICBpZiAoc2Nyb2xsID09PSAnZW5kJykge1xuICAgIHNjcm9sbCA9IChwYXJlbnQgPT09IHdpbmRvdyA/IGRvY3VtZW50LmJvZHkgOiBwYXJlbnQpW1xuICAgICAgaG9yaXpvbnRhbCA9PT0gdHJ1ZSA/ICdzY3JvbGxXaWR0aCcgOiAnc2Nyb2xsSGVpZ2h0J1xuICAgIF1cbiAgfVxuXG4gIGlmIChwYXJlbnQgPT09IHdpbmRvdykge1xuICAgIGlmIChob3Jpem9udGFsID09PSB0cnVlKSB7XG4gICAgICBpZiAocnRsID09PSB0cnVlKSB7XG4gICAgICAgIHNjcm9sbCA9IChydGxIYXNTY3JvbGxCdWcgPT09IHRydWUgPyBkb2N1bWVudC5ib2R5LnNjcm9sbFdpZHRoIC0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIDogMCkgLSBzY3JvbGxcbiAgICAgIH1cbiAgICAgIHdpbmRvdy5zY3JvbGxUbyhzY3JvbGwsIHdpbmRvdy5wYWdlWU9mZnNldCB8fCB3aW5kb3cuc2Nyb2xsWSB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCAwKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbyh3aW5kb3cucGFnZVhPZmZzZXQgfHwgd2luZG93LnNjcm9sbFggfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0IHx8IDAsIHNjcm9sbClcbiAgICB9XG4gIH1cbiAgZWxzZSBpZiAoaG9yaXpvbnRhbCA9PT0gdHJ1ZSkge1xuICAgIGlmIChydGwgPT09IHRydWUpIHtcbiAgICAgIHNjcm9sbCA9IChydGxIYXNTY3JvbGxCdWcgPT09IHRydWUgPyBwYXJlbnQuc2Nyb2xsV2lkdGggLSBwYXJlbnQub2Zmc2V0V2lkdGggOiAwKSAtIHNjcm9sbFxuICAgIH1cbiAgICBwYXJlbnQuc2Nyb2xsTGVmdCA9IHNjcm9sbFxuICB9XG4gIGVsc2Uge1xuICAgIHBhcmVudC5zY3JvbGxUb3AgPSBzY3JvbGxcbiAgfVxufVxuXG5mdW5jdGlvbiBzdW1TaXplIChzaXplQWdnLCBzaXplLCBmcm9tLCB0bykge1xuICBpZiAoZnJvbSA+PSB0bykgeyByZXR1cm4gMCB9XG5cbiAgY29uc3RcbiAgICBsYXN0VG8gPSBzaXplLmxlbmd0aCxcbiAgICBmcm9tQWdnID0gTWF0aC5mbG9vcihmcm9tIC8gYWdnQnVja2V0U2l6ZSksXG4gICAgdG9BZ2cgPSBNYXRoLmZsb29yKCh0byAtIDEpIC8gYWdnQnVja2V0U2l6ZSkgKyAxXG5cbiAgbGV0IHRvdGFsID0gc2l6ZUFnZy5zbGljZShmcm9tQWdnLCB0b0FnZykucmVkdWNlKHN1bUZuLCAwKVxuXG4gIGlmIChmcm9tICUgYWdnQnVja2V0U2l6ZSAhPT0gMCkge1xuICAgIHRvdGFsIC09IHNpemUuc2xpY2UoZnJvbUFnZyAqIGFnZ0J1Y2tldFNpemUsIGZyb20pLnJlZHVjZShzdW1GbiwgMClcbiAgfVxuICBpZiAodG8gJSBhZ2dCdWNrZXRTaXplICE9PSAwICYmIHRvICE9PSBsYXN0VG8pIHtcbiAgICB0b3RhbCAtPSBzaXplLnNsaWNlKHRvLCB0b0FnZyAqIGFnZ0J1Y2tldFNpemUpLnJlZHVjZShzdW1GbiwgMClcbiAgfVxuXG4gIHJldHVybiB0b3RhbFxufVxuXG5jb25zdCBjb21tb25WaXJ0U2Nyb2xsUHJvcHMgPSB7XG4gIHZpcnR1YWxTY3JvbGxTbGljZVNpemU6IHtcbiAgICB0eXBlOiBbIE51bWJlciwgU3RyaW5nIF0sXG4gICAgZGVmYXVsdDogMTBcbiAgfSxcblxuICB2aXJ0dWFsU2Nyb2xsU2xpY2VSYXRpb0JlZm9yZToge1xuICAgIHR5cGU6IFsgTnVtYmVyLCBTdHJpbmcgXSxcbiAgICBkZWZhdWx0OiAxXG4gIH0sXG5cbiAgdmlydHVhbFNjcm9sbFNsaWNlUmF0aW9BZnRlcjoge1xuICAgIHR5cGU6IFsgTnVtYmVyLCBTdHJpbmcgXSxcbiAgICBkZWZhdWx0OiAxXG4gIH0sXG5cbiAgdmlydHVhbFNjcm9sbEl0ZW1TaXplOiB7XG4gICAgdHlwZTogWyBOdW1iZXIsIFN0cmluZyBdLFxuICAgIGRlZmF1bHQ6IDI0XG4gIH0sXG5cbiAgdmlydHVhbFNjcm9sbFN0aWNreVNpemVTdGFydDoge1xuICAgIHR5cGU6IFsgTnVtYmVyLCBTdHJpbmcgXSxcbiAgICBkZWZhdWx0OiAwXG4gIH0sXG5cbiAgdmlydHVhbFNjcm9sbFN0aWNreVNpemVFbmQ6IHtcbiAgICB0eXBlOiBbIE51bWJlciwgU3RyaW5nIF0sXG4gICAgZGVmYXVsdDogMFxuICB9LFxuXG4gIHRhYmxlQ29sc3BhbjogWyBOdW1iZXIsIFN0cmluZyBdXG59XG5cbmV4cG9ydCBjb25zdCBjb21tb25WaXJ0U2Nyb2xsUHJvcHNMaXN0ID0gT2JqZWN0LmtleXMoY29tbW9uVmlydFNjcm9sbFByb3BzKVxuXG5leHBvcnQgY29uc3QgdXNlVmlydHVhbFNjcm9sbFByb3BzID0ge1xuICB2aXJ0dWFsU2Nyb2xsSG9yaXpvbnRhbDogQm9vbGVhbixcbiAgb25WaXJ0dWFsU2Nyb2xsOiBGdW5jdGlvbixcbiAgLi4uY29tbW9uVmlydFNjcm9sbFByb3BzXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VWaXJ0dWFsU2Nyb2xsICh7XG4gIHZpcnR1YWxTY3JvbGxMZW5ndGgsIGdldFZpcnR1YWxTY3JvbGxUYXJnZXQsIGdldFZpcnR1YWxTY3JvbGxFbCxcbiAgdmlydHVhbFNjcm9sbEl0ZW1TaXplQ29tcHV0ZWQgLy8gb3B0aW9uYWxcbn0pIHtcbiAgY29uc3Qgdm0gPSBnZXRDdXJyZW50SW5zdGFuY2UoKVxuXG4gIGNvbnN0IHsgcHJvcHMsIGVtaXQsIHByb3h5IH0gPSB2bVxuICBjb25zdCB7ICRxIH0gPSBwcm94eVxuXG4gIGxldCBwcmV2U2Nyb2xsU3RhcnQsIHByZXZUb0luZGV4LCBsb2NhbFNjcm9sbFZpZXdTaXplLCB2aXJ0dWFsU2Nyb2xsU2l6ZXNBZ2cgPSBbXSwgdmlydHVhbFNjcm9sbFNpemVzXG5cbiAgY29uc3QgdmlydHVhbFNjcm9sbFBhZGRpbmdCZWZvcmUgPSByZWYoMClcbiAgY29uc3QgdmlydHVhbFNjcm9sbFBhZGRpbmdBZnRlciA9IHJlZigwKVxuICBjb25zdCB2aXJ0dWFsU2Nyb2xsU2xpY2VTaXplQ29tcHV0ZWQgPSByZWYoe30pXG5cbiAgY29uc3QgYmVmb3JlUmVmID0gcmVmKG51bGwpXG4gIGNvbnN0IGFmdGVyUmVmID0gcmVmKG51bGwpXG4gIGNvbnN0IGNvbnRlbnRSZWYgPSByZWYobnVsbClcblxuICBjb25zdCB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZSA9IHJlZih7IGZyb206IDAsIHRvOiAwIH0pXG5cbiAgY29uc3QgY29sc3BhbkF0dHIgPSBjb21wdXRlZCgoKSA9PiAocHJvcHMudGFibGVDb2xzcGFuICE9PSB2b2lkIDAgPyBwcm9wcy50YWJsZUNvbHNwYW4gOiAxMDApKVxuXG4gIGlmICh2aXJ0dWFsU2Nyb2xsSXRlbVNpemVDb21wdXRlZCA9PT0gdm9pZCAwKSB7XG4gICAgdmlydHVhbFNjcm9sbEl0ZW1TaXplQ29tcHV0ZWQgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy52aXJ0dWFsU2Nyb2xsSXRlbVNpemUpXG4gIH1cblxuICBjb25zdCBuZWVkc1Jlc2V0ID0gY29tcHV0ZWQoKCkgPT4gdmlydHVhbFNjcm9sbEl0ZW1TaXplQ29tcHV0ZWQudmFsdWUgKyAnOycgKyBwcm9wcy52aXJ0dWFsU2Nyb2xsSG9yaXpvbnRhbClcblxuICBjb25zdCBuZWVkc1NsaWNlUmVjYWxjID0gY29tcHV0ZWQoKCkgPT5cbiAgICBuZWVkc1Jlc2V0LnZhbHVlICsgJzsnICsgcHJvcHMudmlydHVhbFNjcm9sbFNsaWNlUmF0aW9CZWZvcmUgKyAnOycgKyBwcm9wcy52aXJ0dWFsU2Nyb2xsU2xpY2VSYXRpb0FmdGVyXG4gIClcblxuICB3YXRjaChuZWVkc1NsaWNlUmVjYWxjLCAoKSA9PiB7IHNldFZpcnR1YWxTY3JvbGxTaXplKCkgfSlcbiAgd2F0Y2gobmVlZHNSZXNldCwgcmVzZXQpXG5cbiAgZnVuY3Rpb24gcmVzZXQgKCkge1xuICAgIGxvY2FsUmVzZXRWaXJ0dWFsU2Nyb2xsKHByZXZUb0luZGV4LCB0cnVlKVxuICB9XG5cbiAgZnVuY3Rpb24gcmVmcmVzaCAodG9JbmRleCkge1xuICAgIGxvY2FsUmVzZXRWaXJ0dWFsU2Nyb2xsKHRvSW5kZXggPT09IHZvaWQgMCA/IHByZXZUb0luZGV4IDogdG9JbmRleClcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjcm9sbFRvICh0b0luZGV4LCBlZGdlKSB7XG4gICAgY29uc3Qgc2Nyb2xsRWwgPSBnZXRWaXJ0dWFsU2Nyb2xsVGFyZ2V0KClcblxuICAgIGlmIChzY3JvbGxFbCA9PT0gdm9pZCAwIHx8IHNjcm9sbEVsID09PSBudWxsIHx8IHNjcm9sbEVsLm5vZGVUeXBlID09PSA4KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzY3JvbGxEZXRhaWxzID0gZ2V0U2Nyb2xsRGV0YWlscyhcbiAgICAgIHNjcm9sbEVsLFxuICAgICAgZ2V0VmlydHVhbFNjcm9sbEVsKCksXG4gICAgICBiZWZvcmVSZWYudmFsdWUsXG4gICAgICBhZnRlclJlZi52YWx1ZSxcbiAgICAgIHByb3BzLnZpcnR1YWxTY3JvbGxIb3Jpem9udGFsLFxuICAgICAgJHEubGFuZy5ydGwsXG4gICAgICBwcm9wcy52aXJ0dWFsU2Nyb2xsU3RpY2t5U2l6ZVN0YXJ0LFxuICAgICAgcHJvcHMudmlydHVhbFNjcm9sbFN0aWNreVNpemVFbmRcbiAgICApXG5cbiAgICBsb2NhbFNjcm9sbFZpZXdTaXplICE9PSBzY3JvbGxEZXRhaWxzLnNjcm9sbFZpZXdTaXplICYmIHNldFZpcnR1YWxTY3JvbGxTaXplKHNjcm9sbERldGFpbHMuc2Nyb2xsVmlld1NpemUpXG5cbiAgICBzZXRWaXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZShcbiAgICAgIHNjcm9sbEVsLFxuICAgICAgc2Nyb2xsRGV0YWlscyxcbiAgICAgIE1hdGgubWluKHZpcnR1YWxTY3JvbGxMZW5ndGgudmFsdWUgLSAxLCBNYXRoLm1heCgwLCBwYXJzZUludCh0b0luZGV4LCAxMCkgfHwgMCkpLFxuICAgICAgMCxcbiAgICAgIHNjcm9sbFRvRWRnZXMuaW5kZXhPZihlZGdlKSAhPT0gLTEgPyBlZGdlIDogKHByZXZUb0luZGV4ICE9PSAtMSAmJiB0b0luZGV4ID4gcHJldlRvSW5kZXggPyAnZW5kJyA6ICdzdGFydCcpXG4gICAgKVxuICB9XG5cbiAgZnVuY3Rpb24gbG9jYWxPblZpcnR1YWxTY3JvbGxFdnQgKCkge1xuICAgIGNvbnN0IHNjcm9sbEVsID0gZ2V0VmlydHVhbFNjcm9sbFRhcmdldCgpXG5cbiAgICBpZiAoc2Nyb2xsRWwgPT09IHZvaWQgMCB8fCBzY3JvbGxFbCA9PT0gbnVsbCB8fCBzY3JvbGxFbC5ub2RlVHlwZSA9PT0gOCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3RcbiAgICAgIHNjcm9sbERldGFpbHMgPSBnZXRTY3JvbGxEZXRhaWxzKFxuICAgICAgICBzY3JvbGxFbCxcbiAgICAgICAgZ2V0VmlydHVhbFNjcm9sbEVsKCksXG4gICAgICAgIGJlZm9yZVJlZi52YWx1ZSxcbiAgICAgICAgYWZ0ZXJSZWYudmFsdWUsXG4gICAgICAgIHByb3BzLnZpcnR1YWxTY3JvbGxIb3Jpem9udGFsLFxuICAgICAgICAkcS5sYW5nLnJ0bCxcbiAgICAgICAgcHJvcHMudmlydHVhbFNjcm9sbFN0aWNreVNpemVTdGFydCxcbiAgICAgICAgcHJvcHMudmlydHVhbFNjcm9sbFN0aWNreVNpemVFbmRcbiAgICAgICksXG4gICAgICBsaXN0TGFzdEluZGV4ID0gdmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZSAtIDEsXG4gICAgICBsaXN0RW5kT2Zmc2V0ID0gc2Nyb2xsRGV0YWlscy5zY3JvbGxNYXhTaXplIC0gc2Nyb2xsRGV0YWlscy5vZmZzZXRTdGFydCAtIHNjcm9sbERldGFpbHMub2Zmc2V0RW5kIC0gdmlydHVhbFNjcm9sbFBhZGRpbmdBZnRlci52YWx1ZVxuXG4gICAgaWYgKHByZXZTY3JvbGxTdGFydCA9PT0gc2Nyb2xsRGV0YWlscy5zY3JvbGxTdGFydCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHNjcm9sbERldGFpbHMuc2Nyb2xsTWF4U2l6ZSA8PSAwKSB7XG4gICAgICBzZXRWaXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZShzY3JvbGxFbCwgc2Nyb2xsRGV0YWlscywgMCwgMClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxvY2FsU2Nyb2xsVmlld1NpemUgIT09IHNjcm9sbERldGFpbHMuc2Nyb2xsVmlld1NpemUgJiYgc2V0VmlydHVhbFNjcm9sbFNpemUoc2Nyb2xsRGV0YWlscy5zY3JvbGxWaWV3U2l6ZSlcblxuICAgIHVwZGF0ZVZpcnR1YWxTY3JvbGxTaXplcyh2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS5mcm9tKVxuXG4gICAgY29uc3Qgc2Nyb2xsTWF4U3RhcnQgPSBNYXRoLmZsb29yKHNjcm9sbERldGFpbHMuc2Nyb2xsTWF4U2l6ZVxuICAgICAgLSBNYXRoLm1heChzY3JvbGxEZXRhaWxzLnNjcm9sbFZpZXdTaXplLCBzY3JvbGxEZXRhaWxzLm9mZnNldEVuZClcbiAgICAgIC0gTWF0aC5taW4odmlydHVhbFNjcm9sbFNpemVzWyBsaXN0TGFzdEluZGV4IF0sIHNjcm9sbERldGFpbHMuc2Nyb2xsVmlld1NpemUgLyAyKSlcblxuICAgIGlmIChzY3JvbGxNYXhTdGFydCA+IDAgJiYgTWF0aC5jZWlsKHNjcm9sbERldGFpbHMuc2Nyb2xsU3RhcnQpID49IHNjcm9sbE1heFN0YXJ0KSB7XG4gICAgICBzZXRWaXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZShcbiAgICAgICAgc2Nyb2xsRWwsXG4gICAgICAgIHNjcm9sbERldGFpbHMsXG4gICAgICAgIGxpc3RMYXN0SW5kZXgsXG4gICAgICAgIHNjcm9sbERldGFpbHMuc2Nyb2xsTWF4U2l6ZSAtIHNjcm9sbERldGFpbHMub2Zmc2V0RW5kIC0gdmlydHVhbFNjcm9sbFNpemVzQWdnLnJlZHVjZShzdW1GbiwgMClcbiAgICAgIClcblxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0XG4gICAgICB0b0luZGV4ID0gMCxcbiAgICAgIGxpc3RPZmZzZXQgPSBzY3JvbGxEZXRhaWxzLnNjcm9sbFN0YXJ0IC0gc2Nyb2xsRGV0YWlscy5vZmZzZXRTdGFydCxcbiAgICAgIG9mZnNldCA9IGxpc3RPZmZzZXRcblxuICAgIGlmIChsaXN0T2Zmc2V0IDw9IGxpc3RFbmRPZmZzZXQgJiYgbGlzdE9mZnNldCArIHNjcm9sbERldGFpbHMuc2Nyb2xsVmlld1NpemUgPj0gdmlydHVhbFNjcm9sbFBhZGRpbmdCZWZvcmUudmFsdWUpIHtcbiAgICAgIGxpc3RPZmZzZXQgLT0gdmlydHVhbFNjcm9sbFBhZGRpbmdCZWZvcmUudmFsdWVcbiAgICAgIHRvSW5kZXggPSB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS5mcm9tXG4gICAgICBvZmZzZXQgPSBsaXN0T2Zmc2V0XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGxpc3RPZmZzZXQgPj0gdmlydHVhbFNjcm9sbFNpemVzQWdnWyBqIF0gJiYgdG9JbmRleCA8IGxpc3RMYXN0SW5kZXg7IGorKykge1xuICAgICAgICBsaXN0T2Zmc2V0IC09IHZpcnR1YWxTY3JvbGxTaXplc0FnZ1sgaiBdXG4gICAgICAgIHRvSW5kZXggKz0gYWdnQnVja2V0U2l6ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHdoaWxlIChsaXN0T2Zmc2V0ID4gMCAmJiB0b0luZGV4IDwgbGlzdExhc3RJbmRleCkge1xuICAgICAgbGlzdE9mZnNldCAtPSB2aXJ0dWFsU2Nyb2xsU2l6ZXNbIHRvSW5kZXggXVxuICAgICAgaWYgKGxpc3RPZmZzZXQgPiAtc2Nyb2xsRGV0YWlscy5zY3JvbGxWaWV3U2l6ZSkge1xuICAgICAgICB0b0luZGV4KytcbiAgICAgICAgb2Zmc2V0ID0gbGlzdE9mZnNldFxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG9mZnNldCA9IHZpcnR1YWxTY3JvbGxTaXplc1sgdG9JbmRleCBdICsgbGlzdE9mZnNldFxuICAgICAgfVxuICAgIH1cblxuICAgIHNldFZpcnR1YWxTY3JvbGxTbGljZVJhbmdlKFxuICAgICAgc2Nyb2xsRWwsXG4gICAgICBzY3JvbGxEZXRhaWxzLFxuICAgICAgdG9JbmRleCxcbiAgICAgIG9mZnNldFxuICAgIClcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFZpcnR1YWxTY3JvbGxTbGljZVJhbmdlIChzY3JvbGxFbCwgc2Nyb2xsRGV0YWlscywgdG9JbmRleCwgb2Zmc2V0LCBhbGlnbikge1xuICAgIGNvbnN0IGFsaWduRm9yY2UgPSB0eXBlb2YgYWxpZ24gPT09ICdzdHJpbmcnICYmIGFsaWduLmluZGV4T2YoJy1mb3JjZScpICE9PSAtMVxuICAgIGNvbnN0IGFsaWduRW5kID0gYWxpZ25Gb3JjZSA9PT0gdHJ1ZSA/IGFsaWduLnJlcGxhY2UoJy1mb3JjZScsICcnKSA6IGFsaWduXG4gICAgY29uc3QgYWxpZ25SYW5nZSA9IGFsaWduRW5kICE9PSB2b2lkIDAgPyBhbGlnbkVuZCA6ICdzdGFydCdcblxuICAgIGxldFxuICAgICAgZnJvbSA9IE1hdGgubWF4KDAsIHRvSW5kZXggLSB2aXJ0dWFsU2Nyb2xsU2xpY2VTaXplQ29tcHV0ZWQudmFsdWVbIGFsaWduUmFuZ2UgXSksXG4gICAgICB0byA9IGZyb20gKyB2aXJ0dWFsU2Nyb2xsU2xpY2VTaXplQ29tcHV0ZWQudmFsdWUudG90YWxcblxuICAgIGlmICh0byA+IHZpcnR1YWxTY3JvbGxMZW5ndGgudmFsdWUpIHtcbiAgICAgIHRvID0gdmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZVxuICAgICAgZnJvbSA9IE1hdGgubWF4KDAsIHRvIC0gdmlydHVhbFNjcm9sbFNsaWNlU2l6ZUNvbXB1dGVkLnZhbHVlLnRvdGFsKVxuICAgIH1cblxuICAgIHByZXZTY3JvbGxTdGFydCA9IHNjcm9sbERldGFpbHMuc2Nyb2xsU3RhcnRcblxuICAgIGNvbnN0IHJhbmdlQ2hhbmdlZCA9IGZyb20gIT09IHZpcnR1YWxTY3JvbGxTbGljZVJhbmdlLnZhbHVlLmZyb20gfHwgdG8gIT09IHZpcnR1YWxTY3JvbGxTbGljZVJhbmdlLnZhbHVlLnRvXG5cbiAgICBpZiAocmFuZ2VDaGFuZ2VkID09PSBmYWxzZSAmJiBhbGlnbkVuZCA9PT0gdm9pZCAwKSB7XG4gICAgICBlbWl0U2Nyb2xsKHRvSW5kZXgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB7IGFjdGl2ZUVsZW1lbnQgfSA9IGRvY3VtZW50XG4gICAgY29uc3QgY29udGVudEVsID0gY29udGVudFJlZi52YWx1ZVxuICAgIGlmIChcbiAgICAgIHJhbmdlQ2hhbmdlZCA9PT0gdHJ1ZVxuICAgICAgJiYgY29udGVudEVsICE9PSBudWxsXG4gICAgICAmJiBjb250ZW50RWwgIT09IGFjdGl2ZUVsZW1lbnRcbiAgICAgICYmIGNvbnRlbnRFbC5jb250YWlucyhhY3RpdmVFbGVtZW50KSA9PT0gdHJ1ZVxuICAgICkge1xuICAgICAgY29udGVudEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3Vzb3V0Jywgb25CbHVyUmVmb2N1c0ZuKVxuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY29udGVudEVsICE9PSBudWxsICYmIGNvbnRlbnRFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIG9uQmx1clJlZm9jdXNGbilcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgc2V0T3ZlcmZsb3dBbmNob3IoY29udGVudEVsLCB0b0luZGV4IC0gZnJvbSlcblxuICAgIGNvbnN0IHNpemVCZWZvcmUgPSBhbGlnbkVuZCAhPT0gdm9pZCAwID8gdmlydHVhbFNjcm9sbFNpemVzLnNsaWNlKGZyb20sIHRvSW5kZXgpLnJlZHVjZShzdW1GbiwgMCkgOiAwXG5cbiAgICBpZiAocmFuZ2VDaGFuZ2VkID09PSB0cnVlKSB7XG4gICAgICAvLyB2dWUga2V5IG1hdGNoaW5nIGFsZ29yaXRobSB3b3JrcyBvbmx5IGlmXG4gICAgICAvLyB0aGUgYXJyYXkgb2YgVk5vZGVzIGNoYW5nZXMgb24gb25seSBvbmUgb2YgdGhlIGVuZHNcbiAgICAgIC8vIHNvIHdlIGZpcnN0IGNoYW5nZSBvbmUgZW5kIGFuZCB0aGVuIHRoZSBvdGhlclxuXG4gICAgICBjb25zdCB0ZW1wVG8gPSB0byA+PSB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS5mcm9tICYmIGZyb20gPD0gdmlydHVhbFNjcm9sbFNsaWNlUmFuZ2UudmFsdWUudG9cbiAgICAgICAgPyB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS50b1xuICAgICAgICA6IHRvXG5cbiAgICAgIHZpcnR1YWxTY3JvbGxTbGljZVJhbmdlLnZhbHVlID0geyBmcm9tLCB0bzogdGVtcFRvIH1cbiAgICAgIHZpcnR1YWxTY3JvbGxQYWRkaW5nQmVmb3JlLnZhbHVlID0gc3VtU2l6ZSh2aXJ0dWFsU2Nyb2xsU2l6ZXNBZ2csIHZpcnR1YWxTY3JvbGxTaXplcywgMCwgZnJvbSlcbiAgICAgIHZpcnR1YWxTY3JvbGxQYWRkaW5nQWZ0ZXIudmFsdWUgPSBzdW1TaXplKHZpcnR1YWxTY3JvbGxTaXplc0FnZywgdmlydHVhbFNjcm9sbFNpemVzLCB0bywgdmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZSlcblxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgaWYgKHZpcnR1YWxTY3JvbGxTbGljZVJhbmdlLnZhbHVlLnRvICE9PSB0byAmJiBwcmV2U2Nyb2xsU3RhcnQgPT09IHNjcm9sbERldGFpbHMuc2Nyb2xsU3RhcnQpIHtcbiAgICAgICAgICB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZSA9IHsgZnJvbTogdmlydHVhbFNjcm9sbFNsaWNlUmFuZ2UudmFsdWUuZnJvbSwgdG8gfVxuICAgICAgICAgIHZpcnR1YWxTY3JvbGxQYWRkaW5nQWZ0ZXIudmFsdWUgPSBzdW1TaXplKHZpcnR1YWxTY3JvbGxTaXplc0FnZywgdmlydHVhbFNjcm9sbFNpemVzLCB0bywgdmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgLy8gaWYgdGhlIHNjcm9sbCB3YXMgY2hhbmdlZCBnaXZlIHVwXG4gICAgICAvLyAoYW5vdGhlciBjYWxsIHRvIHNldFZpcnR1YWxTY3JvbGxTbGljZVJhbmdlIGJlZm9yZSBhbmltYXRpb24gZnJhbWUpXG4gICAgICBpZiAocHJldlNjcm9sbFN0YXJ0ICE9PSBzY3JvbGxEZXRhaWxzLnNjcm9sbFN0YXJ0KSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAocmFuZ2VDaGFuZ2VkID09PSB0cnVlKSB7XG4gICAgICAgIHVwZGF0ZVZpcnR1YWxTY3JvbGxTaXplcyhmcm9tKVxuICAgICAgfVxuXG4gICAgICBjb25zdFxuICAgICAgICBzaXplQWZ0ZXIgPSB2aXJ0dWFsU2Nyb2xsU2l6ZXMuc2xpY2UoZnJvbSwgdG9JbmRleCkucmVkdWNlKHN1bUZuLCAwKSxcbiAgICAgICAgcG9zU3RhcnQgPSBzaXplQWZ0ZXIgKyBzY3JvbGxEZXRhaWxzLm9mZnNldFN0YXJ0ICsgdmlydHVhbFNjcm9sbFBhZGRpbmdCZWZvcmUudmFsdWUsXG4gICAgICAgIHBvc0VuZCA9IHBvc1N0YXJ0ICsgdmlydHVhbFNjcm9sbFNpemVzWyB0b0luZGV4IF1cblxuICAgICAgbGV0IHNjcm9sbFBvc2l0aW9uID0gcG9zU3RhcnQgKyBvZmZzZXRcblxuICAgICAgaWYgKGFsaWduRW5kICE9PSB2b2lkIDApIHtcbiAgICAgICAgY29uc3Qgc2l6ZURpZmYgPSBzaXplQWZ0ZXIgLSBzaXplQmVmb3JlXG4gICAgICAgIGNvbnN0IHNjcm9sbFN0YXJ0ID0gc2Nyb2xsRGV0YWlscy5zY3JvbGxTdGFydCArIHNpemVEaWZmXG5cbiAgICAgICAgc2Nyb2xsUG9zaXRpb24gPSBhbGlnbkZvcmNlICE9PSB0cnVlICYmIHNjcm9sbFN0YXJ0IDwgcG9zU3RhcnQgJiYgcG9zRW5kIDwgc2Nyb2xsU3RhcnQgKyBzY3JvbGxEZXRhaWxzLnNjcm9sbFZpZXdTaXplXG4gICAgICAgICAgPyBzY3JvbGxTdGFydFxuICAgICAgICAgIDogKFxuICAgICAgICAgICAgICBhbGlnbkVuZCA9PT0gJ2VuZCdcbiAgICAgICAgICAgICAgICA/IHBvc0VuZCAtIHNjcm9sbERldGFpbHMuc2Nyb2xsVmlld1NpemVcbiAgICAgICAgICAgICAgICA6IHBvc1N0YXJ0IC0gKGFsaWduRW5kID09PSAnc3RhcnQnID8gMCA6IE1hdGgucm91bmQoKHNjcm9sbERldGFpbHMuc2Nyb2xsVmlld1NpemUgLSB2aXJ0dWFsU2Nyb2xsU2l6ZXNbIHRvSW5kZXggXSkgLyAyKSlcbiAgICAgICAgICAgIClcbiAgICAgIH1cblxuICAgICAgcHJldlNjcm9sbFN0YXJ0ID0gc2Nyb2xsUG9zaXRpb25cblxuICAgICAgc2V0U2Nyb2xsKFxuICAgICAgICBzY3JvbGxFbCxcbiAgICAgICAgc2Nyb2xsUG9zaXRpb24sXG4gICAgICAgIHByb3BzLnZpcnR1YWxTY3JvbGxIb3Jpem9udGFsLFxuICAgICAgICAkcS5sYW5nLnJ0bFxuICAgICAgKVxuXG4gICAgICBlbWl0U2Nyb2xsKHRvSW5kZXgpXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVZpcnR1YWxTY3JvbGxTaXplcyAoZnJvbSkge1xuICAgIGNvbnN0IGNvbnRlbnRFbCA9IGNvbnRlbnRSZWYudmFsdWVcblxuICAgIGlmIChjb250ZW50RWwpIHtcbiAgICAgIGNvbnN0XG4gICAgICAgIGNoaWxkcmVuID0gZmlsdGVyUHJvdG8uY2FsbChcbiAgICAgICAgICBjb250ZW50RWwuY2hpbGRyZW4sXG4gICAgICAgICAgZWwgPT4gZWwuY2xhc3NMaXN0ICYmIGVsLmNsYXNzTGlzdC5jb250YWlucygncS12aXJ0dWFsLXNjcm9sbC0tc2tpcCcpID09PSBmYWxzZVxuICAgICAgICApLFxuICAgICAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgc2l6ZUZuID0gcHJvcHMudmlydHVhbFNjcm9sbEhvcml6b250YWwgPT09IHRydWVcbiAgICAgICAgICA/IGVsID0+IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoXG4gICAgICAgICAgOiBlbCA9PiBlbC5vZmZzZXRIZWlnaHRcblxuICAgICAgbGV0XG4gICAgICAgIGluZGV4ID0gZnJvbSxcbiAgICAgICAgc2l6ZSwgZGlmZlxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOykge1xuICAgICAgICBzaXplID0gc2l6ZUZuKGNoaWxkcmVuWyBpIF0pXG4gICAgICAgIGkrK1xuXG4gICAgICAgIHdoaWxlIChpIDwgY2hpbGRyZW5MZW5ndGggJiYgY2hpbGRyZW5bIGkgXS5jbGFzc0xpc3QuY29udGFpbnMoJ3EtdmlydHVhbC1zY3JvbGwtLXdpdGgtcHJldicpID09PSB0cnVlKSB7XG4gICAgICAgICAgc2l6ZSArPSBzaXplRm4oY2hpbGRyZW5bIGkgXSlcbiAgICAgICAgICBpKytcbiAgICAgICAgfVxuXG4gICAgICAgIGRpZmYgPSBzaXplIC0gdmlydHVhbFNjcm9sbFNpemVzWyBpbmRleCBdXG5cbiAgICAgICAgaWYgKGRpZmYgIT09IDApIHtcbiAgICAgICAgICB2aXJ0dWFsU2Nyb2xsU2l6ZXNbIGluZGV4IF0gKz0gZGlmZlxuICAgICAgICAgIHZpcnR1YWxTY3JvbGxTaXplc0FnZ1sgTWF0aC5mbG9vcihpbmRleCAvIGFnZ0J1Y2tldFNpemUpIF0gKz0gZGlmZlxuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXgrK1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQmx1clJlZm9jdXNGbiAoKSB7XG4gICAgY29udGVudFJlZi52YWx1ZSAhPT0gbnVsbCAmJiBjb250ZW50UmVmLnZhbHVlICE9PSB2b2lkIDAgJiYgY29udGVudFJlZi52YWx1ZS5mb2N1cygpXG4gIH1cblxuICBmdW5jdGlvbiBsb2NhbFJlc2V0VmlydHVhbFNjcm9sbCAodG9JbmRleCwgZnVsbFJlc2V0KSB7XG4gICAgY29uc3QgZGVmYXVsdFNpemUgPSAxICogdmlydHVhbFNjcm9sbEl0ZW1TaXplQ29tcHV0ZWQudmFsdWVcblxuICAgIGlmIChmdWxsUmVzZXQgPT09IHRydWUgfHwgQXJyYXkuaXNBcnJheSh2aXJ0dWFsU2Nyb2xsU2l6ZXMpID09PSBmYWxzZSkge1xuICAgICAgdmlydHVhbFNjcm9sbFNpemVzID0gW11cbiAgICB9XG5cbiAgICBjb25zdCBvbGRWaXJ0dWFsU2Nyb2xsU2l6ZXNMZW5ndGggPSB2aXJ0dWFsU2Nyb2xsU2l6ZXMubGVuZ3RoXG5cbiAgICB2aXJ0dWFsU2Nyb2xsU2l6ZXMubGVuZ3RoID0gdmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZVxuXG4gICAgZm9yIChsZXQgaSA9IHZpcnR1YWxTY3JvbGxMZW5ndGgudmFsdWUgLSAxOyBpID49IG9sZFZpcnR1YWxTY3JvbGxTaXplc0xlbmd0aDsgaS0tKSB7XG4gICAgICB2aXJ0dWFsU2Nyb2xsU2l6ZXNbIGkgXSA9IGRlZmF1bHRTaXplXG4gICAgfVxuXG4gICAgY29uc3Qgak1heCA9IE1hdGguZmxvb3IoKHZpcnR1YWxTY3JvbGxMZW5ndGgudmFsdWUgLSAxKSAvIGFnZ0J1Y2tldFNpemUpXG4gICAgdmlydHVhbFNjcm9sbFNpemVzQWdnID0gW11cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8PSBqTWF4OyBqKyspIHtcbiAgICAgIGxldCBzaXplID0gMFxuICAgICAgY29uc3QgaU1heCA9IE1hdGgubWluKChqICsgMSkgKiBhZ2dCdWNrZXRTaXplLCB2aXJ0dWFsU2Nyb2xsTGVuZ3RoLnZhbHVlKVxuICAgICAgZm9yIChsZXQgaSA9IGogKiBhZ2dCdWNrZXRTaXplOyBpIDwgaU1heDsgaSsrKSB7XG4gICAgICAgIHNpemUgKz0gdmlydHVhbFNjcm9sbFNpemVzWyBpIF1cbiAgICAgIH1cbiAgICAgIHZpcnR1YWxTY3JvbGxTaXplc0FnZy5wdXNoKHNpemUpXG4gICAgfVxuXG4gICAgcHJldlRvSW5kZXggPSAtMVxuICAgIHByZXZTY3JvbGxTdGFydCA9IHZvaWQgMFxuXG4gICAgdmlydHVhbFNjcm9sbFBhZGRpbmdCZWZvcmUudmFsdWUgPSBzdW1TaXplKHZpcnR1YWxTY3JvbGxTaXplc0FnZywgdmlydHVhbFNjcm9sbFNpemVzLCAwLCB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS5mcm9tKVxuICAgIHZpcnR1YWxTY3JvbGxQYWRkaW5nQWZ0ZXIudmFsdWUgPSBzdW1TaXplKHZpcnR1YWxTY3JvbGxTaXplc0FnZywgdmlydHVhbFNjcm9sbFNpemVzLCB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS50bywgdmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZSlcblxuICAgIGlmICh0b0luZGV4ID49IDApIHtcbiAgICAgIHVwZGF0ZVZpcnR1YWxTY3JvbGxTaXplcyh2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS5mcm9tKVxuICAgICAgbmV4dFRpY2soKCkgPT4geyBzY3JvbGxUbyh0b0luZGV4KSB9KVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIG9uVmlydHVhbFNjcm9sbEV2dCgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0VmlydHVhbFNjcm9sbFNpemUgKHNjcm9sbFZpZXdTaXplKSB7XG4gICAgaWYgKHNjcm9sbFZpZXdTaXplID09PSB2b2lkIDAgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IHNjcm9sbEVsID0gZ2V0VmlydHVhbFNjcm9sbFRhcmdldCgpXG5cbiAgICAgIGlmIChzY3JvbGxFbCAhPT0gdm9pZCAwICYmIHNjcm9sbEVsICE9PSBudWxsICYmIHNjcm9sbEVsLm5vZGVUeXBlICE9PSA4KSB7XG4gICAgICAgIHNjcm9sbFZpZXdTaXplID0gZ2V0U2Nyb2xsRGV0YWlscyhcbiAgICAgICAgICBzY3JvbGxFbCxcbiAgICAgICAgICBnZXRWaXJ0dWFsU2Nyb2xsRWwoKSxcbiAgICAgICAgICBiZWZvcmVSZWYudmFsdWUsXG4gICAgICAgICAgYWZ0ZXJSZWYudmFsdWUsXG4gICAgICAgICAgcHJvcHMudmlydHVhbFNjcm9sbEhvcml6b250YWwsXG4gICAgICAgICAgJHEubGFuZy5ydGwsXG4gICAgICAgICAgcHJvcHMudmlydHVhbFNjcm9sbFN0aWNreVNpemVTdGFydCxcbiAgICAgICAgICBwcm9wcy52aXJ0dWFsU2Nyb2xsU3RpY2t5U2l6ZUVuZFxuICAgICAgICApLnNjcm9sbFZpZXdTaXplXG4gICAgICB9XG4gICAgfVxuXG4gICAgbG9jYWxTY3JvbGxWaWV3U2l6ZSA9IHNjcm9sbFZpZXdTaXplXG5cbiAgICBjb25zdCB2aXJ0dWFsU2Nyb2xsU2xpY2VSYXRpb0JlZm9yZSA9IHBhcnNlRmxvYXQocHJvcHMudmlydHVhbFNjcm9sbFNsaWNlUmF0aW9CZWZvcmUpIHx8IDBcbiAgICBjb25zdCB2aXJ0dWFsU2Nyb2xsU2xpY2VSYXRpb0FmdGVyID0gcGFyc2VGbG9hdChwcm9wcy52aXJ0dWFsU2Nyb2xsU2xpY2VSYXRpb0FmdGVyKSB8fCAwXG4gICAgY29uc3QgbXVsdGlwbGllciA9IDEgKyB2aXJ0dWFsU2Nyb2xsU2xpY2VSYXRpb0JlZm9yZSArIHZpcnR1YWxTY3JvbGxTbGljZVJhdGlvQWZ0ZXJcbiAgICBjb25zdCB2aWV3ID0gc2Nyb2xsVmlld1NpemUgPT09IHZvaWQgMCB8fCBzY3JvbGxWaWV3U2l6ZSA8PSAwXG4gICAgICA/IDFcbiAgICAgIDogTWF0aC5jZWlsKHNjcm9sbFZpZXdTaXplIC8gdmlydHVhbFNjcm9sbEl0ZW1TaXplQ29tcHV0ZWQudmFsdWUpXG5cbiAgICBjb25zdCBiYXNlU2l6ZSA9IE1hdGgubWF4KFxuICAgICAgMSxcbiAgICAgIHZpZXcsXG4gICAgICBNYXRoLmNlaWwoKHByb3BzLnZpcnR1YWxTY3JvbGxTbGljZVNpemUgPiAwID8gcHJvcHMudmlydHVhbFNjcm9sbFNsaWNlU2l6ZSA6IDEwKSAvIG11bHRpcGxpZXIpXG4gICAgKVxuXG4gICAgdmlydHVhbFNjcm9sbFNsaWNlU2l6ZUNvbXB1dGVkLnZhbHVlID0ge1xuICAgICAgdG90YWw6IE1hdGguY2VpbChiYXNlU2l6ZSAqIG11bHRpcGxpZXIpLFxuICAgICAgc3RhcnQ6IE1hdGguY2VpbChiYXNlU2l6ZSAqIHZpcnR1YWxTY3JvbGxTbGljZVJhdGlvQmVmb3JlKSxcbiAgICAgIGNlbnRlcjogTWF0aC5jZWlsKGJhc2VTaXplICogKDAuNSArIHZpcnR1YWxTY3JvbGxTbGljZVJhdGlvQmVmb3JlKSksXG4gICAgICBlbmQ6IE1hdGguY2VpbChiYXNlU2l6ZSAqICgxICsgdmlydHVhbFNjcm9sbFNsaWNlUmF0aW9CZWZvcmUpKSxcbiAgICAgIHZpZXdcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYWRWaXJ0dWFsU2Nyb2xsICh0YWcsIGNvbnRlbnQpIHtcbiAgICBjb25zdCBwYWRkaW5nU2l6ZSA9IHByb3BzLnZpcnR1YWxTY3JvbGxIb3Jpem9udGFsID09PSB0cnVlID8gJ3dpZHRoJyA6ICdoZWlnaHQnXG4gICAgY29uc3Qgc3R5bGUgPSB7XG4gICAgICBbICctLXEtdmlydHVhbC1zY3JvbGwtaXRlbS0nICsgcGFkZGluZ1NpemUgXTogdmlydHVhbFNjcm9sbEl0ZW1TaXplQ29tcHV0ZWQudmFsdWUgKyAncHgnXG4gICAgfVxuXG4gICAgcmV0dXJuIFtcbiAgICAgIHRhZyA9PT0gJ3Rib2R5J1xuICAgICAgICA/IGgodGFnLCB7XG4gICAgICAgICAgY2xhc3M6ICdxLXZpcnR1YWwtc2Nyb2xsX19wYWRkaW5nJyxcbiAgICAgICAgICBrZXk6ICdiZWZvcmUnLFxuICAgICAgICAgIHJlZjogYmVmb3JlUmVmXG4gICAgICAgIH0sIFtcbiAgICAgICAgICBoKCd0cicsIFtcbiAgICAgICAgICAgIGgoJ3RkJywge1xuICAgICAgICAgICAgICBzdHlsZTogeyBbIHBhZGRpbmdTaXplIF06IGAkeyB2aXJ0dWFsU2Nyb2xsUGFkZGluZ0JlZm9yZS52YWx1ZSB9cHhgLCAuLi5zdHlsZSB9LFxuICAgICAgICAgICAgICBjb2xzcGFuOiBjb2xzcGFuQXR0ci52YWx1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgICA6IGgodGFnLCB7XG4gICAgICAgICAgY2xhc3M6ICdxLXZpcnR1YWwtc2Nyb2xsX19wYWRkaW5nJyxcbiAgICAgICAgICBrZXk6ICdiZWZvcmUnLFxuICAgICAgICAgIHJlZjogYmVmb3JlUmVmLFxuICAgICAgICAgIHN0eWxlOiB7IFsgcGFkZGluZ1NpemUgXTogYCR7IHZpcnR1YWxTY3JvbGxQYWRkaW5nQmVmb3JlLnZhbHVlIH1weGAsIC4uLnN0eWxlIH1cbiAgICAgICAgfSksXG5cbiAgICAgIGgodGFnLCB7XG4gICAgICAgIGNsYXNzOiAncS12aXJ0dWFsLXNjcm9sbF9fY29udGVudCcsXG4gICAgICAgIGtleTogJ2NvbnRlbnQnLFxuICAgICAgICByZWY6IGNvbnRlbnRSZWYsXG4gICAgICAgIHRhYmluZGV4OiAtMVxuICAgICAgfSwgY29udGVudC5mbGF0KCkpLFxuXG4gICAgICB0YWcgPT09ICd0Ym9keSdcbiAgICAgICAgPyBoKHRhZywge1xuICAgICAgICAgIGNsYXNzOiAncS12aXJ0dWFsLXNjcm9sbF9fcGFkZGluZycsXG4gICAgICAgICAga2V5OiAnYWZ0ZXInLFxuICAgICAgICAgIHJlZjogYWZ0ZXJSZWZcbiAgICAgICAgfSwgW1xuICAgICAgICAgIGgoJ3RyJywgW1xuICAgICAgICAgICAgaCgndGQnLCB7XG4gICAgICAgICAgICAgIHN0eWxlOiB7IFsgcGFkZGluZ1NpemUgXTogYCR7IHZpcnR1YWxTY3JvbGxQYWRkaW5nQWZ0ZXIudmFsdWUgfXB4YCwgLi4uc3R5bGUgfSxcbiAgICAgICAgICAgICAgY29sc3BhbjogY29sc3BhbkF0dHIudmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgICAgOiBoKHRhZywge1xuICAgICAgICAgIGNsYXNzOiAncS12aXJ0dWFsLXNjcm9sbF9fcGFkZGluZycsXG4gICAgICAgICAga2V5OiAnYWZ0ZXInLFxuICAgICAgICAgIHJlZjogYWZ0ZXJSZWYsXG4gICAgICAgICAgc3R5bGU6IHsgWyBwYWRkaW5nU2l6ZSBdOiBgJHsgdmlydHVhbFNjcm9sbFBhZGRpbmdBZnRlci52YWx1ZSB9cHhgLCAuLi5zdHlsZSB9XG4gICAgICAgIH0pXG4gICAgXVxuICB9XG5cbiAgZnVuY3Rpb24gZW1pdFNjcm9sbCAoaW5kZXgpIHtcbiAgICBpZiAocHJldlRvSW5kZXggIT09IGluZGV4KSB7XG4gICAgICBwcm9wcy5vblZpcnR1YWxTY3JvbGwgIT09IHZvaWQgMCAmJiBlbWl0KCd2aXJ0dWFsU2Nyb2xsJywge1xuICAgICAgICBpbmRleCxcbiAgICAgICAgZnJvbTogdmlydHVhbFNjcm9sbFNsaWNlUmFuZ2UudmFsdWUuZnJvbSxcbiAgICAgICAgdG86IHZpcnR1YWxTY3JvbGxTbGljZVJhbmdlLnZhbHVlLnRvIC0gMSxcbiAgICAgICAgZGlyZWN0aW9uOiBpbmRleCA8IHByZXZUb0luZGV4ID8gJ2RlY3JlYXNlJyA6ICdpbmNyZWFzZScsXG4gICAgICAgIHJlZjogcHJveHlcbiAgICAgIH0pXG5cbiAgICAgIHByZXZUb0luZGV4ID0gaW5kZXhcbiAgICB9XG4gIH1cblxuICBzZXRWaXJ0dWFsU2Nyb2xsU2l6ZSgpXG4gIGNvbnN0IG9uVmlydHVhbFNjcm9sbEV2dCA9IGRlYm91bmNlKFxuICAgIGxvY2FsT25WaXJ0dWFsU2Nyb2xsRXZ0LFxuICAgICRxLnBsYXRmb3JtLmlzLmlvcyA9PT0gdHJ1ZSA/IDEyMCA6IDM1XG4gIClcblxuICBvbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgICBzZXRWaXJ0dWFsU2Nyb2xsU2l6ZSgpXG4gIH0pXG5cbiAgbGV0IHNob3VsZEFjdGl2YXRlID0gZmFsc2VcblxuICBvbkRlYWN0aXZhdGVkKCgpID0+IHtcbiAgICBzaG91bGRBY3RpdmF0ZSA9IHRydWVcbiAgfSlcblxuICBvbkFjdGl2YXRlZCgoKSA9PiB7XG4gICAgaWYgKHNob3VsZEFjdGl2YXRlICE9PSB0cnVlKSByZXR1cm5cblxuICAgIGNvbnN0IHNjcm9sbEVsID0gZ2V0VmlydHVhbFNjcm9sbFRhcmdldCgpXG5cbiAgICBpZiAocHJldlNjcm9sbFN0YXJ0ICE9PSB2b2lkIDAgJiYgc2Nyb2xsRWwgIT09IHZvaWQgMCAmJiBzY3JvbGxFbCAhPT0gbnVsbCAmJiBzY3JvbGxFbC5ub2RlVHlwZSAhPT0gOCkge1xuICAgICAgc2V0U2Nyb2xsKFxuICAgICAgICBzY3JvbGxFbCxcbiAgICAgICAgcHJldlNjcm9sbFN0YXJ0LFxuICAgICAgICBwcm9wcy52aXJ0dWFsU2Nyb2xsSG9yaXpvbnRhbCxcbiAgICAgICAgJHEubGFuZy5ydGxcbiAgICAgIClcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzY3JvbGxUbyhwcmV2VG9JbmRleClcbiAgICB9XG4gIH0pXG5cbiAgX19RVUFTQVJfU1NSX18gfHwgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICBvblZpcnR1YWxTY3JvbGxFdnQuY2FuY2VsKClcbiAgfSlcblxuICAvLyBleHBvc2UgcHVibGljIG1ldGhvZHNcbiAgT2JqZWN0LmFzc2lnbihwcm94eSwgeyBzY3JvbGxUbywgcmVzZXQsIHJlZnJlc2ggfSlcblxuICByZXR1cm4ge1xuICAgIHZpcnR1YWxTY3JvbGxTbGljZVJhbmdlLFxuICAgIHZpcnR1YWxTY3JvbGxTbGljZVNpemVDb21wdXRlZCxcblxuICAgIHNldFZpcnR1YWxTY3JvbGxTaXplLFxuICAgIG9uVmlydHVhbFNjcm9sbEV2dCxcbiAgICBsb2NhbFJlc2V0VmlydHVhbFNjcm9sbCxcbiAgICBwYWRWaXJ0dWFsU2Nyb2xsLFxuXG4gICAgc2Nyb2xsVG8sXG4gICAgcmVzZXQsXG4gICAgcmVmcmVzaFxuICB9XG59XG4iLCJpbXBvcnQgeyBoLCByZWYsIGNvbXB1dGVkLCB3YXRjaCwgb25CZWZvcmVNb3VudCwgb25Nb3VudGVkLCBvbkJlZm9yZVVubW91bnQsIG9uQWN0aXZhdGVkLCBvbkRlYWN0aXZhdGVkIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgUUxpc3QgZnJvbSAnLi4vaXRlbS9RTGlzdC5qcydcbmltcG9ydCBRTWFya3VwVGFibGUgZnJvbSAnLi4vbWFya3VwLXRhYmxlL1FNYXJrdXBUYWJsZS5qcydcbmltcG9ydCBnZXRUYWJsZU1pZGRsZSBmcm9tICcuLi90YWJsZS9nZXQtdGFibGUtbWlkZGxlLmpzJ1xuXG5pbXBvcnQgeyB1c2VWaXJ0dWFsU2Nyb2xsLCB1c2VWaXJ0dWFsU2Nyb2xsUHJvcHMgfSBmcm9tICcuL3VzZS12aXJ0dWFsLXNjcm9sbC5qcydcblxuaW1wb3J0IHsgY3JlYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5jcmVhdGUvY3JlYXRlLmpzJ1xuaW1wb3J0IHsgZ2V0U2Nyb2xsVGFyZ2V0LCBzY3JvbGxUYXJnZXRQcm9wIH0gZnJvbSAnLi4vLi4vdXRpbHMvc2Nyb2xsL3Njcm9sbC5qcydcbmltcG9ydCB7IGxpc3Rlbk9wdHMgfSBmcm9tICcuLi8uLi91dGlscy9ldmVudC9ldmVudC5qcydcbmltcG9ydCB7IGhNZXJnZVNsb3QgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLnJlbmRlci9yZW5kZXIuanMnXG5cbmNvbnN0IGNvbXBzID0ge1xuICBsaXN0OiBRTGlzdCxcbiAgdGFibGU6IFFNYXJrdXBUYWJsZVxufVxuXG5jb25zdCB0eXBlT3B0aW9ucyA9IFsgJ2xpc3QnLCAndGFibGUnLCAnX19xdGFibGUnIF1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29tcG9uZW50KHtcbiAgbmFtZTogJ1FWaXJ0dWFsU2Nyb2xsJyxcblxuICBwcm9wczoge1xuICAgIC4uLnVzZVZpcnR1YWxTY3JvbGxQcm9wcyxcblxuICAgIHR5cGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdsaXN0JyxcbiAgICAgIHZhbGlkYXRvcjogdiA9PiB0eXBlT3B0aW9ucy5pbmNsdWRlcyh2KVxuICAgIH0sXG5cbiAgICBpdGVtczoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiAoKSA9PiBbXVxuICAgIH0sXG5cbiAgICBpdGVtc0ZuOiBGdW5jdGlvbixcbiAgICBpdGVtc1NpemU6IE51bWJlcixcblxuICAgIHNjcm9sbFRhcmdldDogc2Nyb2xsVGFyZ2V0UHJvcFxuICB9LFxuXG4gIHNldHVwIChwcm9wcywgeyBzbG90cywgYXR0cnMgfSkge1xuICAgIGxldCBsb2NhbFNjcm9sbFRhcmdldFxuICAgIGNvbnN0IHJvb3RSZWYgPSByZWYobnVsbClcblxuICAgIGNvbnN0IHZpcnR1YWxTY3JvbGxMZW5ndGggPSBjb21wdXRlZCgoKSA9PiAoXG4gICAgICBwcm9wcy5pdGVtc1NpemUgPj0gMCAmJiBwcm9wcy5pdGVtc0ZuICE9PSB2b2lkIDBcbiAgICAgICAgPyBwYXJzZUludChwcm9wcy5pdGVtc1NpemUsIDEwKVxuICAgICAgICA6IChBcnJheS5pc0FycmF5KHByb3BzLml0ZW1zKSA/IHByb3BzLml0ZW1zLmxlbmd0aCA6IDApXG4gICAgKSlcblxuICAgIGNvbnN0IHtcbiAgICAgIHZpcnR1YWxTY3JvbGxTbGljZVJhbmdlLFxuICAgICAgbG9jYWxSZXNldFZpcnR1YWxTY3JvbGwsXG4gICAgICBwYWRWaXJ0dWFsU2Nyb2xsLFxuICAgICAgb25WaXJ0dWFsU2Nyb2xsRXZ0XG4gICAgfSA9IHVzZVZpcnR1YWxTY3JvbGwoe1xuICAgICAgdmlydHVhbFNjcm9sbExlbmd0aCwgZ2V0VmlydHVhbFNjcm9sbFRhcmdldCwgZ2V0VmlydHVhbFNjcm9sbEVsXG4gICAgfSlcblxuICAgIGNvbnN0IHZpcnR1YWxTY3JvbGxTY29wZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmICh2aXJ0dWFsU2Nyb2xsTGVuZ3RoLnZhbHVlID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbXVxuICAgICAgfVxuXG4gICAgICBjb25zdCBtYXBGbiA9IChpdGVtLCBpKSA9PiAoe1xuICAgICAgICBpbmRleDogdmlydHVhbFNjcm9sbFNsaWNlUmFuZ2UudmFsdWUuZnJvbSArIGksXG4gICAgICAgIGl0ZW1cbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBwcm9wcy5pdGVtc0ZuID09PSB2b2lkIDBcbiAgICAgICAgPyBwcm9wcy5pdGVtcy5zbGljZSh2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS5mcm9tLCB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS50bykubWFwKG1hcEZuKVxuICAgICAgICA6IHByb3BzLml0ZW1zRm4odmlydHVhbFNjcm9sbFNsaWNlUmFuZ2UudmFsdWUuZnJvbSwgdmlydHVhbFNjcm9sbFNsaWNlUmFuZ2UudmFsdWUudG8gLSB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZS5mcm9tKS5tYXAobWFwRm4pXG4gICAgfSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgJ3EtdmlydHVhbC1zY3JvbGwgcS12aXJ0dWFsLXNjcm9sbCcgKyAocHJvcHMudmlydHVhbFNjcm9sbEhvcml6b250YWwgPT09IHRydWUgPyAnLS1ob3Jpem9udGFsJyA6ICctLXZlcnRpY2FsJylcbiAgICAgICsgKHByb3BzLnNjcm9sbFRhcmdldCAhPT0gdm9pZCAwID8gJycgOiAnIHNjcm9sbCcpXG4gICAgKVxuXG4gICAgY29uc3QgYXR0cmlidXRlcyA9IGNvbXB1dGVkKCgpID0+IChcbiAgICAgIHByb3BzLnNjcm9sbFRhcmdldCAhPT0gdm9pZCAwID8ge30gOiB7IHRhYmluZGV4OiAwIH1cbiAgICApKVxuXG4gICAgd2F0Y2godmlydHVhbFNjcm9sbExlbmd0aCwgKCkgPT4ge1xuICAgICAgbG9jYWxSZXNldFZpcnR1YWxTY3JvbGwoKVxuICAgIH0pXG5cbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5zY3JvbGxUYXJnZXQsICgpID0+IHtcbiAgICAgIHVuY29uZmlndXJlU2Nyb2xsVGFyZ2V0KClcbiAgICAgIGNvbmZpZ3VyZVNjcm9sbFRhcmdldCgpXG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIGdldFZpcnR1YWxTY3JvbGxFbCAoKSB7XG4gICAgICByZXR1cm4gcm9vdFJlZi52YWx1ZS4kZWwgfHwgcm9vdFJlZi52YWx1ZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFZpcnR1YWxTY3JvbGxUYXJnZXQgKCkge1xuICAgICAgcmV0dXJuIGxvY2FsU2Nyb2xsVGFyZ2V0XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlndXJlU2Nyb2xsVGFyZ2V0ICgpIHtcbiAgICAgIGxvY2FsU2Nyb2xsVGFyZ2V0ID0gZ2V0U2Nyb2xsVGFyZ2V0KGdldFZpcnR1YWxTY3JvbGxFbCgpLCBwcm9wcy5zY3JvbGxUYXJnZXQpXG4gICAgICBsb2NhbFNjcm9sbFRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblZpcnR1YWxTY3JvbGxFdnQsIGxpc3Rlbk9wdHMucGFzc2l2ZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bmNvbmZpZ3VyZVNjcm9sbFRhcmdldCAoKSB7XG4gICAgICBpZiAobG9jYWxTY3JvbGxUYXJnZXQgIT09IHZvaWQgMCkge1xuICAgICAgICBsb2NhbFNjcm9sbFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblZpcnR1YWxTY3JvbGxFdnQsIGxpc3Rlbk9wdHMucGFzc2l2ZSlcbiAgICAgICAgbG9jYWxTY3JvbGxUYXJnZXQgPSB2b2lkIDBcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfX2dldFZpcnR1YWxDaGlsZHJlbiAoKSB7XG4gICAgICBsZXQgY2hpbGQgPSBwYWRWaXJ0dWFsU2Nyb2xsKFxuICAgICAgICBwcm9wcy50eXBlID09PSAnbGlzdCcgPyAnZGl2JyA6ICd0Ym9keScsXG4gICAgICAgIHZpcnR1YWxTY3JvbGxTY29wZS52YWx1ZS5tYXAoc2xvdHMuZGVmYXVsdClcbiAgICAgIClcblxuICAgICAgaWYgKHNsb3RzLmJlZm9yZSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGNoaWxkID0gc2xvdHMuYmVmb3JlKCkuY29uY2F0KGNoaWxkKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaE1lcmdlU2xvdChzbG90cy5hZnRlciwgY2hpbGQpXG4gICAgfVxuXG4gICAgb25CZWZvcmVNb3VudCgoKSA9PiB7XG4gICAgICBsb2NhbFJlc2V0VmlydHVhbFNjcm9sbCgpXG4gICAgfSlcblxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICBjb25maWd1cmVTY3JvbGxUYXJnZXQoKVxuICAgIH0pXG5cbiAgICBvbkFjdGl2YXRlZCgoKSA9PiB7XG4gICAgICBjb25maWd1cmVTY3JvbGxUYXJnZXQoKVxuICAgIH0pXG5cbiAgICBvbkRlYWN0aXZhdGVkKCgpID0+IHtcbiAgICAgIHVuY29uZmlndXJlU2Nyb2xsVGFyZ2V0KClcbiAgICB9KVxuXG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIHVuY29uZmlndXJlU2Nyb2xsVGFyZ2V0KClcbiAgICB9KVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChzbG90cy5kZWZhdWx0ID09PSB2b2lkIDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignUVZpcnR1YWxTY3JvbGw6IGRlZmF1bHQgc2NvcGVkIHNsb3QgaXMgcmVxdWlyZWQgZm9yIHJlbmRlcmluZycpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvcHMudHlwZSA9PT0gJ19fcXRhYmxlJ1xuICAgICAgICA/IGdldFRhYmxlTWlkZGxlKFxuICAgICAgICAgIHsgcmVmOiByb290UmVmLCBjbGFzczogJ3EtdGFibGVfX21pZGRsZSAnICsgY2xhc3Nlcy52YWx1ZSB9LFxuICAgICAgICAgIF9fZ2V0VmlydHVhbENoaWxkcmVuKClcbiAgICAgICAgKVxuICAgICAgICA6IGgoY29tcHNbIHByb3BzLnR5cGUgXSwge1xuICAgICAgICAgIC4uLmF0dHJzLFxuICAgICAgICAgIHJlZjogcm9vdFJlZixcbiAgICAgICAgICBjbGFzczogWyBhdHRycy5jbGFzcywgY2xhc3Nlcy52YWx1ZSBdLFxuICAgICAgICAgIC4uLmF0dHJpYnV0ZXMudmFsdWVcbiAgICAgICAgfSwgX19nZXRWaXJ0dWFsQ2hpbGRyZW4pXG4gICAgfVxuICB9XG59KVxuIiwiaW1wb3J0IHVzZUZpZWxkLCB7IHVzZUZpZWxkU3RhdGUsIHVzZUZpZWxkUHJvcHMsIHVzZUZpZWxkRW1pdHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wcml2YXRlLnVzZS1maWVsZC91c2UtZmllbGQuanMnXG5cbmltcG9ydCB7IGNyZWF0ZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUuY3JlYXRlL2NyZWF0ZS5qcydcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29tcG9uZW50KHtcbiAgbmFtZTogJ1FGaWVsZCcsXG5cbiAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcblxuICBwcm9wczoge1xuICAgIC4uLnVzZUZpZWxkUHJvcHMsXG5cbiAgICB0YWc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdsYWJlbCdcbiAgICB9XG4gIH0sXG5cbiAgZW1pdHM6IHVzZUZpZWxkRW1pdHMsXG5cbiAgc2V0dXAgKCkge1xuICAgIHJldHVybiB1c2VGaWVsZChcbiAgICAgIHVzZUZpZWxkU3RhdGUoeyB0YWdQcm9wOiB0cnVlIH0pXG4gICAgKVxuICB9XG59KVxuIiwiaW1wb3J0IHsgaCwgY29tcHV0ZWQsIGdldEN1cnJlbnRJbnN0YW5jZSB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IFFJY29uIGZyb20gJy4uL2ljb24vUUljb24uanMnXG5cbmltcG9ydCBSaXBwbGUgZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9yaXBwbGUvUmlwcGxlLmpzJ1xuXG5pbXBvcnQgdXNlRGFyaywgeyB1c2VEYXJrUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wcml2YXRlLnVzZS1kYXJrL3VzZS1kYXJrLmpzJ1xuaW1wb3J0IHVzZVNpemUsIHsgdXNlU2l6ZVByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvcHJpdmF0ZS51c2Utc2l6ZS91c2Utc2l6ZS5qcydcblxuaW1wb3J0IHsgY3JlYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5jcmVhdGUvY3JlYXRlLmpzJ1xuaW1wb3J0IHsgc3RvcEFuZFByZXZlbnQgfSBmcm9tICcuLi8uLi91dGlscy9ldmVudC9ldmVudC5qcydcbmltcG9ydCB7IGhNZXJnZVNsb3RTYWZlbHksIGhEaXIgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLnJlbmRlci9yZW5kZXIuanMnXG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0U2l6ZXMgPSB7XG4gIHhzOiA4LFxuICBzbTogMTAsXG4gIG1kOiAxNCxcbiAgbGc6IDIwLFxuICB4bDogMjRcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29tcG9uZW50KHtcbiAgbmFtZTogJ1FDaGlwJyxcblxuICBwcm9wczoge1xuICAgIC4uLnVzZURhcmtQcm9wcyxcbiAgICAuLi51c2VTaXplUHJvcHMsXG5cbiAgICBkZW5zZTogQm9vbGVhbixcblxuICAgIGljb246IFN0cmluZyxcbiAgICBpY29uUmlnaHQ6IFN0cmluZyxcbiAgICBpY29uUmVtb3ZlOiBTdHJpbmcsXG4gICAgaWNvblNlbGVjdGVkOiBTdHJpbmcsXG4gICAgbGFiZWw6IFsgU3RyaW5nLCBOdW1iZXIgXSxcblxuICAgIGNvbG9yOiBTdHJpbmcsXG4gICAgdGV4dENvbG9yOiBTdHJpbmcsXG5cbiAgICBtb2RlbFZhbHVlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgc2VsZWN0ZWQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBudWxsXG4gICAgfSxcblxuICAgIHNxdWFyZTogQm9vbGVhbixcbiAgICBvdXRsaW5lOiBCb29sZWFuLFxuICAgIGNsaWNrYWJsZTogQm9vbGVhbixcbiAgICByZW1vdmFibGU6IEJvb2xlYW4sXG5cbiAgICByZW1vdmVBcmlhTGFiZWw6IFN0cmluZyxcblxuICAgIHRhYmluZGV4OiBbIFN0cmluZywgTnVtYmVyIF0sXG4gICAgZGlzYWJsZTogQm9vbGVhbixcblxuICAgIHJpcHBsZToge1xuICAgICAgdHlwZTogWyBCb29sZWFuLCBPYmplY3QgXSxcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9XG4gIH0sXG5cbiAgZW1pdHM6IFsgJ3VwZGF0ZTptb2RlbFZhbHVlJywgJ3VwZGF0ZTpzZWxlY3RlZCcsICdyZW1vdmUnLCAnY2xpY2snIF0sXG5cbiAgc2V0dXAgKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pIHtcbiAgICBjb25zdCB7IHByb3h5OiB7ICRxIH0gfSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpXG5cbiAgICBjb25zdCBpc0RhcmsgPSB1c2VEYXJrKHByb3BzLCAkcSlcbiAgICBjb25zdCBzaXplU3R5bGUgPSB1c2VTaXplKHByb3BzLCBkZWZhdWx0U2l6ZXMpXG5cbiAgICBjb25zdCBoYXNMZWZ0SWNvbiA9IGNvbXB1dGVkKCgpID0+IHByb3BzLnNlbGVjdGVkID09PSB0cnVlIHx8IHByb3BzLmljb24gIT09IHZvaWQgMClcblxuICAgIGNvbnN0IGxlZnRJY29uID0gY29tcHV0ZWQoKCkgPT4gKFxuICAgICAgcHJvcHMuc2VsZWN0ZWQgPT09IHRydWVcbiAgICAgICAgPyBwcm9wcy5pY29uU2VsZWN0ZWQgfHwgJHEuaWNvblNldC5jaGlwLnNlbGVjdGVkXG4gICAgICAgIDogcHJvcHMuaWNvblxuICAgICkpXG5cbiAgICBjb25zdCByZW1vdmVJY29uID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuaWNvblJlbW92ZSB8fCAkcS5pY29uU2V0LmNoaXAucmVtb3ZlKVxuXG4gICAgY29uc3QgaXNDbGlja2FibGUgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgcHJvcHMuZGlzYWJsZSA9PT0gZmFsc2VcbiAgICAgICYmIChwcm9wcy5jbGlja2FibGUgPT09IHRydWUgfHwgcHJvcHMuc2VsZWN0ZWQgIT09IG51bGwpXG4gICAgKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IHRleHQgPSBwcm9wcy5vdXRsaW5lID09PSB0cnVlXG4gICAgICAgID8gcHJvcHMuY29sb3IgfHwgcHJvcHMudGV4dENvbG9yXG4gICAgICAgIDogcHJvcHMudGV4dENvbG9yXG5cbiAgICAgIHJldHVybiAncS1jaGlwIHJvdyBpbmxpbmUgbm8td3JhcCBpdGVtcy1jZW50ZXInXG4gICAgICAgICsgKHByb3BzLm91dGxpbmUgPT09IGZhbHNlICYmIHByb3BzLmNvbG9yICE9PSB2b2lkIDAgPyBgIGJnLSR7IHByb3BzLmNvbG9yIH1gIDogJycpXG4gICAgICAgICsgKHRleHQgPyBgIHRleHQtJHsgdGV4dCB9IHEtY2hpcC0tY29sb3JlZGAgOiAnJylcbiAgICAgICAgKyAocHJvcHMuZGlzYWJsZSA9PT0gdHJ1ZSA/ICcgZGlzYWJsZWQnIDogJycpXG4gICAgICAgICsgKHByb3BzLmRlbnNlID09PSB0cnVlID8gJyBxLWNoaXAtLWRlbnNlJyA6ICcnKVxuICAgICAgICArIChwcm9wcy5vdXRsaW5lID09PSB0cnVlID8gJyBxLWNoaXAtLW91dGxpbmUnIDogJycpXG4gICAgICAgICsgKHByb3BzLnNlbGVjdGVkID09PSB0cnVlID8gJyBxLWNoaXAtLXNlbGVjdGVkJyA6ICcnKVxuICAgICAgICArIChpc0NsaWNrYWJsZS52YWx1ZSA9PT0gdHJ1ZSA/ICcgcS1jaGlwLS1jbGlja2FibGUgY3Vyc29yLXBvaW50ZXIgbm9uLXNlbGVjdGFibGUgcS1ob3ZlcmFibGUnIDogJycpXG4gICAgICAgICsgKHByb3BzLnNxdWFyZSA9PT0gdHJ1ZSA/ICcgcS1jaGlwLS1zcXVhcmUnIDogJycpXG4gICAgICAgICsgKGlzRGFyay52YWx1ZSA9PT0gdHJ1ZSA/ICcgcS1jaGlwLS1kYXJrIHEtZGFyaycgOiAnJylcbiAgICB9KVxuXG4gICAgY29uc3QgYXR0cmlidXRlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGNoaXAgPSBwcm9wcy5kaXNhYmxlID09PSB0cnVlXG4gICAgICAgID8geyB0YWJpbmRleDogLTEsICdhcmlhLWRpc2FibGVkJzogJ3RydWUnIH1cbiAgICAgICAgOiB7IHRhYmluZGV4OiBwcm9wcy50YWJpbmRleCB8fCAwIH1cblxuICAgICAgY29uc3QgcmVtb3ZlID0ge1xuICAgICAgICAuLi5jaGlwLFxuICAgICAgICByb2xlOiAnYnV0dG9uJyxcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ2ZhbHNlJyxcbiAgICAgICAgJ2FyaWEtbGFiZWwnOiBwcm9wcy5yZW1vdmVBcmlhTGFiZWwgfHwgJHEubGFuZy5sYWJlbC5yZW1vdmVcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHsgY2hpcCwgcmVtb3ZlIH1cbiAgICB9KVxuXG4gICAgZnVuY3Rpb24gb25LZXl1cCAoZSkge1xuICAgICAgZS5rZXlDb2RlID09PSAxMyAvKiBFTlRFUiAqLyAmJiBvbkNsaWNrKGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25DbGljayAoZSkge1xuICAgICAgaWYgKCFwcm9wcy5kaXNhYmxlKSB7XG4gICAgICAgIGVtaXQoJ3VwZGF0ZTpzZWxlY3RlZCcsICFwcm9wcy5zZWxlY3RlZClcbiAgICAgICAgZW1pdCgnY2xpY2snLCBlKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uUmVtb3ZlIChlKSB7XG4gICAgICBpZiAoZS5rZXlDb2RlID09PSB2b2lkIDAgfHwgZS5rZXlDb2RlID09PSAxMykge1xuICAgICAgICBzdG9wQW5kUHJldmVudChlKVxuICAgICAgICBpZiAocHJvcHMuZGlzYWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIGZhbHNlKVxuICAgICAgICAgIGVtaXQoJ3JlbW92ZScpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDb250ZW50ICgpIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gW11cblxuICAgICAgaXNDbGlja2FibGUudmFsdWUgPT09IHRydWUgJiYgY2hpbGQucHVzaChcbiAgICAgICAgaCgnZGl2JywgeyBjbGFzczogJ3EtZm9jdXMtaGVscGVyJyB9KVxuICAgICAgKVxuXG4gICAgICBoYXNMZWZ0SWNvbi52YWx1ZSA9PT0gdHJ1ZSAmJiBjaGlsZC5wdXNoKFxuICAgICAgICBoKFFJY29uLCB7XG4gICAgICAgICAgY2xhc3M6ICdxLWNoaXBfX2ljb24gcS1jaGlwX19pY29uLS1sZWZ0JyxcbiAgICAgICAgICBuYW1lOiBsZWZ0SWNvbi52YWx1ZVxuICAgICAgICB9KVxuICAgICAgKVxuXG4gICAgICBjb25zdCBsYWJlbCA9IHByb3BzLmxhYmVsICE9PSB2b2lkIDBcbiAgICAgICAgPyBbIGgoJ2RpdicsIHsgY2xhc3M6ICdlbGxpcHNpcycgfSwgWyBwcm9wcy5sYWJlbCBdKSBdXG4gICAgICAgIDogdm9pZCAwXG5cbiAgICAgIGNoaWxkLnB1c2goXG4gICAgICAgIGgoJ2RpdicsIHtcbiAgICAgICAgICBjbGFzczogJ3EtY2hpcF9fY29udGVudCBjb2wgcm93IG5vLXdyYXAgaXRlbXMtY2VudGVyIHEtYW5jaG9yLS1za2lwJ1xuICAgICAgICB9LCBoTWVyZ2VTbG90U2FmZWx5KHNsb3RzLmRlZmF1bHQsIGxhYmVsKSlcbiAgICAgIClcblxuICAgICAgcHJvcHMuaWNvblJpZ2h0ICYmIGNoaWxkLnB1c2goXG4gICAgICAgIGgoUUljb24sIHtcbiAgICAgICAgICBjbGFzczogJ3EtY2hpcF9faWNvbiBxLWNoaXBfX2ljb24tLXJpZ2h0JyxcbiAgICAgICAgICBuYW1lOiBwcm9wcy5pY29uUmlnaHRcbiAgICAgICAgfSlcbiAgICAgIClcblxuICAgICAgcHJvcHMucmVtb3ZhYmxlID09PSB0cnVlICYmIGNoaWxkLnB1c2goXG4gICAgICAgIGgoUUljb24sIHtcbiAgICAgICAgICBjbGFzczogJ3EtY2hpcF9faWNvbiBxLWNoaXBfX2ljb24tLXJlbW92ZSBjdXJzb3ItcG9pbnRlcicsXG4gICAgICAgICAgbmFtZTogcmVtb3ZlSWNvbi52YWx1ZSxcbiAgICAgICAgICAuLi5hdHRyaWJ1dGVzLnZhbHVlLnJlbW92ZSxcbiAgICAgICAgICBvbkNsaWNrOiBvblJlbW92ZSxcbiAgICAgICAgICBvbktleXVwOiBvblJlbW92ZVxuICAgICAgICB9KVxuICAgICAgKVxuXG4gICAgICByZXR1cm4gY2hpbGRcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLm1vZGVsVmFsdWUgPT09IGZhbHNlKSByZXR1cm5cblxuICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIHN0eWxlOiBzaXplU3R5bGUudmFsdWVcbiAgICAgIH1cblxuICAgICAgaXNDbGlja2FibGUudmFsdWUgPT09IHRydWUgJiYgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgZGF0YSxcbiAgICAgICAgYXR0cmlidXRlcy52YWx1ZS5jaGlwLFxuICAgICAgICB7IG9uQ2xpY2ssIG9uS2V5dXAgfVxuICAgICAgKVxuXG4gICAgICByZXR1cm4gaERpcihcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGdldENvbnRlbnQoKSxcbiAgICAgICAgJ3JpcHBsZScsXG4gICAgICAgIHByb3BzLnJpcHBsZSAhPT0gZmFsc2UgJiYgcHJvcHMuZGlzYWJsZSAhPT0gdHJ1ZSxcbiAgICAgICAgKCkgPT4gWyBbIFJpcHBsZSwgcHJvcHMucmlwcGxlIF0gXVxuICAgICAgKVxuICAgIH1cbiAgfVxufSlcbiIsImltcG9ydCB7IHJlZiwgd2F0Y2gsIG9uTW91bnRlZCwgb25CZWZvcmVVbm1vdW50LCBuZXh0VGljaywgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgeyBjbGVhclNlbGVjdGlvbiB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUuc2VsZWN0aW9uL3NlbGVjdGlvbi5qcydcbmltcG9ydCB7IGFkZEV2dCwgY2xlYW5FdnQsIHByZXZlbnQgfSBmcm9tICcuLi8uLi91dGlscy9ldmVudC9ldmVudC5qcydcbmltcG9ydCB7IGlzS2V5Q29kZSB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUua2V5Ym9hcmQva2V5LWNvbXBvc2l0aW9uLmpzJ1xuXG5leHBvcnQgY29uc3QgdXNlQW5jaG9yU3RhdGljUHJvcHMgPSB7XG4gIC8qIFNTUiBkb2VzIG5vdCBrbm93IGFib3V0IEVsZW1lbnQgKi9cbiAgdGFyZ2V0OiBfX1FVQVNBUl9TU1JfU0VSVkVSX19cbiAgICA/IHsgZGVmYXVsdDogdHJ1ZSB9XG4gICAgOiB7XG4gICAgICAgIHR5cGU6IFsgQm9vbGVhbiwgU3RyaW5nLCBFbGVtZW50IF0sXG4gICAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICAgIH0sXG5cbiAgbm9QYXJlbnRFdmVudDogQm9vbGVhblxufVxuXG5leHBvcnQgY29uc3QgdXNlQW5jaG9yUHJvcHMgPSB7XG4gIC4uLnVzZUFuY2hvclN0YXRpY1Byb3BzLFxuICBjb250ZXh0TWVudTogQm9vbGVhblxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoe1xuICBzaG93aW5nLFxuICBhdm9pZEVtaXQsIC8vIHJlcXVpcmVkIGZvciBRUG9wdXBQcm94eSAodHJ1ZSlcbiAgY29uZmlndXJlQW5jaG9yRWwgLy8gb3B0aW9uYWxcbn0pIHtcbiAgY29uc3QgeyBwcm9wcywgcHJveHksIGVtaXQgfSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpXG5cbiAgY29uc3QgYW5jaG9yRWwgPSByZWYobnVsbClcblxuICBsZXQgdG91Y2hUaW1lciA9IG51bGxcblxuICBmdW5jdGlvbiBjYW5TaG93IChldnQpIHtcbiAgICAvLyBhYm9ydCB3aXRoIG5vIHBhcmVudCBjb25maWd1cmVkIG9yIG9uIG11bHRpLXRvdWNoXG4gICAgcmV0dXJuIGFuY2hvckVsLnZhbHVlID09PSBudWxsXG4gICAgICA/IGZhbHNlXG4gICAgICA6IChldnQgPT09IHZvaWQgMCB8fCBldnQudG91Y2hlcyA9PT0gdm9pZCAwIHx8IGV2dC50b3VjaGVzLmxlbmd0aCA8PSAxKVxuICB9XG5cbiAgY29uc3QgYW5jaG9yRXZlbnRzID0ge31cblxuICBpZiAoY29uZmlndXJlQW5jaG9yRWwgPT09IHZvaWQgMCkge1xuICAgIC8vIGRlZmF1bHQgY29uZmlndXJlQW5jaG9yRWwgaXMgZGVzaWduZWQgZm9yXG4gICAgLy8gUU1lbnUgJiBRUG9wdXBQcm94eSAod2hpY2ggaXMgd2h5IGl0J3MgaGFuZGxlZCBoZXJlKVxuXG4gICAgT2JqZWN0LmFzc2lnbihhbmNob3JFdmVudHMsIHtcbiAgICAgIGhpZGUgKGV2dCkge1xuICAgICAgICBwcm94eS5oaWRlKGV2dClcbiAgICAgIH0sXG5cbiAgICAgIHRvZ2dsZSAoZXZ0KSB7XG4gICAgICAgIHByb3h5LnRvZ2dsZShldnQpXG4gICAgICAgIGV2dC5xQW5jaG9ySGFuZGxlZCA9IHRydWVcbiAgICAgIH0sXG5cbiAgICAgIHRvZ2dsZUtleSAoZXZ0KSB7XG4gICAgICAgIGlzS2V5Q29kZShldnQsIDEzKSA9PT0gdHJ1ZSAmJiBhbmNob3JFdmVudHMudG9nZ2xlKGV2dClcbiAgICAgIH0sXG5cbiAgICAgIGNvbnRleHRDbGljayAoZXZ0KSB7XG4gICAgICAgIHByb3h5LmhpZGUoZXZ0KVxuICAgICAgICBwcmV2ZW50KGV2dClcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHByb3h5LnNob3coZXZ0KVxuICAgICAgICAgIGV2dC5xQW5jaG9ySGFuZGxlZCA9IHRydWVcbiAgICAgICAgfSlcbiAgICAgIH0sXG5cbiAgICAgIHByZXZlbnQsXG5cbiAgICAgIG1vYmlsZVRvdWNoIChldnQpIHtcbiAgICAgICAgYW5jaG9yRXZlbnRzLm1vYmlsZUNsZWFudXAoZXZ0KVxuXG4gICAgICAgIGlmIChjYW5TaG93KGV2dCkgIT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIHByb3h5LmhpZGUoZXZ0KVxuICAgICAgICBhbmNob3JFbC52YWx1ZS5jbGFzc0xpc3QuYWRkKCdub24tc2VsZWN0YWJsZScpXG5cbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZ0LnRhcmdldFxuICAgICAgICBhZGRFdnQoYW5jaG9yRXZlbnRzLCAnYW5jaG9yJywgW1xuICAgICAgICAgIFsgdGFyZ2V0LCAndG91Y2htb3ZlJywgJ21vYmlsZUNsZWFudXAnLCAncGFzc2l2ZScgXSxcbiAgICAgICAgICBbIHRhcmdldCwgJ3RvdWNoZW5kJywgJ21vYmlsZUNsZWFudXAnLCAncGFzc2l2ZScgXSxcbiAgICAgICAgICBbIHRhcmdldCwgJ3RvdWNoY2FuY2VsJywgJ21vYmlsZUNsZWFudXAnLCAncGFzc2l2ZScgXSxcbiAgICAgICAgICBbIGFuY2hvckVsLnZhbHVlLCAnY29udGV4dG1lbnUnLCAncHJldmVudCcsICdub3RQYXNzaXZlJyBdXG4gICAgICAgIF0pXG5cbiAgICAgICAgdG91Y2hUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRvdWNoVGltZXIgPSBudWxsXG4gICAgICAgICAgcHJveHkuc2hvdyhldnQpXG4gICAgICAgICAgZXZ0LnFBbmNob3JIYW5kbGVkID0gdHJ1ZVxuICAgICAgICB9LCAzMDApXG4gICAgICB9LFxuXG4gICAgICBtb2JpbGVDbGVhbnVwIChldnQpIHtcbiAgICAgICAgYW5jaG9yRWwudmFsdWUuY2xhc3NMaXN0LnJlbW92ZSgnbm9uLXNlbGVjdGFibGUnKVxuXG4gICAgICAgIGlmICh0b3VjaFRpbWVyICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRvdWNoVGltZXIpXG4gICAgICAgICAgdG91Y2hUaW1lciA9IG51bGxcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaG93aW5nLnZhbHVlID09PSB0cnVlICYmIGV2dCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgY2xlYXJTZWxlY3Rpb24oKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuICAgIGNvbmZpZ3VyZUFuY2hvckVsID0gZnVuY3Rpb24gKGNvbnRleHQgPSBwcm9wcy5jb250ZXh0TWVudSkge1xuICAgICAgaWYgKHByb3BzLm5vUGFyZW50RXZlbnQgPT09IHRydWUgfHwgYW5jaG9yRWwudmFsdWUgPT09IG51bGwpIHJldHVyblxuXG4gICAgICBsZXQgZXZ0c1xuXG4gICAgICBpZiAoY29udGV4dCA9PT0gdHJ1ZSkge1xuICAgICAgICBpZiAocHJveHkuJHEucGxhdGZvcm0uaXMubW9iaWxlID09PSB0cnVlKSB7XG4gICAgICAgICAgZXZ0cyA9IFtcbiAgICAgICAgICAgIFsgYW5jaG9yRWwudmFsdWUsICd0b3VjaHN0YXJ0JywgJ21vYmlsZVRvdWNoJywgJ3Bhc3NpdmUnIF1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZXZ0cyA9IFtcbiAgICAgICAgICAgIFsgYW5jaG9yRWwudmFsdWUsICdtb3VzZWRvd24nLCAnaGlkZScsICdwYXNzaXZlJyBdLFxuICAgICAgICAgICAgWyBhbmNob3JFbC52YWx1ZSwgJ2NvbnRleHRtZW51JywgJ2NvbnRleHRDbGljaycsICdub3RQYXNzaXZlJyBdXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZXZ0cyA9IFtcbiAgICAgICAgICBbIGFuY2hvckVsLnZhbHVlLCAnY2xpY2snLCAndG9nZ2xlJywgJ3Bhc3NpdmUnIF0sXG4gICAgICAgICAgWyBhbmNob3JFbC52YWx1ZSwgJ2tleXVwJywgJ3RvZ2dsZUtleScsICdwYXNzaXZlJyBdXG4gICAgICAgIF1cbiAgICAgIH1cblxuICAgICAgYWRkRXZ0KGFuY2hvckV2ZW50cywgJ2FuY2hvcicsIGV2dHMpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdW5jb25maWd1cmVBbmNob3JFbCAoKSB7XG4gICAgY2xlYW5FdnQoYW5jaG9yRXZlbnRzLCAnYW5jaG9yJylcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEFuY2hvckVsIChlbCkge1xuICAgIGFuY2hvckVsLnZhbHVlID0gZWxcbiAgICB3aGlsZSAoYW5jaG9yRWwudmFsdWUuY2xhc3NMaXN0LmNvbnRhaW5zKCdxLWFuY2hvci0tc2tpcCcpKSB7XG4gICAgICBhbmNob3JFbC52YWx1ZSA9IGFuY2hvckVsLnZhbHVlLnBhcmVudE5vZGVcbiAgICB9XG4gICAgY29uZmlndXJlQW5jaG9yRWwoKVxuICB9XG5cbiAgZnVuY3Rpb24gcGlja0FuY2hvckVsICgpIHtcbiAgICBpZiAocHJvcHMudGFyZ2V0ID09PSBmYWxzZSB8fCBwcm9wcy50YXJnZXQgPT09ICcnIHx8IHByb3h5LiRlbC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgICBhbmNob3JFbC52YWx1ZSA9IG51bGxcbiAgICB9XG4gICAgZWxzZSBpZiAocHJvcHMudGFyZ2V0ID09PSB0cnVlKSB7XG4gICAgICBzZXRBbmNob3JFbChwcm94eS4kZWwucGFyZW50Tm9kZSlcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBsZXQgZWwgPSBwcm9wcy50YXJnZXRcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcy50YXJnZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByb3BzLnRhcmdldClcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgZWwgPSB2b2lkIDBcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZWwgIT09IHZvaWQgMCAmJiBlbCAhPT0gbnVsbCkge1xuICAgICAgICBhbmNob3JFbC52YWx1ZSA9IGVsLiRlbCB8fCBlbFxuICAgICAgICBjb25maWd1cmVBbmNob3JFbCgpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgYW5jaG9yRWwudmFsdWUgPSBudWxsXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEFuY2hvcjogdGFyZ2V0IFwiJHsgcHJvcHMudGFyZ2V0IH1cIiBub3QgZm91bmRgKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHdhdGNoKCgpID0+IHByb3BzLmNvbnRleHRNZW51LCB2YWwgPT4ge1xuICAgIGlmIChhbmNob3JFbC52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgdW5jb25maWd1cmVBbmNob3JFbCgpXG4gICAgICBjb25maWd1cmVBbmNob3JFbCh2YWwpXG4gICAgfVxuICB9KVxuXG4gIHdhdGNoKCgpID0+IHByb3BzLnRhcmdldCwgKCkgPT4ge1xuICAgIGlmIChhbmNob3JFbC52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgdW5jb25maWd1cmVBbmNob3JFbCgpXG4gICAgfVxuXG4gICAgcGlja0FuY2hvckVsKClcbiAgfSlcblxuICB3YXRjaCgoKSA9PiBwcm9wcy5ub1BhcmVudEV2ZW50LCB2YWwgPT4ge1xuICAgIGlmIChhbmNob3JFbC52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKHZhbCA9PT0gdHJ1ZSkge1xuICAgICAgICB1bmNvbmZpZ3VyZUFuY2hvckVsKClcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25maWd1cmVBbmNob3JFbCgpXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG4gIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgcGlja0FuY2hvckVsKClcblxuICAgIGlmIChhdm9pZEVtaXQgIT09IHRydWUgJiYgcHJvcHMubW9kZWxWYWx1ZSA9PT0gdHJ1ZSAmJiBhbmNob3JFbC52YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCBmYWxzZSlcbiAgICB9XG4gIH0pXG5cbiAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICB0b3VjaFRpbWVyICE9PSBudWxsICYmIGNsZWFyVGltZW91dCh0b3VjaFRpbWVyKVxuICAgIHVuY29uZmlndXJlQW5jaG9yRWwoKVxuICB9KVxuXG4gIHJldHVybiB7XG4gICAgYW5jaG9yRWwsXG4gICAgY2FuU2hvdyxcbiAgICBhbmNob3JFdmVudHNcbiAgfVxufVxuIiwiaW1wb3J0IHsgcmVmLCB3YXRjaCwgb25CZWZvcmVVbm1vdW50IH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgeyBsaXN0ZW5PcHRzIH0gZnJvbSAnLi4vLi4vdXRpbHMvZXZlbnQvZXZlbnQuanMnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChwcm9wcywgY29uZmlndXJlU2Nyb2xsVGFyZ2V0KSB7XG4gIGNvbnN0IGxvY2FsU2Nyb2xsVGFyZ2V0ID0gcmVmKG51bGwpXG4gIGxldCBzY3JvbGxGblxuXG4gIGZ1bmN0aW9uIGNoYW5nZVNjcm9sbEV2ZW50IChzY3JvbGxUYXJnZXQsIGZuKSB7XG4gICAgY29uc3QgZm5Qcm9wID0gYCR7IGZuICE9PSB2b2lkIDAgPyAnYWRkJyA6ICdyZW1vdmUnIH1FdmVudExpc3RlbmVyYFxuICAgIGNvbnN0IGZuSGFuZGxlciA9IGZuICE9PSB2b2lkIDAgPyBmbiA6IHNjcm9sbEZuXG5cbiAgICBpZiAoc2Nyb2xsVGFyZ2V0ICE9PSB3aW5kb3cpIHtcbiAgICAgIHNjcm9sbFRhcmdldFsgZm5Qcm9wIF0oJ3Njcm9sbCcsIGZuSGFuZGxlciwgbGlzdGVuT3B0cy5wYXNzaXZlKVxuICAgIH1cblxuICAgIHdpbmRvd1sgZm5Qcm9wIF0oJ3Njcm9sbCcsIGZuSGFuZGxlciwgbGlzdGVuT3B0cy5wYXNzaXZlKVxuXG4gICAgc2Nyb2xsRm4gPSBmblxuICB9XG5cbiAgZnVuY3Rpb24gdW5jb25maWd1cmVTY3JvbGxUYXJnZXQgKCkge1xuICAgIGlmIChsb2NhbFNjcm9sbFRhcmdldC52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgY2hhbmdlU2Nyb2xsRXZlbnQobG9jYWxTY3JvbGxUYXJnZXQudmFsdWUpXG4gICAgICBsb2NhbFNjcm9sbFRhcmdldC52YWx1ZSA9IG51bGxcbiAgICB9XG4gIH1cblxuICBjb25zdCBub1BhcmVudEV2ZW50V2F0Y2hlciA9IHdhdGNoKCgpID0+IHByb3BzLm5vUGFyZW50RXZlbnQsICgpID0+IHtcbiAgICBpZiAobG9jYWxTY3JvbGxUYXJnZXQudmFsdWUgIT09IG51bGwpIHtcbiAgICAgIHVuY29uZmlndXJlU2Nyb2xsVGFyZ2V0KClcbiAgICAgIGNvbmZpZ3VyZVNjcm9sbFRhcmdldCgpXG4gICAgfVxuICB9KVxuXG4gIG9uQmVmb3JlVW5tb3VudChub1BhcmVudEV2ZW50V2F0Y2hlcilcblxuICByZXR1cm4ge1xuICAgIGxvY2FsU2Nyb2xsVGFyZ2V0LFxuICAgIHVuY29uZmlndXJlU2Nyb2xsVGFyZ2V0LFxuICAgIGNoYW5nZVNjcm9sbEV2ZW50XG4gIH1cbn1cbiIsImltcG9ydCB7IGdsb2JhbENvbmZpZyB9IGZyb20gJy4uL3ByaXZhdGUuY29uZmlnL2luc3RhbmNlLWNvbmZpZy5qcydcblxuY29uc3Qgbm9kZXNMaXN0ID0gW11cbmNvbnN0IHBvcnRhbFR5cGVMaXN0ID0gW11cblxubGV0IHBvcnRhbEluZGV4ID0gMVxubGV0IHRhcmdldCA9IF9fUVVBU0FSX1NTUl9TRVJWRVJfX1xuICA/IHZvaWQgMFxuICA6IGRvY3VtZW50LmJvZHlcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUdsb2JhbE5vZGUgKGlkLCBwb3J0YWxUeXBlKSB7XG4gIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcblxuICBlbC5pZCA9IHBvcnRhbFR5cGUgIT09IHZvaWQgMFxuICAgID8gYHEtcG9ydGFsLS0keyBwb3J0YWxUeXBlIH0tLSR7IHBvcnRhbEluZGV4KysgfWBcbiAgICA6IGlkXG5cbiAgaWYgKGdsb2JhbENvbmZpZy5nbG9iYWxOb2RlcyAhPT0gdm9pZCAwKSB7XG4gICAgY29uc3QgY2xzID0gZ2xvYmFsQ29uZmlnLmdsb2JhbE5vZGVzLmNsYXNzXG4gICAgaWYgKGNscyAhPT0gdm9pZCAwKSB7XG4gICAgICBlbC5jbGFzc05hbWUgPSBjbHNcbiAgICB9XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoZWwpXG4gIG5vZGVzTGlzdC5wdXNoKGVsKVxuICBwb3J0YWxUeXBlTGlzdC5wdXNoKHBvcnRhbFR5cGUpXG5cbiAgcmV0dXJuIGVsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVHbG9iYWxOb2RlIChlbCkge1xuICBjb25zdCBub2RlSW5kZXggPSBub2Rlc0xpc3QuaW5kZXhPZihlbClcblxuICBub2Rlc0xpc3Quc3BsaWNlKG5vZGVJbmRleCwgMSlcbiAgcG9ydGFsVHlwZUxpc3Quc3BsaWNlKG5vZGVJbmRleCwgMSlcblxuICBlbC5yZW1vdmUoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlR2xvYmFsTm9kZXNUYXJnZXQgKG5ld1RhcmdldCkge1xuICBpZiAobmV3VGFyZ2V0ID09PSB0YXJnZXQpIHJldHVyblxuXG4gIHRhcmdldCA9IG5ld1RhcmdldFxuXG4gIGlmIChcbiAgICB0YXJnZXQgPT09IGRvY3VtZW50LmJvZHlcbiAgICAvLyBvciB3ZSBoYXZlIGxlc3MgdGhhbiAyIGRpYWxvZ3M6XG4gICAgfHwgcG9ydGFsVHlwZUxpc3QucmVkdWNlKChhY2MsIHR5cGUpID0+ICh0eXBlID09PSAnZGlhbG9nJyA/IGFjYyArIDEgOiBhY2MpLCAwKSA8IDJcbiAgKSB7XG4gICAgbm9kZXNMaXN0LmZvckVhY2gobm9kZSA9PiB7XG4gICAgICBpZiAobm9kZS5jb250YWlucyh0YXJnZXQpID09PSBmYWxzZSkge1xuICAgICAgICB0YXJnZXQuYXBwZW5kQ2hpbGQobm9kZSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCBsYXN0RGlhbG9nSW5kZXggPSBwb3J0YWxUeXBlTGlzdC5sYXN0SW5kZXhPZignZGlhbG9nJylcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzTGlzdC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGVsID0gbm9kZXNMaXN0WyBpIF1cblxuICAgIGlmIChcbiAgICAgIChpID09PSBsYXN0RGlhbG9nSW5kZXggfHwgcG9ydGFsVHlwZUxpc3RbIGkgXSAhPT0gJ2RpYWxvZycpXG4gICAgICAmJiBlbC5jb250YWlucyh0YXJnZXQpID09PSBmYWxzZVxuICAgICkge1xuICAgICAgdGFyZ2V0LmFwcGVuZENoaWxkKGVsKVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgZ2V0UGFyZW50UHJveHkgfSBmcm9tICcuLi9wcml2YXRlLnZtL3ZtLmpzJ1xuXG5leHBvcnQgY29uc3QgcG9ydGFsUHJveHlMaXN0ID0gW11cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBvcnRhbFByb3h5IChlbCkge1xuICByZXR1cm4gcG9ydGFsUHJveHlMaXN0LmZpbmQocHJveHkgPT5cbiAgICBwcm94eS5jb250ZW50RWwgIT09IG51bGxcbiAgICAmJiBwcm94eS5jb250ZW50RWwuY29udGFpbnMoZWwpXG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb3NlUG9ydGFsTWVudXMgKHByb3h5LCBldnQpIHtcbiAgZG8ge1xuICAgIGlmIChwcm94eS4kb3B0aW9ucy5uYW1lID09PSAnUU1lbnUnKSB7XG4gICAgICBwcm94eS5oaWRlKGV2dClcblxuICAgICAgLy8gaXMgdGhpcyBhIHBvaW50IG9mIHNlcGFyYXRpb24/XG4gICAgICBpZiAocHJveHkuJHByb3BzLnNlcGFyYXRlQ2xvc2VQb3B1cCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gZ2V0UGFyZW50UHJveHkocHJveHkpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHByb3h5Ll9fcVBvcnRhbCA9PT0gdHJ1ZSkge1xuICAgICAgLy8gdHJlYXQgaXQgYXMgcG9pbnQgb2Ygc2VwYXJhdGlvbiBpZiBwYXJlbnQgaXMgUVBvcHVwUHJveHlcbiAgICAgIC8vIChzbyBtb2JpbGUgbWF0Y2hlcyBkZXNrdG9wIGJlaGF2aW9yKVxuICAgICAgLy8gYW5kIGhpZGUgaXQgdG9vXG4gICAgICBjb25zdCBwYXJlbnQgPSBnZXRQYXJlbnRQcm94eShwcm94eSlcblxuICAgICAgaWYgKHBhcmVudCAhPT0gdm9pZCAwICYmIHBhcmVudC4kb3B0aW9ucy5uYW1lID09PSAnUVBvcHVwUHJveHknKSB7XG4gICAgICAgIHByb3h5LmhpZGUoZXZ0KVxuICAgICAgICByZXR1cm4gcGFyZW50XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHByb3h5XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJveHkgPSBnZXRQYXJlbnRQcm94eShwcm94eSlcbiAgfSB3aGlsZSAocHJveHkgIT09IHZvaWQgMCAmJiBwcm94eSAhPT0gbnVsbClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb3NlUG9ydGFscyAocHJveHksIGV2dCwgZGVwdGgpIHtcbiAgd2hpbGUgKGRlcHRoICE9PSAwICYmIHByb3h5ICE9PSB2b2lkIDAgJiYgcHJveHkgIT09IG51bGwpIHtcbiAgICBpZiAocHJveHkuX19xUG9ydGFsID09PSB0cnVlKSB7XG4gICAgICBkZXB0aC0tXG5cbiAgICAgIGlmIChwcm94eS4kb3B0aW9ucy5uYW1lID09PSAnUU1lbnUnKSB7XG4gICAgICAgIHByb3h5ID0gY2xvc2VQb3J0YWxNZW51cyhwcm94eSwgZXZ0KVxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBwcm94eS5oaWRlKGV2dClcbiAgICB9XG5cbiAgICBwcm94eSA9IGdldFBhcmVudFByb3h5KHByb3h5KVxuICB9XG59XG4iLCJpbXBvcnQgeyBoLCByZWYsIG9uVW5tb3VudGVkLCBUZWxlcG9ydCB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IHsgY3JlYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5jcmVhdGUvY3JlYXRlLmpzJ1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uLy4uL3V0aWxzL2V2ZW50L2V2ZW50LmpzJ1xuaW1wb3J0IHsgYWRkRm9jdXNXYWl0RmxhZywgcmVtb3ZlRm9jdXNXYWl0RmxhZyB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUuZm9jdXMvZm9jdXMtbWFuYWdlci5qcydcbmltcG9ydCB7IGNyZWF0ZUdsb2JhbE5vZGUsIHJlbW92ZUdsb2JhbE5vZGUgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmNvbmZpZy9ub2Rlcy5qcydcbmltcG9ydCB7IHBvcnRhbFByb3h5TGlzdCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUucG9ydGFsL3BvcnRhbC5qcydcbmltcG9ydCB7IGluamVjdFByb3AgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmluamVjdC1vYmotcHJvcC9pbmplY3Qtb2JqLXByb3AuanMnXG5cbi8qKlxuICogTm9vcCBpbnRlcm5hbCBjb21wb25lbnQgdG8gZWFzZSB0ZXN0aW5nXG4gKiBvZiB0aGUgdGVsZXBvcnRlZCBjb250ZW50LlxuICpcbiAqIGNvbnN0IHdyYXBwZXIgPSBtb3VudChRRGlhbG9nLCB7IC4uLiB9KVxuICogY29uc3QgdGVsZXBvcnRlZFdyYXBwZXIgPSB3cmFwcGVyLmZpbmRDb21wb25lbnQoeyBuYW1lOiAnUVBvcnRhbCcgfSlcbiAqL1xuY29uc3QgUVBvcnRhbCA9IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRUG9ydGFsJyxcbiAgc2V0dXAgKF8sIHsgc2xvdHMgfSkge1xuICAgIHJldHVybiAoKSA9PiBzbG90cy5kZWZhdWx0KClcbiAgfVxufSlcblxuZnVuY3Rpb24gaXNPbkdsb2JhbERpYWxvZyAodm0pIHtcbiAgdm0gPSB2bS5wYXJlbnRcblxuICB3aGlsZSAodm0gIT09IHZvaWQgMCAmJiB2bSAhPT0gbnVsbCkge1xuICAgIGlmICh2bS50eXBlLm5hbWUgPT09ICdRR2xvYmFsRGlhbG9nJykge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgaWYgKHZtLnR5cGUubmFtZSA9PT0gJ1FEaWFsb2cnIHx8IHZtLnR5cGUubmFtZSA9PT0gJ1FNZW51Jykge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgdm0gPSB2bS5wYXJlbnRcbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufVxuXG4vLyBXYXJuaW5nIVxuLy8gWW91IE1VU1Qgc3BlY2lmeSBcImluaGVyaXRBdHRyczogZmFsc2VcIiBpbiB5b3VyIGNvbXBvbmVudFxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAodm0sIGlubmVyUmVmLCByZW5kZXJQb3J0YWxDb250ZW50LCB0eXBlKSB7XG4gIC8vIHNob3dpbmcsIGluY2x1ZGluZyB3aGlsZSBpbiBzaG93L2hpZGUgdHJhbnNpdGlvblxuICBjb25zdCBwb3J0YWxJc0FjdGl2ZSA9IHJlZihmYWxzZSlcblxuICAvLyBzaG93aW5nICYgbm90IGluIGFueSBzaG93L2hpZGUgdHJhbnNpdGlvblxuICBjb25zdCBwb3J0YWxJc0FjY2Vzc2libGUgPSByZWYoZmFsc2UpXG5cbiAgaWYgKF9fUVVBU0FSX1NTUl9TRVJWRVJfXykge1xuICAgIHJldHVybiB7XG4gICAgICBwb3J0YWxJc0FjdGl2ZSxcbiAgICAgIHBvcnRhbElzQWNjZXNzaWJsZSxcblxuICAgICAgc2hvd1BvcnRhbDogbm9vcCxcbiAgICAgIGhpZGVQb3J0YWw6IG5vb3AsXG4gICAgICByZW5kZXJQb3J0YWw6IG5vb3BcbiAgICB9XG4gIH1cblxuICBsZXQgcG9ydGFsRWwgPSBudWxsXG4gIGNvbnN0IGZvY3VzT2JqID0ge31cbiAgY29uc3Qgb25HbG9iYWxEaWFsb2cgPSB0eXBlID09PSAnZGlhbG9nJyAmJiBpc09uR2xvYmFsRGlhbG9nKHZtKVxuXG4gIGZ1bmN0aW9uIHNob3dQb3J0YWwgKGlzUmVhZHkpIHtcbiAgICBpZiAoaXNSZWFkeSA9PT0gdHJ1ZSkge1xuICAgICAgcmVtb3ZlRm9jdXNXYWl0RmxhZyhmb2N1c09iailcbiAgICAgIHBvcnRhbElzQWNjZXNzaWJsZS52YWx1ZSA9IHRydWVcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHBvcnRhbElzQWNjZXNzaWJsZS52YWx1ZSA9IGZhbHNlXG5cbiAgICBpZiAocG9ydGFsSXNBY3RpdmUudmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICBpZiAob25HbG9iYWxEaWFsb2cgPT09IGZhbHNlICYmIHBvcnRhbEVsID09PSBudWxsKSB7XG4gICAgICAgIHBvcnRhbEVsID0gY3JlYXRlR2xvYmFsTm9kZShmYWxzZSwgdHlwZSlcbiAgICAgIH1cblxuICAgICAgcG9ydGFsSXNBY3RpdmUudmFsdWUgPSB0cnVlXG5cbiAgICAgIC8vIHJlZ2lzdGVyIHBvcnRhbFxuICAgICAgcG9ydGFsUHJveHlMaXN0LnB1c2godm0ucHJveHkpXG5cbiAgICAgIGFkZEZvY3VzV2FpdEZsYWcoZm9jdXNPYmopXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGlkZVBvcnRhbCAoaXNSZWFkeSkge1xuICAgIHBvcnRhbElzQWNjZXNzaWJsZS52YWx1ZSA9IGZhbHNlXG5cbiAgICBpZiAoaXNSZWFkeSAhPT0gdHJ1ZSkgcmV0dXJuXG5cbiAgICByZW1vdmVGb2N1c1dhaXRGbGFnKGZvY3VzT2JqKVxuICAgIHBvcnRhbElzQWN0aXZlLnZhbHVlID0gZmFsc2VcblxuICAgIC8vIHVucmVnaXN0ZXIgcG9ydGFsXG4gICAgY29uc3QgaW5kZXggPSBwb3J0YWxQcm94eUxpc3QuaW5kZXhPZih2bS5wcm94eSlcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBwb3J0YWxQcm94eUxpc3Quc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cblxuICAgIGlmIChwb3J0YWxFbCAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlR2xvYmFsTm9kZShwb3J0YWxFbClcbiAgICAgIHBvcnRhbEVsID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIG9uVW5tb3VudGVkKCgpID0+IHsgaGlkZVBvcnRhbCh0cnVlKSB9KVxuXG4gIC8vIG5lZWRlZCBmb3IgcG9ydGFsIHZtIGRldGVjdGlvblxuICB2bS5wcm94eS5fX3FQb3J0YWwgPSB0cnVlXG5cbiAgLy8gcHVibGljIHdheSBvZiBhY2Nlc3NpbmcgdGhlIHJlbmRlcmVkIGNvbnRlbnRcbiAgaW5qZWN0UHJvcCh2bS5wcm94eSwgJ2NvbnRlbnRFbCcsICgpID0+IGlubmVyUmVmLnZhbHVlKVxuXG4gIHJldHVybiB7XG4gICAgc2hvd1BvcnRhbCxcbiAgICBoaWRlUG9ydGFsLFxuXG4gICAgcG9ydGFsSXNBY3RpdmUsXG4gICAgcG9ydGFsSXNBY2Nlc3NpYmxlLFxuXG4gICAgcmVuZGVyUG9ydGFsOiAoKSA9PiAoXG4gICAgICBvbkdsb2JhbERpYWxvZyA9PT0gdHJ1ZVxuICAgICAgICA/IHJlbmRlclBvcnRhbENvbnRlbnQoKVxuICAgICAgICA6IChcbiAgICAgICAgICAgIHBvcnRhbElzQWN0aXZlLnZhbHVlID09PSB0cnVlXG4gICAgICAgICAgICAgID8gWyBoKFRlbGVwb3J0LCB7IHRvOiBwb3J0YWxFbCB9LCBoKFFQb3J0YWwsIHJlbmRlclBvcnRhbENvbnRlbnQpKSBdXG4gICAgICAgICAgICAgIDogdm9pZCAwXG4gICAgICAgICAgKVxuICAgIClcbiAgfVxufVxuIiwiaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG5cbmV4cG9ydCBjb25zdCB1c2VUcmFuc2l0aW9uUHJvcHMgPSB7XG4gIHRyYW5zaXRpb25TaG93OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdmYWRlJ1xuICB9LFxuXG4gIHRyYW5zaXRpb25IaWRlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdmYWRlJ1xuICB9LFxuXG4gIHRyYW5zaXRpb25EdXJhdGlvbjoge1xuICAgIHR5cGU6IFsgU3RyaW5nLCBOdW1iZXIgXSxcbiAgICBkZWZhdWx0OiAzMDBcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAocHJvcHMsIGRlZmF1bHRTaG93Rm4gPSAoKSA9PiB7fSwgZGVmYXVsdEhpZGVGbiA9ICgpID0+IHt9KSB7XG4gIHJldHVybiB7XG4gICAgdHJhbnNpdGlvblByb3BzOiBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBzaG93ID0gYHEtdHJhbnNpdGlvbi0tJHsgcHJvcHMudHJhbnNpdGlvblNob3cgfHwgZGVmYXVsdFNob3dGbigpIH1gXG4gICAgICBjb25zdCBoaWRlID0gYHEtdHJhbnNpdGlvbi0tJHsgcHJvcHMudHJhbnNpdGlvbkhpZGUgfHwgZGVmYXVsdEhpZGVGbigpIH1gXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFwcGVhcjogdHJ1ZSxcblxuICAgICAgICBlbnRlckZyb21DbGFzczogYCR7IHNob3cgfS1lbnRlci1mcm9tYCxcbiAgICAgICAgZW50ZXJBY3RpdmVDbGFzczogYCR7IHNob3cgfS1lbnRlci1hY3RpdmVgLFxuICAgICAgICBlbnRlclRvQ2xhc3M6IGAkeyBzaG93IH0tZW50ZXItdG9gLFxuXG4gICAgICAgIGxlYXZlRnJvbUNsYXNzOiBgJHsgaGlkZSB9LWxlYXZlLWZyb21gLFxuICAgICAgICBsZWF2ZUFjdGl2ZUNsYXNzOiBgJHsgaGlkZSB9LWxlYXZlLWFjdGl2ZWAsXG4gICAgICAgIGxlYXZlVG9DbGFzczogYCR7IGhpZGUgfS1sZWF2ZS10b2BcbiAgICAgIH1cbiAgICB9KSxcblxuICAgIHRyYW5zaXRpb25TdHlsZTogY29tcHV0ZWQoKCkgPT4gYC0tcS10cmFuc2l0aW9uLWR1cmF0aW9uOiAkeyBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24gfW1zYClcbiAgfVxufVxuIiwiaW1wb3J0IHsgbmV4dFRpY2ssIG9uRGVhY3RpdmF0ZWQsIG9uQmVmb3JlVW5tb3VudCwgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgeyB2bUlzRGVzdHJveWVkIH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS52bS92bS5qcydcblxuLypcbiAqIFVzYWdlOlxuICogICAgcmVnaXN0ZXJUaWNrKGZuKVxuICogICAgcmVtb3ZlVGljaygpXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICBsZXQgdGlja0ZuXG4gIGNvbnN0IHZtID0gZ2V0Q3VycmVudEluc3RhbmNlKClcblxuICBmdW5jdGlvbiByZW1vdmVUaWNrICgpIHtcbiAgICB0aWNrRm4gPSB2b2lkIDBcbiAgfVxuXG4gIG9uRGVhY3RpdmF0ZWQocmVtb3ZlVGljaylcbiAgb25CZWZvcmVVbm1vdW50KHJlbW92ZVRpY2spXG5cbiAgcmV0dXJuIHtcbiAgICByZW1vdmVUaWNrLFxuXG4gICAgcmVnaXN0ZXJUaWNrIChmbikge1xuICAgICAgdGlja0ZuID0gZm5cblxuICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBpZiAodGlja0ZuID09PSBmbikge1xuICAgICAgICAgIC8vIHdlIGFsc28gY2hlY2sgaWYgVk0gaXMgZGVzdHJveWVkLCBzaW5jZSBpZiBpdFxuICAgICAgICAgIC8vIGdvdCB0byB0cmlnZ2VyIG9uZSBuZXh0VGljaygpIHdlIGNhbm5vdCBzdG9wIGl0XG4gICAgICAgICAgdm1Jc0Rlc3Ryb3llZCh2bSkgPT09IGZhbHNlICYmIHRpY2tGbigpXG4gICAgICAgICAgdGlja0ZuID0gdm9pZCAwXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBjbGllbnQgfSBmcm9tICcuLi8uLi9wbHVnaW5zL3BsYXRmb3JtL1BsYXRmb3JtLmpzJ1xuaW1wb3J0IHsgaXNLZXlDb2RlIH0gZnJvbSAnLi4vcHJpdmF0ZS5rZXlib2FyZC9rZXktY29tcG9zaXRpb24uanMnXG5cbmNvbnN0IGhhbmRsZXJzID0gW11cbmxldCBlc2NEb3duXG5cbmZ1bmN0aW9uIG9uS2V5ZG93biAoZXZ0KSB7XG4gIGVzY0Rvd24gPSBldnQua2V5Q29kZSA9PT0gMjdcbn1cblxuZnVuY3Rpb24gb25CbHVyICgpIHtcbiAgaWYgKGVzY0Rvd24gPT09IHRydWUpIHtcbiAgICBlc2NEb3duID0gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBvbktleXVwIChldnQpIHtcbiAgaWYgKGVzY0Rvd24gPT09IHRydWUpIHtcbiAgICBlc2NEb3duID0gZmFsc2VcblxuICAgIGlmIChpc0tleUNvZGUoZXZ0LCAyNykgPT09IHRydWUpIHtcbiAgICAgIGhhbmRsZXJzWyBoYW5kbGVycy5sZW5ndGggLSAxIF0oZXZ0KVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGUgKGFjdGlvbikge1xuICB3aW5kb3dbIGFjdGlvbiBdKCdrZXlkb3duJywgb25LZXlkb3duKVxuICB3aW5kb3dbIGFjdGlvbiBdKCdibHVyJywgb25CbHVyKVxuICB3aW5kb3dbIGFjdGlvbiBdKCdrZXl1cCcsIG9uS2V5dXApXG4gIGVzY0Rvd24gPSBmYWxzZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkRXNjYXBlS2V5IChmbikge1xuICBpZiAoY2xpZW50LmlzLmRlc2t0b3AgPT09IHRydWUpIHtcbiAgICBoYW5kbGVycy5wdXNoKGZuKVxuXG4gICAgaWYgKGhhbmRsZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdXBkYXRlKCdhZGRFdmVudExpc3RlbmVyJylcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUVzY2FwZUtleSAoZm4pIHtcbiAgY29uc3QgaW5kZXggPSBoYW5kbGVycy5pbmRleE9mKGZuKVxuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgaGFuZGxlcnMuc3BsaWNlKGluZGV4LCAxKVxuXG4gICAgaWYgKGhhbmRsZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdXBkYXRlKCdyZW1vdmVFdmVudExpc3RlbmVyJylcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IGNsaWVudCB9IGZyb20gJy4uLy4uL3BsdWdpbnMvcGxhdGZvcm0vUGxhdGZvcm0uanMnXG5cbmNvbnN0IGhhbmRsZXJzID0gW11cblxuZnVuY3Rpb24gdHJpZ2dlciAoZSkge1xuICBoYW5kbGVyc1sgaGFuZGxlcnMubGVuZ3RoIC0gMSBdKGUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRGb2N1c291dCAoZm4pIHtcbiAgaWYgKGNsaWVudC5pcy5kZXNrdG9wID09PSB0cnVlKSB7XG4gICAgaGFuZGxlcnMucHVzaChmbilcblxuICAgIGlmIChoYW5kbGVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIHRyaWdnZXIpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGb2N1c291dCAoZm4pIHtcbiAgY29uc3QgaW5kZXggPSBoYW5kbGVycy5pbmRleE9mKGZuKVxuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgaGFuZGxlcnMuc3BsaWNlKGluZGV4LCAxKVxuXG4gICAgaWYgKGhhbmRsZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1c2luJywgdHJpZ2dlcilcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IGxpc3Rlbk9wdHMgfSBmcm9tICcuLi9ldmVudC9ldmVudC5qcydcbmltcG9ydCB7IHBvcnRhbFByb3h5TGlzdCB9IGZyb20gJy4uL3ByaXZhdGUucG9ydGFsL3BvcnRhbC5qcydcblxubGV0IHRpbWVyID0gbnVsbFxuXG5jb25zdFxuICB7IG5vdFBhc3NpdmVDYXB0dXJlIH0gPSBsaXN0ZW5PcHRzLFxuICByZWdpc3RlcmVkTGlzdCA9IFtdXG5cbmZ1bmN0aW9uIGdsb2JhbEhhbmRsZXIgKGV2dCkge1xuICBpZiAodGltZXIgIT09IG51bGwpIHtcbiAgICBjbGVhclRpbWVvdXQodGltZXIpXG4gICAgdGltZXIgPSBudWxsXG4gIH1cblxuICBjb25zdCB0YXJnZXQgPSBldnQudGFyZ2V0XG5cbiAgaWYgKFxuICAgIHRhcmdldCA9PT0gdm9pZCAwXG4gICAgfHwgdGFyZ2V0Lm5vZGVUeXBlID09PSA4XG4gICAgfHwgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbm8tcG9pbnRlci1ldmVudHMnKSA9PT0gdHJ1ZVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGNoZWNrIGxhc3QgcG9ydGFsIHZtIGlmIGl0J3NcbiAgLy8gYSBRRGlhbG9nIGFuZCBub3QgaW4gc2VhbWxlc3MgbW9kZVxuICBsZXQgcG9ydGFsSW5kZXggPSBwb3J0YWxQcm94eUxpc3QubGVuZ3RoIC0gMVxuXG4gIHdoaWxlIChwb3J0YWxJbmRleCA+PSAwKSB7XG4gICAgY29uc3QgcHJveHkgPSBwb3J0YWxQcm94eUxpc3RbIHBvcnRhbEluZGV4IF0uJFxuXG4gICAgLy8gc2tpcCBRVG9vbHRpcCBwb3J0YWxzXG4gICAgaWYgKHByb3h5LnR5cGUubmFtZSA9PT0gJ1FUb29sdGlwJykge1xuICAgICAgcG9ydGFsSW5kZXgtLVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBpZiAocHJveHkudHlwZS5uYW1lICE9PSAnUURpYWxvZycpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgaWYgKHByb3h5LnByb3BzLnNlYW1sZXNzICE9PSB0cnVlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBwb3J0YWxJbmRleC0tXG4gIH1cblxuICBmb3IgKGxldCBpID0gcmVnaXN0ZXJlZExpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBjb25zdCBzdGF0ZSA9IHJlZ2lzdGVyZWRMaXN0WyBpIF1cblxuICAgIGlmIChcbiAgICAgIChcbiAgICAgICAgc3RhdGUuYW5jaG9yRWwudmFsdWUgPT09IG51bGxcbiAgICAgICAgfHwgc3RhdGUuYW5jaG9yRWwudmFsdWUuY29udGFpbnModGFyZ2V0KSA9PT0gZmFsc2VcbiAgICAgIClcbiAgICAgICYmIChcbiAgICAgICAgdGFyZ2V0ID09PSBkb2N1bWVudC5ib2R5XG4gICAgICAgIHx8IChcbiAgICAgICAgICBzdGF0ZS5pbm5lclJlZi52YWx1ZSAhPT0gbnVsbFxuICAgICAgICAgICYmIHN0YXRlLmlubmVyUmVmLnZhbHVlLmNvbnRhaW5zKHRhcmdldCkgPT09IGZhbHNlXG4gICAgICAgIClcbiAgICAgIClcbiAgICApIHtcbiAgICAgIC8vIG1hcmsgdGhlIGV2ZW50IGFzIGJlaW5nIHByb2Nlc3NlZCBieSBjbGlja091dHNpZGVcbiAgICAgIC8vIHVzZWQgdG8gcHJldmVudCByZWZvY3VzIGFmdGVyIG1lbnUgY2xvc2VcbiAgICAgIGV2dC5xQ2xpY2tPdXRzaWRlID0gdHJ1ZVxuICAgICAgc3RhdGUub25DbGlja091dHNpZGUoZXZ0KVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkQ2xpY2tPdXRzaWRlIChjbGlja091dHNpZGVQcm9wcykge1xuICByZWdpc3RlcmVkTGlzdC5wdXNoKGNsaWNrT3V0c2lkZVByb3BzKVxuXG4gIGlmIChyZWdpc3RlcmVkTGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBnbG9iYWxIYW5kbGVyLCBub3RQYXNzaXZlQ2FwdHVyZSlcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZ2xvYmFsSGFuZGxlciwgbm90UGFzc2l2ZUNhcHR1cmUpXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUNsaWNrT3V0c2lkZSAoY2xpY2tPdXRzaWRlUHJvcHMpIHtcbiAgY29uc3QgaW5kZXggPSByZWdpc3RlcmVkTGlzdC5maW5kSW5kZXgoaCA9PiBoID09PSBjbGlja091dHNpZGVQcm9wcylcblxuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgcmVnaXN0ZXJlZExpc3Quc3BsaWNlKGluZGV4LCAxKVxuXG4gICAgaWYgKHJlZ2lzdGVyZWRMaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgaWYgKHRpbWVyICE9PSBudWxsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcilcbiAgICAgICAgdGltZXIgPSBudWxsXG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGdsb2JhbEhhbmRsZXIsIG5vdFBhc3NpdmVDYXB0dXJlKVxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGdsb2JhbEhhbmRsZXIsIG5vdFBhc3NpdmVDYXB0dXJlKVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgZ2V0U2Nyb2xsYmFyV2lkdGggfSBmcm9tICcuLi9zY3JvbGwvc2Nyb2xsLmpzJ1xuaW1wb3J0IHsgY2xpZW50IH0gZnJvbSAnLi4vLi4vcGx1Z2lucy9wbGF0Zm9ybS9QbGF0Zm9ybS5qcydcblxubGV0IHZwTGVmdCwgdnBUb3BcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUG9zaXRpb24gKHBvcykge1xuICBjb25zdCBwYXJ0cyA9IHBvcy5zcGxpdCgnICcpXG4gIGlmIChwYXJ0cy5sZW5ndGggIT09IDIpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBpZiAoWyAndG9wJywgJ2NlbnRlcicsICdib3R0b20nIF0uaW5jbHVkZXMocGFydHNbIDAgXSkgIT09IHRydWUpIHtcbiAgICBjb25zb2xlLmVycm9yKCdBbmNob3IvU2VsZiBwb3NpdGlvbiBtdXN0IHN0YXJ0IHdpdGggb25lIG9mIHRvcC9jZW50ZXIvYm90dG9tJylcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBpZiAoWyAnbGVmdCcsICdtaWRkbGUnLCAncmlnaHQnLCAnc3RhcnQnLCAnZW5kJyBdLmluY2x1ZGVzKHBhcnRzWyAxIF0pICE9PSB0cnVlKSB7XG4gICAgY29uc29sZS5lcnJvcignQW5jaG9yL1NlbGYgcG9zaXRpb24gbXVzdCBlbmQgd2l0aCBvbmUgb2YgbGVmdC9taWRkbGUvcmlnaHQvc3RhcnQvZW5kJylcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVPZmZzZXQgKHZhbCkge1xuICBpZiAoIXZhbCkgeyByZXR1cm4gdHJ1ZSB9XG4gIGlmICh2YWwubGVuZ3RoICE9PSAyKSB7IHJldHVybiBmYWxzZSB9XG4gIGlmICh0eXBlb2YgdmFsWyAwIF0gIT09ICdudW1iZXInIHx8IHR5cGVvZiB2YWxbIDEgXSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5jb25zdCBob3Jpem9udGFsUG9zID0ge1xuICAnc3RhcnQjbHRyJzogJ2xlZnQnLFxuICAnc3RhcnQjcnRsJzogJ3JpZ2h0JyxcbiAgJ2VuZCNsdHInOiAncmlnaHQnLFxuICAnZW5kI3J0bCc6ICdsZWZ0J1xufVxuXG47WyAnbGVmdCcsICdtaWRkbGUnLCAncmlnaHQnIF0uZm9yRWFjaChwb3MgPT4ge1xuICBob3Jpem9udGFsUG9zWyBgJHsgcG9zIH0jbHRyYCBdID0gcG9zXG4gIGhvcml6b250YWxQb3NbIGAkeyBwb3MgfSNydGxgIF0gPSBwb3Ncbn0pXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVBvc2l0aW9uIChwb3MsIHJ0bCkge1xuICBjb25zdCBwYXJ0cyA9IHBvcy5zcGxpdCgnICcpXG4gIHJldHVybiB7XG4gICAgdmVydGljYWw6IHBhcnRzWyAwIF0sXG4gICAgaG9yaXpvbnRhbDogaG9yaXpvbnRhbFBvc1sgYCR7IHBhcnRzWyAxIF0gfSMkeyBydGwgPT09IHRydWUgPyAncnRsJyA6ICdsdHInIH1gIF1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QW5jaG9yUHJvcHMgKGVsLCBvZmZzZXQpIHtcbiAgbGV0IHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCB3aWR0aCwgaGVpZ2h0IH0gPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG4gIGlmIChvZmZzZXQgIT09IHZvaWQgMCkge1xuICAgIHRvcCAtPSBvZmZzZXRbIDEgXVxuICAgIGxlZnQgLT0gb2Zmc2V0WyAwIF1cbiAgICBib3R0b20gKz0gb2Zmc2V0WyAxIF1cbiAgICByaWdodCArPSBvZmZzZXRbIDAgXVxuXG4gICAgd2lkdGggKz0gb2Zmc2V0WyAwIF1cbiAgICBoZWlnaHQgKz0gb2Zmc2V0WyAxIF1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wLCBib3R0b20sIGhlaWdodCxcbiAgICBsZWZ0LCByaWdodCwgd2lkdGgsXG4gICAgbWlkZGxlOiBsZWZ0ICsgKHJpZ2h0IC0gbGVmdCkgLyAyLFxuICAgIGNlbnRlcjogdG9wICsgKGJvdHRvbSAtIHRvcCkgLyAyXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QWJzb2x1dGVBbmNob3JQcm9wcyAoZWwsIGFic29sdXRlT2Zmc2V0LCBvZmZzZXQpIHtcbiAgbGV0IHsgdG9wLCBsZWZ0IH0gPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG4gIHRvcCArPSBhYnNvbHV0ZU9mZnNldC50b3BcbiAgbGVmdCArPSBhYnNvbHV0ZU9mZnNldC5sZWZ0XG5cbiAgaWYgKG9mZnNldCAhPT0gdm9pZCAwKSB7XG4gICAgdG9wICs9IG9mZnNldFsgMSBdXG4gICAgbGVmdCArPSBvZmZzZXRbIDAgXVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0b3AsIGJvdHRvbTogdG9wICsgMSwgaGVpZ2h0OiAxLFxuICAgIGxlZnQsIHJpZ2h0OiBsZWZ0ICsgMSwgd2lkdGg6IDEsXG4gICAgbWlkZGxlOiBsZWZ0LFxuICAgIGNlbnRlcjogdG9wXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0UHJvcHMgKHdpZHRoLCBoZWlnaHQpIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IDAsXG4gICAgY2VudGVyOiBoZWlnaHQgLyAyLFxuICAgIGJvdHRvbTogaGVpZ2h0LFxuICAgIGxlZnQ6IDAsXG4gICAgbWlkZGxlOiB3aWR0aCAvIDIsXG4gICAgcmlnaHQ6IHdpZHRoXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VG9wTGVmdFByb3BzIChhbmNob3JQcm9wcywgdGFyZ2V0UHJvcHMsIGFuY2hvck9yaWdpbiwgc2VsZk9yaWdpbikge1xuICByZXR1cm4ge1xuICAgIHRvcDogYW5jaG9yUHJvcHNbIGFuY2hvck9yaWdpbi52ZXJ0aWNhbCBdIC0gdGFyZ2V0UHJvcHNbIHNlbGZPcmlnaW4udmVydGljYWwgXSxcbiAgICBsZWZ0OiBhbmNob3JQcm9wc1sgYW5jaG9yT3JpZ2luLmhvcml6b250YWwgXSAtIHRhcmdldFByb3BzWyBzZWxmT3JpZ2luLmhvcml6b250YWwgXVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRQb3NpdGlvbiAoY2ZnLCByZXRyeU51bWJlciA9IDApIHtcbiAgaWYgKFxuICAgIGNmZy50YXJnZXRFbCA9PT0gbnVsbFxuICAgIHx8IGNmZy5hbmNob3JFbCA9PT0gbnVsbFxuICAgIHx8IHJldHJ5TnVtYmVyID4gNSAvLyB3ZSBzaG91bGQgdHJ5IG9ubHkgYSBmZXcgdGltZXNcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBzb21lIGJyb3dzZXJzIHJlcG9ydCB6ZXJvIGhlaWdodCBvciB3aWR0aCBiZWNhdXNlXG4gIC8vIHdlIGFyZSB0cnlpbmcgdG9vIGVhcmx5IHRvIGdldCB0aGVzZSBkaW1lbnNpb25zXG4gIGlmIChjZmcudGFyZ2V0RWwub2Zmc2V0SGVpZ2h0ID09PSAwIHx8IGNmZy50YXJnZXRFbC5vZmZzZXRXaWR0aCA9PT0gMCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2V0UG9zaXRpb24oY2ZnLCByZXRyeU51bWJlciArIDEpXG4gICAgfSwgMTApXG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCB7XG4gICAgdGFyZ2V0RWwsXG4gICAgb2Zmc2V0LFxuICAgIGFuY2hvckVsLFxuICAgIGFuY2hvck9yaWdpbixcbiAgICBzZWxmT3JpZ2luLFxuICAgIGFic29sdXRlT2Zmc2V0LFxuICAgIGZpdCxcbiAgICBjb3ZlcixcbiAgICBtYXhIZWlnaHQsXG4gICAgbWF4V2lkdGhcbiAgfSA9IGNmZ1xuXG4gIGlmIChjbGllbnQuaXMuaW9zID09PSB0cnVlICYmIHdpbmRvdy52aXN1YWxWaWV3cG9ydCAhPT0gdm9pZCAwKSB7XG4gICAgLy8gdXNlcyB0aGUgcS1wb3NpdGlvbi1lbmdpbmUgQ1NTIGNsYXNzXG5cbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmJvZHkuc3R5bGVcbiAgICBjb25zdCB7IG9mZnNldExlZnQ6IGxlZnQsIG9mZnNldFRvcDogdG9wIH0gPSB3aW5kb3cudmlzdWFsVmlld3BvcnRcblxuICAgIGlmIChsZWZ0ICE9PSB2cExlZnQpIHtcbiAgICAgIGVsLnNldFByb3BlcnR5KCctLXEtcGUtbGVmdCcsIGxlZnQgKyAncHgnKVxuICAgICAgdnBMZWZ0ID0gbGVmdFxuICAgIH1cbiAgICBpZiAodG9wICE9PSB2cFRvcCkge1xuICAgICAgZWwuc2V0UHJvcGVydHkoJy0tcS1wZS10b3AnLCB0b3AgKyAncHgnKVxuICAgICAgdnBUb3AgPSB0b3BcbiAgICB9XG4gIH1cblxuICAvLyBzY3JvbGwgcG9zaXRpb24gbWlnaHQgY2hhbmdlXG4gIC8vIGlmIG1heC1oZWlnaHQvLXdpZHRoIGNoYW5nZXMsIHNvIHdlXG4gIC8vIG5lZWQgdG8gcmVzdG9yZSBpdCBhZnRlciB3ZSBjYWxjdWxhdGVcbiAgLy8gdGhlIG5ldyBwb3NpdGlvbmluZ1xuICBjb25zdCB7IHNjcm9sbExlZnQsIHNjcm9sbFRvcCB9ID0gdGFyZ2V0RWxcblxuICBjb25zdCBhbmNob3JQcm9wcyA9IGFic29sdXRlT2Zmc2V0ID09PSB2b2lkIDBcbiAgICA/IGdldEFuY2hvclByb3BzKGFuY2hvckVsLCBjb3ZlciA9PT0gdHJ1ZSA/IFsgMCwgMCBdIDogb2Zmc2V0KVxuICAgIDogZ2V0QWJzb2x1dGVBbmNob3JQcm9wcyhhbmNob3JFbCwgYWJzb2x1dGVPZmZzZXQsIG9mZnNldClcblxuICAvKipcbiAgICogV2UgXCJyZXNldFwiIHRoZSBjcml0aWNhbCBDU1MgcHJvcGVydGllc1xuICAgKiBzbyB3ZSBjYW4gdGFrZSBhbiBhY2N1cmF0ZSBtZWFzdXJlbWVudC5cbiAgICpcbiAgICogRW5zdXJlIHRoYXQgdGFyZ2V0RWwgaGFzIGEgbWF4LXdpZHRoICYgbWF4LWhlaWdodFxuICAgKiBzZXQgaW4gQ1NTIGFuZCB0aGF0IHRoZSB2YWx1ZSBkb2VzIE5PVCBleGNlZWRzIDEwMHZ3L3ZoLlxuICAgKiBBbGwgdXNlcnMgb2YgdGhlIHBvc2l0aW9uLWVuZ2luZSAoY3VycmVudGx5IFFNZW51ICYgUVRvb2x0aXApXG4gICAqIGhhdmUgQ1NTIGZvciB0aGlzLlxuICAgKi9cbiAgT2JqZWN0LmFzc2lnbih0YXJnZXRFbC5zdHlsZSwge1xuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIG1pbldpZHRoOiBudWxsLFxuICAgIG1pbkhlaWdodDogbnVsbCxcbiAgICBtYXhXaWR0aCxcbiAgICBtYXhIZWlnaHQsXG4gICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnXG4gIH0pXG5cbiAgY29uc3QgeyBvZmZzZXRXaWR0aDogb3JpZ0VsV2lkdGgsIG9mZnNldEhlaWdodDogb3JpZ0VsSGVpZ2h0IH0gPSB0YXJnZXRFbFxuICBjb25zdCB7IGVsV2lkdGgsIGVsSGVpZ2h0IH0gPSBmaXQgPT09IHRydWUgfHwgY292ZXIgPT09IHRydWVcbiAgICA/IHsgZWxXaWR0aDogTWF0aC5tYXgoYW5jaG9yUHJvcHMud2lkdGgsIG9yaWdFbFdpZHRoKSwgZWxIZWlnaHQ6IGNvdmVyID09PSB0cnVlID8gTWF0aC5tYXgoYW5jaG9yUHJvcHMuaGVpZ2h0LCBvcmlnRWxIZWlnaHQpIDogb3JpZ0VsSGVpZ2h0IH1cbiAgICA6IHsgZWxXaWR0aDogb3JpZ0VsV2lkdGgsIGVsSGVpZ2h0OiBvcmlnRWxIZWlnaHQgfVxuXG4gIGxldCBlbFN0eWxlID0geyBtYXhXaWR0aCwgbWF4SGVpZ2h0IH1cblxuICBpZiAoZml0ID09PSB0cnVlIHx8IGNvdmVyID09PSB0cnVlKSB7XG4gICAgZWxTdHlsZS5taW5XaWR0aCA9IGFuY2hvclByb3BzLndpZHRoICsgJ3B4J1xuICAgIGlmIChjb3ZlciA9PT0gdHJ1ZSkge1xuICAgICAgZWxTdHlsZS5taW5IZWlnaHQgPSBhbmNob3JQcm9wcy5oZWlnaHQgKyAncHgnXG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmFzc2lnbih0YXJnZXRFbC5zdHlsZSwgZWxTdHlsZSlcblxuICBjb25zdCB0YXJnZXRQcm9wcyA9IGdldFRhcmdldFByb3BzKGVsV2lkdGgsIGVsSGVpZ2h0KVxuICBsZXQgcHJvcHMgPSBnZXRUb3BMZWZ0UHJvcHMoYW5jaG9yUHJvcHMsIHRhcmdldFByb3BzLCBhbmNob3JPcmlnaW4sIHNlbGZPcmlnaW4pXG5cbiAgaWYgKGFic29sdXRlT2Zmc2V0ID09PSB2b2lkIDAgfHwgb2Zmc2V0ID09PSB2b2lkIDApIHtcbiAgICBhcHBseUJvdW5kYXJpZXMocHJvcHMsIGFuY2hvclByb3BzLCB0YXJnZXRQcm9wcywgYW5jaG9yT3JpZ2luLCBzZWxmT3JpZ2luKVxuICB9XG4gIGVsc2UgeyAvLyB3ZSBoYXZlIHRvdWNoIHBvc2l0aW9uIG9yIGNvbnRleHQgbWVudSB3aXRoIG9mZnNldFxuICAgIGNvbnN0IHsgdG9wLCBsZWZ0IH0gPSBwcm9wcyAvLyBjYWNoZSBpbml0aWFsIHZhbHVlc1xuXG4gICAgLy8gYXBwbHkgaW5pdGlhbCBib3VuZGFyaWVzXG4gICAgYXBwbHlCb3VuZGFyaWVzKHByb3BzLCBhbmNob3JQcm9wcywgdGFyZ2V0UHJvcHMsIGFuY2hvck9yaWdpbiwgc2VsZk9yaWdpbilcblxuICAgIGxldCBoYXNDaGFuZ2VkID0gZmFsc2VcblxuICAgIC8vIGRpZCBpdCBmbGlwIHZlcnRpY2FsbHk/XG4gICAgaWYgKHByb3BzLnRvcCAhPT0gdG9wKSB7XG4gICAgICBoYXNDaGFuZ2VkID0gdHJ1ZVxuICAgICAgY29uc3Qgb2Zmc2V0WSA9IDIgKiBvZmZzZXRbIDEgXVxuICAgICAgYW5jaG9yUHJvcHMuY2VudGVyID0gYW5jaG9yUHJvcHMudG9wIC09IG9mZnNldFlcbiAgICAgIGFuY2hvclByb3BzLmJvdHRvbSAtPSBvZmZzZXRZICsgMlxuICAgIH1cblxuICAgIC8vIGRpZCBpdCBmbGlwIGhvcml6b250YWxseT9cbiAgICBpZiAocHJvcHMubGVmdCAhPT0gbGVmdCkge1xuICAgICAgaGFzQ2hhbmdlZCA9IHRydWVcbiAgICAgIGNvbnN0IG9mZnNldFggPSAyICogb2Zmc2V0WyAwIF1cbiAgICAgIGFuY2hvclByb3BzLm1pZGRsZSA9IGFuY2hvclByb3BzLmxlZnQgLT0gb2Zmc2V0WFxuICAgICAgYW5jaG9yUHJvcHMucmlnaHQgLT0gb2Zmc2V0WCArIDJcbiAgICB9XG5cbiAgICBpZiAoaGFzQ2hhbmdlZCA9PT0gdHJ1ZSkge1xuICAgICAgLy8gcmUtY2FsY3VsYXRlIHByb3BzIHdpdGggdGhlIG5ldyBhbmNob3JcbiAgICAgIHByb3BzID0gZ2V0VG9wTGVmdFByb3BzKGFuY2hvclByb3BzLCB0YXJnZXRQcm9wcywgYW5jaG9yT3JpZ2luLCBzZWxmT3JpZ2luKVxuXG4gICAgICAvLyBhbmQgcmUtYXBwbHkgYm91bmRhcmllc1xuICAgICAgYXBwbHlCb3VuZGFyaWVzKHByb3BzLCBhbmNob3JQcm9wcywgdGFyZ2V0UHJvcHMsIGFuY2hvck9yaWdpbiwgc2VsZk9yaWdpbilcbiAgICB9XG4gIH1cblxuICBlbFN0eWxlID0ge1xuICAgIHRvcDogcHJvcHMudG9wICsgJ3B4JyxcbiAgICBsZWZ0OiBwcm9wcy5sZWZ0ICsgJ3B4J1xuICB9XG5cbiAgaWYgKHByb3BzLm1heEhlaWdodCAhPT0gdm9pZCAwKSB7XG4gICAgZWxTdHlsZS5tYXhIZWlnaHQgPSBwcm9wcy5tYXhIZWlnaHQgKyAncHgnXG5cbiAgICBpZiAoYW5jaG9yUHJvcHMuaGVpZ2h0ID4gcHJvcHMubWF4SGVpZ2h0KSB7XG4gICAgICBlbFN0eWxlLm1pbkhlaWdodCA9IGVsU3R5bGUubWF4SGVpZ2h0XG4gICAgfVxuICB9XG4gIGlmIChwcm9wcy5tYXhXaWR0aCAhPT0gdm9pZCAwKSB7XG4gICAgZWxTdHlsZS5tYXhXaWR0aCA9IHByb3BzLm1heFdpZHRoICsgJ3B4J1xuXG4gICAgaWYgKGFuY2hvclByb3BzLndpZHRoID4gcHJvcHMubWF4V2lkdGgpIHtcbiAgICAgIGVsU3R5bGUubWluV2lkdGggPSBlbFN0eWxlLm1heFdpZHRoXG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmFzc2lnbih0YXJnZXRFbC5zdHlsZSwgZWxTdHlsZSlcblxuICAvLyByZXN0b3JlIHNjcm9sbCBwb3NpdGlvblxuICBpZiAodGFyZ2V0RWwuc2Nyb2xsVG9wICE9PSBzY3JvbGxUb3ApIHtcbiAgICB0YXJnZXRFbC5zY3JvbGxUb3AgPSBzY3JvbGxUb3BcbiAgfVxuICBpZiAodGFyZ2V0RWwuc2Nyb2xsTGVmdCAhPT0gc2Nyb2xsTGVmdCkge1xuICAgIHRhcmdldEVsLnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlCb3VuZGFyaWVzIChwcm9wcywgYW5jaG9yUHJvcHMsIHRhcmdldFByb3BzLCBhbmNob3JPcmlnaW4sIHNlbGZPcmlnaW4pIHtcbiAgY29uc3RcbiAgICBjdXJyZW50SGVpZ2h0ID0gdGFyZ2V0UHJvcHMuYm90dG9tLFxuICAgIGN1cnJlbnRXaWR0aCA9IHRhcmdldFByb3BzLnJpZ2h0LFxuICAgIG1hcmdpbiA9IGdldFNjcm9sbGJhcldpZHRoKCksXG4gICAgaW5uZXJIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSBtYXJnaW4sXG4gICAgaW5uZXJXaWR0aCA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGhcblxuICBpZiAocHJvcHMudG9wIDwgMCB8fCBwcm9wcy50b3AgKyBjdXJyZW50SGVpZ2h0ID4gaW5uZXJIZWlnaHQpIHtcbiAgICBpZiAoc2VsZk9yaWdpbi52ZXJ0aWNhbCA9PT0gJ2NlbnRlcicpIHtcbiAgICAgIHByb3BzLnRvcCA9IGFuY2hvclByb3BzWyBhbmNob3JPcmlnaW4udmVydGljYWwgXSA+IGlubmVySGVpZ2h0IC8gMlxuICAgICAgICA/IE1hdGgubWF4KDAsIGlubmVySGVpZ2h0IC0gY3VycmVudEhlaWdodClcbiAgICAgICAgOiAwXG4gICAgICBwcm9wcy5tYXhIZWlnaHQgPSBNYXRoLm1pbihjdXJyZW50SGVpZ2h0LCBpbm5lckhlaWdodClcbiAgICB9XG4gICAgZWxzZSBpZiAoYW5jaG9yUHJvcHNbIGFuY2hvck9yaWdpbi52ZXJ0aWNhbCBdID4gaW5uZXJIZWlnaHQgLyAyKSB7XG4gICAgICBjb25zdCBhbmNob3JZID0gTWF0aC5taW4oXG4gICAgICAgIGlubmVySGVpZ2h0LFxuICAgICAgICBhbmNob3JPcmlnaW4udmVydGljYWwgPT09ICdjZW50ZXInXG4gICAgICAgICAgPyBhbmNob3JQcm9wcy5jZW50ZXJcbiAgICAgICAgICA6IChhbmNob3JPcmlnaW4udmVydGljYWwgPT09IHNlbGZPcmlnaW4udmVydGljYWwgPyBhbmNob3JQcm9wcy5ib3R0b20gOiBhbmNob3JQcm9wcy50b3ApXG4gICAgICApXG4gICAgICBwcm9wcy5tYXhIZWlnaHQgPSBNYXRoLm1pbihjdXJyZW50SGVpZ2h0LCBhbmNob3JZKVxuICAgICAgcHJvcHMudG9wID0gTWF0aC5tYXgoMCwgYW5jaG9yWSAtIGN1cnJlbnRIZWlnaHQpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcHJvcHMudG9wID0gTWF0aC5tYXgoMCwgYW5jaG9yT3JpZ2luLnZlcnRpY2FsID09PSAnY2VudGVyJ1xuICAgICAgICA/IGFuY2hvclByb3BzLmNlbnRlclxuICAgICAgICA6IChhbmNob3JPcmlnaW4udmVydGljYWwgPT09IHNlbGZPcmlnaW4udmVydGljYWwgPyBhbmNob3JQcm9wcy50b3AgOiBhbmNob3JQcm9wcy5ib3R0b20pXG4gICAgICApXG4gICAgICBwcm9wcy5tYXhIZWlnaHQgPSBNYXRoLm1pbihjdXJyZW50SGVpZ2h0LCBpbm5lckhlaWdodCAtIHByb3BzLnRvcClcbiAgICB9XG4gIH1cblxuICBpZiAocHJvcHMubGVmdCA8IDAgfHwgcHJvcHMubGVmdCArIGN1cnJlbnRXaWR0aCA+IGlubmVyV2lkdGgpIHtcbiAgICBwcm9wcy5tYXhXaWR0aCA9IE1hdGgubWluKGN1cnJlbnRXaWR0aCwgaW5uZXJXaWR0aClcbiAgICBpZiAoc2VsZk9yaWdpbi5ob3Jpem9udGFsID09PSAnbWlkZGxlJykge1xuICAgICAgcHJvcHMubGVmdCA9IGFuY2hvclByb3BzWyBhbmNob3JPcmlnaW4uaG9yaXpvbnRhbCBdID4gaW5uZXJXaWR0aCAvIDJcbiAgICAgICAgPyBNYXRoLm1heCgwLCBpbm5lcldpZHRoIC0gY3VycmVudFdpZHRoKVxuICAgICAgICA6IDBcbiAgICB9XG4gICAgZWxzZSBpZiAoYW5jaG9yUHJvcHNbIGFuY2hvck9yaWdpbi5ob3Jpem9udGFsIF0gPiBpbm5lcldpZHRoIC8gMikge1xuICAgICAgY29uc3QgYW5jaG9yWCA9IE1hdGgubWluKFxuICAgICAgICBpbm5lcldpZHRoLFxuICAgICAgICBhbmNob3JPcmlnaW4uaG9yaXpvbnRhbCA9PT0gJ21pZGRsZSdcbiAgICAgICAgICA/IGFuY2hvclByb3BzLm1pZGRsZVxuICAgICAgICAgIDogKGFuY2hvck9yaWdpbi5ob3Jpem9udGFsID09PSBzZWxmT3JpZ2luLmhvcml6b250YWwgPyBhbmNob3JQcm9wcy5yaWdodCA6IGFuY2hvclByb3BzLmxlZnQpXG4gICAgICApXG4gICAgICBwcm9wcy5tYXhXaWR0aCA9IE1hdGgubWluKGN1cnJlbnRXaWR0aCwgYW5jaG9yWClcbiAgICAgIHByb3BzLmxlZnQgPSBNYXRoLm1heCgwLCBhbmNob3JYIC0gcHJvcHMubWF4V2lkdGgpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcHJvcHMubGVmdCA9IE1hdGgubWF4KDAsIGFuY2hvck9yaWdpbi5ob3Jpem9udGFsID09PSAnbWlkZGxlJ1xuICAgICAgICA/IGFuY2hvclByb3BzLm1pZGRsZVxuICAgICAgICA6IChhbmNob3JPcmlnaW4uaG9yaXpvbnRhbCA9PT0gc2VsZk9yaWdpbi5ob3Jpem9udGFsID8gYW5jaG9yUHJvcHMubGVmdCA6IGFuY2hvclByb3BzLnJpZ2h0KVxuICAgICAgKVxuICAgICAgcHJvcHMubWF4V2lkdGggPSBNYXRoLm1pbihjdXJyZW50V2lkdGgsIGlubmVyV2lkdGggLSBwcm9wcy5sZWZ0KVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgaCwgcmVmLCBjb21wdXRlZCwgd2F0Y2gsIFRyYW5zaXRpb24sIG9uQmVmb3JlVW5tb3VudCwgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgdXNlQW5jaG9yLCB7IHVzZUFuY2hvclByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvcHJpdmF0ZS51c2UtYW5jaG9yL3VzZS1hbmNob3IuanMnXG5pbXBvcnQgdXNlU2Nyb2xsVGFyZ2V0IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLXNjcm9sbC10YXJnZXQvdXNlLXNjcm9sbC10YXJnZXQuanMnXG5pbXBvcnQgdXNlTW9kZWxUb2dnbGUsIHsgdXNlTW9kZWxUb2dnbGVQcm9wcywgdXNlTW9kZWxUb2dnbGVFbWl0cyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLW1vZGVsLXRvZ2dsZS91c2UtbW9kZWwtdG9nZ2xlLmpzJ1xuaW1wb3J0IHVzZURhcmssIHsgdXNlRGFya1Byb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvcHJpdmF0ZS51c2UtZGFyay91c2UtZGFyay5qcydcbmltcG9ydCB1c2VQb3J0YWwgZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvcHJpdmF0ZS51c2UtcG9ydGFsL3VzZS1wb3J0YWwuanMnXG5pbXBvcnQgdXNlVHJhbnNpdGlvbiwgeyB1c2VUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wcml2YXRlLnVzZS10cmFuc2l0aW9uL3VzZS10cmFuc2l0aW9uLmpzJ1xuaW1wb3J0IHVzZVRpY2sgZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLXRpY2svdXNlLXRpY2suanMnXG5pbXBvcnQgdXNlVGltZW91dCBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtdGltZW91dC91c2UtdGltZW91dC5qcydcblxuaW1wb3J0IHsgY3JlYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5jcmVhdGUvY3JlYXRlLmpzJ1xuaW1wb3J0IHsgY2xvc2VQb3J0YWxNZW51cyB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUucG9ydGFsL3BvcnRhbC5qcydcbmltcG9ydCB7IGdldFNjcm9sbFRhcmdldCwgc2Nyb2xsVGFyZ2V0UHJvcCB9IGZyb20gJy4uLy4uL3V0aWxzL3Njcm9sbC9zY3JvbGwuanMnXG5pbXBvcnQgeyBwb3NpdGlvbiwgc3RvcEFuZFByZXZlbnQgfSBmcm9tICcuLi8uLi91dGlscy9ldmVudC9ldmVudC5qcydcbmltcG9ydCB7IGhTbG90IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5yZW5kZXIvcmVuZGVyLmpzJ1xuaW1wb3J0IHsgYWRkRXNjYXBlS2V5LCByZW1vdmVFc2NhcGVLZXkgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmtleWJvYXJkL2VzY2FwZS1rZXkuanMnXG5pbXBvcnQgeyBhZGRGb2N1c291dCwgcmVtb3ZlRm9jdXNvdXQgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmZvY3VzL2ZvY3Vzb3V0LmpzJ1xuaW1wb3J0IHsgY2hpbGRIYXNGb2N1cyB9IGZyb20gJy4uLy4uL3V0aWxzL2RvbS9kb20uanMnXG5pbXBvcnQgeyBhZGRDbGlja091dHNpZGUsIHJlbW92ZUNsaWNrT3V0c2lkZSB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUuY2xpY2stb3V0c2lkZS9jbGljay1vdXRzaWRlLmpzJ1xuaW1wb3J0IHsgYWRkRm9jdXNGbiB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUuZm9jdXMvZm9jdXMtbWFuYWdlci5qcydcblxuaW1wb3J0IHtcbiAgdmFsaWRhdGVQb3NpdGlvbiwgdmFsaWRhdGVPZmZzZXQsIHNldFBvc2l0aW9uLCBwYXJzZVBvc2l0aW9uXG59IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUucG9zaXRpb24tZW5naW5lL3Bvc2l0aW9uLWVuZ2luZS5qcydcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29tcG9uZW50KHtcbiAgbmFtZTogJ1FNZW51JyxcblxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuXG4gIHByb3BzOiB7XG4gICAgLi4udXNlQW5jaG9yUHJvcHMsXG4gICAgLi4udXNlTW9kZWxUb2dnbGVQcm9wcyxcbiAgICAuLi51c2VEYXJrUHJvcHMsXG4gICAgLi4udXNlVHJhbnNpdGlvblByb3BzLFxuXG4gICAgcGVyc2lzdGVudDogQm9vbGVhbixcbiAgICBhdXRvQ2xvc2U6IEJvb2xlYW4sXG4gICAgc2VwYXJhdGVDbG9zZVBvcHVwOiBCb29sZWFuLFxuXG4gICAgbm9Sb3V0ZURpc21pc3M6IEJvb2xlYW4sXG4gICAgbm9SZWZvY3VzOiBCb29sZWFuLFxuICAgIG5vRm9jdXM6IEJvb2xlYW4sXG5cbiAgICBmaXQ6IEJvb2xlYW4sXG4gICAgY292ZXI6IEJvb2xlYW4sXG5cbiAgICBzcXVhcmU6IEJvb2xlYW4sXG5cbiAgICBhbmNob3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHZhbGlkYXRvcjogdmFsaWRhdGVQb3NpdGlvblxuICAgIH0sXG4gICAgc2VsZjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgdmFsaWRhdG9yOiB2YWxpZGF0ZVBvc2l0aW9uXG4gICAgfSxcbiAgICBvZmZzZXQ6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgdmFsaWRhdG9yOiB2YWxpZGF0ZU9mZnNldFxuICAgIH0sXG5cbiAgICBzY3JvbGxUYXJnZXQ6IHNjcm9sbFRhcmdldFByb3AsXG5cbiAgICB0b3VjaFBvc2l0aW9uOiBCb29sZWFuLFxuXG4gICAgbWF4SGVpZ2h0OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBudWxsXG4gICAgfSxcbiAgICBtYXhXaWR0aDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogbnVsbFxuICAgIH1cbiAgfSxcblxuICBlbWl0czogW1xuICAgIC4uLnVzZU1vZGVsVG9nZ2xlRW1pdHMsXG4gICAgJ2NsaWNrJywgJ2VzY2FwZUtleSdcbiAgXSxcblxuICBzZXR1cCAocHJvcHMsIHsgc2xvdHMsIGVtaXQsIGF0dHJzIH0pIHtcbiAgICBsZXQgcmVmb2N1c1RhcmdldCA9IG51bGwsIGFic29sdXRlT2Zmc2V0LCB1bndhdGNoUG9zaXRpb24sIGF2b2lkQXV0b0Nsb3NlXG5cbiAgICBjb25zdCB2bSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpXG4gICAgY29uc3QgeyBwcm94eSB9ID0gdm1cbiAgICBjb25zdCB7ICRxIH0gPSBwcm94eVxuXG4gICAgY29uc3QgaW5uZXJSZWYgPSByZWYobnVsbClcbiAgICBjb25zdCBzaG93aW5nID0gcmVmKGZhbHNlKVxuXG4gICAgY29uc3QgaGlkZU9uUm91dGVDaGFuZ2UgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgcHJvcHMucGVyc2lzdGVudCAhPT0gdHJ1ZVxuICAgICAgJiYgcHJvcHMubm9Sb3V0ZURpc21pc3MgIT09IHRydWVcbiAgICApXG5cbiAgICBjb25zdCBpc0RhcmsgPSB1c2VEYXJrKHByb3BzLCAkcSlcbiAgICBjb25zdCB7IHJlZ2lzdGVyVGljaywgcmVtb3ZlVGljayB9ID0gdXNlVGljaygpXG4gICAgY29uc3QgeyByZWdpc3RlclRpbWVvdXQgfSA9IHVzZVRpbWVvdXQoKVxuICAgIGNvbnN0IHsgdHJhbnNpdGlvblByb3BzLCB0cmFuc2l0aW9uU3R5bGUgfSA9IHVzZVRyYW5zaXRpb24ocHJvcHMpXG4gICAgY29uc3QgeyBsb2NhbFNjcm9sbFRhcmdldCwgY2hhbmdlU2Nyb2xsRXZlbnQsIHVuY29uZmlndXJlU2Nyb2xsVGFyZ2V0IH0gPSB1c2VTY3JvbGxUYXJnZXQocHJvcHMsIGNvbmZpZ3VyZVNjcm9sbFRhcmdldClcblxuICAgIGNvbnN0IHsgYW5jaG9yRWwsIGNhblNob3cgfSA9IHVzZUFuY2hvcih7IHNob3dpbmcgfSlcblxuICAgIGNvbnN0IHsgaGlkZSB9ID0gdXNlTW9kZWxUb2dnbGUoe1xuICAgICAgc2hvd2luZywgY2FuU2hvdywgaGFuZGxlU2hvdywgaGFuZGxlSGlkZSxcbiAgICAgIGhpZGVPblJvdXRlQ2hhbmdlLFxuICAgICAgcHJvY2Vzc09uTW91bnQ6IHRydWVcbiAgICB9KVxuXG4gICAgY29uc3QgeyBzaG93UG9ydGFsLCBoaWRlUG9ydGFsLCByZW5kZXJQb3J0YWwgfSA9IHVzZVBvcnRhbCh2bSwgaW5uZXJSZWYsIHJlbmRlclBvcnRhbENvbnRlbnQsICdtZW51JylcblxuICAgIGNvbnN0IGNsaWNrT3V0c2lkZVByb3BzID0ge1xuICAgICAgYW5jaG9yRWwsXG4gICAgICBpbm5lclJlZixcbiAgICAgIG9uQ2xpY2tPdXRzaWRlIChlKSB7XG4gICAgICAgIGlmIChwcm9wcy5wZXJzaXN0ZW50ICE9PSB0cnVlICYmIHNob3dpbmcudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICBoaWRlKGUpXG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAvLyBhbHdheXMgcHJldmVudCB0b3VjaCBldmVudFxuICAgICAgICAgICAgZS50eXBlID09PSAndG91Y2hzdGFydCdcbiAgICAgICAgICAgIC8vIHByZXZlbnQgY2xpY2sgaWYgaXQncyBvbiBhIGRpYWxvZyBiYWNrZHJvcFxuICAgICAgICAgICAgfHwgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdxLWRpYWxvZ19fYmFja2Ryb3AnKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgc3RvcEFuZFByZXZlbnQoZSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgYW5jaG9yT3JpZ2luID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgIHBhcnNlUG9zaXRpb24oXG4gICAgICAgIHByb3BzLmFuY2hvciB8fCAoXG4gICAgICAgICAgcHJvcHMuY292ZXIgPT09IHRydWUgPyAnY2VudGVyIG1pZGRsZScgOiAnYm90dG9tIHN0YXJ0J1xuICAgICAgICApLFxuICAgICAgICAkcS5sYW5nLnJ0bFxuICAgICAgKVxuICAgIClcblxuICAgIGNvbnN0IHNlbGZPcmlnaW4gPSBjb21wdXRlZCgoKSA9PiAoXG4gICAgICBwcm9wcy5jb3ZlciA9PT0gdHJ1ZVxuICAgICAgICA/IGFuY2hvck9yaWdpbi52YWx1ZVxuICAgICAgICA6IHBhcnNlUG9zaXRpb24ocHJvcHMuc2VsZiB8fCAndG9wIHN0YXJ0JywgJHEubGFuZy5ydGwpXG4gICAgKSlcblxuICAgIGNvbnN0IG1lbnVDbGFzcyA9IGNvbXB1dGVkKCgpID0+XG4gICAgICAocHJvcHMuc3F1YXJlID09PSB0cnVlID8gJyBxLW1lbnUtLXNxdWFyZScgOiAnJylcbiAgICAgICsgKGlzRGFyay52YWx1ZSA9PT0gdHJ1ZSA/ICcgcS1tZW51LS1kYXJrIHEtZGFyaycgOiAnJylcbiAgICApXG5cbiAgICBjb25zdCBvbkV2ZW50cyA9IGNvbXB1dGVkKCgpID0+IChcbiAgICAgIHByb3BzLmF1dG9DbG9zZSA9PT0gdHJ1ZVxuICAgICAgICA/IHsgb25DbGljazogb25BdXRvQ2xvc2UgfVxuICAgICAgICA6IHt9XG4gICAgKSlcblxuICAgIGNvbnN0IGhhbmRsZXNGb2N1cyA9IGNvbXB1dGVkKCgpID0+XG4gICAgICBzaG93aW5nLnZhbHVlID09PSB0cnVlICYmIHByb3BzLnBlcnNpc3RlbnQgIT09IHRydWVcbiAgICApXG5cbiAgICB3YXRjaChoYW5kbGVzRm9jdXMsIHZhbCA9PiB7XG4gICAgICBpZiAodmFsID09PSB0cnVlKSB7XG4gICAgICAgIGFkZEVzY2FwZUtleShvbkVzY2FwZUtleSlcbiAgICAgICAgYWRkQ2xpY2tPdXRzaWRlKGNsaWNrT3V0c2lkZVByb3BzKVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlbW92ZUVzY2FwZUtleShvbkVzY2FwZUtleSlcbiAgICAgICAgcmVtb3ZlQ2xpY2tPdXRzaWRlKGNsaWNrT3V0c2lkZVByb3BzKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBmb2N1cyAoKSB7XG4gICAgICBhZGRGb2N1c0ZuKCgpID0+IHtcbiAgICAgICAgbGV0IG5vZGUgPSBpbm5lclJlZi52YWx1ZVxuXG4gICAgICAgIGlmIChub2RlICYmIG5vZGUuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkgIT09IHRydWUpIHtcbiAgICAgICAgICBub2RlID0gbm9kZS5xdWVyeVNlbGVjdG9yKCdbYXV0b2ZvY3VzXVt0YWJpbmRleF0sIFtkYXRhLWF1dG9mb2N1c11bdGFiaW5kZXhdJylcbiAgICAgICAgICAgIHx8IG5vZGUucXVlcnlTZWxlY3RvcignW2F1dG9mb2N1c10gW3RhYmluZGV4XSwgW2RhdGEtYXV0b2ZvY3VzXSBbdGFiaW5kZXhdJylcbiAgICAgICAgICAgIHx8IG5vZGUucXVlcnlTZWxlY3RvcignW2F1dG9mb2N1c10sIFtkYXRhLWF1dG9mb2N1c10nKVxuICAgICAgICAgICAgfHwgbm9kZVxuICAgICAgICAgIG5vZGUuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU2hvdyAoZXZ0KSB7XG4gICAgICByZWZvY3VzVGFyZ2V0ID0gcHJvcHMubm9SZWZvY3VzID09PSBmYWxzZVxuICAgICAgICA/IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICAgICAgOiBudWxsXG5cbiAgICAgIGFkZEZvY3Vzb3V0KG9uRm9jdXNvdXQpXG5cbiAgICAgIHNob3dQb3J0YWwoKVxuICAgICAgY29uZmlndXJlU2Nyb2xsVGFyZ2V0KClcblxuICAgICAgYWJzb2x1dGVPZmZzZXQgPSB2b2lkIDBcblxuICAgICAgaWYgKGV2dCAhPT0gdm9pZCAwICYmIChwcm9wcy50b3VjaFBvc2l0aW9uIHx8IHByb3BzLmNvbnRleHRNZW51KSkge1xuICAgICAgICBjb25zdCBwb3MgPSBwb3NpdGlvbihldnQpXG5cbiAgICAgICAgaWYgKHBvcy5sZWZ0ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICBjb25zdCB7IHRvcCwgbGVmdCB9ID0gYW5jaG9yRWwudmFsdWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgICBhYnNvbHV0ZU9mZnNldCA9IHsgbGVmdDogcG9zLmxlZnQgLSBsZWZ0LCB0b3A6IHBvcy50b3AgLSB0b3AgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh1bndhdGNoUG9zaXRpb24gPT09IHZvaWQgMCkge1xuICAgICAgICB1bndhdGNoUG9zaXRpb24gPSB3YXRjaChcbiAgICAgICAgICAoKSA9PiAkcS5zY3JlZW4ud2lkdGggKyAnfCcgKyAkcS5zY3JlZW4uaGVpZ2h0ICsgJ3wnICsgcHJvcHMuc2VsZiArICd8JyArIHByb3BzLmFuY2hvciArICd8JyArICRxLmxhbmcucnRsLFxuICAgICAgICAgIHVwZGF0ZVBvc2l0aW9uXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BzLm5vRm9jdXMgIT09IHRydWUpIHtcbiAgICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKClcbiAgICAgIH1cblxuICAgICAgLy8gc2hvdWxkIHJlbW92ZVRpY2soKSBpZiB0aGlzIGdldHMgcmVtb3ZlZFxuICAgICAgcmVnaXN0ZXJUaWNrKCgpID0+IHtcbiAgICAgICAgdXBkYXRlUG9zaXRpb24oKVxuICAgICAgICBwcm9wcy5ub0ZvY3VzICE9PSB0cnVlICYmIGZvY3VzKClcbiAgICAgIH0pXG5cbiAgICAgIC8vIHNob3VsZCByZW1vdmVUaW1lb3V0KCkgaWYgdGhpcyBnZXRzIHJlbW92ZWRcbiAgICAgIHJlZ2lzdGVyVGltZW91dCgoKSA9PiB7XG4gICAgICAgIC8vIHJlcXVpcmVkIGluIG9yZGVyIHRvIGF2b2lkIHRoZSBcImRvdWJsZS10YXAgbmVlZGVkXCIgaXNzdWVcbiAgICAgICAgaWYgKCRxLnBsYXRmb3JtLmlzLmlvcyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIC8vIGlmIGF1dG8tY2xvc2UsIHRoZW4gdGhpcyBjbGljayBzaG91bGRcbiAgICAgICAgICAvLyBub3QgY2xvc2UgdGhlIG1lbnVcbiAgICAgICAgICBhdm9pZEF1dG9DbG9zZSA9IHByb3BzLmF1dG9DbG9zZVxuICAgICAgICAgIGlubmVyUmVmLnZhbHVlLmNsaWNrKClcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZVBvc2l0aW9uKClcbiAgICAgICAgc2hvd1BvcnRhbCh0cnVlKSAvLyBkb25lIHNob3dpbmcgcG9ydGFsXG4gICAgICAgIGVtaXQoJ3Nob3cnLCBldnQpXG4gICAgICB9LCBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlSGlkZSAoZXZ0KSB7XG4gICAgICByZW1vdmVUaWNrKClcbiAgICAgIGhpZGVQb3J0YWwoKVxuXG4gICAgICBhbmNob3JDbGVhbnVwKHRydWUpXG5cbiAgICAgIGlmIChcbiAgICAgICAgcmVmb2N1c1RhcmdldCAhPT0gbnVsbFxuICAgICAgICAmJiAoXG4gICAgICAgICAgLy8gbWVudSB3YXMgaGlkZGVuIGZyb20gY29kZSBvciBFU0MgcGx1Z2luXG4gICAgICAgICAgZXZ0ID09PSB2b2lkIDBcbiAgICAgICAgICAvLyBtZW51IHdhcyBub3QgY2xvc2VkIGZyb20gYSBtb3VzZSBvciB0b3VjaCBjbGlja091dHNpZGVcbiAgICAgICAgICB8fCBldnQucUNsaWNrT3V0c2lkZSAhPT0gdHJ1ZVxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgKChldnQgJiYgZXZ0LnR5cGUuaW5kZXhPZigna2V5JykgPT09IDBcbiAgICAgICAgICA/IHJlZm9jdXNUYXJnZXQuY2xvc2VzdCgnW3RhYmluZGV4XTpub3QoW3RhYmluZGV4Xj1cIi1cIl0pJylcbiAgICAgICAgICA6IHZvaWQgMFxuICAgICAgICApIHx8IHJlZm9jdXNUYXJnZXQpLmZvY3VzKClcbiAgICAgICAgcmVmb2N1c1RhcmdldCA9IG51bGxcbiAgICAgIH1cblxuICAgICAgLy8gc2hvdWxkIHJlbW92ZVRpbWVvdXQoKSBpZiB0aGlzIGdldHMgcmVtb3ZlZFxuICAgICAgcmVnaXN0ZXJUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaGlkZVBvcnRhbCh0cnVlKSAvLyBkb25lIGhpZGluZywgbm93IGRlc3Ryb3lcbiAgICAgICAgZW1pdCgnaGlkZScsIGV2dClcbiAgICAgIH0sIHByb3BzLnRyYW5zaXRpb25EdXJhdGlvbilcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhbmNob3JDbGVhbnVwIChoaWRpbmcpIHtcbiAgICAgIGFic29sdXRlT2Zmc2V0ID0gdm9pZCAwXG5cbiAgICAgIGlmICh1bndhdGNoUG9zaXRpb24gIT09IHZvaWQgMCkge1xuICAgICAgICB1bndhdGNoUG9zaXRpb24oKVxuICAgICAgICB1bndhdGNoUG9zaXRpb24gPSB2b2lkIDBcbiAgICAgIH1cblxuICAgICAgaWYgKGhpZGluZyA9PT0gdHJ1ZSB8fCBzaG93aW5nLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIHJlbW92ZUZvY3Vzb3V0KG9uRm9jdXNvdXQpXG4gICAgICAgIHVuY29uZmlndXJlU2Nyb2xsVGFyZ2V0KClcbiAgICAgICAgcmVtb3ZlQ2xpY2tPdXRzaWRlKGNsaWNrT3V0c2lkZVByb3BzKVxuICAgICAgICByZW1vdmVFc2NhcGVLZXkob25Fc2NhcGVLZXkpXG4gICAgICB9XG5cbiAgICAgIGlmIChoaWRpbmcgIT09IHRydWUpIHtcbiAgICAgICAgcmVmb2N1c1RhcmdldCA9IG51bGxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWd1cmVTY3JvbGxUYXJnZXQgKCkge1xuICAgICAgaWYgKGFuY2hvckVsLnZhbHVlICE9PSBudWxsIHx8IHByb3BzLnNjcm9sbFRhcmdldCAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGxvY2FsU2Nyb2xsVGFyZ2V0LnZhbHVlID0gZ2V0U2Nyb2xsVGFyZ2V0KGFuY2hvckVsLnZhbHVlLCBwcm9wcy5zY3JvbGxUYXJnZXQpXG4gICAgICAgIGNoYW5nZVNjcm9sbEV2ZW50KGxvY2FsU2Nyb2xsVGFyZ2V0LnZhbHVlLCB1cGRhdGVQb3NpdGlvbilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkF1dG9DbG9zZSAoZSkge1xuICAgICAgLy8gaWYgYXV0by1jbG9zZSwgdGhlbiB0aGUgaW9zIGRvdWJsZS10YXAgZml4IHdoaWNoXG4gICAgICAvLyBpc3N1ZXMgYSBjbGljayBzaG91bGQgbm90IGNsb3NlIHRoZSBtZW51XG4gICAgICBpZiAoYXZvaWRBdXRvQ2xvc2UgIT09IHRydWUpIHtcbiAgICAgICAgY2xvc2VQb3J0YWxNZW51cyhwcm94eSwgZSlcbiAgICAgICAgZW1pdCgnY2xpY2snLCBlKVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGF2b2lkQXV0b0Nsb3NlID0gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkZvY3Vzb3V0IChldnQpIHtcbiAgICAgIC8vIHRoZSBmb2N1cyBpcyBub3QgaW4gYSB2dWUgY2hpbGQgY29tcG9uZW50XG4gICAgICBpZiAoXG4gICAgICAgIGhhbmRsZXNGb2N1cy52YWx1ZSA9PT0gdHJ1ZVxuICAgICAgICAmJiBwcm9wcy5ub0ZvY3VzICE9PSB0cnVlXG4gICAgICAgICYmIGNoaWxkSGFzRm9jdXMoaW5uZXJSZWYudmFsdWUsIGV2dC50YXJnZXQpICE9PSB0cnVlXG4gICAgICApIHtcbiAgICAgICAgZm9jdXMoKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRXNjYXBlS2V5IChldnQpIHtcbiAgICAgIGVtaXQoJ2VzY2FwZUtleScpXG4gICAgICBoaWRlKGV2dClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVQb3NpdGlvbiAoKSB7XG4gICAgICBzZXRQb3NpdGlvbih7XG4gICAgICAgIHRhcmdldEVsOiBpbm5lclJlZi52YWx1ZSxcbiAgICAgICAgb2Zmc2V0OiBwcm9wcy5vZmZzZXQsXG4gICAgICAgIGFuY2hvckVsOiBhbmNob3JFbC52YWx1ZSxcbiAgICAgICAgYW5jaG9yT3JpZ2luOiBhbmNob3JPcmlnaW4udmFsdWUsXG4gICAgICAgIHNlbGZPcmlnaW46IHNlbGZPcmlnaW4udmFsdWUsXG4gICAgICAgIGFic29sdXRlT2Zmc2V0LFxuICAgICAgICBmaXQ6IHByb3BzLmZpdCxcbiAgICAgICAgY292ZXI6IHByb3BzLmNvdmVyLFxuICAgICAgICBtYXhIZWlnaHQ6IHByb3BzLm1heEhlaWdodCxcbiAgICAgICAgbWF4V2lkdGg6IHByb3BzLm1heFdpZHRoXG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlclBvcnRhbENvbnRlbnQgKCkge1xuICAgICAgcmV0dXJuIGgoXG4gICAgICAgIFRyYW5zaXRpb24sXG4gICAgICAgIHRyYW5zaXRpb25Qcm9wcy52YWx1ZSxcbiAgICAgICAgKCkgPT4gKFxuICAgICAgICAgIHNob3dpbmcudmFsdWUgPT09IHRydWVcbiAgICAgICAgICAgID8gaCgnZGl2Jywge1xuICAgICAgICAgICAgICByb2xlOiAnbWVudScsXG4gICAgICAgICAgICAgIC4uLmF0dHJzLFxuICAgICAgICAgICAgICByZWY6IGlubmVyUmVmLFxuICAgICAgICAgICAgICB0YWJpbmRleDogLTEsXG4gICAgICAgICAgICAgIGNsYXNzOiBbXG4gICAgICAgICAgICAgICAgJ3EtbWVudSBxLXBvc2l0aW9uLWVuZ2luZSBzY3JvbGwnICsgbWVudUNsYXNzLnZhbHVlLFxuICAgICAgICAgICAgICAgIGF0dHJzLmNsYXNzXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0eWxlOiBbXG4gICAgICAgICAgICAgICAgYXR0cnMuc3R5bGUsXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvblN0eWxlLnZhbHVlXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIC4uLm9uRXZlbnRzLnZhbHVlXG4gICAgICAgICAgICB9LCBoU2xvdChzbG90cy5kZWZhdWx0KSlcbiAgICAgICAgICAgIDogbnVsbFxuICAgICAgICApXG4gICAgICApXG4gICAgfVxuXG4gICAgb25CZWZvcmVVbm1vdW50KGFuY2hvckNsZWFudXApXG5cbiAgICAvLyBleHBvc2UgcHVibGljIG1ldGhvZHNcbiAgICBPYmplY3QuYXNzaWduKHByb3h5LCB7IGZvY3VzLCB1cGRhdGVQb3NpdGlvbiB9KVxuXG4gICAgcmV0dXJuIHJlbmRlclBvcnRhbFxuICB9XG59KVxuIiwiaW1wb3J0IHsgaCwgcmVmLCBjb21wdXRlZCwgd2F0Y2gsIG9uQmVmb3JlVW5tb3VudCwgVHJhbnNpdGlvbiwgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgdXNlSGlzdG9yeSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wcml2YXRlLnVzZS1oaXN0b3J5L3VzZS1oaXN0b3J5LmpzJ1xuaW1wb3J0IHVzZVRpbWVvdXQgZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLXRpbWVvdXQvdXNlLXRpbWVvdXQuanMnXG5pbXBvcnQgdXNlVGljayBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtdGljay91c2UtdGljay5qcydcbmltcG9ydCB1c2VNb2RlbFRvZ2dsZSwgeyB1c2VNb2RlbFRvZ2dsZVByb3BzLCB1c2VNb2RlbFRvZ2dsZUVtaXRzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvcHJpdmF0ZS51c2UtbW9kZWwtdG9nZ2xlL3VzZS1tb2RlbC10b2dnbGUuanMnXG5pbXBvcnQgdXNlVHJhbnNpdGlvbiwgeyB1c2VUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wcml2YXRlLnVzZS10cmFuc2l0aW9uL3VzZS10cmFuc2l0aW9uLmpzJ1xuaW1wb3J0IHVzZVBvcnRhbCBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wcml2YXRlLnVzZS1wb3J0YWwvdXNlLXBvcnRhbC5qcydcbmltcG9ydCB1c2VQcmV2ZW50U2Nyb2xsIGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLXByZXZlbnQtc2Nyb2xsL3VzZS1wcmV2ZW50LXNjcm9sbC5qcydcblxuaW1wb3J0IHsgY3JlYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5jcmVhdGUvY3JlYXRlLmpzJ1xuaW1wb3J0IHsgY2hpbGRIYXNGb2N1cyB9IGZyb20gJy4uLy4uL3V0aWxzL2RvbS9kb20uanMnXG5pbXBvcnQgeyBoU2xvdCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUucmVuZGVyL3JlbmRlci5qcydcbmltcG9ydCB7IGFkZEVzY2FwZUtleSwgcmVtb3ZlRXNjYXBlS2V5IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5rZXlib2FyZC9lc2NhcGUta2V5LmpzJ1xuaW1wb3J0IHsgYWRkRm9jdXNvdXQsIHJlbW92ZUZvY3Vzb3V0IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5mb2N1cy9mb2N1c291dC5qcydcbmltcG9ydCB7IGFkZEZvY3VzRm4gfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmZvY3VzL2ZvY3VzLW1hbmFnZXIuanMnXG5cbmxldCBtYXhpbWl6ZWRNb2RhbHMgPSAwXG5cbmNvbnN0IHBvc2l0aW9uQ2xhc3MgPSB7XG4gIHN0YW5kYXJkOiAnZml4ZWQtZnVsbCBmbGV4LWNlbnRlcicsXG4gIHRvcDogJ2ZpeGVkLXRvcCBqdXN0aWZ5LWNlbnRlcicsXG4gIGJvdHRvbTogJ2ZpeGVkLWJvdHRvbSBqdXN0aWZ5LWNlbnRlcicsXG4gIHJpZ2h0OiAnZml4ZWQtcmlnaHQgaXRlbXMtY2VudGVyJyxcbiAgbGVmdDogJ2ZpeGVkLWxlZnQgaXRlbXMtY2VudGVyJ1xufVxuXG5jb25zdCBkZWZhdWx0VHJhbnNpdGlvbnMgPSB7XG4gIHN0YW5kYXJkOiBbICdzY2FsZScsICdzY2FsZScgXSxcbiAgdG9wOiBbICdzbGlkZS1kb3duJywgJ3NsaWRlLXVwJyBdLFxuICBib3R0b206IFsgJ3NsaWRlLXVwJywgJ3NsaWRlLWRvd24nIF0sXG4gIHJpZ2h0OiBbICdzbGlkZS1sZWZ0JywgJ3NsaWRlLXJpZ2h0JyBdLFxuICBsZWZ0OiBbICdzbGlkZS1yaWdodCcsICdzbGlkZS1sZWZ0JyBdXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRRGlhbG9nJyxcblxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuXG4gIHByb3BzOiB7XG4gICAgLi4udXNlTW9kZWxUb2dnbGVQcm9wcyxcbiAgICAuLi51c2VUcmFuc2l0aW9uUHJvcHMsXG5cbiAgICB0cmFuc2l0aW9uU2hvdzogU3RyaW5nLCAvLyBvdmVycmlkZSB1c2VUcmFuc2l0aW9uUHJvcHNcbiAgICB0cmFuc2l0aW9uSGlkZTogU3RyaW5nLCAvLyBvdmVycmlkZSB1c2VUcmFuc2l0aW9uUHJvcHNcblxuICAgIHBlcnNpc3RlbnQ6IEJvb2xlYW4sXG4gICAgYXV0b0Nsb3NlOiBCb29sZWFuLFxuICAgIGFsbG93Rm9jdXNPdXRzaWRlOiBCb29sZWFuLFxuXG4gICAgbm9Fc2NEaXNtaXNzOiBCb29sZWFuLFxuICAgIG5vQmFja2Ryb3BEaXNtaXNzOiBCb29sZWFuLFxuICAgIG5vUm91dGVEaXNtaXNzOiBCb29sZWFuLFxuICAgIG5vUmVmb2N1czogQm9vbGVhbixcbiAgICBub0ZvY3VzOiBCb29sZWFuLFxuICAgIG5vU2hha2U6IEJvb2xlYW4sXG5cbiAgICBzZWFtbGVzczogQm9vbGVhbixcblxuICAgIG1heGltaXplZDogQm9vbGVhbixcbiAgICBmdWxsV2lkdGg6IEJvb2xlYW4sXG4gICAgZnVsbEhlaWdodDogQm9vbGVhbixcblxuICAgIHNxdWFyZTogQm9vbGVhbixcblxuICAgIGJhY2tkcm9wRmlsdGVyOiBTdHJpbmcsXG5cbiAgICBwb3NpdGlvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3N0YW5kYXJkJyxcbiAgICAgIHZhbGlkYXRvcjogdmFsID0+IFsgJ3N0YW5kYXJkJywgJ3RvcCcsICdib3R0b20nLCAnbGVmdCcsICdyaWdodCcgXS5pbmNsdWRlcyh2YWwpXG4gICAgfVxuICB9LFxuXG4gIGVtaXRzOiBbXG4gICAgLi4udXNlTW9kZWxUb2dnbGVFbWl0cyxcbiAgICAnc2hha2UnLCAnY2xpY2snLCAnZXNjYXBlS2V5J1xuICBdLFxuXG4gIHNldHVwIChwcm9wcywgeyBzbG90cywgZW1pdCwgYXR0cnMgfSkge1xuICAgIGNvbnN0IHZtID0gZ2V0Q3VycmVudEluc3RhbmNlKClcblxuICAgIGNvbnN0IGlubmVyUmVmID0gcmVmKG51bGwpXG4gICAgY29uc3Qgc2hvd2luZyA9IHJlZihmYWxzZSlcbiAgICBjb25zdCBhbmltYXRpbmcgPSByZWYoZmFsc2UpXG5cbiAgICBsZXQgc2hha2VUaW1lb3V0ID0gbnVsbCwgcmVmb2N1c1RhcmdldCA9IG51bGwsIGlzTWF4aW1pemVkLCBhdm9pZEF1dG9DbG9zZVxuXG4gICAgY29uc3QgaGlkZU9uUm91dGVDaGFuZ2UgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgcHJvcHMucGVyc2lzdGVudCAhPT0gdHJ1ZVxuICAgICAgJiYgcHJvcHMubm9Sb3V0ZURpc21pc3MgIT09IHRydWVcbiAgICAgICYmIHByb3BzLnNlYW1sZXNzICE9PSB0cnVlXG4gICAgKVxuXG4gICAgY29uc3QgeyBwcmV2ZW50Qm9keVNjcm9sbCB9ID0gdXNlUHJldmVudFNjcm9sbCgpXG4gICAgY29uc3QgeyByZWdpc3RlclRpbWVvdXQgfSA9IHVzZVRpbWVvdXQoKVxuICAgIGNvbnN0IHsgcmVnaXN0ZXJUaWNrLCByZW1vdmVUaWNrIH0gPSB1c2VUaWNrKClcblxuICAgIGNvbnN0IHsgdHJhbnNpdGlvblByb3BzLCB0cmFuc2l0aW9uU3R5bGUgfSA9IHVzZVRyYW5zaXRpb24oXG4gICAgICBwcm9wcyxcbiAgICAgICgpID0+IGRlZmF1bHRUcmFuc2l0aW9uc1sgcHJvcHMucG9zaXRpb24gXVsgMCBdLFxuICAgICAgKCkgPT4gZGVmYXVsdFRyYW5zaXRpb25zWyBwcm9wcy5wb3NpdGlvbiBdWyAxIF1cbiAgICApXG5cbiAgICBjb25zdCBiYWNrZHJvcFN0eWxlID0gY29tcHV0ZWQoKCkgPT4gKFxuICAgICAgdHJhbnNpdGlvblN0eWxlLnZhbHVlXG4gICAgICArIChcbiAgICAgICAgcHJvcHMuYmFja2Ryb3BGaWx0ZXIgIT09IHZvaWQgMFxuICAgICAgICAgIC8vIFNhZmFyaSByZXF1aXJlcyB0aGUgLXdlYmtpdCBwcmVmaXhcbiAgICAgICAgICA/IGA7YmFja2Ryb3AtZmlsdGVyOiR7IHByb3BzLmJhY2tkcm9wRmlsdGVyIH07LXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6JHsgcHJvcHMuYmFja2Ryb3BGaWx0ZXIgfWBcbiAgICAgICAgICA6ICcnXG4gICAgICApXG4gICAgKSlcblxuICAgIGNvbnN0IHsgc2hvd1BvcnRhbCwgaGlkZVBvcnRhbCwgcG9ydGFsSXNBY2Nlc3NpYmxlLCByZW5kZXJQb3J0YWwgfSA9IHVzZVBvcnRhbChcbiAgICAgIHZtLCBpbm5lclJlZiwgcmVuZGVyUG9ydGFsQ29udGVudCwgJ2RpYWxvZydcbiAgICApXG5cbiAgICBjb25zdCB7IGhpZGUgfSA9IHVzZU1vZGVsVG9nZ2xlKHtcbiAgICAgIHNob3dpbmcsXG4gICAgICBoaWRlT25Sb3V0ZUNoYW5nZSxcbiAgICAgIGhhbmRsZVNob3csXG4gICAgICBoYW5kbGVIaWRlLFxuICAgICAgcHJvY2Vzc09uTW91bnQ6IHRydWVcbiAgICB9KVxuXG4gICAgY29uc3QgeyBhZGRUb0hpc3RvcnksIHJlbW92ZUZyb21IaXN0b3J5IH0gPSB1c2VIaXN0b3J5KHNob3dpbmcsIGhpZGUsIGhpZGVPblJvdXRlQ2hhbmdlKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+XG4gICAgICAncS1kaWFsb2dfX2lubmVyIGZsZXggbm8tcG9pbnRlci1ldmVudHMnXG4gICAgICArIGAgcS1kaWFsb2dfX2lubmVyLS0keyBwcm9wcy5tYXhpbWl6ZWQgPT09IHRydWUgPyAnbWF4aW1pemVkJyA6ICdtaW5pbWl6ZWQnIH1gXG4gICAgICArIGAgcS1kaWFsb2dfX2lubmVyLS0keyBwcm9wcy5wb3NpdGlvbiB9ICR7IHBvc2l0aW9uQ2xhc3NbIHByb3BzLnBvc2l0aW9uIF0gfWBcbiAgICAgICsgKGFuaW1hdGluZy52YWx1ZSA9PT0gdHJ1ZSA/ICcgcS1kaWFsb2dfX2lubmVyLS1hbmltYXRpbmcnIDogJycpXG4gICAgICArIChwcm9wcy5mdWxsV2lkdGggPT09IHRydWUgPyAnIHEtZGlhbG9nX19pbm5lci0tZnVsbHdpZHRoJyA6ICcnKVxuICAgICAgKyAocHJvcHMuZnVsbEhlaWdodCA9PT0gdHJ1ZSA/ICcgcS1kaWFsb2dfX2lubmVyLS1mdWxsaGVpZ2h0JyA6ICcnKVxuICAgICAgKyAocHJvcHMuc3F1YXJlID09PSB0cnVlID8gJyBxLWRpYWxvZ19faW5uZXItLXNxdWFyZScgOiAnJylcbiAgICApXG5cbiAgICBjb25zdCB1c2VCYWNrZHJvcCA9IGNvbXB1dGVkKCgpID0+IHNob3dpbmcudmFsdWUgPT09IHRydWUgJiYgcHJvcHMuc2VhbWxlc3MgIT09IHRydWUpXG5cbiAgICBjb25zdCBvbkV2ZW50cyA9IGNvbXB1dGVkKCgpID0+IChcbiAgICAgIHByb3BzLmF1dG9DbG9zZSA9PT0gdHJ1ZVxuICAgICAgICA/IHsgb25DbGljazogb25BdXRvQ2xvc2UgfVxuICAgICAgICA6IHt9XG4gICAgKSlcblxuICAgIGNvbnN0IHJvb3RDbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4gW1xuICAgICAgJ3EtZGlhbG9nIGZ1bGxzY3JlZW4gbm8tcG9pbnRlci1ldmVudHMgJ1xuICAgICAgICArIGBxLWRpYWxvZy0tJHsgdXNlQmFja2Ryb3AudmFsdWUgPT09IHRydWUgPyAnbW9kYWwnIDogJ3NlYW1sZXNzJyB9YCxcbiAgICAgIGF0dHJzLmNsYXNzXG4gICAgXSlcblxuICAgIHdhdGNoKCgpID0+IHByb3BzLm1heGltaXplZCwgc3RhdGUgPT4ge1xuICAgICAgc2hvd2luZy52YWx1ZSA9PT0gdHJ1ZSAmJiB1cGRhdGVNYXhpbWl6ZWQoc3RhdGUpXG4gICAgfSlcblxuICAgIHdhdGNoKHVzZUJhY2tkcm9wLCB2YWwgPT4ge1xuICAgICAgcHJldmVudEJvZHlTY3JvbGwodmFsKVxuXG4gICAgICBpZiAodmFsID09PSB0cnVlKSB7XG4gICAgICAgIGFkZEZvY3Vzb3V0KG9uRm9jdXNDaGFuZ2UpXG4gICAgICAgIGFkZEVzY2FwZUtleShvbkVzY2FwZUtleSlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZW1vdmVGb2N1c291dChvbkZvY3VzQ2hhbmdlKVxuICAgICAgICByZW1vdmVFc2NhcGVLZXkob25Fc2NhcGVLZXkpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIGhhbmRsZVNob3cgKGV2dCkge1xuICAgICAgYWRkVG9IaXN0b3J5KClcblxuICAgICAgcmVmb2N1c1RhcmdldCA9IHByb3BzLm5vUmVmb2N1cyA9PT0gZmFsc2UgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gbnVsbFxuICAgICAgICA/IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICAgICAgOiBudWxsXG5cbiAgICAgIHVwZGF0ZU1heGltaXplZChwcm9wcy5tYXhpbWl6ZWQpXG4gICAgICBzaG93UG9ydGFsKClcbiAgICAgIGFuaW1hdGluZy52YWx1ZSA9IHRydWVcblxuICAgICAgaWYgKHByb3BzLm5vRm9jdXMgIT09IHRydWUpIHtcbiAgICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gbnVsbCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKVxuICAgICAgICByZWdpc3RlclRpY2soZm9jdXMpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVtb3ZlVGljaygpXG4gICAgICB9XG5cbiAgICAgIC8vIHNob3VsZCByZW1vdmVUaW1lb3V0KCkgaWYgdGhpcyBnZXRzIHJlbW92ZWRcbiAgICAgIHJlZ2lzdGVyVGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh2bS5wcm94eS4kcS5wbGF0Zm9ybS5pcy5pb3MgPT09IHRydWUpIHtcbiAgICAgICAgICBpZiAocHJvcHMuc2VhbWxlc3MgIT09IHRydWUgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3RcbiAgICAgICAgICAgICAgeyB0b3AsIGJvdHRvbSB9ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgICAgeyBpbm5lckhlaWdodCB9ID0gd2luZG93LFxuICAgICAgICAgICAgICBoZWlnaHQgPSB3aW5kb3cudmlzdWFsVmlld3BvcnQgIT09IHZvaWQgMFxuICAgICAgICAgICAgICAgID8gd2luZG93LnZpc3VhbFZpZXdwb3J0LmhlaWdodFxuICAgICAgICAgICAgICAgIDogaW5uZXJIZWlnaHRcblxuICAgICAgICAgICAgaWYgKHRvcCA+IDAgJiYgYm90dG9tID4gaGVpZ2h0IC8gMikge1xuICAgICAgICAgICAgICBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50LnNjcm9sbFRvcCA9IE1hdGgubWluKFxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGJvdHRvbSA+PSBpbm5lckhlaWdodFxuICAgICAgICAgICAgICAgICAgPyBJbmZpbml0eVxuICAgICAgICAgICAgICAgICAgOiBNYXRoLmNlaWwoZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudC5zY3JvbGxUb3AgKyBib3R0b20gLSBoZWlnaHQgLyAyKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuc2Nyb2xsSW50b1ZpZXcoKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHJlcXVpcmVkIGluIG9yZGVyIHRvIGF2b2lkIHRoZSBcImRvdWJsZS10YXAgbmVlZGVkXCIgaXNzdWVcbiAgICAgICAgICBhdm9pZEF1dG9DbG9zZSA9IHRydWVcbiAgICAgICAgICBpbm5lclJlZi52YWx1ZS5jbGljaygpXG4gICAgICAgICAgYXZvaWRBdXRvQ2xvc2UgPSBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgc2hvd1BvcnRhbCh0cnVlKSAvLyBkb25lIHNob3dpbmcgcG9ydGFsXG4gICAgICAgIGFuaW1hdGluZy52YWx1ZSA9IGZhbHNlXG4gICAgICAgIGVtaXQoJ3Nob3cnLCBldnQpXG4gICAgICB9LCBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlSGlkZSAoZXZ0KSB7XG4gICAgICByZW1vdmVUaWNrKClcbiAgICAgIHJlbW92ZUZyb21IaXN0b3J5KClcbiAgICAgIGNsZWFudXAodHJ1ZSlcbiAgICAgIGFuaW1hdGluZy52YWx1ZSA9IHRydWVcbiAgICAgIGhpZGVQb3J0YWwoKVxuXG4gICAgICBpZiAocmVmb2N1c1RhcmdldCAhPT0gbnVsbCkge1xuICAgICAgICAoKGV2dCAmJiBldnQudHlwZS5pbmRleE9mKCdrZXknKSA9PT0gMFxuICAgICAgICAgID8gcmVmb2N1c1RhcmdldC5jbG9zZXN0KCdbdGFiaW5kZXhdOm5vdChbdGFiaW5kZXhePVwiLVwiXSknKVxuICAgICAgICAgIDogdm9pZCAwXG4gICAgICAgICkgfHwgcmVmb2N1c1RhcmdldCkuZm9jdXMoKVxuXG4gICAgICAgIHJlZm9jdXNUYXJnZXQgPSBudWxsXG4gICAgICB9XG5cbiAgICAgIC8vIHNob3VsZCByZW1vdmVUaW1lb3V0KCkgaWYgdGhpcyBnZXRzIHJlbW92ZWRcbiAgICAgIHJlZ2lzdGVyVGltZW91dCgoKSA9PiB7XG4gICAgICAgIGhpZGVQb3J0YWwodHJ1ZSkgLy8gZG9uZSBoaWRpbmcsIG5vdyBkZXN0cm95XG4gICAgICAgIGFuaW1hdGluZy52YWx1ZSA9IGZhbHNlXG4gICAgICAgIGVtaXQoJ2hpZGUnLCBldnQpXG4gICAgICB9LCBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9jdXMgKHNlbGVjdG9yKSB7XG4gICAgICBhZGRGb2N1c0ZuKCgpID0+IHtcbiAgICAgICAgbGV0IG5vZGUgPSBpbm5lclJlZi52YWx1ZVxuXG4gICAgICAgIGlmIChub2RlID09PSBudWxsKSByZXR1cm5cblxuICAgICAgICBpZiAoc2VsZWN0b3IgIT09IHZvaWQgMCkge1xuICAgICAgICAgIGNvbnN0IHRhcmdldCA9IG5vZGUucXVlcnlTZWxlY3RvcihzZWxlY3RvcilcbiAgICAgICAgICBpZiAodGFyZ2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0YXJnZXQuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm9kZS5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSAhPT0gdHJ1ZSkge1xuICAgICAgICAgIG5vZGUgPSAoXG4gICAgICAgICAgICBub2RlLnF1ZXJ5U2VsZWN0b3IoJ1thdXRvZm9jdXNdW3RhYmluZGV4XSwgW2RhdGEtYXV0b2ZvY3VzXVt0YWJpbmRleF0nKVxuICAgICAgICAgICAgfHwgbm9kZS5xdWVyeVNlbGVjdG9yKCdbYXV0b2ZvY3VzXSBbdGFiaW5kZXhdLCBbZGF0YS1hdXRvZm9jdXNdIFt0YWJpbmRleF0nKVxuICAgICAgICAgICAgfHwgbm9kZS5xdWVyeVNlbGVjdG9yKCdbYXV0b2ZvY3VzXSwgW2RhdGEtYXV0b2ZvY3VzXScpXG4gICAgICAgICAgICB8fCBub2RlXG4gICAgICAgICAgKVxuXG4gICAgICAgICAgbm9kZS5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaGFrZSAoZm9jdXNUYXJnZXQpIHtcbiAgICAgIGlmIChmb2N1c1RhcmdldCAmJiB0eXBlb2YgZm9jdXNUYXJnZXQuZm9jdXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZm9jdXNUYXJnZXQuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZm9jdXMoKVxuICAgICAgfVxuXG4gICAgICBlbWl0KCdzaGFrZScpXG5cbiAgICAgIGNvbnN0IG5vZGUgPSBpbm5lclJlZi52YWx1ZVxuXG4gICAgICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgICBub2RlLmNsYXNzTGlzdC5yZW1vdmUoJ3EtYW5pbWF0ZS0tc2NhbGUnKVxuICAgICAgICBub2RlLmNsYXNzTGlzdC5hZGQoJ3EtYW5pbWF0ZS0tc2NhbGUnKVxuICAgICAgICBzaGFrZVRpbWVvdXQgIT09IG51bGwgJiYgY2xlYXJUaW1lb3V0KHNoYWtlVGltZW91dClcbiAgICAgICAgc2hha2VUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgc2hha2VUaW1lb3V0ID0gbnVsbFxuICAgICAgICAgIGlmIChpbm5lclJlZi52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdxLWFuaW1hdGUtLXNjYWxlJylcbiAgICAgICAgICAgIC8vIHNvbWUgcGxhdGZvcm1zIChsaWtlIGRlc2t0b3AgQ2hyb21lKVxuICAgICAgICAgICAgLy8gcmVxdWlyZSBjYWxsaW5nIGZvY3VzKCkgYWdhaW5cbiAgICAgICAgICAgIGZvY3VzKClcbiAgICAgICAgICB9XG4gICAgICAgIH0sIDE3MClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkVzY2FwZUtleSAoKSB7XG4gICAgICBpZiAocHJvcHMuc2VhbWxlc3MgIT09IHRydWUpIHtcbiAgICAgICAgaWYgKHByb3BzLnBlcnNpc3RlbnQgPT09IHRydWUgfHwgcHJvcHMubm9Fc2NEaXNtaXNzID09PSB0cnVlKSB7XG4gICAgICAgICAgcHJvcHMubWF4aW1pemVkICE9PSB0cnVlICYmIHByb3BzLm5vU2hha2UgIT09IHRydWUgJiYgc2hha2UoKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGVtaXQoJ2VzY2FwZUtleScpXG4gICAgICAgICAgaGlkZSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwIChoaWRpbmcpIHtcbiAgICAgIGlmIChzaGFrZVRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHNoYWtlVGltZW91dClcbiAgICAgICAgc2hha2VUaW1lb3V0ID0gbnVsbFxuICAgICAgfVxuXG4gICAgICBpZiAoaGlkaW5nID09PSB0cnVlIHx8IHNob3dpbmcudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgdXBkYXRlTWF4aW1pemVkKGZhbHNlKVxuXG4gICAgICAgIGlmIChwcm9wcy5zZWFtbGVzcyAhPT0gdHJ1ZSkge1xuICAgICAgICAgIHByZXZlbnRCb2R5U2Nyb2xsKGZhbHNlKVxuICAgICAgICAgIHJlbW92ZUZvY3Vzb3V0KG9uRm9jdXNDaGFuZ2UpXG4gICAgICAgICAgcmVtb3ZlRXNjYXBlS2V5KG9uRXNjYXBlS2V5KVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChoaWRpbmcgIT09IHRydWUpIHtcbiAgICAgICAgcmVmb2N1c1RhcmdldCA9IG51bGxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVNYXhpbWl6ZWQgKGFjdGl2ZSkge1xuICAgICAgaWYgKGFjdGl2ZSA9PT0gdHJ1ZSkge1xuICAgICAgICBpZiAoaXNNYXhpbWl6ZWQgIT09IHRydWUpIHtcbiAgICAgICAgICBtYXhpbWl6ZWRNb2RhbHMgPCAxICYmIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgncS1ib2R5LS1kaWFsb2cnKVxuICAgICAgICAgIG1heGltaXplZE1vZGFscysrXG5cbiAgICAgICAgICBpc01heGltaXplZCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNNYXhpbWl6ZWQgPT09IHRydWUpIHtcbiAgICAgICAgaWYgKG1heGltaXplZE1vZGFscyA8IDIpIHtcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ3EtYm9keS0tZGlhbG9nJylcbiAgICAgICAgfVxuXG4gICAgICAgIG1heGltaXplZE1vZGFscy0tXG4gICAgICAgIGlzTWF4aW1pemVkID0gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkF1dG9DbG9zZSAoZSkge1xuICAgICAgaWYgKGF2b2lkQXV0b0Nsb3NlICE9PSB0cnVlKSB7XG4gICAgICAgIGhpZGUoZSlcbiAgICAgICAgZW1pdCgnY2xpY2snLCBlKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uQmFja2Ryb3BDbGljayAoZSkge1xuICAgICAgaWYgKHByb3BzLnBlcnNpc3RlbnQgIT09IHRydWUgJiYgcHJvcHMubm9CYWNrZHJvcERpc21pc3MgIT09IHRydWUpIHtcbiAgICAgICAgaGlkZShlKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAocHJvcHMubm9TaGFrZSAhPT0gdHJ1ZSkge1xuICAgICAgICBzaGFrZSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Gb2N1c0NoYW5nZSAoZXZ0KSB7XG4gICAgICAvLyB0aGUgZm9jdXMgaXMgbm90IGluIGEgdnVlIGNoaWxkIGNvbXBvbmVudFxuICAgICAgaWYgKFxuICAgICAgICBwcm9wcy5hbGxvd0ZvY3VzT3V0c2lkZSAhPT0gdHJ1ZVxuICAgICAgICAmJiBwb3J0YWxJc0FjY2Vzc2libGUudmFsdWUgPT09IHRydWVcbiAgICAgICAgJiYgY2hpbGRIYXNGb2N1cyhpbm5lclJlZi52YWx1ZSwgZXZ0LnRhcmdldCkgIT09IHRydWVcbiAgICAgICkge1xuICAgICAgICBmb2N1cygnW3RhYmluZGV4XTpub3QoW3RhYmluZGV4PVwiLTFcIl0pJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKHZtLnByb3h5LCB7XG4gICAgICAvLyBleHBvc2UgcHVibGljIG1ldGhvZHNcbiAgICAgIGZvY3VzLCBzaGFrZSxcblxuICAgICAgLy8gcHJpdmF0ZSBidXQgbmVlZGVkIGJ5IFFTZWxlY3RcbiAgICAgIF9fdXBkYXRlUmVmb2N1c1RhcmdldCAodGFyZ2V0KSB7XG4gICAgICAgIHJlZm9jdXNUYXJnZXQgPSB0YXJnZXQgfHwgbnVsbFxuICAgICAgfVxuICAgIH0pXG5cbiAgICBvbkJlZm9yZVVubW91bnQoY2xlYW51cClcblxuICAgIGZ1bmN0aW9uIHJlbmRlclBvcnRhbENvbnRlbnQgKCkge1xuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgcm9sZTogJ2RpYWxvZycsXG4gICAgICAgICdhcmlhLW1vZGFsJzogdXNlQmFja2Ryb3AudmFsdWUgPT09IHRydWUgPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgICAgICAuLi5hdHRycyxcbiAgICAgICAgY2xhc3M6IHJvb3RDbGFzc2VzLnZhbHVlXG4gICAgICB9LCBbXG4gICAgICAgIGgoVHJhbnNpdGlvbiwge1xuICAgICAgICAgIG5hbWU6ICdxLXRyYW5zaXRpb24tLWZhZGUnLFxuICAgICAgICAgIGFwcGVhcjogdHJ1ZVxuICAgICAgICB9LCAoKSA9PiAoXG4gICAgICAgICAgdXNlQmFja2Ryb3AudmFsdWUgPT09IHRydWVcbiAgICAgICAgICAgID8gaCgnZGl2Jywge1xuICAgICAgICAgICAgICBjbGFzczogJ3EtZGlhbG9nX19iYWNrZHJvcCBmaXhlZC1mdWxsJyxcbiAgICAgICAgICAgICAgc3R5bGU6IGJhY2tkcm9wU3R5bGUudmFsdWUsXG4gICAgICAgICAgICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJyxcbiAgICAgICAgICAgICAgdGFiaW5kZXg6IC0xLFxuICAgICAgICAgICAgICBvbkNsaWNrOiBvbkJhY2tkcm9wQ2xpY2tcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA6IG51bGxcbiAgICAgICAgKSksXG5cbiAgICAgICAgaChcbiAgICAgICAgICBUcmFuc2l0aW9uLFxuICAgICAgICAgIHRyYW5zaXRpb25Qcm9wcy52YWx1ZSxcbiAgICAgICAgICAoKSA9PiAoXG4gICAgICAgICAgICBzaG93aW5nLnZhbHVlID09PSB0cnVlXG4gICAgICAgICAgICAgID8gaCgnZGl2Jywge1xuICAgICAgICAgICAgICAgIHJlZjogaW5uZXJSZWYsXG4gICAgICAgICAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgICAgICAgICAgc3R5bGU6IHRyYW5zaXRpb25TdHlsZS52YWx1ZSxcbiAgICAgICAgICAgICAgICB0YWJpbmRleDogLTEsXG4gICAgICAgICAgICAgICAgLi4ub25FdmVudHMudmFsdWVcbiAgICAgICAgICAgICAgfSwgaFNsb3Qoc2xvdHMuZGVmYXVsdCkpXG4gICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgXSlcbiAgICB9XG5cbiAgICByZXR1cm4gcmVuZGVyUG9ydGFsXG4gIH1cbn0pXG4iLCJpbXBvcnQgeyBoLCByZWYsIGNvbXB1dGVkLCB3YXRjaCwgb25CZWZvcmVVcGRhdGUsIG9uVXBkYXRlZCwgb25CZWZvcmVVbm1vdW50LCBuZXh0VGljaywgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgUUZpZWxkIGZyb20gJy4uL2ZpZWxkL1FGaWVsZC5qcydcbmltcG9ydCBRSWNvbiBmcm9tICcuLi9pY29uL1FJY29uLmpzJ1xuaW1wb3J0IFFDaGlwIGZyb20gJy4uL2NoaXAvUUNoaXAuanMnXG5cbmltcG9ydCBRSXRlbSBmcm9tICcuLi9pdGVtL1FJdGVtLmpzJ1xuaW1wb3J0IFFJdGVtU2VjdGlvbiBmcm9tICcuLi9pdGVtL1FJdGVtU2VjdGlvbi5qcydcbmltcG9ydCBRSXRlbUxhYmVsIGZyb20gJy4uL2l0ZW0vUUl0ZW1MYWJlbC5qcydcblxuaW1wb3J0IFFNZW51IGZyb20gJy4uL21lbnUvUU1lbnUuanMnXG5pbXBvcnQgUURpYWxvZyBmcm9tICcuLi9kaWFsb2cvUURpYWxvZy5qcydcblxuaW1wb3J0IHVzZUZpZWxkLCB7IHVzZUZpZWxkU3RhdGUsIHVzZUZpZWxkUHJvcHMsIHVzZUZpZWxkRW1pdHMsIGZpZWxkVmFsdWVJc0ZpbGxlZCB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLWZpZWxkL3VzZS1maWVsZC5qcydcbmltcG9ydCB7IHVzZVZpcnR1YWxTY3JvbGwsIHVzZVZpcnR1YWxTY3JvbGxQcm9wcyB9IGZyb20gJy4uL3ZpcnR1YWwtc2Nyb2xsL3VzZS12aXJ0dWFsLXNjcm9sbC5qcydcbmltcG9ydCB7IHVzZUZvcm1Qcm9wcywgdXNlRm9ybUlucHV0TmFtZUF0dHIgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtZm9ybS9wcml2YXRlLnVzZS1mb3JtLmpzJ1xuaW1wb3J0IHVzZUtleUNvbXBvc2l0aW9uIGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLWtleS1jb21wb3NpdGlvbi91c2Uta2V5LWNvbXBvc2l0aW9uLmpzJ1xuXG5pbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmNyZWF0ZS9jcmVhdGUuanMnXG5pbXBvcnQgeyBpc0RlZXBFcXVhbCB9IGZyb20gJy4uLy4uL3V0aWxzL2lzL2lzLmpzJ1xuaW1wb3J0IHsgc3RvcCwgcHJldmVudCwgc3RvcEFuZFByZXZlbnQgfSBmcm9tICcuLi8uLi91dGlscy9ldmVudC9ldmVudC5qcydcbmltcG9ydCB7IG5vcm1hbGl6ZVRvSW50ZXJ2YWwgfSBmcm9tICcuLi8uLi91dGlscy9mb3JtYXQvZm9ybWF0LmpzJ1xuaW1wb3J0IHsgc2hvdWxkSWdub3JlS2V5LCBpc0tleUNvZGUgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmtleWJvYXJkL2tleS1jb21wb3NpdGlvbi5qcydcbmltcG9ydCB7IGhNZXJnZVNsb3QgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLnJlbmRlci9yZW5kZXIuanMnXG5cbmNvbnN0IHZhbGlkYXRlTmV3VmFsdWVNb2RlID0gdiA9PiBbICdhZGQnLCAnYWRkLXVuaXF1ZScsICd0b2dnbGUnIF0uaW5jbHVkZXModilcbmNvbnN0IHJlRXNjYXBlTGlzdCA9ICcuKis/XiR7fSgpfFtdXFxcXCdcbmNvbnN0IGZpZWxkUHJvcHNMaXN0ID0gT2JqZWN0LmtleXModXNlRmllbGRQcm9wcylcblxuZnVuY3Rpb24gZ2V0UHJvcFZhbHVlRm4gKHVzZXJQcm9wTmFtZSwgZGVmYXVsdFByb3BOYW1lKSB7XG4gIGlmICh0eXBlb2YgdXNlclByb3BOYW1lID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdXNlclByb3BOYW1lXG5cbiAgY29uc3QgcHJvcE5hbWUgPSB1c2VyUHJvcE5hbWUgIT09IHZvaWQgMFxuICAgID8gdXNlclByb3BOYW1lXG4gICAgOiBkZWZhdWx0UHJvcE5hbWVcblxuICByZXR1cm4gb3B0ID0+ICgob3B0ICE9PSBudWxsICYmIHR5cGVvZiBvcHQgPT09ICdvYmplY3QnICYmIHByb3BOYW1lIGluIG9wdCkgPyBvcHRbIHByb3BOYW1lIF0gOiBvcHQpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRU2VsZWN0JyxcblxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuXG4gIHByb3BzOiB7XG4gICAgLi4udXNlVmlydHVhbFNjcm9sbFByb3BzLFxuICAgIC4uLnVzZUZvcm1Qcm9wcyxcbiAgICAuLi51c2VGaWVsZFByb3BzLFxuXG4gICAgLy8gb3ZlcnJpZGUgb2YgdXNlRmllbGRQcm9wcyA+IG1vZGVsVmFsdWVcbiAgICBtb2RlbFZhbHVlOiB7XG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG5cbiAgICBtdWx0aXBsZTogQm9vbGVhbixcblxuICAgIGRpc3BsYXlWYWx1ZTogWyBTdHJpbmcsIE51bWJlciBdLFxuICAgIGRpc3BsYXlWYWx1ZUh0bWw6IEJvb2xlYW4sXG4gICAgZHJvcGRvd25JY29uOiBTdHJpbmcsXG5cbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gICAgfSxcblxuICAgIG9wdGlvblZhbHVlOiBbIEZ1bmN0aW9uLCBTdHJpbmcgXSxcbiAgICBvcHRpb25MYWJlbDogWyBGdW5jdGlvbiwgU3RyaW5nIF0sXG4gICAgb3B0aW9uRGlzYWJsZTogWyBGdW5jdGlvbiwgU3RyaW5nIF0sXG5cbiAgICBoaWRlU2VsZWN0ZWQ6IEJvb2xlYW4sXG4gICAgaGlkZURyb3Bkb3duSWNvbjogQm9vbGVhbixcbiAgICBmaWxsSW5wdXQ6IEJvb2xlYW4sXG5cbiAgICBtYXhWYWx1ZXM6IFsgTnVtYmVyLCBTdHJpbmcgXSxcblxuICAgIG9wdGlvbnNEZW5zZTogQm9vbGVhbixcbiAgICBvcHRpb25zRGFyazoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICB9LFxuICAgIG9wdGlvbnNTZWxlY3RlZENsYXNzOiBTdHJpbmcsXG4gICAgb3B0aW9uc0h0bWw6IEJvb2xlYW4sXG5cbiAgICBvcHRpb25zQ292ZXI6IEJvb2xlYW4sXG5cbiAgICBtZW51U2hyaW5rOiBCb29sZWFuLFxuICAgIG1lbnVBbmNob3I6IFN0cmluZyxcbiAgICBtZW51U2VsZjogU3RyaW5nLFxuICAgIG1lbnVPZmZzZXQ6IEFycmF5LFxuXG4gICAgcG9wdXBDb250ZW50Q2xhc3M6IFN0cmluZyxcbiAgICBwb3B1cENvbnRlbnRTdHlsZTogWyBTdHJpbmcsIEFycmF5LCBPYmplY3QgXSxcbiAgICBwb3B1cE5vUm91dGVEaXNtaXNzOiBCb29sZWFuLFxuXG4gICAgdXNlSW5wdXQ6IEJvb2xlYW4sXG4gICAgdXNlQ2hpcHM6IEJvb2xlYW4sXG5cbiAgICBuZXdWYWx1ZU1vZGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHZhbGlkYXRvcjogdmFsaWRhdGVOZXdWYWx1ZU1vZGVcbiAgICB9LFxuXG4gICAgbWFwT3B0aW9uczogQm9vbGVhbixcbiAgICBlbWl0VmFsdWU6IEJvb2xlYW4sXG5cbiAgICBkaXNhYmxlVGFiU2VsZWN0aW9uOiBCb29sZWFuLFxuXG4gICAgaW5wdXREZWJvdW5jZToge1xuICAgICAgdHlwZTogWyBOdW1iZXIsIFN0cmluZyBdLFxuICAgICAgZGVmYXVsdDogNTAwXG4gICAgfSxcblxuICAgIGlucHV0Q2xhc3M6IFsgQXJyYXksIFN0cmluZywgT2JqZWN0IF0sXG4gICAgaW5wdXRTdHlsZTogWyBBcnJheSwgU3RyaW5nLCBPYmplY3QgXSxcblxuICAgIHRhYmluZGV4OiB7XG4gICAgICB0eXBlOiBbIFN0cmluZywgTnVtYmVyIF0sXG4gICAgICBkZWZhdWx0OiAwXG4gICAgfSxcblxuICAgIGF1dG9jb21wbGV0ZTogU3RyaW5nLFxuXG4gICAgdHJhbnNpdGlvblNob3c6IHt9LFxuICAgIHRyYW5zaXRpb25IaWRlOiB7fSxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IHt9LFxuXG4gICAgYmVoYXZpb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHZhbGlkYXRvcjogdiA9PiBbICdkZWZhdWx0JywgJ21lbnUnLCAnZGlhbG9nJyBdLmluY2x1ZGVzKHYpLFxuICAgICAgZGVmYXVsdDogJ2RlZmF1bHQnXG4gICAgfSxcblxuICAgIC8vIG92ZXJyaWRlIG9mIHVzZVZpcnR1YWxTY3JvbGxQcm9wcyA+IHZpcnR1YWxTY3JvbGxJdGVtU2l6ZSAobm8gZGVmYXVsdClcbiAgICB2aXJ0dWFsU2Nyb2xsSXRlbVNpemU6IHVzZVZpcnR1YWxTY3JvbGxQcm9wcy52aXJ0dWFsU2Nyb2xsSXRlbVNpemUudHlwZSxcblxuICAgIG9uTmV3VmFsdWU6IEZ1bmN0aW9uLFxuICAgIG9uRmlsdGVyOiBGdW5jdGlvblxuICB9LFxuXG4gIGVtaXRzOiBbXG4gICAgLi4udXNlRmllbGRFbWl0cyxcbiAgICAnYWRkJywgJ3JlbW92ZScsICdpbnB1dFZhbHVlJyxcbiAgICAna2V5dXAnLCAna2V5cHJlc3MnLCAna2V5ZG93bicsXG4gICAgJ3BvcHVwU2hvdycsICdwb3B1cEhpZGUnLFxuICAgICdmaWx0ZXJBYm9ydCdcbiAgXSxcblxuICBzZXR1cCAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSkge1xuICAgIGNvbnN0IHsgcHJveHkgfSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpXG4gICAgY29uc3QgeyAkcSB9ID0gcHJveHlcblxuICAgIGNvbnN0IG1lbnUgPSByZWYoZmFsc2UpXG4gICAgY29uc3QgZGlhbG9nID0gcmVmKGZhbHNlKVxuICAgIGNvbnN0IG9wdGlvbkluZGV4ID0gcmVmKC0xKVxuICAgIGNvbnN0IGlucHV0VmFsdWUgPSByZWYoJycpXG4gICAgY29uc3QgZGlhbG9nRmllbGRGb2N1c2VkID0gcmVmKGZhbHNlKVxuICAgIGNvbnN0IGlubmVyTG9hZGluZ0luZGljYXRvciA9IHJlZihmYWxzZSlcblxuICAgIGxldCBmaWx0ZXJUaW1lciA9IG51bGwsIGlucHV0VmFsdWVUaW1lciA9IG51bGwsXG4gICAgICBpbm5lclZhbHVlQ2FjaGUsXG4gICAgICBoYXNEaWFsb2csIHVzZXJJbnB1dFZhbHVlLCBmaWx0ZXJJZCA9IG51bGwsIGRlZmF1bHRJbnB1dFZhbHVlLFxuICAgICAgdHJhbnNpdGlvblNob3dDb21wdXRlZCwgc2VhcmNoQnVmZmVyLCBzZWFyY2hCdWZmZXJFeHBcblxuICAgIGNvbnN0IGlucHV0UmVmID0gcmVmKG51bGwpXG4gICAgY29uc3QgdGFyZ2V0UmVmID0gcmVmKG51bGwpXG4gICAgY29uc3QgbWVudVJlZiA9IHJlZihudWxsKVxuICAgIGNvbnN0IGRpYWxvZ1JlZiA9IHJlZihudWxsKVxuICAgIGNvbnN0IG1lbnVDb250ZW50UmVmID0gcmVmKG51bGwpXG5cbiAgICBjb25zdCBuYW1lUHJvcCA9IHVzZUZvcm1JbnB1dE5hbWVBdHRyKHByb3BzKVxuXG4gICAgY29uc3Qgb25Db21wb3NpdGlvbiA9IHVzZUtleUNvbXBvc2l0aW9uKG9uSW5wdXQpXG5cbiAgICBjb25zdCB2aXJ0dWFsU2Nyb2xsTGVuZ3RoID0gY29tcHV0ZWQoKCkgPT4gKFxuICAgICAgQXJyYXkuaXNBcnJheShwcm9wcy5vcHRpb25zKVxuICAgICAgICA/IHByb3BzLm9wdGlvbnMubGVuZ3RoXG4gICAgICAgIDogMFxuICAgICkpXG5cbiAgICBjb25zdCB2aXJ0dWFsU2Nyb2xsSXRlbVNpemVDb21wdXRlZCA9IGNvbXB1dGVkKCgpID0+IChcbiAgICAgIHByb3BzLnZpcnR1YWxTY3JvbGxJdGVtU2l6ZSA9PT0gdm9pZCAwXG4gICAgICAgID8gKHByb3BzLm9wdGlvbnNEZW5zZSA9PT0gdHJ1ZSA/IDI0IDogNDgpXG4gICAgICAgIDogcHJvcHMudmlydHVhbFNjcm9sbEl0ZW1TaXplXG4gICAgKSlcblxuICAgIGNvbnN0IHtcbiAgICAgIHZpcnR1YWxTY3JvbGxTbGljZVJhbmdlLFxuICAgICAgdmlydHVhbFNjcm9sbFNsaWNlU2l6ZUNvbXB1dGVkLFxuICAgICAgbG9jYWxSZXNldFZpcnR1YWxTY3JvbGwsXG4gICAgICBwYWRWaXJ0dWFsU2Nyb2xsLFxuICAgICAgb25WaXJ0dWFsU2Nyb2xsRXZ0LFxuICAgICAgc2Nyb2xsVG8sXG4gICAgICBzZXRWaXJ0dWFsU2Nyb2xsU2l6ZVxuICAgIH0gPSB1c2VWaXJ0dWFsU2Nyb2xsKHtcbiAgICAgIHZpcnR1YWxTY3JvbGxMZW5ndGgsIGdldFZpcnR1YWxTY3JvbGxUYXJnZXQsIGdldFZpcnR1YWxTY3JvbGxFbCxcbiAgICAgIHZpcnR1YWxTY3JvbGxJdGVtU2l6ZUNvbXB1dGVkXG4gICAgfSlcblxuICAgIGNvbnN0IHN0YXRlID0gdXNlRmllbGRTdGF0ZSgpXG5cbiAgICBjb25zdCBpbm5lclZhbHVlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3RcbiAgICAgICAgbWFwTnVsbCA9IHByb3BzLm1hcE9wdGlvbnMgPT09IHRydWUgJiYgcHJvcHMubXVsdGlwbGUgIT09IHRydWUsXG4gICAgICAgIHZhbCA9IHByb3BzLm1vZGVsVmFsdWUgIT09IHZvaWQgMCAmJiAocHJvcHMubW9kZWxWYWx1ZSAhPT0gbnVsbCB8fCBtYXBOdWxsID09PSB0cnVlKVxuICAgICAgICAgID8gKHByb3BzLm11bHRpcGxlID09PSB0cnVlICYmIEFycmF5LmlzQXJyYXkocHJvcHMubW9kZWxWYWx1ZSkgPyBwcm9wcy5tb2RlbFZhbHVlIDogWyBwcm9wcy5tb2RlbFZhbHVlIF0pXG4gICAgICAgICAgOiBbXVxuXG4gICAgICBpZiAocHJvcHMubWFwT3B0aW9ucyA9PT0gdHJ1ZSAmJiBBcnJheS5pc0FycmF5KHByb3BzLm9wdGlvbnMpID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gcHJvcHMubWFwT3B0aW9ucyA9PT0gdHJ1ZSAmJiBpbm5lclZhbHVlQ2FjaGUgIT09IHZvaWQgMFxuICAgICAgICAgID8gaW5uZXJWYWx1ZUNhY2hlXG4gICAgICAgICAgOiBbXVxuICAgICAgICBjb25zdCB2YWx1ZXMgPSB2YWwubWFwKHYgPT4gZ2V0T3B0aW9uKHYsIGNhY2hlKSlcblxuICAgICAgICByZXR1cm4gcHJvcHMubW9kZWxWYWx1ZSA9PT0gbnVsbCAmJiBtYXBOdWxsID09PSB0cnVlXG4gICAgICAgICAgPyB2YWx1ZXMuZmlsdGVyKHYgPT4gdiAhPT0gbnVsbClcbiAgICAgICAgICA6IHZhbHVlc1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsXG4gICAgfSlcblxuICAgIGNvbnN0IGlubmVyRmllbGRQcm9wcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGFjYyA9IHt9XG4gICAgICBmaWVsZFByb3BzTGlzdC5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbCA9IHByb3BzWyBrZXkgXVxuICAgICAgICBpZiAodmFsICE9PSB2b2lkIDApIHtcbiAgICAgICAgICBhY2NbIGtleSBdID0gdmFsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICByZXR1cm4gYWNjXG4gICAgfSlcblxuICAgIGNvbnN0IGlzT3B0aW9uc0RhcmsgPSBjb21wdXRlZCgoKSA9PiAoXG4gICAgICBwcm9wcy5vcHRpb25zRGFyayA9PT0gbnVsbFxuICAgICAgICA/IHN0YXRlLmlzRGFyay52YWx1ZVxuICAgICAgICA6IHByb3BzLm9wdGlvbnNEYXJrXG4gICAgKSlcblxuICAgIGNvbnN0IGhhc1ZhbHVlID0gY29tcHV0ZWQoKCkgPT4gZmllbGRWYWx1ZUlzRmlsbGVkKGlubmVyVmFsdWUudmFsdWUpKVxuXG4gICAgY29uc3QgY29tcHV0ZWRJbnB1dENsYXNzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgbGV0IGNscyA9ICdxLWZpZWxkX19pbnB1dCBxLXBsYWNlaG9sZGVyIGNvbCdcblxuICAgICAgaWYgKHByb3BzLmhpZGVTZWxlY3RlZCA9PT0gdHJ1ZSB8fCBpbm5lclZhbHVlLnZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gWyBjbHMsIHByb3BzLmlucHV0Q2xhc3MgXVxuICAgICAgfVxuXG4gICAgICBjbHMgKz0gJyBxLWZpZWxkX19pbnB1dC0tcGFkZGluZydcblxuICAgICAgcmV0dXJuIHByb3BzLmlucHV0Q2xhc3MgPT09IHZvaWQgMFxuICAgICAgICA/IGNsc1xuICAgICAgICA6IFsgY2xzLCBwcm9wcy5pbnB1dENsYXNzIF1cbiAgICB9KVxuXG4gICAgY29uc3QgbWVudUNvbnRlbnRDbGFzcyA9IGNvbXB1dGVkKCgpID0+XG4gICAgICAocHJvcHMudmlydHVhbFNjcm9sbEhvcml6b250YWwgPT09IHRydWUgPyAncS12aXJ0dWFsLXNjcm9sbC0taG9yaXpvbnRhbCcgOiAnJylcbiAgICAgICsgKHByb3BzLnBvcHVwQ29udGVudENsYXNzID8gJyAnICsgcHJvcHMucG9wdXBDb250ZW50Q2xhc3MgOiAnJylcbiAgICApXG5cbiAgICBjb25zdCBub09wdGlvbnMgPSBjb21wdXRlZCgoKSA9PiB2aXJ0dWFsU2Nyb2xsTGVuZ3RoLnZhbHVlID09PSAwKVxuXG4gICAgY29uc3Qgc2VsZWN0ZWRTdHJpbmcgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgaW5uZXJWYWx1ZS52YWx1ZVxuICAgICAgICAubWFwKG9wdCA9PiBnZXRPcHRpb25MYWJlbC52YWx1ZShvcHQpKVxuICAgICAgICAuam9pbignLCAnKVxuICAgIClcblxuICAgIGNvbnN0IGFyaWFDdXJyZW50VmFsdWUgPSBjb21wdXRlZCgoKSA9PiAocHJvcHMuZGlzcGxheVZhbHVlICE9PSB2b2lkIDBcbiAgICAgID8gcHJvcHMuZGlzcGxheVZhbHVlXG4gICAgICA6IHNlbGVjdGVkU3RyaW5nLnZhbHVlXG4gICAgKSlcblxuICAgIGNvbnN0IG5lZWRzSHRtbEZuID0gY29tcHV0ZWQoKCkgPT4gKFxuICAgICAgcHJvcHMub3B0aW9uc0h0bWwgPT09IHRydWVcbiAgICAgICAgPyAoKSA9PiB0cnVlXG4gICAgICAgIDogb3B0ID0+IG9wdCAhPT0gdm9pZCAwICYmIG9wdCAhPT0gbnVsbCAmJiBvcHQuaHRtbCA9PT0gdHJ1ZVxuICAgICkpXG5cbiAgICBjb25zdCB2YWx1ZUFzSHRtbCA9IGNvbXB1dGVkKCgpID0+IChcbiAgICAgIHByb3BzLmRpc3BsYXlWYWx1ZUh0bWwgPT09IHRydWUgfHwgKFxuICAgICAgICBwcm9wcy5kaXNwbGF5VmFsdWUgPT09IHZvaWQgMCAmJiAoXG4gICAgICAgICAgcHJvcHMub3B0aW9uc0h0bWwgPT09IHRydWVcbiAgICAgICAgICB8fCBpbm5lclZhbHVlLnZhbHVlLnNvbWUobmVlZHNIdG1sRm4udmFsdWUpXG4gICAgICAgIClcbiAgICAgIClcbiAgICApKVxuXG4gICAgY29uc3QgdGFiaW5kZXggPSBjb21wdXRlZCgoKSA9PiAoc3RhdGUuZm9jdXNlZC52YWx1ZSA9PT0gdHJ1ZSA/IHByb3BzLnRhYmluZGV4IDogLTEpKVxuXG4gICAgY29uc3QgY29tYm9ib3hBdHRycyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGF0dHJzID0ge1xuICAgICAgICB0YWJpbmRleDogcHJvcHMudGFiaW5kZXgsXG4gICAgICAgIHJvbGU6ICdjb21ib2JveCcsXG4gICAgICAgICdhcmlhLWxhYmVsJzogcHJvcHMubGFiZWwsXG4gICAgICAgICdhcmlhLXJlYWRvbmx5JzogcHJvcHMucmVhZG9ubHkgPT09IHRydWUgPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgICAgICAnYXJpYS1hdXRvY29tcGxldGUnOiBwcm9wcy51c2VJbnB1dCA9PT0gdHJ1ZSA/ICdsaXN0JyA6ICdub25lJyxcbiAgICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBtZW51LnZhbHVlID09PSB0cnVlID8gJ3RydWUnIDogJ2ZhbHNlJyxcbiAgICAgICAgJ2FyaWEtY29udHJvbHMnOiBgJHsgc3RhdGUudGFyZ2V0VWlkLnZhbHVlIH1fbGJgXG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25JbmRleC52YWx1ZSA+PSAwKSB7XG4gICAgICAgIGF0dHJzWyAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JyBdID0gYCR7IHN0YXRlLnRhcmdldFVpZC52YWx1ZSB9XyR7IG9wdGlvbkluZGV4LnZhbHVlIH1gXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhdHRyc1xuICAgIH0pXG5cbiAgICBjb25zdCBsaXN0Ym94QXR0cnMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgaWQ6IGAkeyBzdGF0ZS50YXJnZXRVaWQudmFsdWUgfV9sYmAsXG4gICAgICByb2xlOiAnbGlzdGJveCcsXG4gICAgICAnYXJpYS1tdWx0aXNlbGVjdGFibGUnOiBwcm9wcy5tdWx0aXBsZSA9PT0gdHJ1ZSA/ICd0cnVlJyA6ICdmYWxzZSdcbiAgICB9KSlcblxuICAgIGNvbnN0IHNlbGVjdGVkU2NvcGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gaW5uZXJWYWx1ZS52YWx1ZS5tYXAoKG9wdCwgaSkgPT4gKHtcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIG9wdCxcbiAgICAgICAgaHRtbDogbmVlZHNIdG1sRm4udmFsdWUob3B0KSxcbiAgICAgICAgc2VsZWN0ZWQ6IHRydWUsXG4gICAgICAgIHJlbW92ZUF0SW5kZXg6IHJlbW92ZUF0SW5kZXhBbmRGb2N1cyxcbiAgICAgICAgdG9nZ2xlT3B0aW9uLFxuICAgICAgICB0YWJpbmRleDogdGFiaW5kZXgudmFsdWVcbiAgICAgIH0pKVxuICAgIH0pXG5cbiAgICBjb25zdCBvcHRpb25TY29wZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmICh2aXJ0dWFsU2Nyb2xsTGVuZ3RoLnZhbHVlID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbXVxuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGZyb20sIHRvIH0gPSB2aXJ0dWFsU2Nyb2xsU2xpY2VSYW5nZS52YWx1ZVxuXG4gICAgICByZXR1cm4gcHJvcHMub3B0aW9ucy5zbGljZShmcm9tLCB0bykubWFwKChvcHQsIGkpID0+IHtcbiAgICAgICAgY29uc3QgZGlzYWJsZSA9IGlzT3B0aW9uRGlzYWJsZWQudmFsdWUob3B0KSA9PT0gdHJ1ZVxuICAgICAgICBjb25zdCBhY3RpdmUgPSBpc09wdGlvblNlbGVjdGVkKG9wdCkgPT09IHRydWVcbiAgICAgICAgY29uc3QgaW5kZXggPSBmcm9tICsgaVxuXG4gICAgICAgIGNvbnN0IGl0ZW1Qcm9wcyA9IHtcbiAgICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgIGFjdGl2ZUNsYXNzOiBjb21wdXRlZE9wdGlvbnNTZWxlY3RlZENsYXNzLnZhbHVlLFxuICAgICAgICAgIG1hbnVhbEZvY3VzOiB0cnVlLFxuICAgICAgICAgIGZvY3VzZWQ6IGZhbHNlLFxuICAgICAgICAgIGRpc2FibGUsXG4gICAgICAgICAgdGFiaW5kZXg6IC0xLFxuICAgICAgICAgIGRlbnNlOiBwcm9wcy5vcHRpb25zRGVuc2UsXG4gICAgICAgICAgZGFyazogaXNPcHRpb25zRGFyay52YWx1ZSxcbiAgICAgICAgICByb2xlOiAnb3B0aW9uJyxcbiAgICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IGFjdGl2ZSA9PT0gdHJ1ZSA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICAgICAgaWQ6IGAkeyBzdGF0ZS50YXJnZXRVaWQudmFsdWUgfV8keyBpbmRleCB9YCxcbiAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB7IHRvZ2dsZU9wdGlvbihvcHQpIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXNhYmxlICE9PSB0cnVlKSB7XG4gICAgICAgICAgb3B0aW9uSW5kZXgudmFsdWUgPT09IGluZGV4ICYmIChpdGVtUHJvcHMuZm9jdXNlZCA9IHRydWUpXG5cbiAgICAgICAgICBpZiAoJHEucGxhdGZvcm0uaXMuZGVza3RvcCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaXRlbVByb3BzLm9uTW91c2Vtb3ZlID0gKCkgPT4geyBtZW51LnZhbHVlID09PSB0cnVlICYmIHNldE9wdGlvbkluZGV4KGluZGV4KSB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpbmRleCxcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgaHRtbDogbmVlZHNIdG1sRm4udmFsdWUob3B0KSxcbiAgICAgICAgICBsYWJlbDogZ2V0T3B0aW9uTGFiZWwudmFsdWUob3B0KSxcbiAgICAgICAgICBzZWxlY3RlZDogaXRlbVByb3BzLmFjdGl2ZSxcbiAgICAgICAgICBmb2N1c2VkOiBpdGVtUHJvcHMuZm9jdXNlZCxcbiAgICAgICAgICB0b2dnbGVPcHRpb24sXG4gICAgICAgICAgc2V0T3B0aW9uSW5kZXgsXG4gICAgICAgICAgaXRlbVByb3BzXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGNvbnN0IGRyb3Bkb3duQXJyb3dJY29uID0gY29tcHV0ZWQoKCkgPT4gKFxuICAgICAgcHJvcHMuZHJvcGRvd25JY29uICE9PSB2b2lkIDBcbiAgICAgICAgPyBwcm9wcy5kcm9wZG93bkljb25cbiAgICAgICAgOiAkcS5pY29uU2V0LmFycm93LmRyb3Bkb3duXG4gICAgKSlcblxuICAgIGNvbnN0IHNxdWFyZWRNZW51ID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgIHByb3BzLm9wdGlvbnNDb3ZlciA9PT0gZmFsc2VcbiAgICAgICYmIHByb3BzLm91dGxpbmVkICE9PSB0cnVlXG4gICAgICAmJiBwcm9wcy5zdGFuZG91dCAhPT0gdHJ1ZVxuICAgICAgJiYgcHJvcHMuYm9yZGVybGVzcyAhPT0gdHJ1ZVxuICAgICAgJiYgcHJvcHMucm91bmRlZCAhPT0gdHJ1ZVxuICAgIClcblxuICAgIGNvbnN0IGNvbXB1dGVkT3B0aW9uc1NlbGVjdGVkQ2xhc3MgPSBjb21wdXRlZCgoKSA9PiAoXG4gICAgICBwcm9wcy5vcHRpb25zU2VsZWN0ZWRDbGFzcyAhPT0gdm9pZCAwXG4gICAgICAgID8gcHJvcHMub3B0aW9uc1NlbGVjdGVkQ2xhc3NcbiAgICAgICAgOiAocHJvcHMuY29sb3IgIT09IHZvaWQgMCA/IGB0ZXh0LSR7IHByb3BzLmNvbG9yIH1gIDogJycpXG4gICAgKSlcblxuICAgIC8vIHJldHVybnMgbWV0aG9kIHRvIGdldCB2YWx1ZSBvZiBhbiBvcHRpb247XG4gICAgLy8gdGFrZXMgaW50byBhY2NvdW50ICdvcHRpb24tdmFsdWUnIHByb3BcbiAgICBjb25zdCBnZXRPcHRpb25WYWx1ZSA9IGNvbXB1dGVkKCgpID0+IGdldFByb3BWYWx1ZUZuKHByb3BzLm9wdGlvblZhbHVlLCAndmFsdWUnKSlcblxuICAgIC8vIHJldHVybnMgbWV0aG9kIHRvIGdldCBsYWJlbCBvZiBhbiBvcHRpb247XG4gICAgLy8gdGFrZXMgaW50byBhY2NvdW50ICdvcHRpb24tbGFiZWwnIHByb3BcbiAgICBjb25zdCBnZXRPcHRpb25MYWJlbCA9IGNvbXB1dGVkKCgpID0+IGdldFByb3BWYWx1ZUZuKHByb3BzLm9wdGlvbkxhYmVsLCAnbGFiZWwnKSlcblxuICAgIC8vIHJldHVybnMgbWV0aG9kIHRvIHRlbGwgaWYgYW4gb3B0aW9uIGlzIGRpc2FibGVkO1xuICAgIC8vIHRha2VzIGludG8gYWNjb3VudCAnb3B0aW9uLWRpc2FibGUnIHByb3BcbiAgICBjb25zdCBpc09wdGlvbkRpc2FibGVkID0gY29tcHV0ZWQoKCkgPT4gZ2V0UHJvcFZhbHVlRm4ocHJvcHMub3B0aW9uRGlzYWJsZSwgJ2Rpc2FibGUnKSlcblxuICAgIGNvbnN0IGlubmVyT3B0aW9uc1ZhbHVlID0gY29tcHV0ZWQoKCkgPT4gaW5uZXJWYWx1ZS52YWx1ZS5tYXAoZ2V0T3B0aW9uVmFsdWUudmFsdWUpKVxuXG4gICAgY29uc3QgaW5wdXRDb250cm9sRXZlbnRzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgZXZ0ID0ge1xuICAgICAgICBvbklucHV0LFxuICAgICAgICAvLyBTYWZhcmkgPCAxMC4yICYgVUlXZWJWaWV3IGRvZXNuJ3QgZmlyZSBjb21wb3NpdGlvbmVuZCB3aGVuXG4gICAgICAgIC8vIHN3aXRjaGluZyBmb2N1cyBiZWZvcmUgY29uZmlybWluZyBjb21wb3NpdGlvbiBjaG9pY2VcbiAgICAgICAgLy8gdGhpcyBhbHNvIGZpeGVzIHRoZSBpc3N1ZSB3aGVyZSBzb21lIGJyb3dzZXJzIGUuZy4gaU9TIENocm9tZVxuICAgICAgICAvLyBmaXJlcyBcImNoYW5nZVwiIGluc3RlYWQgb2YgXCJpbnB1dFwiIG9uIGF1dG9jb21wbGV0ZS5cbiAgICAgICAgb25DaGFuZ2U6IG9uQ29tcG9zaXRpb24sXG4gICAgICAgIG9uS2V5ZG93bjogb25UYXJnZXRLZXlkb3duLFxuICAgICAgICBvbktleXVwOiBvblRhcmdldEF1dG9jb21wbGV0ZSxcbiAgICAgICAgb25LZXlwcmVzczogb25UYXJnZXRLZXlwcmVzcyxcbiAgICAgICAgb25Gb2N1czogc2VsZWN0SW5wdXRUZXh0LFxuICAgICAgICBvbkNsaWNrIChlKSB7IGhhc0RpYWxvZyA9PT0gdHJ1ZSAmJiBzdG9wKGUpIH1cbiAgICAgIH1cblxuICAgICAgZXZ0Lm9uQ29tcG9zaXRpb25zdGFydCA9IGV2dC5vbkNvbXBvc2l0aW9udXBkYXRlID0gZXZ0Lm9uQ29tcG9zaXRpb25lbmQgPSBvbkNvbXBvc2l0aW9uXG5cbiAgICAgIHJldHVybiBldnRcbiAgICB9KVxuXG4gICAgd2F0Y2goaW5uZXJWYWx1ZSwgdmFsID0+IHtcbiAgICAgIGlubmVyVmFsdWVDYWNoZSA9IHZhbFxuXG4gICAgICBpZiAoXG4gICAgICAgIHByb3BzLnVzZUlucHV0ID09PSB0cnVlXG4gICAgICAgICYmIHByb3BzLmZpbGxJbnB1dCA9PT0gdHJ1ZVxuICAgICAgICAmJiBwcm9wcy5tdWx0aXBsZSAhPT0gdHJ1ZVxuICAgICAgICAvLyBQcmV2ZW50IHJlLWVudGVyaW5nIGluIGZpbHRlciB3aGlsZSBmaWx0ZXJpbmdcbiAgICAgICAgLy8gQWxzbyBwcmV2ZW50IGNsZWFyaW5nIGlucHV0VmFsdWUgd2hpbGUgZmlsdGVyaW5nXG4gICAgICAgICYmIHN0YXRlLmlubmVyTG9hZGluZy52YWx1ZSAhPT0gdHJ1ZVxuICAgICAgICAmJiAoKGRpYWxvZy52YWx1ZSAhPT0gdHJ1ZSAmJiBtZW51LnZhbHVlICE9PSB0cnVlKSB8fCBoYXNWYWx1ZS52YWx1ZSAhPT0gdHJ1ZSlcbiAgICAgICkge1xuICAgICAgICB1c2VySW5wdXRWYWx1ZSAhPT0gdHJ1ZSAmJiByZXNldElucHV0VmFsdWUoKVxuICAgICAgICBpZiAoZGlhbG9nLnZhbHVlID09PSB0cnVlIHx8IG1lbnUudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICBmaWx0ZXIoJycpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7IGltbWVkaWF0ZTogdHJ1ZSB9KVxuXG4gICAgd2F0Y2goKCkgPT4gcHJvcHMuZmlsbElucHV0LCByZXNldElucHV0VmFsdWUpXG5cbiAgICB3YXRjaChtZW51LCB1cGRhdGVNZW51KVxuXG4gICAgd2F0Y2godmlydHVhbFNjcm9sbExlbmd0aCwgcmVyZW5kZXJNZW51KVxuXG4gICAgZnVuY3Rpb24gZ2V0RW1pdHRpbmdPcHRpb25WYWx1ZSAob3B0KSB7XG4gICAgICByZXR1cm4gcHJvcHMuZW1pdFZhbHVlID09PSB0cnVlXG4gICAgICAgID8gZ2V0T3B0aW9uVmFsdWUudmFsdWUob3B0KVxuICAgICAgICA6IG9wdFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUF0SW5kZXggKGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXggIT09IC0xICYmIGluZGV4IDwgaW5uZXJWYWx1ZS52YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHByb3BzLm11bHRpcGxlID09PSB0cnVlKSB7XG4gICAgICAgICAgY29uc3QgbW9kZWwgPSBwcm9wcy5tb2RlbFZhbHVlLnNsaWNlKClcbiAgICAgICAgICBlbWl0KCdyZW1vdmUnLCB7IGluZGV4LCB2YWx1ZTogbW9kZWwuc3BsaWNlKGluZGV4LCAxKVsgMCBdIH0pXG4gICAgICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCBtb2RlbClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIG51bGwpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVBdEluZGV4QW5kRm9jdXMgKGluZGV4KSB7XG4gICAgICByZW1vdmVBdEluZGV4KGluZGV4KVxuICAgICAgc3RhdGUuZm9jdXMoKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZCAob3B0LCB1bmlxdWUpIHtcbiAgICAgIGNvbnN0IHZhbCA9IGdldEVtaXR0aW5nT3B0aW9uVmFsdWUob3B0KVxuXG4gICAgICBpZiAocHJvcHMubXVsdGlwbGUgIT09IHRydWUpIHtcbiAgICAgICAgcHJvcHMuZmlsbElucHV0ID09PSB0cnVlICYmIHVwZGF0ZUlucHV0VmFsdWUoXG4gICAgICAgICAgZ2V0T3B0aW9uTGFiZWwudmFsdWUob3B0KSxcbiAgICAgICAgICB0cnVlLFxuICAgICAgICAgIHRydWVcbiAgICAgICAgKVxuXG4gICAgICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgdmFsKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKGlubmVyVmFsdWUudmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGVtaXQoJ2FkZCcsIHsgaW5kZXg6IDAsIHZhbHVlOiB2YWwgfSlcbiAgICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCBwcm9wcy5tdWx0aXBsZSA9PT0gdHJ1ZSA/IFsgdmFsIF0gOiB2YWwpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAodW5pcXVlID09PSB0cnVlICYmIGlzT3B0aW9uU2VsZWN0ZWQob3B0KSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BzLm1heFZhbHVlcyAhPT0gdm9pZCAwICYmIHByb3BzLm1vZGVsVmFsdWUubGVuZ3RoID49IHByb3BzLm1heFZhbHVlcykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgbW9kZWwgPSBwcm9wcy5tb2RlbFZhbHVlLnNsaWNlKClcblxuICAgICAgZW1pdCgnYWRkJywgeyBpbmRleDogbW9kZWwubGVuZ3RoLCB2YWx1ZTogdmFsIH0pXG4gICAgICBtb2RlbC5wdXNoKHZhbClcbiAgICAgIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgbW9kZWwpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9nZ2xlT3B0aW9uIChvcHQsIGtlZXBPcGVuKSB7XG4gICAgICBpZiAoc3RhdGUuZWRpdGFibGUudmFsdWUgIT09IHRydWUgfHwgb3B0ID09PSB2b2lkIDAgfHwgaXNPcHRpb25EaXNhYmxlZC52YWx1ZShvcHQpID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zdCBvcHRWYWx1ZSA9IGdldE9wdGlvblZhbHVlLnZhbHVlKG9wdClcblxuICAgICAgaWYgKHByb3BzLm11bHRpcGxlICE9PSB0cnVlKSB7XG4gICAgICAgIGlmIChrZWVwT3BlbiAhPT0gdHJ1ZSkge1xuICAgICAgICAgIHVwZGF0ZUlucHV0VmFsdWUoXG4gICAgICAgICAgICBwcm9wcy5maWxsSW5wdXQgPT09IHRydWUgPyBnZXRPcHRpb25MYWJlbC52YWx1ZShvcHQpIDogJycsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgIClcblxuICAgICAgICAgIGhpZGVQb3B1cCgpXG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXRSZWYudmFsdWUgIT09IG51bGwgJiYgdGFyZ2V0UmVmLnZhbHVlLmZvY3VzKClcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgaW5uZXJWYWx1ZS52YWx1ZS5sZW5ndGggPT09IDBcbiAgICAgICAgICB8fCBpc0RlZXBFcXVhbChnZXRPcHRpb25WYWx1ZS52YWx1ZShpbm5lclZhbHVlLnZhbHVlWyAwIF0pLCBvcHRWYWx1ZSkgIT09IHRydWVcbiAgICAgICAgKSB7XG4gICAgICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCBwcm9wcy5lbWl0VmFsdWUgPT09IHRydWUgPyBvcHRWYWx1ZSA6IG9wdClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgKGhhc0RpYWxvZyAhPT0gdHJ1ZSB8fCBkaWFsb2dGaWVsZEZvY3VzZWQudmFsdWUgPT09IHRydWUpICYmIHN0YXRlLmZvY3VzKClcblxuICAgICAgc2VsZWN0SW5wdXRUZXh0KClcblxuICAgICAgaWYgKGlubmVyVmFsdWUudmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnN0IHZhbCA9IHByb3BzLmVtaXRWYWx1ZSA9PT0gdHJ1ZSA/IG9wdFZhbHVlIDogb3B0XG4gICAgICAgIGVtaXQoJ2FkZCcsIHsgaW5kZXg6IDAsIHZhbHVlOiB2YWwgfSlcbiAgICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCBwcm9wcy5tdWx0aXBsZSA9PT0gdHJ1ZSA/IFsgdmFsIF0gOiB2YWwpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zdFxuICAgICAgICBtb2RlbCA9IHByb3BzLm1vZGVsVmFsdWUuc2xpY2UoKSxcbiAgICAgICAgaW5kZXggPSBpbm5lck9wdGlvbnNWYWx1ZS52YWx1ZS5maW5kSW5kZXgodiA9PiBpc0RlZXBFcXVhbCh2LCBvcHRWYWx1ZSkpXG5cbiAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgZW1pdCgncmVtb3ZlJywgeyBpbmRleCwgdmFsdWU6IG1vZGVsLnNwbGljZShpbmRleCwgMSlbIDAgXSB9KVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChwcm9wcy5tYXhWYWx1ZXMgIT09IHZvaWQgMCAmJiBtb2RlbC5sZW5ndGggPj0gcHJvcHMubWF4VmFsdWVzKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB2YWwgPSBwcm9wcy5lbWl0VmFsdWUgPT09IHRydWUgPyBvcHRWYWx1ZSA6IG9wdFxuXG4gICAgICAgIGVtaXQoJ2FkZCcsIHsgaW5kZXg6IG1vZGVsLmxlbmd0aCwgdmFsdWU6IHZhbCB9KVxuICAgICAgICBtb2RlbC5wdXNoKHZhbClcbiAgICAgIH1cblxuICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCBtb2RlbClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPcHRpb25JbmRleCAoaW5kZXgpIHtcbiAgICAgIGlmICgkcS5wbGF0Zm9ybS5pcy5kZXNrdG9wICE9PSB0cnVlKSByZXR1cm5cblxuICAgICAgY29uc3QgdmFsID0gaW5kZXggIT09IC0xICYmIGluZGV4IDwgdmlydHVhbFNjcm9sbExlbmd0aC52YWx1ZVxuICAgICAgICA/IGluZGV4XG4gICAgICAgIDogLTFcblxuICAgICAgaWYgKG9wdGlvbkluZGV4LnZhbHVlICE9PSB2YWwpIHtcbiAgICAgICAgb3B0aW9uSW5kZXgudmFsdWUgPSB2YWxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3ZlT3B0aW9uU2VsZWN0aW9uIChvZmZzZXQgPSAxLCBza2lwSW5wdXRWYWx1ZSkge1xuICAgICAgaWYgKG1lbnUudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gb3B0aW9uSW5kZXgudmFsdWVcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGluZGV4ID0gbm9ybWFsaXplVG9JbnRlcnZhbChcbiAgICAgICAgICAgIGluZGV4ICsgb2Zmc2V0LFxuICAgICAgICAgICAgLTEsXG4gICAgICAgICAgICB2aXJ0dWFsU2Nyb2xsTGVuZ3RoLnZhbHVlIC0gMVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kZXggIT09IC0xICYmIGluZGV4ICE9PSBvcHRpb25JbmRleC52YWx1ZSAmJiBpc09wdGlvbkRpc2FibGVkLnZhbHVlKHByb3BzLm9wdGlvbnNbIGluZGV4IF0pID09PSB0cnVlKVxuXG4gICAgICAgIGlmIChvcHRpb25JbmRleC52YWx1ZSAhPT0gaW5kZXgpIHtcbiAgICAgICAgICBzZXRPcHRpb25JbmRleChpbmRleClcbiAgICAgICAgICBzY3JvbGxUbyhpbmRleClcblxuICAgICAgICAgIGlmIChza2lwSW5wdXRWYWx1ZSAhPT0gdHJ1ZSAmJiBwcm9wcy51c2VJbnB1dCA9PT0gdHJ1ZSAmJiBwcm9wcy5maWxsSW5wdXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHNldElucHV0VmFsdWUoXG4gICAgICAgICAgICAgIGluZGV4ID49IDBcbiAgICAgICAgICAgICAgICA/IGdldE9wdGlvbkxhYmVsLnZhbHVlKHByb3BzLm9wdGlvbnNbIGluZGV4IF0pXG4gICAgICAgICAgICAgICAgOiBkZWZhdWx0SW5wdXRWYWx1ZSxcbiAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldE9wdGlvbiAodmFsdWUsIHZhbHVlQ2FjaGUpIHtcbiAgICAgIGNvbnN0IGZuID0gb3B0ID0+IGlzRGVlcEVxdWFsKGdldE9wdGlvblZhbHVlLnZhbHVlKG9wdCksIHZhbHVlKVxuICAgICAgcmV0dXJuIHByb3BzLm9wdGlvbnMuZmluZChmbikgfHwgdmFsdWVDYWNoZS5maW5kKGZuKSB8fCB2YWx1ZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT3B0aW9uU2VsZWN0ZWQgKG9wdCkge1xuICAgICAgY29uc3QgdmFsID0gZ2V0T3B0aW9uVmFsdWUudmFsdWUob3B0KVxuICAgICAgcmV0dXJuIGlubmVyT3B0aW9uc1ZhbHVlLnZhbHVlLmZpbmQodiA9PiBpc0RlZXBFcXVhbCh2LCB2YWwpKSAhPT0gdm9pZCAwXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VsZWN0SW5wdXRUZXh0IChlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHByb3BzLnVzZUlucHV0ID09PSB0cnVlXG4gICAgICAgICYmIHRhcmdldFJlZi52YWx1ZSAhPT0gbnVsbFxuICAgICAgICAmJiAoZSA9PT0gdm9pZCAwIHx8ICh0YXJnZXRSZWYudmFsdWUgPT09IGUudGFyZ2V0ICYmIGUudGFyZ2V0LnZhbHVlID09PSBzZWxlY3RlZFN0cmluZy52YWx1ZSkpXG4gICAgICApIHtcbiAgICAgICAgdGFyZ2V0UmVmLnZhbHVlLnNlbGVjdCgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25UYXJnZXRLZXl1cCAoZSkge1xuICAgICAgLy8gaWYgRVNDIGFuZCB3ZSBoYXZlIGFuIG9wZW5lZCBtZW51XG4gICAgICAvLyB0aGVuIHN0b3AgcHJvcGFnYXRpb24gKG1pZ2h0IGJlIGNhdWdodCBieSBhIFFEaWFsb2dcbiAgICAgIC8vIGFuZCBzbyBpdCB3aWxsIGFsc28gY2xvc2UgdGhlIFFEaWFsb2csIHdoaWNoIGlzIHdyb25nKVxuICAgICAgaWYgKGlzS2V5Q29kZShlLCAyNykgPT09IHRydWUgJiYgbWVudS52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICBzdG9wKGUpXG4gICAgICAgIC8vIG9uIEVTQyB3ZSBuZWVkIHRvIGNsb3NlIHRoZSBkaWFsb2cgYWxzb1xuICAgICAgICBoaWRlUG9wdXAoKVxuICAgICAgICByZXNldElucHV0VmFsdWUoKVxuICAgICAgfVxuXG4gICAgICBlbWl0KCdrZXl1cCcsIGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25UYXJnZXRBdXRvY29tcGxldGUgKGUpIHtcbiAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IGUudGFyZ2V0XG5cbiAgICAgIGlmIChlLmtleUNvZGUgIT09IHZvaWQgMCkge1xuICAgICAgICBvblRhcmdldEtleXVwKGUpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBlLnRhcmdldC52YWx1ZSA9ICcnXG5cbiAgICAgIGlmIChmaWx0ZXJUaW1lciAhPT0gbnVsbCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoZmlsdGVyVGltZXIpXG4gICAgICAgIGZpbHRlclRpbWVyID0gbnVsbFxuICAgICAgfVxuICAgICAgaWYgKGlucHV0VmFsdWVUaW1lciAhPT0gbnVsbCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoaW5wdXRWYWx1ZVRpbWVyKVxuICAgICAgICBpbnB1dFZhbHVlVGltZXIgPSBudWxsXG4gICAgICB9XG5cbiAgICAgIHJlc2V0SW5wdXRWYWx1ZSgpXG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zdCBuZWVkbGUgPSB2YWx1ZS50b0xvY2FsZUxvd2VyQ2FzZSgpXG4gICAgICAgIGNvbnN0IGZpbmRGbiA9IGV4dHJhY3RGbiA9PiB7XG4gICAgICAgICAgY29uc3Qgb3B0aW9uID0gcHJvcHMub3B0aW9ucy5maW5kKG9wdCA9PiBTdHJpbmcoZXh0cmFjdEZuLnZhbHVlKG9wdCkpLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IG5lZWRsZSlcblxuICAgICAgICAgIGlmIChvcHRpb24gPT09IHZvaWQgMCkgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgICBpZiAoaW5uZXJWYWx1ZS52YWx1ZS5pbmRleE9mKG9wdGlvbikgPT09IC0xKSB7XG4gICAgICAgICAgICB0b2dnbGVPcHRpb24ob3B0aW9uKVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhpZGVQb3B1cCgpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWxsRm4gPSBhZnRlckZpbHRlciA9PiB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgZmluZEZuKGdldE9wdGlvblZhbHVlKSAhPT0gdHJ1ZVxuICAgICAgICAgICAgJiYgYWZ0ZXJGaWx0ZXIgIT09IHRydWVcbiAgICAgICAgICAgICYmIGZpbmRGbihnZXRPcHRpb25MYWJlbCkgIT09IHRydWVcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGZpbHRlcih2YWx1ZSwgdHJ1ZSwgKCkgPT4gZmlsbEZuKHRydWUpKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZpbGxGbigpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RhdGUuY2xlYXJWYWx1ZShlKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uVGFyZ2V0S2V5cHJlc3MgKGUpIHtcbiAgICAgIGVtaXQoJ2tleXByZXNzJywgZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblRhcmdldEtleWRvd24gKGUpIHtcbiAgICAgIGVtaXQoJ2tleWRvd24nLCBlKVxuXG4gICAgICBpZiAoc2hvdWxkSWdub3JlS2V5KGUpID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zdCBuZXdWYWx1ZU1vZGVWYWxpZCA9IGlucHV0VmFsdWUudmFsdWUubGVuZ3RoICE9PSAwXG4gICAgICAgICYmIChwcm9wcy5uZXdWYWx1ZU1vZGUgIT09IHZvaWQgMCB8fCBwcm9wcy5vbk5ld1ZhbHVlICE9PSB2b2lkIDApXG5cbiAgICAgIGNvbnN0IHRhYlNob3VsZFNlbGVjdCA9IGUuc2hpZnRLZXkgIT09IHRydWVcbiAgICAgICAgJiYgcHJvcHMuZGlzYWJsZVRhYlNlbGVjdGlvbiAhPT0gdHJ1ZVxuICAgICAgICAmJiBwcm9wcy5tdWx0aXBsZSAhPT0gdHJ1ZVxuICAgICAgICAmJiAob3B0aW9uSW5kZXgudmFsdWUgIT09IC0xIHx8IG5ld1ZhbHVlTW9kZVZhbGlkID09PSB0cnVlKVxuXG4gICAgICAvLyBlc2NhcGVcbiAgICAgIGlmIChlLmtleUNvZGUgPT09IDI3KSB7XG4gICAgICAgIHByZXZlbnQoZSkgLy8gcHJldmVudCBjbGVhcmluZyB0aGUgaW5wdXRWYWx1ZVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gdGFiXG4gICAgICBpZiAoZS5rZXlDb2RlID09PSA5ICYmIHRhYlNob3VsZFNlbGVjdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgY2xvc2VNZW51KClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgZS50YXJnZXQgPT09IHZvaWQgMFxuICAgICAgICB8fCBlLnRhcmdldC5pZCAhPT0gc3RhdGUudGFyZ2V0VWlkLnZhbHVlXG4gICAgICAgIHx8IHN0YXRlLmVkaXRhYmxlLnZhbHVlICE9PSB0cnVlXG4gICAgICApIHJldHVyblxuXG4gICAgICAvLyBkb3duXG4gICAgICBpZiAoXG4gICAgICAgIGUua2V5Q29kZSA9PT0gNDBcbiAgICAgICAgJiYgc3RhdGUuaW5uZXJMb2FkaW5nLnZhbHVlICE9PSB0cnVlXG4gICAgICAgICYmIG1lbnUudmFsdWUgPT09IGZhbHNlXG4gICAgICApIHtcbiAgICAgICAgc3RvcEFuZFByZXZlbnQoZSlcbiAgICAgICAgc2hvd1BvcHVwKClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIC8vIGJhY2tzcGFjZVxuICAgICAgaWYgKFxuICAgICAgICBlLmtleUNvZGUgPT09IDhcbiAgICAgICAgJiYgKFxuICAgICAgICAgIHByb3BzLnVzZUNoaXBzID09PSB0cnVlXG4gICAgICAgICAgfHwgcHJvcHMuY2xlYXJhYmxlID09PSB0cnVlXG4gICAgICAgIClcbiAgICAgICAgJiYgcHJvcHMuaGlkZVNlbGVjdGVkICE9PSB0cnVlXG4gICAgICAgICYmIGlucHV0VmFsdWUudmFsdWUubGVuZ3RoID09PSAwXG4gICAgICApIHtcbiAgICAgICAgaWYgKHByb3BzLm11bHRpcGxlID09PSB0cnVlICYmIEFycmF5LmlzQXJyYXkocHJvcHMubW9kZWxWYWx1ZSkgPT09IHRydWUpIHtcbiAgICAgICAgICByZW1vdmVBdEluZGV4KHByb3BzLm1vZGVsVmFsdWUubGVuZ3RoIC0gMSlcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcm9wcy5tdWx0aXBsZSAhPT0gdHJ1ZSAmJiBwcm9wcy5tb2RlbFZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCBudWxsKVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyBob21lLCBlbmQgLSAzNiwgMzVcbiAgICAgIGlmIChcbiAgICAgICAgKGUua2V5Q29kZSA9PT0gMzUgfHwgZS5rZXlDb2RlID09PSAzNilcbiAgICAgICAgJiYgKHR5cGVvZiBpbnB1dFZhbHVlLnZhbHVlICE9PSAnc3RyaW5nJyB8fCBpbnB1dFZhbHVlLnZhbHVlLmxlbmd0aCA9PT0gMClcbiAgICAgICkge1xuICAgICAgICBzdG9wQW5kUHJldmVudChlKVxuICAgICAgICBvcHRpb25JbmRleC52YWx1ZSA9IC0xXG4gICAgICAgIG1vdmVPcHRpb25TZWxlY3Rpb24oZS5rZXlDb2RlID09PSAzNiA/IDEgOiAtMSwgcHJvcHMubXVsdGlwbGUpXG4gICAgICB9XG5cbiAgICAgIC8vIHBnIHVwLCBwZyBkb3duIC0gMzMsIDM0XG4gICAgICBpZiAoXG4gICAgICAgIChlLmtleUNvZGUgPT09IDMzIHx8IGUua2V5Q29kZSA9PT0gMzQpXG4gICAgICAgICYmIHZpcnR1YWxTY3JvbGxTbGljZVNpemVDb21wdXRlZC52YWx1ZSAhPT0gdm9pZCAwXG4gICAgICApIHtcbiAgICAgICAgc3RvcEFuZFByZXZlbnQoZSlcbiAgICAgICAgb3B0aW9uSW5kZXgudmFsdWUgPSBNYXRoLm1heChcbiAgICAgICAgICAtMSxcbiAgICAgICAgICBNYXRoLm1pbihcbiAgICAgICAgICAgIHZpcnR1YWxTY3JvbGxMZW5ndGgudmFsdWUsXG4gICAgICAgICAgICBvcHRpb25JbmRleC52YWx1ZSArIChlLmtleUNvZGUgPT09IDMzID8gLTEgOiAxKSAqIHZpcnR1YWxTY3JvbGxTbGljZVNpemVDb21wdXRlZC52YWx1ZS52aWV3XG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICAgIG1vdmVPcHRpb25TZWxlY3Rpb24oZS5rZXlDb2RlID09PSAzMyA/IDEgOiAtMSwgcHJvcHMubXVsdGlwbGUpXG4gICAgICB9XG5cbiAgICAgIC8vIHVwLCBkb3duXG4gICAgICBpZiAoZS5rZXlDb2RlID09PSAzOCB8fCBlLmtleUNvZGUgPT09IDQwKSB7XG4gICAgICAgIHN0b3BBbmRQcmV2ZW50KGUpXG4gICAgICAgIG1vdmVPcHRpb25TZWxlY3Rpb24oZS5rZXlDb2RlID09PSAzOCA/IC0xIDogMSwgcHJvcHMubXVsdGlwbGUpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG9wdGlvbnNMZW5ndGggPSB2aXJ0dWFsU2Nyb2xsTGVuZ3RoLnZhbHVlXG5cbiAgICAgIC8vIGNsZWFyIHNlYXJjaCBidWZmZXIgaWYgZXhwaXJlZFxuICAgICAgaWYgKHNlYXJjaEJ1ZmZlciA9PT0gdm9pZCAwIHx8IHNlYXJjaEJ1ZmZlckV4cCA8IERhdGUubm93KCkpIHtcbiAgICAgICAgc2VhcmNoQnVmZmVyID0gJydcbiAgICAgIH1cblxuICAgICAgLy8ga2V5Ym9hcmQgc2VhcmNoIHdoZW4gbm90IGhhdmluZyB1c2UtaW5wdXRcbiAgICAgIGlmIChcbiAgICAgICAgb3B0aW9uc0xlbmd0aCA+IDBcbiAgICAgICAgJiYgcHJvcHMudXNlSW5wdXQgIT09IHRydWVcbiAgICAgICAgJiYgZS5rZXkgIT09IHZvaWQgMFxuICAgICAgICAmJiBlLmtleS5sZW5ndGggPT09IDEgLy8gcHJpbnRhYmxlIGNoYXJcbiAgICAgICAgJiYgZS5hbHRLZXkgPT09IGZhbHNlIC8vIG5vdCBrYmQgc2hvcnRjdXRcbiAgICAgICAgJiYgZS5jdHJsS2V5ID09PSBmYWxzZSAvLyBub3Qga2JkIHNob3J0Y3V0XG4gICAgICAgICYmIGUubWV0YUtleSA9PT0gZmFsc2UgLy8gbm90IGtiZCBzaG9ydGN1dCwgZXNwZWNpYWxseSBvbiBtYWNPUyB3aXRoIENvbW1hbmQga2V5XG4gICAgICAgICYmIChlLmtleUNvZGUgIT09IDMyIHx8IHNlYXJjaEJ1ZmZlci5sZW5ndGggIT09IDApIC8vIHNwYWNlIGluIG1pZGRsZSBvZiBzZWFyY2hcbiAgICAgICkge1xuICAgICAgICBtZW51LnZhbHVlICE9PSB0cnVlICYmIHNob3dQb3B1cChlKVxuXG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgY2hhciA9IGUua2V5LnRvTG9jYWxlTG93ZXJDYXNlKCksXG4gICAgICAgICAga2V5UmVwZWF0ID0gc2VhcmNoQnVmZmVyLmxlbmd0aCA9PT0gMSAmJiBzZWFyY2hCdWZmZXJbIDAgXSA9PT0gY2hhclxuXG4gICAgICAgIHNlYXJjaEJ1ZmZlckV4cCA9IERhdGUubm93KCkgKyAxNTAwXG4gICAgICAgIGlmIChrZXlSZXBlYXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgc3RvcEFuZFByZXZlbnQoZSlcbiAgICAgICAgICBzZWFyY2hCdWZmZXIgKz0gY2hhclxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2VhcmNoUmUgPSBuZXcgUmVnRXhwKCdeJyArIHNlYXJjaEJ1ZmZlci5zcGxpdCgnJykubWFwKGwgPT4gKHJlRXNjYXBlTGlzdC5pbmRleE9mKGwpICE9PSAtMSA/ICdcXFxcJyArIGwgOiBsKSkuam9pbignLionKSwgJ2knKVxuXG4gICAgICAgIGxldCBpbmRleCA9IG9wdGlvbkluZGV4LnZhbHVlXG5cbiAgICAgICAgaWYgKGtleVJlcGVhdCA9PT0gdHJ1ZSB8fCBpbmRleCA8IDAgfHwgc2VhcmNoUmUudGVzdChnZXRPcHRpb25MYWJlbC52YWx1ZShwcm9wcy5vcHRpb25zWyBpbmRleCBdKSkgIT09IHRydWUpIHtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBpbmRleCA9IG5vcm1hbGl6ZVRvSW50ZXJ2YWwoaW5kZXggKyAxLCAtMSwgb3B0aW9uc0xlbmd0aCAtIDEpXG4gICAgICAgICAgfVxuICAgICAgICAgIHdoaWxlIChpbmRleCAhPT0gb3B0aW9uSW5kZXgudmFsdWUgJiYgKFxuICAgICAgICAgICAgaXNPcHRpb25EaXNhYmxlZC52YWx1ZShwcm9wcy5vcHRpb25zWyBpbmRleCBdKSA9PT0gdHJ1ZVxuICAgICAgICAgICAgfHwgc2VhcmNoUmUudGVzdChnZXRPcHRpb25MYWJlbC52YWx1ZShwcm9wcy5vcHRpb25zWyBpbmRleCBdKSkgIT09IHRydWVcbiAgICAgICAgICApKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbkluZGV4LnZhbHVlICE9PSBpbmRleCkge1xuICAgICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIHNldE9wdGlvbkluZGV4KGluZGV4KVxuICAgICAgICAgICAgc2Nyb2xsVG8oaW5kZXgpXG5cbiAgICAgICAgICAgIGlmIChpbmRleCA+PSAwICYmIHByb3BzLnVzZUlucHV0ID09PSB0cnVlICYmIHByb3BzLmZpbGxJbnB1dCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICBzZXRJbnB1dFZhbHVlKGdldE9wdGlvbkxhYmVsLnZhbHVlKHByb3BzLm9wdGlvbnNbIGluZGV4IF0pLCB0cnVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gZW50ZXIsIHNwYWNlICh3aGVuIG5vdCB1c2luZyB1c2UtaW5wdXQgYW5kIG5vdCBpbiBzZWFyY2gpLCBvciB0YWIgKHdoZW4gbm90IHVzaW5nIG11bHRpcGxlIGFuZCBvcHRpb24gc2VsZWN0ZWQpXG4gICAgICAvLyBzYW1lIHRhcmdldCBpcyBjaGVja2VkIGFib3ZlXG4gICAgICBpZiAoXG4gICAgICAgIGUua2V5Q29kZSAhPT0gMTNcbiAgICAgICAgJiYgKGUua2V5Q29kZSAhPT0gMzIgfHwgcHJvcHMudXNlSW5wdXQgPT09IHRydWUgfHwgc2VhcmNoQnVmZmVyICE9PSAnJylcbiAgICAgICAgJiYgKGUua2V5Q29kZSAhPT0gOSB8fCB0YWJTaG91bGRTZWxlY3QgPT09IGZhbHNlKVxuICAgICAgKSByZXR1cm5cblxuICAgICAgZS5rZXlDb2RlICE9PSA5ICYmIHN0b3BBbmRQcmV2ZW50KGUpXG5cbiAgICAgIGlmIChvcHRpb25JbmRleC52YWx1ZSAhPT0gLTEgJiYgb3B0aW9uSW5kZXgudmFsdWUgPCBvcHRpb25zTGVuZ3RoKSB7XG4gICAgICAgIHRvZ2dsZU9wdGlvbihwcm9wcy5vcHRpb25zWyBvcHRpb25JbmRleC52YWx1ZSBdKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKG5ld1ZhbHVlTW9kZVZhbGlkID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGRvbmUgPSAodmFsLCBtb2RlKSA9PiB7XG4gICAgICAgICAgaWYgKG1vZGUpIHtcbiAgICAgICAgICAgIGlmICh2YWxpZGF0ZU5ld1ZhbHVlTW9kZShtb2RlKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtb2RlID0gcHJvcHMubmV3VmFsdWVNb2RlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdXBkYXRlSW5wdXRWYWx1ZSgnJywgcHJvcHMubXVsdGlwbGUgIT09IHRydWUsIHRydWUpXG5cbiAgICAgICAgICBpZiAodmFsID09PSB2b2lkIDAgfHwgdmFsID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBmbiA9IG1vZGUgPT09ICd0b2dnbGUnID8gdG9nZ2xlT3B0aW9uIDogYWRkXG4gICAgICAgICAgZm4odmFsLCBtb2RlID09PSAnYWRkLXVuaXF1ZScpXG5cbiAgICAgICAgICBpZiAocHJvcHMubXVsdGlwbGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgIHRhcmdldFJlZi52YWx1ZSAhPT0gbnVsbCAmJiB0YXJnZXRSZWYudmFsdWUuZm9jdXMoKVxuICAgICAgICAgICAgaGlkZVBvcHVwKClcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvcHMub25OZXdWYWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgZW1pdCgnbmV3VmFsdWUnLCBpbnB1dFZhbHVlLnZhbHVlLCBkb25lKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRvbmUoaW5wdXRWYWx1ZS52YWx1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9wcy5tdWx0aXBsZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZW51LnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIGNsb3NlTWVudSgpXG4gICAgICB9XG4gICAgICBlbHNlIGlmIChzdGF0ZS5pbm5lckxvYWRpbmcudmFsdWUgIT09IHRydWUpIHtcbiAgICAgICAgc2hvd1BvcHVwKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRWaXJ0dWFsU2Nyb2xsRWwgKCkge1xuICAgICAgcmV0dXJuIGhhc0RpYWxvZyA9PT0gdHJ1ZVxuICAgICAgICA/IG1lbnVDb250ZW50UmVmLnZhbHVlXG4gICAgICAgIDogKFxuICAgICAgICAgICAgbWVudVJlZi52YWx1ZSAhPT0gbnVsbCAmJiBtZW51UmVmLnZhbHVlLmNvbnRlbnRFbCAhPT0gbnVsbFxuICAgICAgICAgICAgICA/IG1lbnVSZWYudmFsdWUuY29udGVudEVsXG4gICAgICAgICAgICAgIDogdm9pZCAwXG4gICAgICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFZpcnR1YWxTY3JvbGxUYXJnZXQgKCkge1xuICAgICAgcmV0dXJuIGdldFZpcnR1YWxTY3JvbGxFbCgpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2VsZWN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9wcy5oaWRlU2VsZWN0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIFtdXG4gICAgICB9XG5cbiAgICAgIGlmIChzbG90c1sgJ3NlbGVjdGVkLWl0ZW0nIF0gIT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gc2VsZWN0ZWRTY29wZS52YWx1ZS5tYXAoc2NvcGUgPT4gc2xvdHNbICdzZWxlY3RlZC1pdGVtJyBdKHNjb3BlKSkuc2xpY2UoKVxuICAgICAgfVxuXG4gICAgICBpZiAoc2xvdHMuc2VsZWN0ZWQgIT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gW10uY29uY2F0KHNsb3RzLnNlbGVjdGVkKCkpXG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wcy51c2VDaGlwcyA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gc2VsZWN0ZWRTY29wZS52YWx1ZS5tYXAoKHNjb3BlLCBpKSA9PiBoKFFDaGlwLCB7XG4gICAgICAgICAga2V5OiAnb3B0aW9uLScgKyBpLFxuICAgICAgICAgIHJlbW92YWJsZTogc3RhdGUuZWRpdGFibGUudmFsdWUgPT09IHRydWUgJiYgaXNPcHRpb25EaXNhYmxlZC52YWx1ZShzY29wZS5vcHQpICE9PSB0cnVlLFxuICAgICAgICAgIGRlbnNlOiB0cnVlLFxuICAgICAgICAgIHRleHRDb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICAgICAgdGFiaW5kZXg6IHRhYmluZGV4LnZhbHVlLFxuICAgICAgICAgIG9uUmVtb3ZlICgpIHsgc2NvcGUucmVtb3ZlQXRJbmRleChpKSB9XG4gICAgICAgIH0sICgpID0+IGgoJ3NwYW4nLCB7XG4gICAgICAgICAgY2xhc3M6ICdlbGxpcHNpcycsXG4gICAgICAgICAgWyBzY29wZS5odG1sID09PSB0cnVlID8gJ2lubmVySFRNTCcgOiAndGV4dENvbnRlbnQnIF06IGdldE9wdGlvbkxhYmVsLnZhbHVlKHNjb3BlLm9wdClcbiAgICAgICAgfSkpKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gW1xuICAgICAgICBoKCdzcGFuJywge1xuICAgICAgICAgIFsgdmFsdWVBc0h0bWwudmFsdWUgPT09IHRydWUgPyAnaW5uZXJIVE1MJyA6ICd0ZXh0Q29udGVudCcgXTogYXJpYUN1cnJlbnRWYWx1ZS52YWx1ZVxuICAgICAgICB9KVxuICAgICAgXVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEFsbE9wdGlvbnMgKCkge1xuICAgICAgaWYgKG5vT3B0aW9ucy52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gc2xvdHNbICduby1vcHRpb24nIF0gIT09IHZvaWQgMFxuICAgICAgICAgID8gc2xvdHNbICduby1vcHRpb24nIF0oeyBpbnB1dFZhbHVlOiBpbnB1dFZhbHVlLnZhbHVlIH0pXG4gICAgICAgICAgOiB2b2lkIDBcbiAgICAgIH1cblxuICAgICAgY29uc3QgZm4gPSBzbG90cy5vcHRpb24gIT09IHZvaWQgMFxuICAgICAgICA/IHNsb3RzLm9wdGlvblxuICAgICAgICA6IHNjb3BlID0+IHtcbiAgICAgICAgICByZXR1cm4gaChRSXRlbSwge1xuICAgICAgICAgICAga2V5OiBzY29wZS5pbmRleCxcbiAgICAgICAgICAgIC4uLnNjb3BlLml0ZW1Qcm9wc1xuICAgICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBoKFxuICAgICAgICAgICAgICBRSXRlbVNlY3Rpb24sXG4gICAgICAgICAgICAgICgpID0+IGgoXG4gICAgICAgICAgICAgICAgUUl0ZW1MYWJlbCxcbiAgICAgICAgICAgICAgICAoKSA9PiBoKCdzcGFuJywge1xuICAgICAgICAgICAgICAgICAgWyBzY29wZS5odG1sID09PSB0cnVlID8gJ2lubmVySFRNTCcgOiAndGV4dENvbnRlbnQnIF06IHNjb3BlLmxhYmVsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgbGV0IG9wdGlvbnMgPSBwYWRWaXJ0dWFsU2Nyb2xsKCdkaXYnLCBvcHRpb25TY29wZS52YWx1ZS5tYXAoZm4pKVxuXG4gICAgICBpZiAoc2xvdHNbICdiZWZvcmUtb3B0aW9ucycgXSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIG9wdGlvbnMgPSBzbG90c1sgJ2JlZm9yZS1vcHRpb25zJyBdKCkuY29uY2F0KG9wdGlvbnMpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoTWVyZ2VTbG90KHNsb3RzWyAnYWZ0ZXItb3B0aW9ucycgXSwgb3B0aW9ucylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJbnB1dCAoZnJvbURpYWxvZywgaXNUYXJnZXQpIHtcbiAgICAgIGNvbnN0IGF0dHJzID0gaXNUYXJnZXQgPT09IHRydWUgPyB7IC4uLmNvbWJvYm94QXR0cnMudmFsdWUsIC4uLnN0YXRlLnNwbGl0QXR0cnMuYXR0cmlidXRlcy52YWx1ZSB9IDogdm9pZCAwXG5cbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIHJlZjogaXNUYXJnZXQgPT09IHRydWUgPyB0YXJnZXRSZWYgOiB2b2lkIDAsXG4gICAgICAgIGtleTogJ2lfdCcsXG4gICAgICAgIGNsYXNzOiBjb21wdXRlZElucHV0Q2xhc3MudmFsdWUsXG4gICAgICAgIHN0eWxlOiBwcm9wcy5pbnB1dFN0eWxlLFxuICAgICAgICB2YWx1ZTogaW5wdXRWYWx1ZS52YWx1ZSAhPT0gdm9pZCAwID8gaW5wdXRWYWx1ZS52YWx1ZSA6ICcnLFxuICAgICAgICAvLyByZXF1aXJlZCBmb3IgQW5kcm9pZCBpbiBvcmRlciB0byBzaG93IEVOVEVSIGtleSB3aGVuIGluIGZvcm1cbiAgICAgICAgdHlwZTogJ3NlYXJjaCcsXG4gICAgICAgIC4uLmF0dHJzLFxuICAgICAgICBpZDogaXNUYXJnZXQgPT09IHRydWUgPyBzdGF0ZS50YXJnZXRVaWQudmFsdWUgOiB2b2lkIDAsXG4gICAgICAgIG1heGxlbmd0aDogcHJvcHMubWF4bGVuZ3RoLFxuICAgICAgICBhdXRvY29tcGxldGU6IHByb3BzLmF1dG9jb21wbGV0ZSxcbiAgICAgICAgJ2RhdGEtYXV0b2ZvY3VzJzogZnJvbURpYWxvZyA9PT0gdHJ1ZSB8fCBwcm9wcy5hdXRvZm9jdXMgPT09IHRydWUgfHwgdm9pZCAwLFxuICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZSA9PT0gdHJ1ZSxcbiAgICAgICAgcmVhZG9ubHk6IHByb3BzLnJlYWRvbmx5ID09PSB0cnVlLFxuICAgICAgICAuLi5pbnB1dENvbnRyb2xFdmVudHMudmFsdWVcbiAgICAgIH1cblxuICAgICAgaWYgKGZyb21EaWFsb2cgIT09IHRydWUgJiYgaGFzRGlhbG9nID09PSB0cnVlKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEuY2xhc3MpID09PSB0cnVlKSB7XG4gICAgICAgICAgZGF0YS5jbGFzcyA9IFsgLi4uZGF0YS5jbGFzcywgJ25vLXBvaW50ZXItZXZlbnRzJyBdXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGF0YS5jbGFzcyArPSAnIG5vLXBvaW50ZXItZXZlbnRzJ1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCdpbnB1dCcsIGRhdGEpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25JbnB1dCAoZSkge1xuICAgICAgaWYgKGZpbHRlclRpbWVyICE9PSBudWxsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChmaWx0ZXJUaW1lcilcbiAgICAgICAgZmlsdGVyVGltZXIgPSBudWxsXG4gICAgICB9XG4gICAgICBpZiAoaW5wdXRWYWx1ZVRpbWVyICE9PSBudWxsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChpbnB1dFZhbHVlVGltZXIpXG4gICAgICAgIGlucHV0VmFsdWVUaW1lciA9IG51bGxcbiAgICAgIH1cblxuICAgICAgaWYgKGUgJiYgZS50YXJnZXQgJiYgZS50YXJnZXQucUNvbXBvc2luZyA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgc2V0SW5wdXRWYWx1ZShlLnRhcmdldC52YWx1ZSB8fCAnJylcbiAgICAgIC8vIG1hcmsgaXQgaGVyZSBhcyB1c2VyIGlucHV0IHNvIHRoYXQgaWYgdXBkYXRlSW5wdXRWYWx1ZSBpcyBjYWxsZWRcbiAgICAgIC8vIGJlZm9yZSBmaWx0ZXIgaXMgY2FsbGVkIHRoZSBpbmRpY2F0b3IgaXMgcmVzZXRcbiAgICAgIHVzZXJJbnB1dFZhbHVlID0gdHJ1ZVxuICAgICAgZGVmYXVsdElucHV0VmFsdWUgPSBpbnB1dFZhbHVlLnZhbHVlXG5cbiAgICAgIGlmIChcbiAgICAgICAgc3RhdGUuZm9jdXNlZC52YWx1ZSAhPT0gdHJ1ZVxuICAgICAgICAmJiAoaGFzRGlhbG9nICE9PSB0cnVlIHx8IGRpYWxvZ0ZpZWxkRm9jdXNlZC52YWx1ZSA9PT0gdHJ1ZSlcbiAgICAgICkge1xuICAgICAgICBzdGF0ZS5mb2N1cygpXG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wcy5vbkZpbHRlciAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGZpbHRlclRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgZmlsdGVyVGltZXIgPSBudWxsXG4gICAgICAgICAgZmlsdGVyKGlucHV0VmFsdWUudmFsdWUpXG4gICAgICAgIH0sIHByb3BzLmlucHV0RGVib3VuY2UpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0SW5wdXRWYWx1ZSAodmFsLCBlbWl0SW1tZWRpYXRlbHkpIHtcbiAgICAgIGlmIChpbnB1dFZhbHVlLnZhbHVlICE9PSB2YWwpIHtcbiAgICAgICAgaW5wdXRWYWx1ZS52YWx1ZSA9IHZhbFxuXG4gICAgICAgIGlmIChlbWl0SW1tZWRpYXRlbHkgPT09IHRydWUgfHwgcHJvcHMuaW5wdXREZWJvdW5jZSA9PT0gMCB8fCBwcm9wcy5pbnB1dERlYm91bmNlID09PSAnMCcpIHtcbiAgICAgICAgICBlbWl0KCdpbnB1dFZhbHVlJywgdmFsKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlucHV0VmFsdWVUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaW5wdXRWYWx1ZVRpbWVyID0gbnVsbFxuICAgICAgICAgICAgZW1pdCgnaW5wdXRWYWx1ZScsIHZhbClcbiAgICAgICAgICB9LCBwcm9wcy5pbnB1dERlYm91bmNlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlSW5wdXRWYWx1ZSAodmFsLCBub0ZpbHRlcmluZywgaW50ZXJuYWwpIHtcbiAgICAgIHVzZXJJbnB1dFZhbHVlID0gaW50ZXJuYWwgIT09IHRydWVcblxuICAgICAgaWYgKHByb3BzLnVzZUlucHV0ID09PSB0cnVlKSB7XG4gICAgICAgIHNldElucHV0VmFsdWUodmFsLCB0cnVlKVxuXG4gICAgICAgIGlmIChub0ZpbHRlcmluZyA9PT0gdHJ1ZSB8fCBpbnRlcm5hbCAhPT0gdHJ1ZSkge1xuICAgICAgICAgIGRlZmF1bHRJbnB1dFZhbHVlID0gdmFsXG4gICAgICAgIH1cblxuICAgICAgICBub0ZpbHRlcmluZyAhPT0gdHJ1ZSAmJiBmaWx0ZXIodmFsKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbHRlciAodmFsLCBrZWVwQ2xvc2VkLCBhZnRlclVwZGF0ZUZuKSB7XG4gICAgICBpZiAocHJvcHMub25GaWx0ZXIgPT09IHZvaWQgMCB8fCAoa2VlcENsb3NlZCAhPT0gdHJ1ZSAmJiBzdGF0ZS5mb2N1c2VkLnZhbHVlICE9PSB0cnVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLmlubmVyTG9hZGluZy52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICBlbWl0KCdmaWx0ZXJBYm9ydCcpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RhdGUuaW5uZXJMb2FkaW5nLnZhbHVlID0gdHJ1ZVxuICAgICAgICBpbm5lckxvYWRpbmdJbmRpY2F0b3IudmFsdWUgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgdmFsICE9PSAnJ1xuICAgICAgICAmJiBwcm9wcy5tdWx0aXBsZSAhPT0gdHJ1ZVxuICAgICAgICAmJiBpbm5lclZhbHVlLnZhbHVlLmxlbmd0aCAhPT0gMFxuICAgICAgICAmJiB1c2VySW5wdXRWYWx1ZSAhPT0gdHJ1ZVxuICAgICAgICAmJiB2YWwgPT09IGdldE9wdGlvbkxhYmVsLnZhbHVlKGlubmVyVmFsdWUudmFsdWVbIDAgXSlcbiAgICAgICkge1xuICAgICAgICB2YWwgPSAnJ1xuICAgICAgfVxuXG4gICAgICBjb25zdCBsb2NhbEZpbHRlcklkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIG1lbnUudmFsdWUgPT09IHRydWUgJiYgKG1lbnUudmFsdWUgPSBmYWxzZSlcbiAgICAgIH0sIDEwKVxuXG4gICAgICBmaWx0ZXJJZCAhPT0gbnVsbCAmJiBjbGVhclRpbWVvdXQoZmlsdGVySWQpXG4gICAgICBmaWx0ZXJJZCA9IGxvY2FsRmlsdGVySWRcblxuICAgICAgZW1pdChcbiAgICAgICAgJ2ZpbHRlcicsXG4gICAgICAgIHZhbCxcbiAgICAgICAgKGZuLCBhZnRlckZuKSA9PiB7XG4gICAgICAgICAgaWYgKChrZWVwQ2xvc2VkID09PSB0cnVlIHx8IHN0YXRlLmZvY3VzZWQudmFsdWUgPT09IHRydWUpICYmIGZpbHRlcklkID09PSBsb2NhbEZpbHRlcklkKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoZmlsdGVySWQpXG5cbiAgICAgICAgICAgIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiBmbigpXG5cbiAgICAgICAgICAgIC8vIGhpZGUgaW5kaWNhdG9yIHRvIGFsbG93IGFycm93IHRvIGFuaW1hdGVcbiAgICAgICAgICAgIGlubmVyTG9hZGluZ0luZGljYXRvci52YWx1ZSA9IGZhbHNlXG5cbiAgICAgICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgc3RhdGUuaW5uZXJMb2FkaW5nLnZhbHVlID0gZmFsc2VcblxuICAgICAgICAgICAgICBpZiAoc3RhdGUuZWRpdGFibGUudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2VlcENsb3NlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgbWVudS52YWx1ZSA9PT0gdHJ1ZSAmJiBoaWRlUG9wdXAoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtZW51LnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICB1cGRhdGVNZW51KHRydWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgbWVudS52YWx1ZSA9IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0eXBlb2YgYWZ0ZXJGbiA9PT0gJ2Z1bmN0aW9uJyAmJiBuZXh0VGljaygoKSA9PiB7IGFmdGVyRm4ocHJveHkpIH0pXG4gICAgICAgICAgICAgIHR5cGVvZiBhZnRlclVwZGF0ZUZuID09PSAnZnVuY3Rpb24nICYmIG5leHRUaWNrKCgpID0+IHsgYWZ0ZXJVcGRhdGVGbihwcm94eSkgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgaWYgKHN0YXRlLmZvY3VzZWQudmFsdWUgPT09IHRydWUgJiYgZmlsdGVySWQgPT09IGxvY2FsRmlsdGVySWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChmaWx0ZXJJZClcbiAgICAgICAgICAgIHN0YXRlLmlubmVyTG9hZGluZy52YWx1ZSA9IGZhbHNlXG4gICAgICAgICAgICBpbm5lckxvYWRpbmdJbmRpY2F0b3IudmFsdWUgPSBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgICBtZW51LnZhbHVlID09PSB0cnVlICYmIChtZW51LnZhbHVlID0gZmFsc2UpXG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNZW51ICgpIHtcbiAgICAgIHJldHVybiBoKFFNZW51LCB7XG4gICAgICAgIHJlZjogbWVudVJlZixcbiAgICAgICAgY2xhc3M6IG1lbnVDb250ZW50Q2xhc3MudmFsdWUsXG4gICAgICAgIHN0eWxlOiBwcm9wcy5wb3B1cENvbnRlbnRTdHlsZSxcbiAgICAgICAgbW9kZWxWYWx1ZTogbWVudS52YWx1ZSxcbiAgICAgICAgZml0OiBwcm9wcy5tZW51U2hyaW5rICE9PSB0cnVlLFxuICAgICAgICBjb3ZlcjogcHJvcHMub3B0aW9uc0NvdmVyID09PSB0cnVlICYmIG5vT3B0aW9ucy52YWx1ZSAhPT0gdHJ1ZSAmJiBwcm9wcy51c2VJbnB1dCAhPT0gdHJ1ZSxcbiAgICAgICAgYW5jaG9yOiBwcm9wcy5tZW51QW5jaG9yLFxuICAgICAgICBzZWxmOiBwcm9wcy5tZW51U2VsZixcbiAgICAgICAgb2Zmc2V0OiBwcm9wcy5tZW51T2Zmc2V0LFxuICAgICAgICBkYXJrOiBpc09wdGlvbnNEYXJrLnZhbHVlLFxuICAgICAgICBub1BhcmVudEV2ZW50OiB0cnVlLFxuICAgICAgICBub1JlZm9jdXM6IHRydWUsXG4gICAgICAgIG5vRm9jdXM6IHRydWUsXG4gICAgICAgIG5vUm91dGVEaXNtaXNzOiBwcm9wcy5wb3B1cE5vUm91dGVEaXNtaXNzLFxuICAgICAgICBzcXVhcmU6IHNxdWFyZWRNZW51LnZhbHVlLFxuICAgICAgICB0cmFuc2l0aW9uU2hvdzogcHJvcHMudHJhbnNpdGlvblNob3csXG4gICAgICAgIHRyYW5zaXRpb25IaWRlOiBwcm9wcy50cmFuc2l0aW9uSGlkZSxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICAgIHNlcGFyYXRlQ2xvc2VQb3B1cDogdHJ1ZSxcbiAgICAgICAgLi4ubGlzdGJveEF0dHJzLnZhbHVlLFxuICAgICAgICBvblNjcm9sbFBhc3NpdmU6IG9uVmlydHVhbFNjcm9sbEV2dCxcbiAgICAgICAgb25CZWZvcmVTaG93OiBvbkNvbnRyb2xQb3B1cFNob3csXG4gICAgICAgIG9uQmVmb3JlSGlkZTogb25NZW51QmVmb3JlSGlkZSxcbiAgICAgICAgb25TaG93OiBvbk1lbnVTaG93XG4gICAgICB9LCBnZXRBbGxPcHRpb25zKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTWVudUJlZm9yZUhpZGUgKGUpIHtcbiAgICAgIG9uQ29udHJvbFBvcHVwSGlkZShlKVxuICAgICAgY2xvc2VNZW51KClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbk1lbnVTaG93ICgpIHtcbiAgICAgIHNldFZpcnR1YWxTY3JvbGxTaXplKClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkRpYWxvZ0ZpZWxkRm9jdXMgKGUpIHtcbiAgICAgIHN0b3AoZSlcbiAgICAgIHRhcmdldFJlZi52YWx1ZSAhPT0gbnVsbCAmJiB0YXJnZXRSZWYudmFsdWUuZm9jdXMoKVxuICAgICAgZGlhbG9nRmllbGRGb2N1c2VkLnZhbHVlID0gdHJ1ZVxuICAgICAgd2luZG93LnNjcm9sbFRvKHdpbmRvdy5wYWdlWE9mZnNldCB8fCB3aW5kb3cuc2Nyb2xsWCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQgfHwgMCwgMClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkRpYWxvZ0ZpZWxkQmx1ciAoZSkge1xuICAgICAgc3RvcChlKVxuICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBkaWFsb2dGaWVsZEZvY3VzZWQudmFsdWUgPSBmYWxzZVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREaWFsb2cgKCkge1xuICAgICAgY29uc3QgY29udGVudCA9IFtcbiAgICAgICAgaChRRmllbGQsIHtcbiAgICAgICAgICBjbGFzczogYGNvbC1hdXRvICR7IHN0YXRlLmZpZWxkQ2xhc3MudmFsdWUgfWAsXG4gICAgICAgICAgLi4uaW5uZXJGaWVsZFByb3BzLnZhbHVlLFxuICAgICAgICAgIGZvcjogc3RhdGUudGFyZ2V0VWlkLnZhbHVlLFxuICAgICAgICAgIGRhcms6IGlzT3B0aW9uc0RhcmsudmFsdWUsXG4gICAgICAgICAgc3F1YXJlOiB0cnVlLFxuICAgICAgICAgIGxvYWRpbmc6IGlubmVyTG9hZGluZ0luZGljYXRvci52YWx1ZSxcbiAgICAgICAgICBpdGVtQWxpZ25lZDogZmFsc2UsXG4gICAgICAgICAgZmlsbGVkOiB0cnVlLFxuICAgICAgICAgIHN0YWNrTGFiZWw6IGlucHV0VmFsdWUudmFsdWUubGVuZ3RoICE9PSAwLFxuICAgICAgICAgIC4uLnN0YXRlLnNwbGl0QXR0cnMubGlzdGVuZXJzLnZhbHVlLFxuICAgICAgICAgIG9uRm9jdXM6IG9uRGlhbG9nRmllbGRGb2N1cyxcbiAgICAgICAgICBvbkJsdXI6IG9uRGlhbG9nRmllbGRCbHVyXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAuLi5zbG90cyxcbiAgICAgICAgICByYXdDb250cm9sOiAoKSA9PiBzdGF0ZS5nZXRDb250cm9sKHRydWUpLFxuICAgICAgICAgIGJlZm9yZTogdm9pZCAwLFxuICAgICAgICAgIGFmdGVyOiB2b2lkIDBcbiAgICAgICAgfSlcbiAgICAgIF1cblxuICAgICAgbWVudS52YWx1ZSA9PT0gdHJ1ZSAmJiBjb250ZW50LnB1c2goXG4gICAgICAgIGgoJ2RpdicsIHtcbiAgICAgICAgICByZWY6IG1lbnVDb250ZW50UmVmLFxuICAgICAgICAgIGNsYXNzOiBtZW51Q29udGVudENsYXNzLnZhbHVlICsgJyBzY3JvbGwnLFxuICAgICAgICAgIHN0eWxlOiBwcm9wcy5wb3B1cENvbnRlbnRTdHlsZSxcbiAgICAgICAgICAuLi5saXN0Ym94QXR0cnMudmFsdWUsXG4gICAgICAgICAgb25DbGljazogcHJldmVudCxcbiAgICAgICAgICBvblNjcm9sbFBhc3NpdmU6IG9uVmlydHVhbFNjcm9sbEV2dFxuICAgICAgICB9LCBnZXRBbGxPcHRpb25zKCkpXG4gICAgICApXG5cbiAgICAgIHJldHVybiBoKFFEaWFsb2csIHtcbiAgICAgICAgcmVmOiBkaWFsb2dSZWYsXG4gICAgICAgIG1vZGVsVmFsdWU6IGRpYWxvZy52YWx1ZSxcbiAgICAgICAgcG9zaXRpb246IHByb3BzLnVzZUlucHV0ID09PSB0cnVlID8gJ3RvcCcgOiB2b2lkIDAsXG4gICAgICAgIHRyYW5zaXRpb25TaG93OiB0cmFuc2l0aW9uU2hvd0NvbXB1dGVkLFxuICAgICAgICB0cmFuc2l0aW9uSGlkZTogcHJvcHMudHJhbnNpdGlvbkhpZGUsXG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogcHJvcHMudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgICBub1JvdXRlRGlzbWlzczogcHJvcHMucG9wdXBOb1JvdXRlRGlzbWlzcyxcbiAgICAgICAgb25CZWZvcmVTaG93OiBvbkNvbnRyb2xQb3B1cFNob3csXG4gICAgICAgIG9uQmVmb3JlSGlkZTogb25EaWFsb2dCZWZvcmVIaWRlLFxuICAgICAgICBvbkhpZGU6IG9uRGlhbG9nSGlkZSxcbiAgICAgICAgb25TaG93OiBvbkRpYWxvZ1Nob3dcbiAgICAgIH0sICgpID0+IGgoJ2RpdicsIHtcbiAgICAgICAgY2xhc3M6ICdxLXNlbGVjdF9fZGlhbG9nJ1xuICAgICAgICAgICsgKGlzT3B0aW9uc0RhcmsudmFsdWUgPT09IHRydWUgPyAnIHEtc2VsZWN0X19kaWFsb2ctLWRhcmsgcS1kYXJrJyA6ICcnKVxuICAgICAgICAgICsgKGRpYWxvZ0ZpZWxkRm9jdXNlZC52YWx1ZSA9PT0gdHJ1ZSA/ICcgcS1zZWxlY3RfX2RpYWxvZy0tZm9jdXNlZCcgOiAnJylcbiAgICAgIH0sIGNvbnRlbnQpKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRGlhbG9nQmVmb3JlSGlkZSAoZSkge1xuICAgICAgb25Db250cm9sUG9wdXBIaWRlKGUpXG5cbiAgICAgIGlmIChkaWFsb2dSZWYudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgZGlhbG9nUmVmLnZhbHVlLl9fdXBkYXRlUmVmb2N1c1RhcmdldChcbiAgICAgICAgICBzdGF0ZS5yb290UmVmLnZhbHVlLnF1ZXJ5U2VsZWN0b3IoJy5xLWZpZWxkX19uYXRpdmUgPiBbdGFiaW5kZXhdOmxhc3QtY2hpbGQnKVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIHN0YXRlLmZvY3VzZWQudmFsdWUgPSBmYWxzZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRGlhbG9nSGlkZSAoZSkge1xuICAgICAgaGlkZVBvcHVwKClcbiAgICAgIHN0YXRlLmZvY3VzZWQudmFsdWUgPT09IGZhbHNlICYmIGVtaXQoJ2JsdXInLCBlKVxuICAgICAgcmVzZXRJbnB1dFZhbHVlKClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkRpYWxvZ1Nob3cgKCkge1xuICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50XG4gICAgICBpZiAoXG4gICAgICAgIChlbCA9PT0gbnVsbCB8fCBlbC5pZCAhPT0gc3RhdGUudGFyZ2V0VWlkLnZhbHVlKVxuICAgICAgICAmJiB0YXJnZXRSZWYudmFsdWUgIT09IG51bGxcbiAgICAgICAgJiYgdGFyZ2V0UmVmLnZhbHVlICE9PSBlbFxuICAgICAgKSB7XG4gICAgICAgIHRhcmdldFJlZi52YWx1ZS5mb2N1cygpXG4gICAgICB9XG5cbiAgICAgIHNldFZpcnR1YWxTY3JvbGxTaXplKClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9zZU1lbnUgKCkge1xuICAgICAgaWYgKGRpYWxvZy52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgb3B0aW9uSW5kZXgudmFsdWUgPSAtMVxuXG4gICAgICBpZiAobWVudS52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICBtZW51LnZhbHVlID0gZmFsc2VcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLmZvY3VzZWQudmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIGlmIChmaWx0ZXJJZCAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dChmaWx0ZXJJZClcbiAgICAgICAgICBmaWx0ZXJJZCA9IG51bGxcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGF0ZS5pbm5lckxvYWRpbmcudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICBlbWl0KCdmaWx0ZXJBYm9ydCcpXG4gICAgICAgICAgc3RhdGUuaW5uZXJMb2FkaW5nLnZhbHVlID0gZmFsc2VcbiAgICAgICAgICBpbm5lckxvYWRpbmdJbmRpY2F0b3IudmFsdWUgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvd1BvcHVwIChlKSB7XG4gICAgICBpZiAoc3RhdGUuZWRpdGFibGUudmFsdWUgIT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNEaWFsb2cgPT09IHRydWUpIHtcbiAgICAgICAgc3RhdGUub25Db250cm9sRm9jdXNpbihlKVxuICAgICAgICBkaWFsb2cudmFsdWUgPSB0cnVlXG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBzdGF0ZS5mb2N1cygpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RhdGUuZm9jdXMoKVxuICAgICAgfVxuXG4gICAgICBpZiAocHJvcHMub25GaWx0ZXIgIT09IHZvaWQgMCkge1xuICAgICAgICBmaWx0ZXIoaW5wdXRWYWx1ZS52YWx1ZSlcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG5vT3B0aW9ucy52YWx1ZSAhPT0gdHJ1ZSB8fCBzbG90c1sgJ25vLW9wdGlvbicgXSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIG1lbnUudmFsdWUgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGlkZVBvcHVwICgpIHtcbiAgICAgIGRpYWxvZy52YWx1ZSA9IGZhbHNlXG4gICAgICBjbG9zZU1lbnUoKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2V0SW5wdXRWYWx1ZSAoKSB7XG4gICAgICBwcm9wcy51c2VJbnB1dCA9PT0gdHJ1ZSAmJiB1cGRhdGVJbnB1dFZhbHVlKFxuICAgICAgICBwcm9wcy5tdWx0aXBsZSAhPT0gdHJ1ZSAmJiBwcm9wcy5maWxsSW5wdXQgPT09IHRydWUgJiYgaW5uZXJWYWx1ZS52YWx1ZS5sZW5ndGggIT09IDBcbiAgICAgICAgICA/IGdldE9wdGlvbkxhYmVsLnZhbHVlKGlubmVyVmFsdWUudmFsdWVbIDAgXSkgfHwgJydcbiAgICAgICAgICA6ICcnLFxuICAgICAgICB0cnVlLFxuICAgICAgICB0cnVlXG4gICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlTWVudSAoc2hvdykge1xuICAgICAgbGV0IG9wdGlvbkluZGV4ID0gLTFcblxuICAgICAgaWYgKHNob3cgPT09IHRydWUpIHtcbiAgICAgICAgaWYgKGlubmVyVmFsdWUudmFsdWUubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgY29uc3QgdmFsID0gZ2V0T3B0aW9uVmFsdWUudmFsdWUoaW5uZXJWYWx1ZS52YWx1ZVsgMCBdKVxuICAgICAgICAgIG9wdGlvbkluZGV4ID0gcHJvcHMub3B0aW9ucy5maW5kSW5kZXgodiA9PiBpc0RlZXBFcXVhbChnZXRPcHRpb25WYWx1ZS52YWx1ZSh2KSwgdmFsKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsUmVzZXRWaXJ0dWFsU2Nyb2xsKG9wdGlvbkluZGV4KVxuICAgICAgfVxuXG4gICAgICBzZXRPcHRpb25JbmRleChvcHRpb25JbmRleClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXJlbmRlck1lbnUgKG5ld0xlbmd0aCwgb2xkTGVuZ3RoKSB7XG4gICAgICBpZiAobWVudS52YWx1ZSA9PT0gdHJ1ZSAmJiBzdGF0ZS5pbm5lckxvYWRpbmcudmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIGxvY2FsUmVzZXRWaXJ0dWFsU2Nyb2xsKC0xLCB0cnVlKVxuXG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBpZiAobWVudS52YWx1ZSA9PT0gdHJ1ZSAmJiBzdGF0ZS5pbm5lckxvYWRpbmcudmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAobmV3TGVuZ3RoID4gb2xkTGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGxvY2FsUmVzZXRWaXJ0dWFsU2Nyb2xsKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICB1cGRhdGVNZW51KHRydWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZU1lbnVQb3NpdGlvbiAoKSB7XG4gICAgICBpZiAoZGlhbG9nLnZhbHVlID09PSBmYWxzZSAmJiBtZW51UmVmLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgIG1lbnVSZWYudmFsdWUudXBkYXRlUG9zaXRpb24oKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uQ29udHJvbFBvcHVwU2hvdyAoZSkge1xuICAgICAgZSAhPT0gdm9pZCAwICYmIHN0b3AoZSlcbiAgICAgIGVtaXQoJ3BvcHVwU2hvdycsIGUpXG4gICAgICBzdGF0ZS5oYXNQb3B1cE9wZW4gPSB0cnVlXG4gICAgICBzdGF0ZS5vbkNvbnRyb2xGb2N1c2luKGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Db250cm9sUG9wdXBIaWRlIChlKSB7XG4gICAgICBlICE9PSB2b2lkIDAgJiYgc3RvcChlKVxuICAgICAgZW1pdCgncG9wdXBIaWRlJywgZSlcbiAgICAgIHN0YXRlLmhhc1BvcHVwT3BlbiA9IGZhbHNlXG4gICAgICBzdGF0ZS5vbkNvbnRyb2xGb2N1c291dChlKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVByZVN0YXRlICgpIHtcbiAgICAgIGhhc0RpYWxvZyA9ICRxLnBsYXRmb3JtLmlzLm1vYmlsZSAhPT0gdHJ1ZSAmJiBwcm9wcy5iZWhhdmlvciAhPT0gJ2RpYWxvZydcbiAgICAgICAgPyBmYWxzZVxuICAgICAgICA6IHByb3BzLmJlaGF2aW9yICE9PSAnbWVudScgJiYgKFxuICAgICAgICAgIHByb3BzLnVzZUlucHV0ID09PSB0cnVlXG4gICAgICAgICAgICA/IHNsb3RzWyAnbm8tb3B0aW9uJyBdICE9PSB2b2lkIDAgfHwgcHJvcHMub25GaWx0ZXIgIT09IHZvaWQgMCB8fCBub09wdGlvbnMudmFsdWUgPT09IGZhbHNlXG4gICAgICAgICAgICA6IHRydWVcbiAgICAgICAgKVxuXG4gICAgICB0cmFuc2l0aW9uU2hvd0NvbXB1dGVkID0gJHEucGxhdGZvcm0uaXMuaW9zID09PSB0cnVlICYmIGhhc0RpYWxvZyA9PT0gdHJ1ZSAmJiBwcm9wcy51c2VJbnB1dCA9PT0gdHJ1ZVxuICAgICAgICA/ICdmYWRlJ1xuICAgICAgICA6IHByb3BzLnRyYW5zaXRpb25TaG93XG4gICAgfVxuXG4gICAgb25CZWZvcmVVcGRhdGUodXBkYXRlUHJlU3RhdGUpXG4gICAgb25VcGRhdGVkKHVwZGF0ZU1lbnVQb3NpdGlvbilcblxuICAgIHVwZGF0ZVByZVN0YXRlKClcblxuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICBmaWx0ZXJUaW1lciAhPT0gbnVsbCAmJiBjbGVhclRpbWVvdXQoZmlsdGVyVGltZXIpXG4gICAgICBpbnB1dFZhbHVlVGltZXIgIT09IG51bGwgJiYgY2xlYXJUaW1lb3V0KGlucHV0VmFsdWVUaW1lcilcbiAgICB9KVxuXG4gICAgLy8gZXhwb3NlIHB1YmxpYyBtZXRob2RzXG4gICAgT2JqZWN0LmFzc2lnbihwcm94eSwge1xuICAgICAgc2hvd1BvcHVwLCBoaWRlUG9wdXAsXG4gICAgICByZW1vdmVBdEluZGV4LCBhZGQsIHRvZ2dsZU9wdGlvbixcbiAgICAgIGdldE9wdGlvbkluZGV4OiAoKSA9PiBvcHRpb25JbmRleC52YWx1ZSxcbiAgICAgIHNldE9wdGlvbkluZGV4LCBtb3ZlT3B0aW9uU2VsZWN0aW9uLFxuICAgICAgZmlsdGVyLCB1cGRhdGVNZW51UG9zaXRpb24sIHVwZGF0ZUlucHV0VmFsdWUsXG4gICAgICBpc09wdGlvblNlbGVjdGVkLFxuICAgICAgZ2V0RW1pdHRpbmdPcHRpb25WYWx1ZSxcbiAgICAgIGlzT3B0aW9uRGlzYWJsZWQ6ICguLi5hcmdzKSA9PiBpc09wdGlvbkRpc2FibGVkLnZhbHVlLmFwcGx5KG51bGwsIGFyZ3MpID09PSB0cnVlLFxuICAgICAgZ2V0T3B0aW9uVmFsdWU6ICguLi5hcmdzKSA9PiBnZXRPcHRpb25WYWx1ZS52YWx1ZS5hcHBseShudWxsLCBhcmdzKSxcbiAgICAgIGdldE9wdGlvbkxhYmVsOiAoLi4uYXJncykgPT4gZ2V0T3B0aW9uTGFiZWwudmFsdWUuYXBwbHkobnVsbCwgYXJncylcbiAgICB9KVxuXG4gICAgT2JqZWN0LmFzc2lnbihzdGF0ZSwge1xuICAgICAgaW5uZXJWYWx1ZSxcblxuICAgICAgZmllbGRDbGFzczogY29tcHV0ZWQoKCkgPT5cbiAgICAgICAgYHEtc2VsZWN0IHEtZmllbGQtLWF1dG8taGVpZ2h0IHEtc2VsZWN0LS13aXRoJHsgcHJvcHMudXNlSW5wdXQgIT09IHRydWUgPyAnb3V0JyA6ICcnIH0taW5wdXRgXG4gICAgICAgICsgYCBxLXNlbGVjdC0td2l0aCR7IHByb3BzLnVzZUNoaXBzICE9PSB0cnVlID8gJ291dCcgOiAnJyB9LWNoaXBzYFxuICAgICAgICArIGAgcS1zZWxlY3QtLSR7IHByb3BzLm11bHRpcGxlID09PSB0cnVlID8gJ211bHRpcGxlJyA6ICdzaW5nbGUnIH1gXG4gICAgICApLFxuXG4gICAgICBpbnB1dFJlZixcbiAgICAgIHRhcmdldFJlZixcbiAgICAgIGhhc1ZhbHVlLFxuICAgICAgc2hvd1BvcHVwLFxuXG4gICAgICBmbG9hdGluZ0xhYmVsOiBjb21wdXRlZCgoKSA9PlxuICAgICAgICAocHJvcHMuaGlkZVNlbGVjdGVkICE9PSB0cnVlICYmIGhhc1ZhbHVlLnZhbHVlID09PSB0cnVlKVxuICAgICAgICB8fCB0eXBlb2YgaW5wdXRWYWx1ZS52YWx1ZSA9PT0gJ251bWJlcidcbiAgICAgICAgfHwgaW5wdXRWYWx1ZS52YWx1ZS5sZW5ndGggIT09IDBcbiAgICAgICAgfHwgZmllbGRWYWx1ZUlzRmlsbGVkKHByb3BzLmRpc3BsYXlWYWx1ZSlcbiAgICAgICksXG5cbiAgICAgIGdldENvbnRyb2xDaGlsZDogKCkgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgc3RhdGUuZWRpdGFibGUudmFsdWUgIT09IGZhbHNlICYmIChcbiAgICAgICAgICAgIGRpYWxvZy52YWx1ZSA9PT0gdHJ1ZSAvLyBkaWFsb2cgYWx3YXlzIGhhcyBtZW51IGRpc3BsYXllZCwgc28gbmVlZCB0byByZW5kZXIgaXRcbiAgICAgICAgICAgIHx8IG5vT3B0aW9ucy52YWx1ZSAhPT0gdHJ1ZVxuICAgICAgICAgICAgfHwgc2xvdHNbICduby1vcHRpb24nIF0gIT09IHZvaWQgMFxuICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIGhhc0RpYWxvZyA9PT0gdHJ1ZSA/IGdldERpYWxvZygpIDogZ2V0TWVudSgpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGFzUG9wdXBPcGVuID09PSB0cnVlKSB7XG4gICAgICAgICAgLy8gZXhwbGljaXRseSBzZXQgaXQgb3RoZXJ3aXNlIFRBQiB3aWxsIG5vdCBibHVyIGNvbXBvbmVudFxuICAgICAgICAgIHN0YXRlLmhhc1BvcHVwT3BlbiA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIGNvbnRyb2xFdmVudHM6IHtcbiAgICAgICAgb25Gb2N1c2luIChlKSB7IHN0YXRlLm9uQ29udHJvbEZvY3VzaW4oZSkgfSxcbiAgICAgICAgb25Gb2N1c291dCAoZSkge1xuICAgICAgICAgIHN0YXRlLm9uQ29udHJvbEZvY3Vzb3V0KGUsICgpID0+IHtcbiAgICAgICAgICAgIHJlc2V0SW5wdXRWYWx1ZSgpXG4gICAgICAgICAgICBjbG9zZU1lbnUoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xpY2sgKGUpIHtcbiAgICAgICAgICAvLyBsYWJlbCBmcm9tIFFGaWVsZCB3aWxsIHByb3BhZ2F0ZSBjbGljayBvbiB0aGUgaW5wdXRcbiAgICAgICAgICBwcmV2ZW50KGUpXG5cbiAgICAgICAgICBpZiAoaGFzRGlhbG9nICE9PSB0cnVlICYmIG1lbnUudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNsb3NlTWVudSgpXG4gICAgICAgICAgICB0YXJnZXRSZWYudmFsdWUgIT09IG51bGwgJiYgdGFyZ2V0UmVmLnZhbHVlLmZvY3VzKClcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNob3dQb3B1cChlKVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBnZXRDb250cm9sOiBmcm9tRGlhbG9nID0+IHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBnZXRTZWxlY3Rpb24oKVxuICAgICAgICBjb25zdCBpc1RhcmdldCA9IGZyb21EaWFsb2cgPT09IHRydWUgfHwgZGlhbG9nLnZhbHVlICE9PSB0cnVlIHx8IGhhc0RpYWxvZyAhPT0gdHJ1ZVxuXG4gICAgICAgIGlmIChwcm9wcy51c2VJbnB1dCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNoaWxkLnB1c2goZ2V0SW5wdXQoZnJvbURpYWxvZywgaXNUYXJnZXQpKVxuICAgICAgICB9XG4gICAgICAgIC8vIHRoZXJlIGNhbiBiZSBvbmx5IG9uZSAod2hlbiBkaWFsb2cgaXMgb3BlbmVkIHRoZSBjb250cm9sIGluIGRpYWxvZyBzaG91bGQgYmUgdGFyZ2V0KVxuICAgICAgICBlbHNlIGlmIChzdGF0ZS5lZGl0YWJsZS52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvbnN0IGF0dHJzID0gaXNUYXJnZXQgPT09IHRydWUgPyBjb21ib2JveEF0dHJzLnZhbHVlIDogdm9pZCAwXG5cbiAgICAgICAgICBjaGlsZC5wdXNoKFxuICAgICAgICAgICAgaCgnaW5wdXQnLCB7XG4gICAgICAgICAgICAgIHJlZjogaXNUYXJnZXQgPT09IHRydWUgPyB0YXJnZXRSZWYgOiB2b2lkIDAsXG4gICAgICAgICAgICAgIGtleTogJ2RfdCcsXG4gICAgICAgICAgICAgIGNsYXNzOiAncS1zZWxlY3RfX2ZvY3VzLXRhcmdldCcsXG4gICAgICAgICAgICAgIGlkOiBpc1RhcmdldCA9PT0gdHJ1ZSA/IHN0YXRlLnRhcmdldFVpZC52YWx1ZSA6IHZvaWQgMCxcbiAgICAgICAgICAgICAgdmFsdWU6IGFyaWFDdXJyZW50VmFsdWUudmFsdWUsXG4gICAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgICAnZGF0YS1hdXRvZm9jdXMnOiBmcm9tRGlhbG9nID09PSB0cnVlIHx8IHByb3BzLmF1dG9mb2N1cyA9PT0gdHJ1ZSB8fCB2b2lkIDAsXG4gICAgICAgICAgICAgIC4uLmF0dHJzLFxuICAgICAgICAgICAgICBvbktleWRvd246IG9uVGFyZ2V0S2V5ZG93bixcbiAgICAgICAgICAgICAgb25LZXl1cDogb25UYXJnZXRLZXl1cCxcbiAgICAgICAgICAgICAgb25LZXlwcmVzczogb25UYXJnZXRLZXlwcmVzc1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG5cbiAgICAgICAgICBpZiAoaXNUYXJnZXQgPT09IHRydWUgJiYgdHlwZW9mIHByb3BzLmF1dG9jb21wbGV0ZSA9PT0gJ3N0cmluZycgJiYgcHJvcHMuYXV0b2NvbXBsZXRlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgY2hpbGQucHVzaChcbiAgICAgICAgICAgICAgaCgnaW5wdXQnLCB7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICdxLXNlbGVjdF9fYXV0b2NvbXBsZXRlLWlucHV0JyxcbiAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU6IHByb3BzLmF1dG9jb21wbGV0ZSxcbiAgICAgICAgICAgICAgICB0YWJpbmRleDogLTEsXG4gICAgICAgICAgICAgICAgb25LZXl1cDogb25UYXJnZXRBdXRvY29tcGxldGVcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmFtZVByb3AudmFsdWUgIT09IHZvaWQgMCAmJiBwcm9wcy5kaXNhYmxlICE9PSB0cnVlICYmIGlubmVyT3B0aW9uc1ZhbHVlLnZhbHVlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIGNvbnN0IG9wdHMgPSBpbm5lck9wdGlvbnNWYWx1ZS52YWx1ZS5tYXAodmFsdWUgPT4gaCgnb3B0aW9uJywgeyB2YWx1ZSwgc2VsZWN0ZWQ6IHRydWUgfSkpXG5cbiAgICAgICAgICBjaGlsZC5wdXNoKFxuICAgICAgICAgICAgaCgnc2VsZWN0Jywge1xuICAgICAgICAgICAgICBjbGFzczogJ2hpZGRlbicsXG4gICAgICAgICAgICAgIG5hbWU6IG5hbWVQcm9wLnZhbHVlLFxuICAgICAgICAgICAgICBtdWx0aXBsZTogcHJvcHMubXVsdGlwbGVcbiAgICAgICAgICAgIH0sIG9wdHMpXG4gICAgICAgICAgKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYXR0cnMgPSBwcm9wcy51c2VJbnB1dCA9PT0gdHJ1ZSB8fCBpc1RhcmdldCAhPT0gdHJ1ZSA/IHZvaWQgMCA6IHN0YXRlLnNwbGl0QXR0cnMuYXR0cmlidXRlcy52YWx1ZVxuXG4gICAgICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAgICAgY2xhc3M6ICdxLWZpZWxkX19uYXRpdmUgcm93IGl0ZW1zLWNlbnRlcicsXG4gICAgICAgICAgLi4uYXR0cnMsXG4gICAgICAgICAgLi4uc3RhdGUuc3BsaXRBdHRycy5saXN0ZW5lcnMudmFsdWVcbiAgICAgICAgfSwgY2hpbGQpXG4gICAgICB9LFxuXG4gICAgICBnZXRJbm5lckFwcGVuZDogKCkgPT4gKFxuICAgICAgICBwcm9wcy5sb2FkaW5nICE9PSB0cnVlICYmIGlubmVyTG9hZGluZ0luZGljYXRvci52YWx1ZSAhPT0gdHJ1ZSAmJiBwcm9wcy5oaWRlRHJvcGRvd25JY29uICE9PSB0cnVlXG4gICAgICAgICAgPyBbXG4gICAgICAgICAgICAgIGgoUUljb24sIHtcbiAgICAgICAgICAgICAgICBjbGFzczogJ3Etc2VsZWN0X19kcm9wZG93bi1pY29uJyArIChtZW51LnZhbHVlID09PSB0cnVlID8gJyByb3RhdGUtMTgwJyA6ICcnKSxcbiAgICAgICAgICAgICAgICBuYW1lOiBkcm9wZG93bkFycm93SWNvbi52YWx1ZVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXVxuICAgICAgICAgIDogbnVsbFxuICAgICAgKVxuICAgIH0pXG5cbiAgICByZXR1cm4gdXNlRmllbGQoc3RhdGUpXG4gIH1cbn0pXG4iLCJpbXBvcnQgeyBoLCBjb21wdXRlZCwgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgdXNlRGFyaywgeyB1c2VEYXJrUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wcml2YXRlLnVzZS1kYXJrL3VzZS1kYXJrLmpzJ1xuaW1wb3J0IHVzZVNpemUsIHsgdXNlU2l6ZVByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvcHJpdmF0ZS51c2Utc2l6ZS91c2Utc2l6ZS5qcydcblxuaW1wb3J0IHsgY3JlYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5jcmVhdGUvY3JlYXRlLmpzJ1xuaW1wb3J0IHsgaE1lcmdlU2xvdCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUucmVuZGVyL3JlbmRlci5qcydcblxuY29uc3QgZGVmYXVsdFNpemVzID0ge1xuICB4czogMixcbiAgc206IDQsXG4gIG1kOiA2LFxuICBsZzogMTAsXG4gIHhsOiAxNFxufVxuXG5mdW5jdGlvbiB3aWR0aCAodmFsLCByZXZlcnNlLCAkcSkge1xuICByZXR1cm4ge1xuICAgIHRyYW5zZm9ybTogcmV2ZXJzZSA9PT0gdHJ1ZVxuICAgICAgPyBgdHJhbnNsYXRlWCgkeyAkcS5sYW5nLnJ0bCA9PT0gdHJ1ZSA/ICctJyA6ICcnIH0xMDAlKSBzY2FsZTNkKCR7IC12YWwgfSwxLDEpYFxuICAgICAgOiBgc2NhbGUzZCgkeyB2YWwgfSwxLDEpYFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRTGluZWFyUHJvZ3Jlc3MnLFxuXG4gIHByb3BzOiB7XG4gICAgLi4udXNlRGFya1Byb3BzLFxuICAgIC4uLnVzZVNpemVQcm9wcyxcblxuICAgIHZhbHVlOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAwXG4gICAgfSxcbiAgICBidWZmZXI6IE51bWJlcixcblxuICAgIGNvbG9yOiBTdHJpbmcsXG4gICAgdHJhY2tDb2xvcjogU3RyaW5nLFxuXG4gICAgcmV2ZXJzZTogQm9vbGVhbixcbiAgICBzdHJpcGU6IEJvb2xlYW4sXG4gICAgaW5kZXRlcm1pbmF0ZTogQm9vbGVhbixcbiAgICBxdWVyeTogQm9vbGVhbixcbiAgICByb3VuZGVkOiBCb29sZWFuLFxuXG4gICAgYW5pbWF0aW9uU3BlZWQ6IHtcbiAgICAgIHR5cGU6IFsgU3RyaW5nLCBOdW1iZXIgXSxcbiAgICAgIGRlZmF1bHQ6IDIxMDBcbiAgICB9LFxuXG4gICAgaW5zdGFudEZlZWRiYWNrOiBCb29sZWFuXG4gIH0sXG5cbiAgc2V0dXAgKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCB7IHByb3h5IH0gPSBnZXRDdXJyZW50SW5zdGFuY2UoKVxuICAgIGNvbnN0IGlzRGFyayA9IHVzZURhcmsocHJvcHMsIHByb3h5LiRxKVxuICAgIGNvbnN0IHNpemVTdHlsZSA9IHVzZVNpemUocHJvcHMsIGRlZmF1bHRTaXplcylcblxuICAgIGNvbnN0IG1vdGlvbiA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmluZGV0ZXJtaW5hdGUgPT09IHRydWUgfHwgcHJvcHMucXVlcnkgPT09IHRydWUpXG4gICAgY29uc3Qgd2lkdGhSZXZlcnNlID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMucmV2ZXJzZSAhPT0gcHJvcHMucXVlcnkpXG4gICAgY29uc3Qgc3R5bGUgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgLi4uKHNpemVTdHlsZS52YWx1ZSAhPT0gbnVsbCA/IHNpemVTdHlsZS52YWx1ZSA6IHt9KSxcbiAgICAgICctLXEtbGluZWFyLXByb2dyZXNzLXNwZWVkJzogYCR7IHByb3BzLmFuaW1hdGlvblNwZWVkIH1tc2BcbiAgICB9KSlcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgJ3EtbGluZWFyLXByb2dyZXNzJ1xuICAgICAgKyAocHJvcHMuY29sb3IgIT09IHZvaWQgMCA/IGAgdGV4dC0keyBwcm9wcy5jb2xvciB9YCA6ICcnKVxuICAgICAgKyAocHJvcHMucmV2ZXJzZSA9PT0gdHJ1ZSB8fCBwcm9wcy5xdWVyeSA9PT0gdHJ1ZSA/ICcgcS1saW5lYXItcHJvZ3Jlc3MtLXJldmVyc2UnIDogJycpXG4gICAgICArIChwcm9wcy5yb3VuZGVkID09PSB0cnVlID8gJyByb3VuZGVkLWJvcmRlcnMnIDogJycpXG4gICAgKVxuXG4gICAgY29uc3QgdHJhY2tTdHlsZSA9IGNvbXB1dGVkKCgpID0+IHdpZHRoKHByb3BzLmJ1ZmZlciAhPT0gdm9pZCAwID8gcHJvcHMuYnVmZmVyIDogMSwgd2lkdGhSZXZlcnNlLnZhbHVlLCBwcm94eS4kcSkpXG4gICAgY29uc3QgdHJhbnNpdGlvblN1ZmZpeCA9IGNvbXB1dGVkKCgpID0+IGB3aXRoJHsgcHJvcHMuaW5zdGFudEZlZWRiYWNrID09PSB0cnVlID8gJ291dCcgOiAnJyB9LXRyYW5zaXRpb25gKVxuXG4gICAgY29uc3QgdHJhY2tDbGFzcyA9IGNvbXB1dGVkKCgpID0+XG4gICAgICAncS1saW5lYXItcHJvZ3Jlc3NfX3RyYWNrIGFic29sdXRlLWZ1bGwnXG4gICAgICArIGAgcS1saW5lYXItcHJvZ3Jlc3NfX3RyYWNrLS0keyB0cmFuc2l0aW9uU3VmZml4LnZhbHVlIH1gXG4gICAgICArIGAgcS1saW5lYXItcHJvZ3Jlc3NfX3RyYWNrLS0keyBpc0RhcmsudmFsdWUgPT09IHRydWUgPyAnZGFyaycgOiAnbGlnaHQnIH1gXG4gICAgICArIChwcm9wcy50cmFja0NvbG9yICE9PSB2b2lkIDAgPyBgIGJnLSR7IHByb3BzLnRyYWNrQ29sb3IgfWAgOiAnJylcbiAgICApXG5cbiAgICBjb25zdCBtb2RlbFN0eWxlID0gY29tcHV0ZWQoKCkgPT4gd2lkdGgobW90aW9uLnZhbHVlID09PSB0cnVlID8gMSA6IHByb3BzLnZhbHVlLCB3aWR0aFJldmVyc2UudmFsdWUsIHByb3h5LiRxKSlcbiAgICBjb25zdCBtb2RlbENsYXNzID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgICdxLWxpbmVhci1wcm9ncmVzc19fbW9kZWwgYWJzb2x1dGUtZnVsbCdcbiAgICAgICsgYCBxLWxpbmVhci1wcm9ncmVzc19fbW9kZWwtLSR7IHRyYW5zaXRpb25TdWZmaXgudmFsdWUgfWBcbiAgICAgICsgYCBxLWxpbmVhci1wcm9ncmVzc19fbW9kZWwtLSR7IG1vdGlvbi52YWx1ZSA9PT0gdHJ1ZSA/ICdpbicgOiAnJyB9ZGV0ZXJtaW5hdGVgXG4gICAgKVxuXG4gICAgY29uc3Qgc3RyaXBlU3R5bGUgPSBjb21wdXRlZCgoKSA9PiAoeyB3aWR0aDogYCR7IHByb3BzLnZhbHVlICogMTAwIH0lYCB9KSlcbiAgICBjb25zdCBzdHJpcGVDbGFzcyA9IGNvbXB1dGVkKCgpID0+XG4gICAgICBgcS1saW5lYXItcHJvZ3Jlc3NfX3N0cmlwZSBhYnNvbHV0ZS0keyBwcm9wcy5yZXZlcnNlID09PSB0cnVlID8gJ3JpZ2h0JyA6ICdsZWZ0JyB9YFxuICAgICAgKyBgIHEtbGluZWFyLXByb2dyZXNzX19zdHJpcGUtLSR7IHRyYW5zaXRpb25TdWZmaXgudmFsdWUgfWBcbiAgICApXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgY2hpbGQgPSBbXG4gICAgICAgIGgoJ2RpdicsIHtcbiAgICAgICAgICBjbGFzczogdHJhY2tDbGFzcy52YWx1ZSxcbiAgICAgICAgICBzdHlsZTogdHJhY2tTdHlsZS52YWx1ZVxuICAgICAgICB9KSxcblxuICAgICAgICBoKCdkaXYnLCB7XG4gICAgICAgICAgY2xhc3M6IG1vZGVsQ2xhc3MudmFsdWUsXG4gICAgICAgICAgc3R5bGU6IG1vZGVsU3R5bGUudmFsdWVcbiAgICAgICAgfSlcbiAgICAgIF1cblxuICAgICAgcHJvcHMuc3RyaXBlID09PSB0cnVlICYmIG1vdGlvbi52YWx1ZSA9PT0gZmFsc2UgJiYgY2hpbGQucHVzaChcbiAgICAgICAgaCgnZGl2Jywge1xuICAgICAgICAgIGNsYXNzOiBzdHJpcGVDbGFzcy52YWx1ZSxcbiAgICAgICAgICBzdHlsZTogc3RyaXBlU3R5bGUudmFsdWVcbiAgICAgICAgfSlcbiAgICAgIClcblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZS52YWx1ZSxcbiAgICAgICAgcm9sZTogJ3Byb2dyZXNzYmFyJyxcbiAgICAgICAgJ2FyaWEtdmFsdWVtaW4nOiAwLFxuICAgICAgICAnYXJpYS12YWx1ZW1heCc6IDEsXG4gICAgICAgICdhcmlhLXZhbHVlbm93JzogcHJvcHMuaW5kZXRlcm1pbmF0ZSA9PT0gdHJ1ZVxuICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgOiBwcm9wcy52YWx1ZVxuICAgICAgfSwgaE1lcmdlU2xvdChzbG90cy5kZWZhdWx0LCBjaGlsZCkpXG4gICAgfVxuICB9XG59KVxuIiwiaW1wb3J0IHsgaCwgY29tcHV0ZWQsIHJlZiB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHByb3BzLCByb290UmVmKSB7XG4gIGNvbnN0IHJlZm9jdXNSZWYgPSByZWYobnVsbClcblxuICBjb25zdCByZWZvY3VzVGFyZ2V0RWwgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKHByb3BzLmRpc2FibGUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgcmV0dXJuIGgoJ3NwYW4nLCB7XG4gICAgICByZWY6IHJlZm9jdXNSZWYsXG4gICAgICBjbGFzczogJ25vLW91dGxpbmUnLFxuICAgICAgdGFiaW5kZXg6IC0xXG4gICAgfSlcbiAgfSlcblxuICBmdW5jdGlvbiByZWZvY3VzVGFyZ2V0IChlKSB7XG4gICAgY29uc3Qgcm9vdCA9IHJvb3RSZWYudmFsdWVcblxuICAgIGlmIChlICE9PSB2b2lkIDAgJiYgZS50eXBlLmluZGV4T2YoJ2tleScpID09PSAwKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHJvb3QgIT09IG51bGxcbiAgICAgICAgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gcm9vdFxuICAgICAgICAmJiByb290LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpID09PSB0cnVlXG4gICAgICApIHtcbiAgICAgICAgcm9vdC5mb2N1cygpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKFxuICAgICAgcmVmb2N1c1JlZi52YWx1ZSAhPT0gbnVsbFxuICAgICAgJiYgKGUgPT09IHZvaWQgMCB8fCAocm9vdCAhPT0gbnVsbCAmJiByb290LmNvbnRhaW5zKGUudGFyZ2V0KSA9PT0gdHJ1ZSkpXG4gICAgKSB7XG4gICAgICByZWZvY3VzUmVmLnZhbHVlLmZvY3VzKClcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlZm9jdXNUYXJnZXRFbCxcbiAgICByZWZvY3VzVGFyZ2V0XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgeHM6IDMwLFxuICBzbTogMzUsXG4gIG1kOiA0MCxcbiAgbGc6IDUwLFxuICB4bDogNjBcbn1cbiIsImltcG9ydCB7IGgsIHJlZiwgY29tcHV0ZWQsIGdldEN1cnJlbnRJbnN0YW5jZSwgdG9SYXcgfSBmcm9tICd2dWUnXG5cbmltcG9ydCB1c2VEYXJrLCB7IHVzZURhcmtQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLWRhcmsvdXNlLWRhcmsuanMnXG5pbXBvcnQgdXNlU2l6ZSwgeyB1c2VTaXplUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wcml2YXRlLnVzZS1zaXplL3VzZS1zaXplLmpzJ1xuaW1wb3J0IHVzZVJlZm9jdXNUYXJnZXQgZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvcHJpdmF0ZS51c2UtcmVmb2N1cy10YXJnZXQvdXNlLXJlZm9jdXMtdGFyZ2V0LmpzJ1xuaW1wb3J0IHsgdXNlRm9ybUluamVjdCwgdXNlRm9ybVByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLWZvcm0vcHJpdmF0ZS51c2UtZm9ybS5qcydcblxuaW1wb3J0IG9wdGlvblNpemVzIGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUub3B0aW9uLXNpemVzL29wdGlvbi1zaXplcy5qcydcbmltcG9ydCB7IHN0b3BBbmRQcmV2ZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvZXZlbnQvZXZlbnQuanMnXG5pbXBvcnQgeyBoU2xvdCwgaE1lcmdlU2xvdCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUucmVuZGVyL3JlbmRlci5qcydcblxuZXhwb3J0IGNvbnN0IHVzZUNoZWNrYm94UHJvcHMgPSB7XG4gIC4uLnVzZURhcmtQcm9wcyxcbiAgLi4udXNlU2l6ZVByb3BzLFxuICAuLi51c2VGb3JtUHJvcHMsXG5cbiAgbW9kZWxWYWx1ZToge1xuICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgdmFsOiB7fSxcblxuICB0cnVlVmFsdWU6IHsgZGVmYXVsdDogdHJ1ZSB9LFxuICBmYWxzZVZhbHVlOiB7IGRlZmF1bHQ6IGZhbHNlIH0sXG4gIGluZGV0ZXJtaW5hdGVWYWx1ZTogeyBkZWZhdWx0OiBudWxsIH0sXG5cbiAgY2hlY2tlZEljb246IFN0cmluZyxcbiAgdW5jaGVja2VkSWNvbjogU3RyaW5nLFxuICBpbmRldGVybWluYXRlSWNvbjogU3RyaW5nLFxuXG4gIHRvZ2dsZU9yZGVyOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHZhbGlkYXRvcjogdiA9PiB2ID09PSAndGYnIHx8IHYgPT09ICdmdCdcbiAgfSxcbiAgdG9nZ2xlSW5kZXRlcm1pbmF0ZTogQm9vbGVhbixcblxuICBsYWJlbDogU3RyaW5nLFxuICBsZWZ0TGFiZWw6IEJvb2xlYW4sXG5cbiAgY29sb3I6IFN0cmluZyxcbiAga2VlcENvbG9yOiBCb29sZWFuLFxuICBkZW5zZTogQm9vbGVhbixcblxuICBkaXNhYmxlOiBCb29sZWFuLFxuICB0YWJpbmRleDogWyBTdHJpbmcsIE51bWJlciBdXG59XG5cbmV4cG9ydCBjb25zdCB1c2VDaGVja2JveEVtaXRzID0gWyAndXBkYXRlOm1vZGVsVmFsdWUnIF1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHR5cGUsIGdldElubmVyKSB7XG4gIGNvbnN0IHsgcHJvcHMsIHNsb3RzLCBlbWl0LCBwcm94eSB9ID0gZ2V0Q3VycmVudEluc3RhbmNlKClcbiAgY29uc3QgeyAkcSB9ID0gcHJveHlcblxuICBjb25zdCBpc0RhcmsgPSB1c2VEYXJrKHByb3BzLCAkcSlcblxuICBjb25zdCByb290UmVmID0gcmVmKG51bGwpXG4gIGNvbnN0IHsgcmVmb2N1c1RhcmdldEVsLCByZWZvY3VzVGFyZ2V0IH0gPSB1c2VSZWZvY3VzVGFyZ2V0KHByb3BzLCByb290UmVmKVxuICBjb25zdCBzaXplU3R5bGUgPSB1c2VTaXplKHByb3BzLCBvcHRpb25TaXplcylcblxuICBjb25zdCBtb2RlbElzQXJyYXkgPSBjb21wdXRlZCgoKSA9PlxuICAgIHByb3BzLnZhbCAhPT0gdm9pZCAwICYmIEFycmF5LmlzQXJyYXkocHJvcHMubW9kZWxWYWx1ZSlcbiAgKVxuXG4gIGNvbnN0IGluZGV4ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IHZhbCA9IHRvUmF3KHByb3BzLnZhbClcbiAgICByZXR1cm4gbW9kZWxJc0FycmF5LnZhbHVlID09PSB0cnVlXG4gICAgICA/IHByb3BzLm1vZGVsVmFsdWUuZmluZEluZGV4KG9wdCA9PiB0b1JhdyhvcHQpID09PSB2YWwpXG4gICAgICA6IC0xXG4gIH0pXG5cbiAgY29uc3QgaXNUcnVlID0gY29tcHV0ZWQoKCkgPT4gKFxuICAgIG1vZGVsSXNBcnJheS52YWx1ZSA9PT0gdHJ1ZVxuICAgICAgPyBpbmRleC52YWx1ZSAhPT0gLTFcbiAgICAgIDogdG9SYXcocHJvcHMubW9kZWxWYWx1ZSkgPT09IHRvUmF3KHByb3BzLnRydWVWYWx1ZSlcbiAgKSlcblxuICBjb25zdCBpc0ZhbHNlID0gY29tcHV0ZWQoKCkgPT4gKFxuICAgIG1vZGVsSXNBcnJheS52YWx1ZSA9PT0gdHJ1ZVxuICAgICAgPyBpbmRleC52YWx1ZSA9PT0gLTFcbiAgICAgIDogdG9SYXcocHJvcHMubW9kZWxWYWx1ZSkgPT09IHRvUmF3KHByb3BzLmZhbHNlVmFsdWUpXG4gICkpXG5cbiAgY29uc3QgaXNJbmRldGVybWluYXRlID0gY29tcHV0ZWQoKCkgPT5cbiAgICBpc1RydWUudmFsdWUgPT09IGZhbHNlICYmIGlzRmFsc2UudmFsdWUgPT09IGZhbHNlXG4gIClcblxuICBjb25zdCB0YWJpbmRleCA9IGNvbXB1dGVkKCgpID0+IChcbiAgICBwcm9wcy5kaXNhYmxlID09PSB0cnVlID8gLTEgOiBwcm9wcy50YWJpbmRleCB8fCAwXG4gICkpXG5cbiAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+XG4gICAgYHEtJHsgdHlwZSB9IGN1cnNvci1wb2ludGVyIG5vLW91dGxpbmUgcm93IGlubGluZSBuby13cmFwIGl0ZW1zLWNlbnRlcmBcbiAgICArIChwcm9wcy5kaXNhYmxlID09PSB0cnVlID8gJyBkaXNhYmxlZCcgOiAnJylcbiAgICArIChpc0RhcmsudmFsdWUgPT09IHRydWUgPyBgIHEtJHsgdHlwZSB9LS1kYXJrYCA6ICcnKVxuICAgICsgKHByb3BzLmRlbnNlID09PSB0cnVlID8gYCBxLSR7IHR5cGUgfS0tZGVuc2VgIDogJycpXG4gICAgKyAocHJvcHMubGVmdExhYmVsID09PSB0cnVlID8gJyByZXZlcnNlJyA6ICcnKVxuICApXG5cbiAgY29uc3QgaW5uZXJDbGFzcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBzdGF0ZSA9IGlzVHJ1ZS52YWx1ZSA9PT0gdHJ1ZSA/ICd0cnV0aHknIDogKGlzRmFsc2UudmFsdWUgPT09IHRydWUgPyAnZmFsc3knIDogJ2luZGV0JylcbiAgICBjb25zdCBjb2xvciA9IHByb3BzLmNvbG9yICE9PSB2b2lkIDAgJiYgKFxuICAgICAgcHJvcHMua2VlcENvbG9yID09PSB0cnVlXG4gICAgICB8fCAodHlwZSA9PT0gJ3RvZ2dsZScgPyBpc1RydWUudmFsdWUgPT09IHRydWUgOiBpc0ZhbHNlLnZhbHVlICE9PSB0cnVlKVxuICAgIClcbiAgICAgID8gYCB0ZXh0LSR7IHByb3BzLmNvbG9yIH1gXG4gICAgICA6ICcnXG5cbiAgICByZXR1cm4gYHEtJHsgdHlwZSB9X19pbm5lciByZWxhdGl2ZS1wb3NpdGlvbiBub24tc2VsZWN0YWJsZSBxLSR7IHR5cGUgfV9faW5uZXItLSR7IHN0YXRlIH0keyBjb2xvciB9YFxuICB9KVxuXG4gIGNvbnN0IGZvcm1BdHRycyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBwcm9wID0geyB0eXBlOiAnY2hlY2tib3gnIH1cblxuICAgIHByb3BzLm5hbWUgIT09IHZvaWQgMCAmJiBPYmplY3QuYXNzaWduKHByb3AsIHtcbiAgICAgIC8vIHNlZSBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9leHRyYXMvcmVuZGVyLWZ1bmN0aW9uLmh0bWwjY3JlYXRpbmctdm5vZGVzICgucHJvcClcbiAgICAgICcuY2hlY2tlZCc6IGlzVHJ1ZS52YWx1ZSxcbiAgICAgICdeY2hlY2tlZCc6IGlzVHJ1ZS52YWx1ZSA9PT0gdHJ1ZSA/ICdjaGVja2VkJyA6IHZvaWQgMCxcbiAgICAgIG5hbWU6IHByb3BzLm5hbWUsXG4gICAgICB2YWx1ZTogbW9kZWxJc0FycmF5LnZhbHVlID09PSB0cnVlXG4gICAgICAgID8gcHJvcHMudmFsXG4gICAgICAgIDogcHJvcHMudHJ1ZVZhbHVlXG4gICAgfSlcblxuICAgIHJldHVybiBwcm9wXG4gIH0pXG5cbiAgY29uc3QgaW5qZWN0Rm9ybUlucHV0ID0gdXNlRm9ybUluamVjdChmb3JtQXR0cnMpXG5cbiAgY29uc3QgYXR0cmlidXRlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBhdHRycyA9IHtcbiAgICAgIHRhYmluZGV4OiB0YWJpbmRleC52YWx1ZSxcbiAgICAgIHJvbGU6IHR5cGUgPT09ICd0b2dnbGUnID8gJ3N3aXRjaCcgOiAnY2hlY2tib3gnLFxuICAgICAgJ2FyaWEtbGFiZWwnOiBwcm9wcy5sYWJlbCxcbiAgICAgICdhcmlhLWNoZWNrZWQnOiBpc0luZGV0ZXJtaW5hdGUudmFsdWUgPT09IHRydWVcbiAgICAgICAgPyAnbWl4ZWQnXG4gICAgICAgIDogKGlzVHJ1ZS52YWx1ZSA9PT0gdHJ1ZSA/ICd0cnVlJyA6ICdmYWxzZScpXG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmRpc2FibGUgPT09IHRydWUpIHtcbiAgICAgIGF0dHJzWyAnYXJpYS1kaXNhYmxlZCcgXSA9ICd0cnVlJ1xuICAgIH1cblxuICAgIHJldHVybiBhdHRyc1xuICB9KVxuXG4gIGZ1bmN0aW9uIG9uQ2xpY2sgKGUpIHtcbiAgICBpZiAoZSAhPT0gdm9pZCAwKSB7XG4gICAgICBzdG9wQW5kUHJldmVudChlKVxuICAgICAgcmVmb2N1c1RhcmdldChlKVxuICAgIH1cblxuICAgIGlmIChwcm9wcy5kaXNhYmxlICE9PSB0cnVlKSB7XG4gICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIGdldE5leHRWYWx1ZSgpLCBlKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE5leHRWYWx1ZSAoKSB7XG4gICAgaWYgKG1vZGVsSXNBcnJheS52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgaWYgKGlzVHJ1ZS52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zdCB2YWwgPSBwcm9wcy5tb2RlbFZhbHVlLnNsaWNlKClcbiAgICAgICAgdmFsLnNwbGljZShpbmRleC52YWx1ZSwgMSlcbiAgICAgICAgcmV0dXJuIHZhbFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvcHMubW9kZWxWYWx1ZS5jb25jYXQoWyBwcm9wcy52YWwgXSlcbiAgICB9XG5cbiAgICBpZiAoaXNUcnVlLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICBpZiAocHJvcHMudG9nZ2xlT3JkZXIgIT09ICdmdCcgfHwgcHJvcHMudG9nZ2xlSW5kZXRlcm1pbmF0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmZhbHNlVmFsdWVcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNGYWxzZS52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgaWYgKHByb3BzLnRvZ2dsZU9yZGVyID09PSAnZnQnIHx8IHByb3BzLnRvZ2dsZUluZGV0ZXJtaW5hdGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBwcm9wcy50cnVlVmFsdWVcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gcHJvcHMudG9nZ2xlT3JkZXIgIT09ICdmdCdcbiAgICAgICAgPyBwcm9wcy50cnVlVmFsdWVcbiAgICAgICAgOiBwcm9wcy5mYWxzZVZhbHVlXG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BzLmluZGV0ZXJtaW5hdGVWYWx1ZVxuICB9XG5cbiAgZnVuY3Rpb24gb25LZXlkb3duIChlKSB7XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gMTMgfHwgZS5rZXlDb2RlID09PSAzMikge1xuICAgICAgc3RvcEFuZFByZXZlbnQoZSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbktleXVwIChlKSB7XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gMTMgfHwgZS5rZXlDb2RlID09PSAzMikge1xuICAgICAgb25DbGljayhlKVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGdldElubmVyQ29udGVudCA9IGdldElubmVyKGlzVHJ1ZSwgaXNJbmRldGVybWluYXRlKVxuXG4gIC8vIGV4cG9zZSBwdWJsaWMgbWV0aG9kc1xuICBPYmplY3QuYXNzaWduKHByb3h5LCB7IHRvZ2dsZTogb25DbGljayB9KVxuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgY29uc3QgaW5uZXIgPSBnZXRJbm5lckNvbnRlbnQoKVxuXG4gICAgcHJvcHMuZGlzYWJsZSAhPT0gdHJ1ZSAmJiBpbmplY3RGb3JtSW5wdXQoXG4gICAgICBpbm5lcixcbiAgICAgICd1bnNoaWZ0JyxcbiAgICAgIGAgcS0keyB0eXBlIH1fX25hdGl2ZSBhYnNvbHV0ZSBxLW1hLW5vbmUgcS1wYS1ub25lYFxuICAgIClcblxuICAgIGNvbnN0IGNoaWxkID0gW1xuICAgICAgaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogaW5uZXJDbGFzcy52YWx1ZSxcbiAgICAgICAgc3R5bGU6IHNpemVTdHlsZS52YWx1ZSxcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnXG4gICAgICB9LCBpbm5lcilcbiAgICBdXG5cbiAgICBpZiAocmVmb2N1c1RhcmdldEVsLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICBjaGlsZC5wdXNoKHJlZm9jdXNUYXJnZXRFbC52YWx1ZSlcbiAgICB9XG5cbiAgICBjb25zdCBsYWJlbCA9IHByb3BzLmxhYmVsICE9PSB2b2lkIDBcbiAgICAgID8gaE1lcmdlU2xvdChzbG90cy5kZWZhdWx0LCBbIHByb3BzLmxhYmVsIF0pXG4gICAgICA6IGhTbG90KHNsb3RzLmRlZmF1bHQpXG5cbiAgICBsYWJlbCAhPT0gdm9pZCAwICYmIGNoaWxkLnB1c2goXG4gICAgICBoKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzOiBgcS0keyB0eXBlIH1fX2xhYmVsIHEtYW5jaG9yLS1za2lwYFxuICAgICAgfSwgbGFiZWwpXG4gICAgKVxuXG4gICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgIHJlZjogcm9vdFJlZixcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgLi4uYXR0cmlidXRlcy52YWx1ZSxcbiAgICAgIG9uQ2xpY2ssXG4gICAgICBvbktleWRvd24sXG4gICAgICBvbktleXVwXG4gICAgfSwgY2hpbGQpXG4gIH1cbn1cbiIsImltcG9ydCB7IGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgUUljb24gZnJvbSAnLi4vaWNvbi9RSWNvbi5qcydcblxuaW1wb3J0IHsgY3JlYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5jcmVhdGUvY3JlYXRlLmpzJ1xuaW1wb3J0IHVzZUNoZWNrYm94LCB7IHVzZUNoZWNrYm94UHJvcHMsIHVzZUNoZWNrYm94RW1pdHMgfSBmcm9tICcuL3VzZS1jaGVja2JveC5qcydcblxuY29uc3QgY3JlYXRlQmdOb2RlID0gKCkgPT4gaCgnZGl2Jywge1xuICBrZXk6ICdzdmcnLFxuICBjbGFzczogJ3EtY2hlY2tib3hfX2JnIGFic29sdXRlJ1xufSwgW1xuICBoKCdzdmcnLCB7XG4gICAgY2xhc3M6ICdxLWNoZWNrYm94X19zdmcgZml0IGFic29sdXRlLWZ1bGwnLFxuICAgIHZpZXdCb3g6ICcwIDAgMjQgMjQnXG4gIH0sIFtcbiAgICBoKCdwYXRoJywge1xuICAgICAgY2xhc3M6ICdxLWNoZWNrYm94X190cnV0aHknLFxuICAgICAgZmlsbDogJ25vbmUnLFxuICAgICAgZDogJ00xLjczLDEyLjkxIDguMSwxOS4yOCAyMi43OSw0LjU5J1xuICAgIH0pLFxuXG4gICAgaCgncGF0aCcsIHtcbiAgICAgIGNsYXNzOiAncS1jaGVja2JveF9faW5kZXQnLFxuICAgICAgZDogJ000LDE0SDIwVjEwSDQnXG4gICAgfSlcbiAgXSlcbl0pXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRQ2hlY2tib3gnLFxuXG4gIHByb3BzOiB1c2VDaGVja2JveFByb3BzLFxuICBlbWl0czogdXNlQ2hlY2tib3hFbWl0cyxcblxuICBzZXR1cCAocHJvcHMpIHtcbiAgICBjb25zdCBiZ05vZGUgPSBjcmVhdGVCZ05vZGUoKVxuXG4gICAgZnVuY3Rpb24gZ2V0SW5uZXIgKGlzVHJ1ZSwgaXNJbmRldGVybWluYXRlKSB7XG4gICAgICBjb25zdCBpY29uID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgICAgKGlzVHJ1ZS52YWx1ZSA9PT0gdHJ1ZVxuICAgICAgICAgID8gcHJvcHMuY2hlY2tlZEljb25cbiAgICAgICAgICA6IChpc0luZGV0ZXJtaW5hdGUudmFsdWUgPT09IHRydWVcbiAgICAgICAgICAgICAgPyBwcm9wcy5pbmRldGVybWluYXRlSWNvblxuICAgICAgICAgICAgICA6IHByb3BzLnVuY2hlY2tlZEljb25cbiAgICAgICAgICAgIClcbiAgICAgICAgKSB8fCBudWxsXG4gICAgICApXG5cbiAgICAgIHJldHVybiAoKSA9PiAoXG4gICAgICAgIGljb24udmFsdWUgIT09IG51bGxcbiAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgaCgnZGl2Jywge1xuICAgICAgICAgICAgICAgIGtleTogJ2ljb24nLFxuICAgICAgICAgICAgICAgIGNsYXNzOiAncS1jaGVja2JveF9faWNvbi1jb250YWluZXIgYWJzb2x1dGUtZnVsbCBmbGV4IGZsZXgtY2VudGVyIG5vLXdyYXAnXG4gICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICBoKFFJY29uLCB7XG4gICAgICAgICAgICAgICAgICBjbGFzczogJ3EtY2hlY2tib3hfX2ljb24nLFxuICAgICAgICAgICAgICAgICAgbmFtZTogaWNvbi52YWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdXG4gICAgICAgICAgOiBbIGJnTm9kZSBdXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIHVzZUNoZWNrYm94KCdjaGVja2JveCcsIGdldElubmVyKVxuICB9XG59KVxuIiwiaW1wb3J0IHsgcmVmLCB3YXRjaCwgb25CZWZvcmVNb3VudCwgb25Nb3VudGVkLCBvbkJlZm9yZVVubW91bnQsIGdldEN1cnJlbnRJbnN0YW5jZSB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IEhpc3RvcnkgZnJvbSAnLi4vLi4vcGx1Z2lucy9wcml2YXRlLmhpc3RvcnkvSGlzdG9yeS5qcydcbmltcG9ydCB7IHZtSGFzUm91dGVyIH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS52bS92bS5qcydcblxubGV0IGNvdW50ZXIgPSAwXG5cbmV4cG9ydCBjb25zdCB1c2VGdWxsc2NyZWVuUHJvcHMgPSB7XG4gIGZ1bGxzY3JlZW46IEJvb2xlYW4sXG4gIG5vUm91dGVGdWxsc2NyZWVuRXhpdDogQm9vbGVhblxufVxuXG5leHBvcnQgY29uc3QgdXNlRnVsbHNjcmVlbkVtaXRzID0gWyAndXBkYXRlOmZ1bGxzY3JlZW4nLCAnZnVsbHNjcmVlbicgXVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHZtID0gZ2V0Q3VycmVudEluc3RhbmNlKClcbiAgY29uc3QgeyBwcm9wcywgZW1pdCwgcHJveHkgfSA9IHZtXG5cbiAgbGV0IGhpc3RvcnlFbnRyeSwgZnVsbHNjcmVlbkZpbGxlck5vZGUsIGNvbnRhaW5lclxuICBjb25zdCBpbkZ1bGxzY3JlZW4gPSByZWYoZmFsc2UpXG5cbiAgdm1IYXNSb3V0ZXIodm0pID09PSB0cnVlICYmIHdhdGNoKCgpID0+IHByb3h5LiRyb3V0ZS5mdWxsUGF0aCwgKCkgPT4ge1xuICAgIHByb3BzLm5vUm91dGVGdWxsc2NyZWVuRXhpdCAhPT0gdHJ1ZSAmJiBleGl0RnVsbHNjcmVlbigpXG4gIH0pXG5cbiAgd2F0Y2goKCkgPT4gcHJvcHMuZnVsbHNjcmVlbiwgdiA9PiB7XG4gICAgaWYgKGluRnVsbHNjcmVlbi52YWx1ZSAhPT0gdikge1xuICAgICAgdG9nZ2xlRnVsbHNjcmVlbigpXG4gICAgfVxuICB9KVxuXG4gIHdhdGNoKGluRnVsbHNjcmVlbiwgdiA9PiB7XG4gICAgZW1pdCgndXBkYXRlOmZ1bGxzY3JlZW4nLCB2KVxuICAgIGVtaXQoJ2Z1bGxzY3JlZW4nLCB2KVxuICB9KVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZUZ1bGxzY3JlZW4gKCkge1xuICAgIGlmIChpbkZ1bGxzY3JlZW4udmFsdWUgPT09IHRydWUpIHtcbiAgICAgIGV4aXRGdWxsc2NyZWVuKClcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzZXRGdWxsc2NyZWVuKClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRGdWxsc2NyZWVuICgpIHtcbiAgICBpZiAoaW5GdWxsc2NyZWVuLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpbkZ1bGxzY3JlZW4udmFsdWUgPSB0cnVlXG4gICAgY29udGFpbmVyID0gcHJveHkuJGVsLnBhcmVudE5vZGVcbiAgICBjb250YWluZXIucmVwbGFjZUNoaWxkKGZ1bGxzY3JlZW5GaWxsZXJOb2RlLCBwcm94eS4kZWwpXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChwcm94eS4kZWwpXG5cbiAgICBjb3VudGVyKytcbiAgICBpZiAoY291bnRlciA9PT0gMSkge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdxLWJvZHktLWZ1bGxzY3JlZW4tbWl4aW4nKVxuICAgIH1cblxuICAgIGhpc3RvcnlFbnRyeSA9IHtcbiAgICAgIGhhbmRsZXI6IGV4aXRGdWxsc2NyZWVuXG4gICAgfVxuICAgIEhpc3RvcnkuYWRkKGhpc3RvcnlFbnRyeSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4aXRGdWxsc2NyZWVuICgpIHtcbiAgICBpZiAoaW5GdWxsc2NyZWVuLnZhbHVlICE9PSB0cnVlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaGlzdG9yeUVudHJ5ICE9PSB2b2lkIDApIHtcbiAgICAgIEhpc3RvcnkucmVtb3ZlKGhpc3RvcnlFbnRyeSlcbiAgICAgIGhpc3RvcnlFbnRyeSA9IHZvaWQgMFxuICAgIH1cblxuICAgIGNvbnRhaW5lci5yZXBsYWNlQ2hpbGQocHJveHkuJGVsLCBmdWxsc2NyZWVuRmlsbGVyTm9kZSlcbiAgICBpbkZ1bGxzY3JlZW4udmFsdWUgPSBmYWxzZVxuXG4gICAgY291bnRlciA9IE1hdGgubWF4KDAsIGNvdW50ZXIgLSAxKVxuXG4gICAgaWYgKGNvdW50ZXIgPT09IDApIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgncS1ib2R5LS1mdWxsc2NyZWVuLW1peGluJylcblxuICAgICAgaWYgKHByb3h5LiRlbC5zY3JvbGxJbnRvVmlldyAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyBwcm94eS4kZWwuc2Nyb2xsSW50b1ZpZXcoKSB9KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAgIGZ1bGxzY3JlZW5GaWxsZXJOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG4gIH0pXG5cbiAgb25Nb3VudGVkKCgpID0+IHtcbiAgICBwcm9wcy5mdWxsc2NyZWVuID09PSB0cnVlICYmIHNldEZ1bGxzY3JlZW4oKVxuICB9KVxuXG4gIG9uQmVmb3JlVW5tb3VudChleGl0RnVsbHNjcmVlbilcblxuICAvLyBleHBvc2UgcHVibGljIG1ldGhvZHNcbiAgT2JqZWN0LmFzc2lnbihwcm94eSwge1xuICAgIHRvZ2dsZUZ1bGxzY3JlZW4sXG4gICAgc2V0RnVsbHNjcmVlbixcbiAgICBleGl0RnVsbHNjcmVlblxuICB9KVxuXG4gIHJldHVybiB7XG4gICAgaW5GdWxsc2NyZWVuLFxuICAgIHRvZ2dsZUZ1bGxzY3JlZW5cbiAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHNvcnREYXRlIChhLCBiKSB7XG4gIHJldHVybiAobmV3IERhdGUoYSkpIC0gKG5ldyBEYXRlKGIpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc29ydEJvb2xlYW4gKGEsIGIpIHtcbiAgcmV0dXJuIGEgJiYgIWJcbiAgICA/IC0xXG4gICAgOiAoIWEgJiYgYiA/IDEgOiAwKVxufVxuIiwiaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG5cbmltcG9ydCB7IHNvcnREYXRlIH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5zb3J0L3NvcnQuanMnXG5pbXBvcnQgeyBpc051bWJlciwgaXNEYXRlLCBpc09iamVjdCB9IGZyb20gJy4uLy4uL3V0aWxzL2lzL2lzLmpzJ1xuXG5leHBvcnQgY29uc3QgdXNlVGFibGVTb3J0UHJvcHMgPSB7XG4gIHNvcnRNZXRob2Q6IEZ1bmN0aW9uLFxuICBiaW5hcnlTdGF0ZVNvcnQ6IEJvb2xlYW4sXG4gIGNvbHVtblNvcnRPcmRlcjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICB2YWxpZGF0b3I6IHYgPT4gdiA9PT0gJ2FkJyB8fCB2ID09PSAnZGEnLFxuICAgIGRlZmF1bHQ6ICdhZCdcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlVGFibGVTb3J0IChwcm9wcywgY29tcHV0ZWRQYWdpbmF0aW9uLCBjb2xMaXN0LCBzZXRQYWdpbmF0aW9uKSB7XG4gIGNvbnN0IGNvbHVtblRvU29ydCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCB7IHNvcnRCeSB9ID0gY29tcHV0ZWRQYWdpbmF0aW9uLnZhbHVlXG5cbiAgICByZXR1cm4gc29ydEJ5XG4gICAgICA/IGNvbExpc3QudmFsdWUuZmluZChkZWYgPT4gZGVmLm5hbWUgPT09IHNvcnRCeSkgfHwgbnVsbFxuICAgICAgOiBudWxsXG4gIH0pXG5cbiAgY29uc3QgY29tcHV0ZWRTb3J0TWV0aG9kID0gY29tcHV0ZWQoKCkgPT4gKFxuICAgIHByb3BzLnNvcnRNZXRob2QgIT09IHZvaWQgMFxuICAgICAgPyBwcm9wcy5zb3J0TWV0aG9kXG4gICAgICA6IChkYXRhLCBzb3J0QnksIGRlc2NlbmRpbmcpID0+IHtcbiAgICAgICAgICBjb25zdCBjb2wgPSBjb2xMaXN0LnZhbHVlLmZpbmQoZGVmID0+IGRlZi5uYW1lID09PSBzb3J0QnkpXG4gICAgICAgICAgaWYgKGNvbCA9PT0gdm9pZCAwIHx8IGNvbC5maWVsZCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICBkaXIgPSBkZXNjZW5kaW5nID09PSB0cnVlID8gLTEgOiAxLFxuICAgICAgICAgICAgdmFsID0gdHlwZW9mIGNvbC5maWVsZCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICA/IHYgPT4gY29sLmZpZWxkKHYpXG4gICAgICAgICAgICAgIDogdiA9PiB2WyBjb2wuZmllbGQgXVxuXG4gICAgICAgICAgcmV0dXJuIGRhdGEuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgbGV0XG4gICAgICAgICAgICAgIEEgPSB2YWwoYSksXG4gICAgICAgICAgICAgIEIgPSB2YWwoYilcblxuICAgICAgICAgICAgaWYgKGNvbC5yYXdTb3J0ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvbC5yYXdTb3J0KEEsIEIsIGEsIGIpICogZGlyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQSA9PT0gbnVsbCB8fCBBID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC0xICogZGlyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQiA9PT0gbnVsbCB8fCBCID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDEgKiBkaXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb2wuc29ydCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgIC8vIGdldHMgY2FsbGVkIHdpdGhvdXQgcm93cyB0aGF0IGhhdmUgbnVsbC91bmRlZmluZWQgYXMgdmFsdWVcbiAgICAgICAgICAgICAgLy8gZHVlIHRvIHRoZSBhYm92ZSB0d28gc3RhdGVtZW50c1xuICAgICAgICAgICAgICByZXR1cm4gY29sLnNvcnQoQSwgQiwgYSwgYikgKiBkaXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc051bWJlcihBKSA9PT0gdHJ1ZSAmJiBpc051bWJlcihCKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gKEEgLSBCKSAqIGRpclxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRGF0ZShBKSA9PT0gdHJ1ZSAmJiBpc0RhdGUoQikgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNvcnREYXRlKEEsIEIpICogZGlyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIEEgPT09ICdib29sZWFuJyAmJiB0eXBlb2YgQiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgIHJldHVybiAoQSAtIEIpICogZGlyXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFsgQSwgQiBdID0gWyBBLCBCIF0ubWFwKHMgPT4gKHMgKyAnJykudG9Mb2NhbGVTdHJpbmcoKS50b0xvd2VyQ2FzZSgpKVxuXG4gICAgICAgICAgICByZXR1cm4gQSA8IEJcbiAgICAgICAgICAgICAgPyAtMSAqIGRpclxuICAgICAgICAgICAgICA6IChBID09PSBCID8gMCA6IGRpcilcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICkpXG5cbiAgZnVuY3Rpb24gc29ydCAoY29sIC8qIFN0cmluZyhjb2wgbmFtZSkgb3IgT2JqZWN0KGNvbCBkZWZpbml0aW9uKSAqLykge1xuICAgIGxldCBzb3J0T3JkZXIgPSBwcm9wcy5jb2x1bW5Tb3J0T3JkZXJcblxuICAgIGlmIChpc09iamVjdChjb2wpID09PSB0cnVlKSB7XG4gICAgICBpZiAoY29sLnNvcnRPcmRlcikge1xuICAgICAgICBzb3J0T3JkZXIgPSBjb2wuc29ydE9yZGVyXG4gICAgICB9XG5cbiAgICAgIGNvbCA9IGNvbC5uYW1lXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY29uc3QgZGVmID0gY29sTGlzdC52YWx1ZS5maW5kKGRlZiA9PiBkZWYubmFtZSA9PT0gY29sKVxuICAgICAgaWYgKGRlZiAhPT0gdm9pZCAwICYmIGRlZi5zb3J0T3JkZXIpIHtcbiAgICAgICAgc29ydE9yZGVyID0gZGVmLnNvcnRPcmRlclxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCB7IHNvcnRCeSwgZGVzY2VuZGluZyB9ID0gY29tcHV0ZWRQYWdpbmF0aW9uLnZhbHVlXG5cbiAgICBpZiAoc29ydEJ5ICE9PSBjb2wpIHtcbiAgICAgIHNvcnRCeSA9IGNvbFxuICAgICAgZGVzY2VuZGluZyA9IHNvcnRPcmRlciA9PT0gJ2RhJ1xuICAgIH1cbiAgICBlbHNlIGlmIChwcm9wcy5iaW5hcnlTdGF0ZVNvcnQgPT09IHRydWUpIHtcbiAgICAgIGRlc2NlbmRpbmcgPSAhZGVzY2VuZGluZ1xuICAgIH1cbiAgICBlbHNlIGlmIChkZXNjZW5kaW5nID09PSB0cnVlKSB7XG4gICAgICBpZiAoc29ydE9yZGVyID09PSAnYWQnKSB7XG4gICAgICAgIHNvcnRCeSA9IG51bGxcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBkZXNjZW5kaW5nID0gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7IC8vIGFzY2VuZGluZ1xuICAgICAgaWYgKHNvcnRPcmRlciA9PT0gJ2FkJykge1xuICAgICAgICBkZXNjZW5kaW5nID0gdHJ1ZVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHNvcnRCeSA9IG51bGxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRQYWdpbmF0aW9uKHsgc29ydEJ5LCBkZXNjZW5kaW5nLCBwYWdlOiAxIH0pXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNvbHVtblRvU29ydCxcbiAgICBjb21wdXRlZFNvcnRNZXRob2QsXG4gICAgc29ydFxuICB9XG59XG4iLCJpbXBvcnQgeyBjb21wdXRlZCwgd2F0Y2gsIG5leHRUaWNrIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgY29uc3QgdXNlVGFibGVGaWx0ZXJQcm9wcyA9IHtcbiAgZmlsdGVyOiBbIFN0cmluZywgT2JqZWN0IF0sXG4gIGZpbHRlck1ldGhvZDogRnVuY3Rpb25cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRhYmxlRmlsdGVyIChwcm9wcywgc2V0UGFnaW5hdGlvbikge1xuICBjb25zdCBjb21wdXRlZEZpbHRlck1ldGhvZCA9IGNvbXB1dGVkKCgpID0+IChcbiAgICBwcm9wcy5maWx0ZXJNZXRob2QgIT09IHZvaWQgMFxuICAgICAgPyBwcm9wcy5maWx0ZXJNZXRob2RcbiAgICAgIDogKHJvd3MsIHRlcm1zLCBjb2xzLCBjZWxsVmFsdWUpID0+IHtcbiAgICAgICAgICBjb25zdCBsb3dlclRlcm1zID0gdGVybXMgPyB0ZXJtcy50b0xvd2VyQ2FzZSgpIDogJydcbiAgICAgICAgICByZXR1cm4gcm93cy5maWx0ZXIoXG4gICAgICAgICAgICByb3cgPT4gY29scy5zb21lKGNvbCA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbCA9IGNlbGxWYWx1ZShjb2wsIHJvdykgKyAnJ1xuICAgICAgICAgICAgICBjb25zdCBoYXlzdGFjayA9ICh2YWwgPT09ICd1bmRlZmluZWQnIHx8IHZhbCA9PT0gJ251bGwnKSA/ICcnIDogdmFsLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgcmV0dXJuIGhheXN0YWNrLmluZGV4T2YobG93ZXJUZXJtcykgIT09IC0xXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICApKVxuXG4gIHdhdGNoKFxuICAgICgpID0+IHByb3BzLmZpbHRlcixcbiAgICAoKSA9PiB7XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHNldFBhZ2luYXRpb24oeyBwYWdlOiAxIH0sIHRydWUpXG4gICAgICB9KVxuICAgIH0sXG4gICAgeyBkZWVwOiB0cnVlIH1cbiAgKVxuXG4gIHJldHVybiB7IGNvbXB1dGVkRmlsdGVyTWV0aG9kIH1cbn1cbiIsImltcG9ydCB7IHJlZiwgY29tcHV0ZWQsIHdhdGNoLCBuZXh0VGljayB9IGZyb20gJ3Z1ZSdcblxuZnVuY3Rpb24gc2FtZVBhZ2luYXRpb24gKG9sZFBhZywgbmV3UGFnKSB7XG4gIGZvciAoY29uc3QgcHJvcCBpbiBuZXdQYWcpIHtcbiAgICBpZiAobmV3UGFnWyBwcm9wIF0gIT09IG9sZFBhZ1sgcHJvcCBdKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gZml4UGFnaW5hdGlvbiAocCkge1xuICBpZiAocC5wYWdlIDwgMSkge1xuICAgIHAucGFnZSA9IDFcbiAgfVxuICBpZiAocC5yb3dzUGVyUGFnZSAhPT0gdm9pZCAwICYmIHAucm93c1BlclBhZ2UgPCAxKSB7XG4gICAgcC5yb3dzUGVyUGFnZSA9IDBcbiAgfVxuICByZXR1cm4gcFxufVxuXG5leHBvcnQgY29uc3QgdXNlVGFibGVQYWdpbmF0aW9uUHJvcHMgPSB7XG4gIHBhZ2luYXRpb246IE9iamVjdCxcbiAgcm93c1BlclBhZ2VPcHRpb25zOiB7XG4gICAgdHlwZTogQXJyYXksXG4gICAgZGVmYXVsdDogKCkgPT4gWyA1LCA3LCAxMCwgMTUsIDIwLCAyNSwgNTAsIDAgXVxuICB9LFxuXG4gICdvblVwZGF0ZTpwYWdpbmF0aW9uJzogWyBGdW5jdGlvbiwgQXJyYXkgXVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlVGFibGVQYWdpbmF0aW9uU3RhdGUgKHZtLCBnZXRDZWxsVmFsdWUpIHtcbiAgY29uc3QgeyBwcm9wcywgZW1pdCB9ID0gdm1cblxuICBjb25zdCBpbm5lclBhZ2luYXRpb24gPSByZWYoXG4gICAgT2JqZWN0LmFzc2lnbih7XG4gICAgICBzb3J0Qnk6IG51bGwsXG4gICAgICBkZXNjZW5kaW5nOiBmYWxzZSxcbiAgICAgIHBhZ2U6IDEsXG4gICAgICByb3dzUGVyUGFnZTogcHJvcHMucm93c1BlclBhZ2VPcHRpb25zLmxlbmd0aCAhPT0gMFxuICAgICAgICA/IHByb3BzLnJvd3NQZXJQYWdlT3B0aW9uc1sgMCBdXG4gICAgICAgIDogNVxuICAgIH0sIHByb3BzLnBhZ2luYXRpb24pXG4gIClcblxuICBjb25zdCBjb21wdXRlZFBhZ2luYXRpb24gPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgcGFnID0gcHJvcHNbICdvblVwZGF0ZTpwYWdpbmF0aW9uJyBdICE9PSB2b2lkIDBcbiAgICAgID8geyAuLi5pbm5lclBhZ2luYXRpb24udmFsdWUsIC4uLnByb3BzLnBhZ2luYXRpb24gfVxuICAgICAgOiBpbm5lclBhZ2luYXRpb24udmFsdWVcblxuICAgIHJldHVybiBmaXhQYWdpbmF0aW9uKHBhZylcbiAgfSlcblxuICBjb25zdCBpc1NlcnZlclNpZGUgPSBjb21wdXRlZCgoKSA9PiBjb21wdXRlZFBhZ2luYXRpb24udmFsdWUucm93c051bWJlciAhPT0gdm9pZCAwKVxuXG4gIGZ1bmN0aW9uIHNlbmRTZXJ2ZXJSZXF1ZXN0IChwYWdpbmF0aW9uKSB7XG4gICAgcmVxdWVzdFNlcnZlckludGVyYWN0aW9uKHtcbiAgICAgIHBhZ2luYXRpb24sXG4gICAgICBmaWx0ZXI6IHByb3BzLmZpbHRlclxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiByZXF1ZXN0U2VydmVySW50ZXJhY3Rpb24gKHByb3AgPSB7fSkge1xuICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgIGVtaXQoJ3JlcXVlc3QnLCB7XG4gICAgICAgIHBhZ2luYXRpb246IHByb3AucGFnaW5hdGlvbiB8fCBjb21wdXRlZFBhZ2luYXRpb24udmFsdWUsXG4gICAgICAgIGZpbHRlcjogcHJvcC5maWx0ZXIgfHwgcHJvcHMuZmlsdGVyLFxuICAgICAgICBnZXRDZWxsVmFsdWVcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFBhZ2luYXRpb24gKHZhbCwgZm9yY2VTZXJ2ZXJSZXF1ZXN0KSB7XG4gICAgY29uc3QgbmV3UGFnaW5hdGlvbiA9IGZpeFBhZ2luYXRpb24oe1xuICAgICAgLi4uY29tcHV0ZWRQYWdpbmF0aW9uLnZhbHVlLFxuICAgICAgLi4udmFsXG4gICAgfSlcblxuICAgIGlmIChzYW1lUGFnaW5hdGlvbihjb21wdXRlZFBhZ2luYXRpb24udmFsdWUsIG5ld1BhZ2luYXRpb24pID09PSB0cnVlKSB7XG4gICAgICBpZiAoaXNTZXJ2ZXJTaWRlLnZhbHVlID09PSB0cnVlICYmIGZvcmNlU2VydmVyUmVxdWVzdCA9PT0gdHJ1ZSkge1xuICAgICAgICBzZW5kU2VydmVyUmVxdWVzdChuZXdQYWdpbmF0aW9uKVxuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGlzU2VydmVyU2lkZS52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgc2VuZFNlcnZlclJlcXVlc3QobmV3UGFnaW5hdGlvbilcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHByb3BzLnBhZ2luYXRpb24gIT09IHZvaWQgMFxuICAgICAgJiYgcHJvcHNbICdvblVwZGF0ZTpwYWdpbmF0aW9uJyBdICE9PSB2b2lkIDBcbiAgICApIHtcbiAgICAgIGVtaXQoJ3VwZGF0ZTpwYWdpbmF0aW9uJywgbmV3UGFnaW5hdGlvbilcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpbm5lclBhZ2luYXRpb24udmFsdWUgPSBuZXdQYWdpbmF0aW9uXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpbm5lclBhZ2luYXRpb24sXG4gICAgY29tcHV0ZWRQYWdpbmF0aW9uLFxuICAgIGlzU2VydmVyU2lkZSxcblxuICAgIHJlcXVlc3RTZXJ2ZXJJbnRlcmFjdGlvbixcbiAgICBzZXRQYWdpbmF0aW9uXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRhYmxlUGFnaW5hdGlvbiAodm0sIGlubmVyUGFnaW5hdGlvbiwgY29tcHV0ZWRQYWdpbmF0aW9uLCBpc1NlcnZlclNpZGUsIHNldFBhZ2luYXRpb24sIGZpbHRlcmVkU29ydGVkUm93c051bWJlcikge1xuICBjb25zdCB7IHByb3BzLCBlbWl0LCBwcm94eTogeyAkcSB9IH0gPSB2bVxuXG4gIGNvbnN0IGNvbXB1dGVkUm93c051bWJlciA9IGNvbXB1dGVkKCgpID0+IChcbiAgICBpc1NlcnZlclNpZGUudmFsdWUgPT09IHRydWVcbiAgICAgID8gY29tcHV0ZWRQYWdpbmF0aW9uLnZhbHVlLnJvd3NOdW1iZXIgfHwgMFxuICAgICAgOiBmaWx0ZXJlZFNvcnRlZFJvd3NOdW1iZXIudmFsdWVcbiAgKSlcblxuICBjb25zdCBmaXJzdFJvd0luZGV4ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IHsgcGFnZSwgcm93c1BlclBhZ2UgfSA9IGNvbXB1dGVkUGFnaW5hdGlvbi52YWx1ZVxuICAgIHJldHVybiAocGFnZSAtIDEpICogcm93c1BlclBhZ2VcbiAgfSlcblxuICBjb25zdCBsYXN0Um93SW5kZXggPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgeyBwYWdlLCByb3dzUGVyUGFnZSB9ID0gY29tcHV0ZWRQYWdpbmF0aW9uLnZhbHVlXG4gICAgcmV0dXJuIHBhZ2UgKiByb3dzUGVyUGFnZVxuICB9KVxuXG4gIGNvbnN0IGlzRmlyc3RQYWdlID0gY29tcHV0ZWQoKCkgPT4gY29tcHV0ZWRQYWdpbmF0aW9uLnZhbHVlLnBhZ2UgPT09IDEpXG5cbiAgY29uc3QgcGFnZXNOdW1iZXIgPSBjb21wdXRlZCgoKSA9PiAoXG4gICAgY29tcHV0ZWRQYWdpbmF0aW9uLnZhbHVlLnJvd3NQZXJQYWdlID09PSAwXG4gICAgICA/IDFcbiAgICAgIDogTWF0aC5tYXgoXG4gICAgICAgIDEsXG4gICAgICAgIE1hdGguY2VpbChjb21wdXRlZFJvd3NOdW1iZXIudmFsdWUgLyBjb21wdXRlZFBhZ2luYXRpb24udmFsdWUucm93c1BlclBhZ2UpXG4gICAgICApXG4gICkpXG5cbiAgY29uc3QgaXNMYXN0UGFnZSA9IGNvbXB1dGVkKCgpID0+IChcbiAgICBsYXN0Um93SW5kZXgudmFsdWUgPT09IDBcbiAgICAgID8gdHJ1ZVxuICAgICAgOiBjb21wdXRlZFBhZ2luYXRpb24udmFsdWUucGFnZSA+PSBwYWdlc051bWJlci52YWx1ZVxuICApKVxuXG4gIGNvbnN0IGNvbXB1dGVkUm93c1BlclBhZ2VPcHRpb25zID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IG9wdHMgPSBwcm9wcy5yb3dzUGVyUGFnZU9wdGlvbnMuaW5jbHVkZXMoaW5uZXJQYWdpbmF0aW9uLnZhbHVlLnJvd3NQZXJQYWdlKVxuICAgICAgPyBwcm9wcy5yb3dzUGVyUGFnZU9wdGlvbnNcbiAgICAgIDogWyBpbm5lclBhZ2luYXRpb24udmFsdWUucm93c1BlclBhZ2UgXS5jb25jYXQocHJvcHMucm93c1BlclBhZ2VPcHRpb25zKVxuXG4gICAgcmV0dXJuIG9wdHMubWFwKGNvdW50ID0+ICh7XG4gICAgICBsYWJlbDogY291bnQgPT09IDAgPyAkcS5sYW5nLnRhYmxlLmFsbFJvd3MgOiAnJyArIGNvdW50LFxuICAgICAgdmFsdWU6IGNvdW50XG4gICAgfSkpXG4gIH0pXG5cbiAgd2F0Y2gocGFnZXNOdW1iZXIsIChsYXN0UGFnZSwgb2xkTGFzdFBhZ2UpID0+IHtcbiAgICBpZiAobGFzdFBhZ2UgPT09IG9sZExhc3RQYWdlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBjdXJyZW50UGFnZSA9IGNvbXB1dGVkUGFnaW5hdGlvbi52YWx1ZS5wYWdlXG4gICAgaWYgKGxhc3RQYWdlICYmICFjdXJyZW50UGFnZSkge1xuICAgICAgc2V0UGFnaW5hdGlvbih7IHBhZ2U6IDEgfSlcbiAgICB9XG4gICAgZWxzZSBpZiAobGFzdFBhZ2UgPCBjdXJyZW50UGFnZSkge1xuICAgICAgc2V0UGFnaW5hdGlvbih7IHBhZ2U6IGxhc3RQYWdlIH0pXG4gICAgfVxuICB9KVxuXG4gIGZ1bmN0aW9uIGZpcnN0UGFnZSAoKSB7XG4gICAgc2V0UGFnaW5hdGlvbih7IHBhZ2U6IDEgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHByZXZQYWdlICgpIHtcbiAgICBjb25zdCB7IHBhZ2UgfSA9IGNvbXB1dGVkUGFnaW5hdGlvbi52YWx1ZVxuICAgIGlmIChwYWdlID4gMSkge1xuICAgICAgc2V0UGFnaW5hdGlvbih7IHBhZ2U6IHBhZ2UgLSAxIH0pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbmV4dFBhZ2UgKCkge1xuICAgIGNvbnN0IHsgcGFnZSwgcm93c1BlclBhZ2UgfSA9IGNvbXB1dGVkUGFnaW5hdGlvbi52YWx1ZVxuICAgIGlmIChsYXN0Um93SW5kZXgudmFsdWUgPiAwICYmIHBhZ2UgKiByb3dzUGVyUGFnZSA8IGNvbXB1dGVkUm93c051bWJlci52YWx1ZSkge1xuICAgICAgc2V0UGFnaW5hdGlvbih7IHBhZ2U6IHBhZ2UgKyAxIH0pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbGFzdFBhZ2UgKCkge1xuICAgIHNldFBhZ2luYXRpb24oeyBwYWdlOiBwYWdlc051bWJlci52YWx1ZSB9KVxuICB9XG5cbiAgaWYgKHByb3BzWyAnb25VcGRhdGU6cGFnaW5hdGlvbicgXSAhPT0gdm9pZCAwKSB7XG4gICAgZW1pdCgndXBkYXRlOnBhZ2luYXRpb24nLCB7IC4uLmNvbXB1dGVkUGFnaW5hdGlvbi52YWx1ZSB9KVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmaXJzdFJvd0luZGV4LFxuICAgIGxhc3RSb3dJbmRleCxcbiAgICBpc0ZpcnN0UGFnZSxcbiAgICBpc0xhc3RQYWdlLFxuICAgIHBhZ2VzTnVtYmVyLFxuICAgIGNvbXB1dGVkUm93c1BlclBhZ2VPcHRpb25zLFxuICAgIGNvbXB1dGVkUm93c051bWJlcixcblxuICAgIGZpcnN0UGFnZSxcbiAgICBwcmV2UGFnZSxcbiAgICBuZXh0UGFnZSxcbiAgICBsYXN0UGFnZVxuICB9XG59XG4iLCJpbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGNvbnN0IHVzZVRhYmxlUm93U2VsZWN0aW9uUHJvcHMgPSB7XG4gIHNlbGVjdGlvbjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnbm9uZScsXG4gICAgdmFsaWRhdG9yOiB2ID0+IFsgJ3NpbmdsZScsICdtdWx0aXBsZScsICdub25lJyBdLmluY2x1ZGVzKHYpXG4gIH0sXG4gIHNlbGVjdGVkOiB7XG4gICAgdHlwZTogQXJyYXksXG4gICAgZGVmYXVsdDogKCkgPT4gW11cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdXNlVGFibGVSb3dTZWxlY3Rpb25FbWl0cyA9IFsgJ3VwZGF0ZTpzZWxlY3RlZCcsICdzZWxlY3Rpb24nIF1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRhYmxlUm93U2VsZWN0aW9uIChwcm9wcywgZW1pdCwgY29tcHV0ZWRSb3dzLCBnZXRSb3dLZXkpIHtcbiAgY29uc3Qgc2VsZWN0ZWRLZXlzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IGtleXMgPSB7fVxuICAgIHByb3BzLnNlbGVjdGVkLm1hcChnZXRSb3dLZXkudmFsdWUpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGtleXNbIGtleSBdID0gdHJ1ZVxuICAgIH0pXG4gICAgcmV0dXJuIGtleXNcbiAgfSlcblxuICBjb25zdCBoYXNTZWxlY3Rpb25Nb2RlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBwcm9wcy5zZWxlY3Rpb24gIT09ICdub25lJ1xuICB9KVxuXG4gIGNvbnN0IHNpbmdsZVNlbGVjdGlvbiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gcHJvcHMuc2VsZWN0aW9uID09PSAnc2luZ2xlJ1xuICB9KVxuXG4gIGNvbnN0IG11bHRpcGxlU2VsZWN0aW9uID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBwcm9wcy5zZWxlY3Rpb24gPT09ICdtdWx0aXBsZSdcbiAgfSlcblxuICBjb25zdCBhbGxSb3dzU2VsZWN0ZWQgPSBjb21wdXRlZCgoKSA9PlxuICAgIGNvbXB1dGVkUm93cy52YWx1ZS5sZW5ndGggIT09IDAgJiYgY29tcHV0ZWRSb3dzLnZhbHVlLmV2ZXJ5KFxuICAgICAgcm93ID0+IHNlbGVjdGVkS2V5cy52YWx1ZVsgZ2V0Um93S2V5LnZhbHVlKHJvdykgXSA9PT0gdHJ1ZVxuICAgIClcbiAgKVxuXG4gIGNvbnN0IHNvbWVSb3dzU2VsZWN0ZWQgPSBjb21wdXRlZCgoKSA9PlxuICAgIGFsbFJvd3NTZWxlY3RlZC52YWx1ZSAhPT0gdHJ1ZVxuICAgICYmIGNvbXB1dGVkUm93cy52YWx1ZS5zb21lKHJvdyA9PiBzZWxlY3RlZEtleXMudmFsdWVbIGdldFJvd0tleS52YWx1ZShyb3cpIF0gPT09IHRydWUpXG4gIClcblxuICBjb25zdCByb3dzU2VsZWN0ZWROdW1iZXIgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5zZWxlY3RlZC5sZW5ndGgpXG5cbiAgZnVuY3Rpb24gaXNSb3dTZWxlY3RlZCAoa2V5KSB7XG4gICAgcmV0dXJuIHNlbGVjdGVkS2V5cy52YWx1ZVsga2V5IF0gPT09IHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyU2VsZWN0aW9uICgpIHtcbiAgICBlbWl0KCd1cGRhdGU6c2VsZWN0ZWQnLCBbXSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVNlbGVjdGlvbiAoa2V5cywgcm93cywgYWRkZWQsIGV2dCkge1xuICAgIGVtaXQoJ3NlbGVjdGlvbicsIHsgcm93cywgYWRkZWQsIGtleXMsIGV2dCB9KVxuXG4gICAgY29uc3QgcGF5bG9hZCA9IHNpbmdsZVNlbGVjdGlvbi52YWx1ZSA9PT0gdHJ1ZVxuICAgICAgPyAoYWRkZWQgPT09IHRydWUgPyByb3dzIDogW10pXG4gICAgICA6IChcbiAgICAgICAgICBhZGRlZCA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyBwcm9wcy5zZWxlY3RlZC5jb25jYXQocm93cylcbiAgICAgICAgICAgIDogcHJvcHMuc2VsZWN0ZWQuZmlsdGVyKFxuICAgICAgICAgICAgICByb3cgPT4ga2V5cy5pbmNsdWRlcyhnZXRSb3dLZXkudmFsdWUocm93KSkgPT09IGZhbHNlXG4gICAgICAgICAgICApXG4gICAgICAgIClcblxuICAgIGVtaXQoJ3VwZGF0ZTpzZWxlY3RlZCcsIHBheWxvYWQpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGhhc1NlbGVjdGlvbk1vZGUsXG4gICAgc2luZ2xlU2VsZWN0aW9uLFxuICAgIG11bHRpcGxlU2VsZWN0aW9uLFxuICAgIGFsbFJvd3NTZWxlY3RlZCxcbiAgICBzb21lUm93c1NlbGVjdGVkLFxuICAgIHJvd3NTZWxlY3RlZE51bWJlcixcblxuICAgIGlzUm93U2VsZWN0ZWQsXG4gICAgY2xlYXJTZWxlY3Rpb24sXG4gICAgdXBkYXRlU2VsZWN0aW9uXG4gIH1cbn1cbiIsImltcG9ydCB7IHJlZiwgd2F0Y2ggfSBmcm9tICd2dWUnXG5cbmZ1bmN0aW9uIGdldFZhbCAodmFsKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbClcbiAgICA/IHZhbC5zbGljZSgpXG4gICAgOiBbXVxufVxuXG5leHBvcnQgY29uc3QgdXNlVGFibGVSb3dFeHBhbmRQcm9wcyA9IHtcbiAgZXhwYW5kZWQ6IEFycmF5IC8vIHYtbW9kZWw6ZXhwYW5kZWRcbn1cblxuZXhwb3J0IGNvbnN0IHVzZVRhYmxlUm93RXhwYW5kRW1pdHMgPSBbICd1cGRhdGU6ZXhwYW5kZWQnIF1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRhYmxlUm93RXhwYW5kIChwcm9wcywgZW1pdCkge1xuICBjb25zdCBpbm5lckV4cGFuZGVkID0gcmVmKGdldFZhbChwcm9wcy5leHBhbmRlZCkpXG5cbiAgd2F0Y2goKCkgPT4gcHJvcHMuZXhwYW5kZWQsIHZhbCA9PiB7XG4gICAgaW5uZXJFeHBhbmRlZC52YWx1ZSA9IGdldFZhbCh2YWwpXG4gIH0pXG5cbiAgZnVuY3Rpb24gaXNSb3dFeHBhbmRlZCAoa2V5KSB7XG4gICAgcmV0dXJuIGlubmVyRXhwYW5kZWQudmFsdWUuaW5jbHVkZXMoa2V5KVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0RXhwYW5kZWQgKHZhbCkge1xuICAgIGlmIChwcm9wcy5leHBhbmRlZCAhPT0gdm9pZCAwKSB7XG4gICAgICBlbWl0KCd1cGRhdGU6ZXhwYW5kZWQnLCB2YWwpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaW5uZXJFeHBhbmRlZC52YWx1ZSA9IHZhbFxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUV4cGFuZGVkIChrZXksIGFkZCkge1xuICAgIGNvbnN0IHRhcmdldCA9IGlubmVyRXhwYW5kZWQudmFsdWUuc2xpY2UoKVxuICAgIGNvbnN0IGluZGV4ID0gdGFyZ2V0LmluZGV4T2Yoa2V5KVxuXG4gICAgaWYgKGFkZCA9PT0gdHJ1ZSkge1xuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICB0YXJnZXQucHVzaChrZXkpXG4gICAgICAgIHNldEV4cGFuZGVkKHRhcmdldClcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0YXJnZXQuc3BsaWNlKGluZGV4LCAxKVxuICAgICAgc2V0RXhwYW5kZWQodGFyZ2V0KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXNSb3dFeHBhbmRlZCxcbiAgICBzZXRFeHBhbmRlZCxcbiAgICB1cGRhdGVFeHBhbmRlZFxuICB9XG59XG4iLCJpbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IHsgaXNOdW1iZXIgfSBmcm9tICcuLi8uLi91dGlscy9pcy9pcy5qcydcblxuZXhwb3J0IGNvbnN0IHVzZVRhYmxlQ29sdW1uU2VsZWN0aW9uUHJvcHMgPSB7XG4gIHZpc2libGVDb2x1bW5zOiBBcnJheVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlVGFibGVDb2x1bW5TZWxlY3Rpb24gKHByb3BzLCBjb21wdXRlZFBhZ2luYXRpb24sIGhhc1NlbGVjdGlvbk1vZGUpIHtcbiAgY29uc3QgY29sTGlzdCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBpZiAocHJvcHMuY29sdW1ucyAhPT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gcHJvcHMuY29sdW1uc1xuICAgIH1cblxuICAgIC8vIHdlIGluZmVyIGNvbHVtbnMgZnJvbSBmaXJzdCByb3dcbiAgICBjb25zdCByb3cgPSBwcm9wcy5yb3dzWyAwIF1cblxuICAgIHJldHVybiByb3cgIT09IHZvaWQgMFxuICAgICAgPyBPYmplY3Qua2V5cyhyb3cpLm1hcChuYW1lID0+ICh7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGxhYmVsOiBuYW1lLnRvVXBwZXJDYXNlKCksXG4gICAgICAgIGZpZWxkOiBuYW1lLFxuICAgICAgICBhbGlnbjogaXNOdW1iZXIocm93WyBuYW1lIF0pID8gJ3JpZ2h0JyA6ICdsZWZ0JyxcbiAgICAgICAgc29ydGFibGU6IHRydWVcbiAgICAgIH0pKVxuICAgICAgOiBbXVxuICB9KVxuXG4gIGNvbnN0IGNvbXB1dGVkQ29scyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCB7IHNvcnRCeSwgZGVzY2VuZGluZyB9ID0gY29tcHV0ZWRQYWdpbmF0aW9uLnZhbHVlXG5cbiAgICBjb25zdCBjb2xzID0gcHJvcHMudmlzaWJsZUNvbHVtbnMgIT09IHZvaWQgMFxuICAgICAgPyBjb2xMaXN0LnZhbHVlLmZpbHRlcihjb2wgPT4gY29sLnJlcXVpcmVkID09PSB0cnVlIHx8IHByb3BzLnZpc2libGVDb2x1bW5zLmluY2x1ZGVzKGNvbC5uYW1lKSA9PT0gdHJ1ZSlcbiAgICAgIDogY29sTGlzdC52YWx1ZVxuXG4gICAgcmV0dXJuIGNvbHMubWFwKGNvbCA9PiB7XG4gICAgICBjb25zdCBhbGlnbiA9IGNvbC5hbGlnbiB8fCAncmlnaHQnXG4gICAgICBjb25zdCBhbGlnbkNsYXNzID0gYHRleHQtJHsgYWxpZ24gfWBcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uY29sLFxuICAgICAgICBhbGlnbixcbiAgICAgICAgX19pY29uQ2xhc3M6IGBxLXRhYmxlX19zb3J0LWljb24gcS10YWJsZV9fc29ydC1pY29uLS0keyBhbGlnbiB9YCxcbiAgICAgICAgX190aENsYXNzOiBhbGlnbkNsYXNzXG4gICAgICAgICAgKyAoY29sLmhlYWRlckNsYXNzZXMgIT09IHZvaWQgMCA/ICcgJyArIGNvbC5oZWFkZXJDbGFzc2VzIDogJycpXG4gICAgICAgICAgKyAoY29sLnNvcnRhYmxlID09PSB0cnVlID8gJyBzb3J0YWJsZScgOiAnJylcbiAgICAgICAgICArIChjb2wubmFtZSA9PT0gc29ydEJ5ID8gYCBzb3J0ZWQgJHsgZGVzY2VuZGluZyA9PT0gdHJ1ZSA/ICdzb3J0LWRlc2MnIDogJycgfWAgOiAnJyksXG5cbiAgICAgICAgX190ZFN0eWxlOiBjb2wuc3R5bGUgIT09IHZvaWQgMFxuICAgICAgICAgID8gKFxuICAgICAgICAgICAgICB0eXBlb2YgY29sLnN0eWxlICE9PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgPyAoKSA9PiBjb2wuc3R5bGVcbiAgICAgICAgICAgICAgICA6IGNvbC5zdHlsZVxuICAgICAgICAgICAgKVxuICAgICAgICAgIDogKCkgPT4gbnVsbCxcblxuICAgICAgICBfX3RkQ2xhc3M6IGNvbC5jbGFzc2VzICE9PSB2b2lkIDBcbiAgICAgICAgICA/IChcbiAgICAgICAgICAgICAgdHlwZW9mIGNvbC5jbGFzc2VzICE9PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgPyAoKSA9PiBhbGlnbkNsYXNzICsgJyAnICsgY29sLmNsYXNzZXNcbiAgICAgICAgICAgICAgICA6IHJvdyA9PiBhbGlnbkNsYXNzICsgJyAnICsgY29sLmNsYXNzZXMocm93KVxuICAgICAgICAgICAgKVxuICAgICAgICAgIDogKCkgPT4gYWxpZ25DbGFzc1xuICAgICAgfVxuICAgIH0pXG4gIH0pXG5cbiAgY29uc3QgY29tcHV0ZWRDb2xzTWFwID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IG5hbWVzID0ge31cbiAgICBjb21wdXRlZENvbHMudmFsdWUuZm9yRWFjaChjb2wgPT4ge1xuICAgICAgbmFtZXNbIGNvbC5uYW1lIF0gPSBjb2xcbiAgICB9KVxuICAgIHJldHVybiBuYW1lc1xuICB9KVxuXG4gIGNvbnN0IGNvbXB1dGVkQ29sc3BhbiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gcHJvcHMudGFibGVDb2xzcGFuICE9PSB2b2lkIDBcbiAgICAgID8gcHJvcHMudGFibGVDb2xzcGFuXG4gICAgICA6IGNvbXB1dGVkQ29scy52YWx1ZS5sZW5ndGggKyAoaGFzU2VsZWN0aW9uTW9kZS52YWx1ZSA9PT0gdHJ1ZSA/IDEgOiAwKVxuICB9KVxuXG4gIHJldHVybiB7XG4gICAgY29sTGlzdCxcbiAgICBjb21wdXRlZENvbHMsXG4gICAgY29tcHV0ZWRDb2xzTWFwLFxuICAgIGNvbXB1dGVkQ29sc3BhblxuICB9XG59XG4iLCJpbXBvcnQgeyBoLCByZWYsIGNvbXB1dGVkLCB3YXRjaCwgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgUVRoIGZyb20gJy4vUVRoLmpzJ1xuXG5pbXBvcnQgUVNlcGFyYXRvciBmcm9tICcuLi9zZXBhcmF0b3IvUVNlcGFyYXRvci5qcydcbmltcG9ydCBRSWNvbiBmcm9tICcuLi9pY29uL1FJY29uLmpzJ1xuaW1wb3J0IFFWaXJ0dWFsU2Nyb2xsIGZyb20gJy4uL3ZpcnR1YWwtc2Nyb2xsL1FWaXJ0dWFsU2Nyb2xsLmpzJ1xuaW1wb3J0IFFTZWxlY3QgZnJvbSAnLi4vc2VsZWN0L1FTZWxlY3QuanMnXG5pbXBvcnQgUUxpbmVhclByb2dyZXNzIGZyb20gJy4uL2xpbmVhci1wcm9ncmVzcy9RTGluZWFyUHJvZ3Jlc3MuanMnXG5pbXBvcnQgUUNoZWNrYm94IGZyb20gJy4uL2NoZWNrYm94L1FDaGVja2JveC5qcydcbmltcG9ydCBRQnRuIGZyb20gJy4uL2J0bi9RQnRuLmpzJ1xuXG5pbXBvcnQgZ2V0VGFibGVNaWRkbGUgZnJvbSAnLi9nZXQtdGFibGUtbWlkZGxlLmpzJ1xuXG5pbXBvcnQgdXNlRGFyaywgeyB1c2VEYXJrUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wcml2YXRlLnVzZS1kYXJrL3VzZS1kYXJrLmpzJ1xuaW1wb3J0IHsgY29tbW9uVmlydFNjcm9sbFByb3BzTGlzdCB9IGZyb20gJy4uL3ZpcnR1YWwtc2Nyb2xsL3VzZS12aXJ0dWFsLXNjcm9sbC5qcydcbmltcG9ydCB1c2VGdWxsc2NyZWVuLCB7IHVzZUZ1bGxzY3JlZW5Qcm9wcywgdXNlRnVsbHNjcmVlbkVtaXRzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvcHJpdmF0ZS51c2UtZnVsbHNjcmVlbi91c2UtZnVsbHNjcmVlbi5qcydcblxuaW1wb3J0IHsgdXNlVGFibGVTb3J0LCB1c2VUYWJsZVNvcnRQcm9wcyB9IGZyb20gJy4vdGFibGUtc29ydC5qcydcbmltcG9ydCB7IHVzZVRhYmxlRmlsdGVyLCB1c2VUYWJsZUZpbHRlclByb3BzIH0gZnJvbSAnLi90YWJsZS1maWx0ZXIuanMnXG5pbXBvcnQgeyB1c2VUYWJsZVBhZ2luYXRpb25TdGF0ZSwgdXNlVGFibGVQYWdpbmF0aW9uLCB1c2VUYWJsZVBhZ2luYXRpb25Qcm9wcyB9IGZyb20gJy4vdGFibGUtcGFnaW5hdGlvbi5qcydcbmltcG9ydCB7IHVzZVRhYmxlUm93U2VsZWN0aW9uLCB1c2VUYWJsZVJvd1NlbGVjdGlvblByb3BzLCB1c2VUYWJsZVJvd1NlbGVjdGlvbkVtaXRzIH0gZnJvbSAnLi90YWJsZS1yb3ctc2VsZWN0aW9uLmpzJ1xuaW1wb3J0IHsgdXNlVGFibGVSb3dFeHBhbmQsIHVzZVRhYmxlUm93RXhwYW5kUHJvcHMsIHVzZVRhYmxlUm93RXhwYW5kRW1pdHMgfSBmcm9tICcuL3RhYmxlLXJvdy1leHBhbmQuanMnXG5pbXBvcnQgeyB1c2VUYWJsZUNvbHVtblNlbGVjdGlvbiwgdXNlVGFibGVDb2x1bW5TZWxlY3Rpb25Qcm9wcyB9IGZyb20gJy4vdGFibGUtY29sdW1uLXNlbGVjdGlvbi5qcydcblxuaW1wb3J0IHsgaW5qZWN0UHJvcCwgaW5qZWN0TXVsdGlwbGVQcm9wcyB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUuaW5qZWN0LW9iai1wcm9wL2luamVjdC1vYmotcHJvcC5qcydcbmltcG9ydCB7IGNyZWF0ZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUuY3JlYXRlL2NyZWF0ZS5qcydcblxuY29uc3QgYm90dG9tQ2xhc3MgPSAncS10YWJsZV9fYm90dG9tIHJvdyBpdGVtcy1jZW50ZXInXG5cbmNvbnN0IHZpcnRTY3JvbGxQYXNzdGhyb3VnaFByb3BzID0ge31cbmNvbW1vblZpcnRTY3JvbGxQcm9wc0xpc3QuZm9yRWFjaChwID0+IHsgdmlydFNjcm9sbFBhc3N0aHJvdWdoUHJvcHNbIHAgXSA9IHt9IH0pXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRVGFibGUnLFxuXG4gIHByb3BzOiB7XG4gICAgcm93czoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgcm93S2V5OiB7XG4gICAgICB0eXBlOiBbIFN0cmluZywgRnVuY3Rpb24gXSxcbiAgICAgIGRlZmF1bHQ6ICdpZCdcbiAgICB9LFxuXG4gICAgY29sdW1uczogQXJyYXksXG4gICAgbG9hZGluZzogQm9vbGVhbixcblxuICAgIGljb25GaXJzdFBhZ2U6IFN0cmluZyxcbiAgICBpY29uUHJldlBhZ2U6IFN0cmluZyxcbiAgICBpY29uTmV4dFBhZ2U6IFN0cmluZyxcbiAgICBpY29uTGFzdFBhZ2U6IFN0cmluZyxcblxuICAgIHRpdGxlOiBTdHJpbmcsXG5cbiAgICBoaWRlSGVhZGVyOiBCb29sZWFuLFxuXG4gICAgZ3JpZDogQm9vbGVhbixcbiAgICBncmlkSGVhZGVyOiBCb29sZWFuLFxuXG4gICAgZGVuc2U6IEJvb2xlYW4sXG4gICAgZmxhdDogQm9vbGVhbixcbiAgICBib3JkZXJlZDogQm9vbGVhbixcbiAgICBzcXVhcmU6IEJvb2xlYW4sXG4gICAgc2VwYXJhdG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnaG9yaXpvbnRhbCcsXG4gICAgICB2YWxpZGF0b3I6IHYgPT4gWyAnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCcsICdjZWxsJywgJ25vbmUnIF0uaW5jbHVkZXModilcbiAgICB9LFxuICAgIHdyYXBDZWxsczogQm9vbGVhbixcblxuICAgIHZpcnR1YWxTY3JvbGw6IEJvb2xlYW4sXG4gICAgdmlydHVhbFNjcm9sbFRhcmdldDoge30sXG4gICAgLi4udmlydFNjcm9sbFBhc3N0aHJvdWdoUHJvcHMsXG5cbiAgICBub0RhdGFMYWJlbDogU3RyaW5nLFxuICAgIG5vUmVzdWx0c0xhYmVsOiBTdHJpbmcsXG4gICAgbG9hZGluZ0xhYmVsOiBTdHJpbmcsXG4gICAgc2VsZWN0ZWRSb3dzTGFiZWw6IEZ1bmN0aW9uLFxuICAgIHJvd3NQZXJQYWdlTGFiZWw6IFN0cmluZyxcbiAgICBwYWdpbmF0aW9uTGFiZWw6IEZ1bmN0aW9uLFxuXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdncmV5LTgnXG4gICAgfSxcblxuICAgIHRpdGxlQ2xhc3M6IFsgU3RyaW5nLCBBcnJheSwgT2JqZWN0IF0sXG4gICAgdGFibGVTdHlsZTogWyBTdHJpbmcsIEFycmF5LCBPYmplY3QgXSxcbiAgICB0YWJsZUNsYXNzOiBbIFN0cmluZywgQXJyYXksIE9iamVjdCBdLFxuICAgIHRhYmxlSGVhZGVyU3R5bGU6IFsgU3RyaW5nLCBBcnJheSwgT2JqZWN0IF0sXG4gICAgdGFibGVIZWFkZXJDbGFzczogWyBTdHJpbmcsIEFycmF5LCBPYmplY3QgXSxcbiAgICBjYXJkQ29udGFpbmVyQ2xhc3M6IFsgU3RyaW5nLCBBcnJheSwgT2JqZWN0IF0sXG4gICAgY2FyZENvbnRhaW5lclN0eWxlOiBbIFN0cmluZywgQXJyYXksIE9iamVjdCBdLFxuICAgIGNhcmRTdHlsZTogWyBTdHJpbmcsIEFycmF5LCBPYmplY3QgXSxcbiAgICBjYXJkQ2xhc3M6IFsgU3RyaW5nLCBBcnJheSwgT2JqZWN0IF0sXG5cbiAgICBoaWRlQm90dG9tOiBCb29sZWFuLFxuICAgIGhpZGVTZWxlY3RlZEJhbm5lcjogQm9vbGVhbixcbiAgICBoaWRlTm9EYXRhOiBCb29sZWFuLFxuICAgIGhpZGVQYWdpbmF0aW9uOiBCb29sZWFuLFxuXG4gICAgb25Sb3dDbGljazogRnVuY3Rpb24sXG4gICAgb25Sb3dEYmxjbGljazogRnVuY3Rpb24sXG4gICAgb25Sb3dDb250ZXh0bWVudTogRnVuY3Rpb24sXG5cbiAgICAuLi51c2VEYXJrUHJvcHMsXG4gICAgLi4udXNlRnVsbHNjcmVlblByb3BzLFxuXG4gICAgLi4udXNlVGFibGVDb2x1bW5TZWxlY3Rpb25Qcm9wcyxcbiAgICAuLi51c2VUYWJsZUZpbHRlclByb3BzLFxuICAgIC4uLnVzZVRhYmxlUGFnaW5hdGlvblByb3BzLFxuICAgIC4uLnVzZVRhYmxlUm93RXhwYW5kUHJvcHMsXG4gICAgLi4udXNlVGFibGVSb3dTZWxlY3Rpb25Qcm9wcyxcbiAgICAuLi51c2VUYWJsZVNvcnRQcm9wc1xuICB9LFxuXG4gIGVtaXRzOiBbXG4gICAgJ3JlcXVlc3QnLCAndmlydHVhbFNjcm9sbCcsXG4gICAgLi4udXNlRnVsbHNjcmVlbkVtaXRzLFxuICAgIC4uLnVzZVRhYmxlUm93RXhwYW5kRW1pdHMsXG4gICAgLi4udXNlVGFibGVSb3dTZWxlY3Rpb25FbWl0c1xuICBdLFxuXG4gIHNldHVwIChwcm9wcywgeyBzbG90cywgZW1pdCB9KSB7XG4gICAgY29uc3Qgdm0gPSBnZXRDdXJyZW50SW5zdGFuY2UoKVxuICAgIGNvbnN0IHsgcHJveHk6IHsgJHEgfSB9ID0gdm1cblxuICAgIGNvbnN0IGlzRGFyayA9IHVzZURhcmsocHJvcHMsICRxKVxuICAgIGNvbnN0IHsgaW5GdWxsc2NyZWVuLCB0b2dnbGVGdWxsc2NyZWVuIH0gPSB1c2VGdWxsc2NyZWVuKClcblxuICAgIGNvbnN0IGdldFJvd0tleSA9IGNvbXB1dGVkKCgpID0+IChcbiAgICAgIHR5cGVvZiBwcm9wcy5yb3dLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwcm9wcy5yb3dLZXlcbiAgICAgICAgOiByb3cgPT4gcm93WyBwcm9wcy5yb3dLZXkgXVxuICAgICkpXG5cbiAgICBjb25zdCByb290UmVmID0gcmVmKG51bGwpXG4gICAgY29uc3QgdmlydFNjcm9sbFJlZiA9IHJlZihudWxsKVxuICAgIGNvbnN0IGhhc1ZpcnRTY3JvbGwgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5ncmlkICE9PSB0cnVlICYmIHByb3BzLnZpcnR1YWxTY3JvbGwgPT09IHRydWUpXG5cbiAgICBjb25zdCBjYXJkRGVmYXVsdENsYXNzID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgICcgcS10YWJsZV9fY2FyZCdcbiAgICAgICsgKGlzRGFyay52YWx1ZSA9PT0gdHJ1ZSA/ICcgcS10YWJsZV9fY2FyZC0tZGFyayBxLWRhcmsnIDogJycpXG4gICAgICArIChwcm9wcy5zcXVhcmUgPT09IHRydWUgPyAnIHEtdGFibGUtLXNxdWFyZScgOiAnJylcbiAgICAgICsgKHByb3BzLmZsYXQgPT09IHRydWUgPyAnIHEtdGFibGUtLWZsYXQnIDogJycpXG4gICAgICArIChwcm9wcy5ib3JkZXJlZCA9PT0gdHJ1ZSA/ICcgcS10YWJsZS0tYm9yZGVyZWQnIDogJycpXG4gICAgKVxuXG4gICAgY29uc3QgX19jb250YWluZXJDbGFzcyA9IGNvbXB1dGVkKCgpID0+XG4gICAgICBgcS10YWJsZV9fY29udGFpbmVyIHEtdGFibGUtLSR7IHByb3BzLnNlcGFyYXRvciB9LXNlcGFyYXRvciBjb2x1bW4gbm8td3JhcGBcbiAgICAgICsgKHByb3BzLmdyaWQgPT09IHRydWUgPyAnIHEtdGFibGUtLWdyaWQnIDogY2FyZERlZmF1bHRDbGFzcy52YWx1ZSlcbiAgICAgICsgKGlzRGFyay52YWx1ZSA9PT0gdHJ1ZSA/ICcgcS10YWJsZS0tZGFyaycgOiAnJylcbiAgICAgICsgKHByb3BzLmRlbnNlID09PSB0cnVlID8gJyBxLXRhYmxlLS1kZW5zZScgOiAnJylcbiAgICAgICsgKHByb3BzLndyYXBDZWxscyA9PT0gZmFsc2UgPyAnIHEtdGFibGUtLW5vLXdyYXAnIDogJycpXG4gICAgICArIChpbkZ1bGxzY3JlZW4udmFsdWUgPT09IHRydWUgPyAnIGZ1bGxzY3JlZW4gc2Nyb2xsJyA6ICcnKVxuICAgIClcblxuICAgIGNvbnN0IGNvbnRhaW5lckNsYXNzID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgIF9fY29udGFpbmVyQ2xhc3MudmFsdWUgKyAocHJvcHMubG9hZGluZyA9PT0gdHJ1ZSA/ICcgcS10YWJsZS0tbG9hZGluZycgOiAnJylcbiAgICApXG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IHByb3BzLnRhYmxlU3R5bGUgKyBwcm9wcy50YWJsZUNsYXNzICsgcHJvcHMudGFibGVIZWFkZXJTdHlsZSArIHByb3BzLnRhYmxlSGVhZGVyQ2xhc3MgKyBfX2NvbnRhaW5lckNsYXNzLnZhbHVlLFxuICAgICAgKCkgPT4geyBoYXNWaXJ0U2Nyb2xsLnZhbHVlID09PSB0cnVlICYmIHZpcnRTY3JvbGxSZWYudmFsdWUgIT09IG51bGwgJiYgdmlydFNjcm9sbFJlZi52YWx1ZS5yZXNldCgpIH1cbiAgICApXG5cbiAgICBjb25zdCB7XG4gICAgICBpbm5lclBhZ2luYXRpb24sXG4gICAgICBjb21wdXRlZFBhZ2luYXRpb24sXG4gICAgICBpc1NlcnZlclNpZGUsXG5cbiAgICAgIHJlcXVlc3RTZXJ2ZXJJbnRlcmFjdGlvbixcbiAgICAgIHNldFBhZ2luYXRpb25cbiAgICB9ID0gdXNlVGFibGVQYWdpbmF0aW9uU3RhdGUodm0sIGdldENlbGxWYWx1ZSlcblxuICAgIGNvbnN0IHsgY29tcHV0ZWRGaWx0ZXJNZXRob2QgfSA9IHVzZVRhYmxlRmlsdGVyKHByb3BzLCBzZXRQYWdpbmF0aW9uKVxuICAgIGNvbnN0IHsgaXNSb3dFeHBhbmRlZCwgc2V0RXhwYW5kZWQsIHVwZGF0ZUV4cGFuZGVkIH0gPSB1c2VUYWJsZVJvd0V4cGFuZChwcm9wcywgZW1pdClcblxuICAgIGNvbnN0IGZpbHRlcmVkU29ydGVkUm93cyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGxldCByb3dzID0gcHJvcHMucm93c1xuXG4gICAgICBpZiAoaXNTZXJ2ZXJTaWRlLnZhbHVlID09PSB0cnVlIHx8IHJvd3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiByb3dzXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHsgc29ydEJ5LCBkZXNjZW5kaW5nIH0gPSBjb21wdXRlZFBhZ2luYXRpb24udmFsdWVcblxuICAgICAgaWYgKHByb3BzLmZpbHRlcikge1xuICAgICAgICByb3dzID0gY29tcHV0ZWRGaWx0ZXJNZXRob2QudmFsdWUocm93cywgcHJvcHMuZmlsdGVyLCBjb21wdXRlZENvbHMudmFsdWUsIGdldENlbGxWYWx1ZSlcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbHVtblRvU29ydC52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICByb3dzID0gY29tcHV0ZWRTb3J0TWV0aG9kLnZhbHVlKFxuICAgICAgICAgIHByb3BzLnJvd3MgPT09IHJvd3MgPyByb3dzLnNsaWNlKCkgOiByb3dzLFxuICAgICAgICAgIHNvcnRCeSxcbiAgICAgICAgICBkZXNjZW5kaW5nXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJvd3NcbiAgICB9KVxuXG4gICAgY29uc3QgZmlsdGVyZWRTb3J0ZWRSb3dzTnVtYmVyID0gY29tcHV0ZWQoKCkgPT4gZmlsdGVyZWRTb3J0ZWRSb3dzLnZhbHVlLmxlbmd0aClcblxuICAgIGNvbnN0IGNvbXB1dGVkUm93cyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGxldCByb3dzID0gZmlsdGVyZWRTb3J0ZWRSb3dzLnZhbHVlXG5cbiAgICAgIGlmIChpc1NlcnZlclNpZGUudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHJvd3NcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyByb3dzUGVyUGFnZSB9ID0gY29tcHV0ZWRQYWdpbmF0aW9uLnZhbHVlXG5cbiAgICAgIGlmIChyb3dzUGVyUGFnZSAhPT0gMCkge1xuICAgICAgICBpZiAoZmlyc3RSb3dJbmRleC52YWx1ZSA9PT0gMCAmJiBwcm9wcy5yb3dzICE9PSByb3dzKSB7XG4gICAgICAgICAgaWYgKHJvd3MubGVuZ3RoID4gbGFzdFJvd0luZGV4LnZhbHVlKSB7XG4gICAgICAgICAgICByb3dzID0gcm93cy5zbGljZSgwLCBsYXN0Um93SW5kZXgudmFsdWUpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJvd3MgPSByb3dzLnNsaWNlKGZpcnN0Um93SW5kZXgudmFsdWUsIGxhc3RSb3dJbmRleC52YWx1ZSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcm93c1xuICAgIH0pXG5cbiAgICBjb25zdCB7XG4gICAgICBoYXNTZWxlY3Rpb25Nb2RlLFxuICAgICAgc2luZ2xlU2VsZWN0aW9uLFxuICAgICAgbXVsdGlwbGVTZWxlY3Rpb24sXG4gICAgICBhbGxSb3dzU2VsZWN0ZWQsXG4gICAgICBzb21lUm93c1NlbGVjdGVkLFxuICAgICAgcm93c1NlbGVjdGVkTnVtYmVyLFxuXG4gICAgICBpc1Jvd1NlbGVjdGVkLFxuICAgICAgY2xlYXJTZWxlY3Rpb24sXG4gICAgICB1cGRhdGVTZWxlY3Rpb25cbiAgICB9ID0gdXNlVGFibGVSb3dTZWxlY3Rpb24ocHJvcHMsIGVtaXQsIGNvbXB1dGVkUm93cywgZ2V0Um93S2V5KVxuXG4gICAgY29uc3QgeyBjb2xMaXN0LCBjb21wdXRlZENvbHMsIGNvbXB1dGVkQ29sc01hcCwgY29tcHV0ZWRDb2xzcGFuIH0gPSB1c2VUYWJsZUNvbHVtblNlbGVjdGlvbihwcm9wcywgY29tcHV0ZWRQYWdpbmF0aW9uLCBoYXNTZWxlY3Rpb25Nb2RlKVxuXG4gICAgY29uc3QgeyBjb2x1bW5Ub1NvcnQsIGNvbXB1dGVkU29ydE1ldGhvZCwgc29ydCB9ID0gdXNlVGFibGVTb3J0KHByb3BzLCBjb21wdXRlZFBhZ2luYXRpb24sIGNvbExpc3QsIHNldFBhZ2luYXRpb24pXG5cbiAgICBjb25zdCB7XG4gICAgICBmaXJzdFJvd0luZGV4LFxuICAgICAgbGFzdFJvd0luZGV4LFxuICAgICAgaXNGaXJzdFBhZ2UsXG4gICAgICBpc0xhc3RQYWdlLFxuICAgICAgcGFnZXNOdW1iZXIsXG4gICAgICBjb21wdXRlZFJvd3NQZXJQYWdlT3B0aW9ucyxcbiAgICAgIGNvbXB1dGVkUm93c051bWJlcixcblxuICAgICAgZmlyc3RQYWdlLFxuICAgICAgcHJldlBhZ2UsXG4gICAgICBuZXh0UGFnZSxcbiAgICAgIGxhc3RQYWdlXG4gICAgfSA9IHVzZVRhYmxlUGFnaW5hdGlvbih2bSwgaW5uZXJQYWdpbmF0aW9uLCBjb21wdXRlZFBhZ2luYXRpb24sIGlzU2VydmVyU2lkZSwgc2V0UGFnaW5hdGlvbiwgZmlsdGVyZWRTb3J0ZWRSb3dzTnVtYmVyKVxuXG4gICAgY29uc3Qgbm90aGluZ1RvRGlzcGxheSA9IGNvbXB1dGVkKCgpID0+IGNvbXB1dGVkUm93cy52YWx1ZS5sZW5ndGggPT09IDApXG5cbiAgICBjb25zdCB2aXJ0UHJvcHMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBhY2MgPSB7fVxuXG4gICAgICBjb21tb25WaXJ0U2Nyb2xsUHJvcHNMaXN0XG4gICAgICAgIC5mb3JFYWNoKHAgPT4geyBhY2NbIHAgXSA9IHByb3BzWyBwIF0gfSlcblxuICAgICAgaWYgKGFjYy52aXJ0dWFsU2Nyb2xsSXRlbVNpemUgPT09IHZvaWQgMCkge1xuICAgICAgICBhY2MudmlydHVhbFNjcm9sbEl0ZW1TaXplID0gcHJvcHMuZGVuc2UgPT09IHRydWUgPyAyOCA6IDQ4XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2NcbiAgICB9KVxuXG4gICAgZnVuY3Rpb24gcmVzZXRWaXJ0dWFsU2Nyb2xsICgpIHtcbiAgICAgIGhhc1ZpcnRTY3JvbGwudmFsdWUgPT09IHRydWUgJiYgdmlydFNjcm9sbFJlZi52YWx1ZS5yZXNldCgpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Qm9keSAoKSB7XG4gICAgICBpZiAocHJvcHMuZ3JpZCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gZ2V0R3JpZEJvZHkoKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBoZWFkZXIgPSBwcm9wcy5oaWRlSGVhZGVyICE9PSB0cnVlID8gZ2V0VEhlYWQgOiBudWxsXG5cbiAgICAgIGlmIChoYXNWaXJ0U2Nyb2xsLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IHRvcFJvdyA9IHNsb3RzWyAndG9wLXJvdycgXVxuICAgICAgICBjb25zdCBib3R0b21Sb3cgPSBzbG90c1sgJ2JvdHRvbS1yb3cnIF1cblxuICAgICAgICBjb25zdCB2aXJ0U2xvdHMgPSB7XG4gICAgICAgICAgZGVmYXVsdDogcHJvcHMgPT4gZ2V0VEJvZHlUUihwcm9wcy5pdGVtLCBzbG90cy5ib2R5LCBwcm9wcy5pbmRleClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b3BSb3cgIT09IHZvaWQgMCkge1xuICAgICAgICAgIGNvbnN0IHRvcENvbnRlbnQgPSBoKCd0Ym9keScsIHRvcFJvdyh7IGNvbHM6IGNvbXB1dGVkQ29scy52YWx1ZSB9KSlcblxuICAgICAgICAgIHZpcnRTbG90cy5iZWZvcmUgPSBoZWFkZXIgPT09IG51bGxcbiAgICAgICAgICAgID8gKCkgPT4gdG9wQ29udGVudFxuICAgICAgICAgICAgOiAoKSA9PiBbIGhlYWRlcigpIF0uY29uY2F0KHRvcENvbnRlbnQpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGVhZGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgdmlydFNsb3RzLmJlZm9yZSA9IGhlYWRlclxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvdHRvbVJvdyAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgdmlydFNsb3RzLmFmdGVyID0gKCkgPT4gaCgndGJvZHknLCBib3R0b21Sb3coeyBjb2xzOiBjb21wdXRlZENvbHMudmFsdWUgfSkpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaChRVmlydHVhbFNjcm9sbCwge1xuICAgICAgICAgIHJlZjogdmlydFNjcm9sbFJlZixcbiAgICAgICAgICBjbGFzczogcHJvcHMudGFibGVDbGFzcyxcbiAgICAgICAgICBzdHlsZTogcHJvcHMudGFibGVTdHlsZSxcbiAgICAgICAgICAuLi52aXJ0UHJvcHMudmFsdWUsXG4gICAgICAgICAgc2Nyb2xsVGFyZ2V0OiBwcm9wcy52aXJ0dWFsU2Nyb2xsVGFyZ2V0LFxuICAgICAgICAgIGl0ZW1zOiBjb21wdXRlZFJvd3MudmFsdWUsXG4gICAgICAgICAgdHlwZTogJ19fcXRhYmxlJyxcbiAgICAgICAgICB0YWJsZUNvbHNwYW46IGNvbXB1dGVkQ29sc3Bhbi52YWx1ZSxcbiAgICAgICAgICBvblZpcnR1YWxTY3JvbGw6IG9uVlNjcm9sbFxuICAgICAgICB9LCB2aXJ0U2xvdHMpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNoaWxkID0gW1xuICAgICAgICBnZXRUQm9keSgpXG4gICAgICBdXG5cbiAgICAgIGlmIChoZWFkZXIgIT09IG51bGwpIHtcbiAgICAgICAgY2hpbGQudW5zaGlmdChoZWFkZXIoKSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldFRhYmxlTWlkZGxlKHtcbiAgICAgICAgY2xhc3M6IFsgJ3EtdGFibGVfX21pZGRsZSBzY3JvbGwnLCBwcm9wcy50YWJsZUNsYXNzIF0sXG4gICAgICAgIHN0eWxlOiBwcm9wcy50YWJsZVN0eWxlXG4gICAgICB9LCBjaGlsZClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGxUbyAodG9JbmRleCwgZWRnZSkge1xuICAgICAgaWYgKHZpcnRTY3JvbGxSZWYudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgdmlydFNjcm9sbFJlZi52YWx1ZS5zY3JvbGxUbyh0b0luZGV4LCBlZGdlKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdG9JbmRleCA9IHBhcnNlSW50KHRvSW5kZXgsIDEwKVxuICAgICAgY29uc3Qgcm93RWwgPSByb290UmVmLnZhbHVlLnF1ZXJ5U2VsZWN0b3IoYHRib2R5IHRyOm50aC1vZi10eXBlKCR7IHRvSW5kZXggKyAxIH0pYClcblxuICAgICAgaWYgKHJvd0VsICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHNjcm9sbFRhcmdldCA9IHJvb3RSZWYudmFsdWUucXVlcnlTZWxlY3RvcignLnEtdGFibGVfX21pZGRsZS5zY3JvbGwnKVxuICAgICAgICBjb25zdCBvZmZzZXRUb3AgPSByb3dFbC5vZmZzZXRUb3AgLSBwcm9wcy52aXJ0dWFsU2Nyb2xsU3RpY2t5U2l6ZVN0YXJ0XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IG9mZnNldFRvcCA8IHNjcm9sbFRhcmdldC5zY3JvbGxUb3AgPyAnZGVjcmVhc2UnIDogJ2luY3JlYXNlJ1xuXG4gICAgICAgIHNjcm9sbFRhcmdldC5zY3JvbGxUb3AgPSBvZmZzZXRUb3BcblxuICAgICAgICBlbWl0KCd2aXJ0dWFsU2Nyb2xsJywge1xuICAgICAgICAgIGluZGV4OiB0b0luZGV4LFxuICAgICAgICAgIGZyb206IDAsXG4gICAgICAgICAgdG86IGlubmVyUGFnaW5hdGlvbi52YWx1ZS5yb3dzUGVyUGFnZSAtIDEsXG4gICAgICAgICAgZGlyZWN0aW9uXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25WU2Nyb2xsIChpbmZvKSB7XG4gICAgICBlbWl0KCd2aXJ0dWFsU2Nyb2xsJywgaW5mbylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQcm9ncmVzcyAoKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBoKFFMaW5lYXJQcm9ncmVzcywge1xuICAgICAgICAgIGNsYXNzOiAncS10YWJsZV9fbGluZWFyLXByb2dyZXNzJyxcbiAgICAgICAgICBjb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICAgICAgZGFyazogaXNEYXJrLnZhbHVlLFxuICAgICAgICAgIGluZGV0ZXJtaW5hdGU6IHRydWUsXG4gICAgICAgICAgdHJhY2tDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9KVxuICAgICAgXVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFRCb2R5VFIgKHJvdywgYm9keVNsb3QsIHBhZ2VJbmRleCkge1xuICAgICAgY29uc3RcbiAgICAgICAga2V5ID0gZ2V0Um93S2V5LnZhbHVlKHJvdyksXG4gICAgICAgIHNlbGVjdGVkID0gaXNSb3dTZWxlY3RlZChrZXkpXG5cbiAgICAgIGlmIChib2R5U2xvdCAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybiBib2R5U2xvdChcbiAgICAgICAgICBnZXRCb2R5U2NvcGUoe1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgcm93LFxuICAgICAgICAgICAgcGFnZUluZGV4LFxuICAgICAgICAgICAgX190ckNsYXNzOiBzZWxlY3RlZCA/ICdzZWxlY3RlZCcgOiAnJ1xuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgY29uc3RcbiAgICAgICAgYm9keUNlbGwgPSBzbG90c1sgJ2JvZHktY2VsbCcgXSxcbiAgICAgICAgY2hpbGQgPSBjb21wdXRlZENvbHMudmFsdWUubWFwKGNvbCA9PiB7XG4gICAgICAgICAgY29uc3RcbiAgICAgICAgICAgIGJvZHlDZWxsQ29sID0gc2xvdHNbIGBib2R5LWNlbGwtJHsgY29sLm5hbWUgfWAgXSxcbiAgICAgICAgICAgIHNsb3QgPSBib2R5Q2VsbENvbCAhPT0gdm9pZCAwID8gYm9keUNlbGxDb2wgOiBib2R5Q2VsbFxuXG4gICAgICAgICAgcmV0dXJuIHNsb3QgIT09IHZvaWQgMFxuICAgICAgICAgICAgPyBzbG90KGdldEJvZHlDZWxsU2NvcGUoeyBrZXksIHJvdywgcGFnZUluZGV4LCBjb2wgfSkpXG4gICAgICAgICAgICA6IGgoJ3RkJywge1xuICAgICAgICAgICAgICBjbGFzczogY29sLl9fdGRDbGFzcyhyb3cpLFxuICAgICAgICAgICAgICBzdHlsZTogY29sLl9fdGRTdHlsZShyb3cpXG4gICAgICAgICAgICB9LCBnZXRDZWxsVmFsdWUoY29sLCByb3cpKVxuICAgICAgICB9KVxuXG4gICAgICBpZiAoaGFzU2VsZWN0aW9uTW9kZS52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBzbG90ID0gc2xvdHNbICdib2R5LXNlbGVjdGlvbicgXVxuICAgICAgICBjb25zdCBjb250ZW50ID0gc2xvdCAhPT0gdm9pZCAwXG4gICAgICAgICAgPyBzbG90KGdldEJvZHlTZWxlY3Rpb25TY29wZSh7IGtleSwgcm93LCBwYWdlSW5kZXggfSkpXG4gICAgICAgICAgOiBbXG4gICAgICAgICAgICAgIGgoUUNoZWNrYm94LCB7XG4gICAgICAgICAgICAgICAgbW9kZWxWYWx1ZTogc2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgY29sb3I6IHByb3BzLmNvbG9yLFxuICAgICAgICAgICAgICAgIGRhcms6IGlzRGFyay52YWx1ZSxcbiAgICAgICAgICAgICAgICBkZW5zZTogcHJvcHMuZGVuc2UsXG4gICAgICAgICAgICAgICAgJ29uVXBkYXRlOm1vZGVsVmFsdWUnOiAoYWRkaW5nLCBldnQpID0+IHtcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZVNlbGVjdGlvbihbIGtleSBdLCBbIHJvdyBdLCBhZGRpbmcsIGV2dClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdXG5cbiAgICAgICAgY2hpbGQudW5zaGlmdChcbiAgICAgICAgICBoKCd0ZCcsIHsgY2xhc3M6ICdxLXRhYmxlLS1jb2wtYXV0by13aWR0aCcgfSwgY29udGVudClcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBkYXRhID0geyBrZXksIGNsYXNzOiB7IHNlbGVjdGVkIH0gfVxuXG4gICAgICBpZiAocHJvcHMub25Sb3dDbGljayAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGRhdGEuY2xhc3NbICdjdXJzb3ItcG9pbnRlcicgXSA9IHRydWVcbiAgICAgICAgZGF0YS5vbkNsaWNrID0gZXZ0ID0+IHtcbiAgICAgICAgICBlbWl0KCdyb3dDbGljaycsIGV2dCwgcm93LCBwYWdlSW5kZXgpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BzLm9uUm93RGJsY2xpY2sgIT09IHZvaWQgMCkge1xuICAgICAgICBkYXRhLmNsYXNzWyAnY3Vyc29yLXBvaW50ZXInIF0gPSB0cnVlXG4gICAgICAgIGRhdGEub25EYmxjbGljayA9IGV2dCA9PiB7XG4gICAgICAgICAgZW1pdCgncm93RGJsY2xpY2snLCBldnQsIHJvdywgcGFnZUluZGV4KVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wcy5vblJvd0NvbnRleHRtZW51ICE9PSB2b2lkIDApIHtcbiAgICAgICAgZGF0YS5jbGFzc1sgJ2N1cnNvci1wb2ludGVyJyBdID0gdHJ1ZVxuICAgICAgICBkYXRhLm9uQ29udGV4dG1lbnUgPSBldnQgPT4ge1xuICAgICAgICAgIGVtaXQoJ3Jvd0NvbnRleHRtZW51JywgZXZ0LCByb3csIHBhZ2VJbmRleClcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgndHInLCBkYXRhLCBjaGlsZClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRUQm9keSAoKSB7XG4gICAgICBjb25zdFxuICAgICAgICBib2R5ID0gc2xvdHMuYm9keSxcbiAgICAgICAgdG9wUm93ID0gc2xvdHNbICd0b3Atcm93JyBdLFxuICAgICAgICBib3R0b21Sb3cgPSBzbG90c1sgJ2JvdHRvbS1yb3cnIF1cblxuICAgICAgbGV0IGNoaWxkID0gY29tcHV0ZWRSb3dzLnZhbHVlLm1hcChcbiAgICAgICAgKHJvdywgcGFnZUluZGV4KSA9PiBnZXRUQm9keVRSKHJvdywgYm9keSwgcGFnZUluZGV4KVxuICAgICAgKVxuXG4gICAgICBpZiAodG9wUm93ICE9PSB2b2lkIDApIHtcbiAgICAgICAgY2hpbGQgPSB0b3BSb3coeyBjb2xzOiBjb21wdXRlZENvbHMudmFsdWUgfSkuY29uY2F0KGNoaWxkKVxuICAgICAgfVxuICAgICAgaWYgKGJvdHRvbVJvdyAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGNoaWxkID0gY2hpbGQuY29uY2F0KGJvdHRvbVJvdyh7IGNvbHM6IGNvbXB1dGVkQ29scy52YWx1ZSB9KSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ3Rib2R5JywgY2hpbGQpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Qm9keVNjb3BlIChkYXRhKSB7XG4gICAgICBpbmplY3RCb2R5Q29tbW9uU2NvcGUoZGF0YSlcblxuICAgICAgZGF0YS5jb2xzID0gZGF0YS5jb2xzLm1hcChcbiAgICAgICAgY29sID0+IGluamVjdFByb3AoeyAuLi5jb2wgfSwgJ3ZhbHVlJywgKCkgPT4gZ2V0Q2VsbFZhbHVlKGNvbCwgZGF0YS5yb3cpKVxuICAgICAgKVxuXG4gICAgICByZXR1cm4gZGF0YVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEJvZHlDZWxsU2NvcGUgKGRhdGEpIHtcbiAgICAgIGluamVjdEJvZHlDb21tb25TY29wZShkYXRhKVxuICAgICAgaW5qZWN0UHJvcChkYXRhLCAndmFsdWUnLCAoKSA9PiBnZXRDZWxsVmFsdWUoZGF0YS5jb2wsIGRhdGEucm93KSlcbiAgICAgIHJldHVybiBkYXRhXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Qm9keVNlbGVjdGlvblNjb3BlIChkYXRhKSB7XG4gICAgICBpbmplY3RCb2R5Q29tbW9uU2NvcGUoZGF0YSlcbiAgICAgIHJldHVybiBkYXRhXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5qZWN0Qm9keUNvbW1vblNjb3BlIChkYXRhKSB7XG4gICAgICBPYmplY3QuYXNzaWduKGRhdGEsIHtcbiAgICAgICAgY29sczogY29tcHV0ZWRDb2xzLnZhbHVlLFxuICAgICAgICBjb2xzTWFwOiBjb21wdXRlZENvbHNNYXAudmFsdWUsXG4gICAgICAgIHNvcnQsXG4gICAgICAgIHJvd0luZGV4OiBmaXJzdFJvd0luZGV4LnZhbHVlICsgZGF0YS5wYWdlSW5kZXgsXG4gICAgICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgZGFyazogaXNEYXJrLnZhbHVlLFxuICAgICAgICBkZW5zZTogcHJvcHMuZGVuc2VcbiAgICAgIH0pXG5cbiAgICAgIGhhc1NlbGVjdGlvbk1vZGUudmFsdWUgPT09IHRydWUgJiYgaW5qZWN0UHJvcChcbiAgICAgICAgZGF0YSxcbiAgICAgICAgJ3NlbGVjdGVkJyxcbiAgICAgICAgKCkgPT4gaXNSb3dTZWxlY3RlZChkYXRhLmtleSksXG4gICAgICAgIChhZGRpbmcsIGV2dCkgPT4ge1xuICAgICAgICAgIHVwZGF0ZVNlbGVjdGlvbihbIGRhdGEua2V5IF0sIFsgZGF0YS5yb3cgXSwgYWRkaW5nLCBldnQpXG4gICAgICAgIH1cbiAgICAgIClcblxuICAgICAgaW5qZWN0UHJvcChcbiAgICAgICAgZGF0YSxcbiAgICAgICAgJ2V4cGFuZCcsXG4gICAgICAgICgpID0+IGlzUm93RXhwYW5kZWQoZGF0YS5rZXkpLFxuICAgICAgICBhZGRpbmcgPT4geyB1cGRhdGVFeHBhbmRlZChkYXRhLmtleSwgYWRkaW5nKSB9XG4gICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q2VsbFZhbHVlIChjb2wsIHJvdykge1xuICAgICAgY29uc3QgdmFsID0gdHlwZW9mIGNvbC5maWVsZCA9PT0gJ2Z1bmN0aW9uJyA/IGNvbC5maWVsZChyb3cpIDogcm93WyBjb2wuZmllbGQgXVxuICAgICAgcmV0dXJuIGNvbC5mb3JtYXQgIT09IHZvaWQgMCA/IGNvbC5mb3JtYXQodmFsLCByb3cpIDogdmFsXG4gICAgfVxuXG4gICAgY29uc3QgbWFyZ2luYWxzU2NvcGUgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgcGFnaW5hdGlvbjogY29tcHV0ZWRQYWdpbmF0aW9uLnZhbHVlLFxuICAgICAgcGFnZXNOdW1iZXI6IHBhZ2VzTnVtYmVyLnZhbHVlLFxuICAgICAgaXNGaXJzdFBhZ2U6IGlzRmlyc3RQYWdlLnZhbHVlLFxuICAgICAgaXNMYXN0UGFnZTogaXNMYXN0UGFnZS52YWx1ZSxcbiAgICAgIGZpcnN0UGFnZSxcbiAgICAgIHByZXZQYWdlLFxuICAgICAgbmV4dFBhZ2UsXG4gICAgICBsYXN0UGFnZSxcblxuICAgICAgaW5GdWxsc2NyZWVuOiBpbkZ1bGxzY3JlZW4udmFsdWUsXG4gICAgICB0b2dnbGVGdWxsc2NyZWVuXG4gICAgfSkpXG5cbiAgICBmdW5jdGlvbiBnZXRUb3BEaXYgKCkge1xuICAgICAgY29uc3RcbiAgICAgICAgdG9wID0gc2xvdHMudG9wLFxuICAgICAgICB0b3BMZWZ0ID0gc2xvdHNbICd0b3AtbGVmdCcgXSxcbiAgICAgICAgdG9wUmlnaHQgPSBzbG90c1sgJ3RvcC1yaWdodCcgXSxcbiAgICAgICAgdG9wU2VsZWN0aW9uID0gc2xvdHNbICd0b3Atc2VsZWN0aW9uJyBdLFxuICAgICAgICBoYXNTZWxlY3Rpb24gPSBoYXNTZWxlY3Rpb25Nb2RlLnZhbHVlID09PSB0cnVlXG4gICAgICAgICAgJiYgdG9wU2VsZWN0aW9uICE9PSB2b2lkIDBcbiAgICAgICAgICAmJiByb3dzU2VsZWN0ZWROdW1iZXIudmFsdWUgPiAwLFxuICAgICAgICB0b3BDbGFzcyA9ICdxLXRhYmxlX190b3AgcmVsYXRpdmUtcG9zaXRpb24gcm93IGl0ZW1zLWNlbnRlcidcblxuICAgICAgaWYgKHRvcCAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiB0b3BDbGFzcyB9LCBbIHRvcChtYXJnaW5hbHNTY29wZS52YWx1ZSkgXSlcbiAgICAgIH1cblxuICAgICAgbGV0IGNoaWxkXG5cbiAgICAgIGlmIChoYXNTZWxlY3Rpb24gPT09IHRydWUpIHtcbiAgICAgICAgY2hpbGQgPSB0b3BTZWxlY3Rpb24obWFyZ2luYWxzU2NvcGUudmFsdWUpLnNsaWNlKClcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjaGlsZCA9IFtdXG5cbiAgICAgICAgaWYgKHRvcExlZnQgIT09IHZvaWQgMCkge1xuICAgICAgICAgIGNoaWxkLnB1c2goXG4gICAgICAgICAgICBoKCdkaXYnLCB7IGNsYXNzOiAncS10YWJsZV9fY29udHJvbCcgfSwgW1xuICAgICAgICAgICAgICB0b3BMZWZ0KG1hcmdpbmFsc1Njb3BlLnZhbHVlKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJvcHMudGl0bGUpIHtcbiAgICAgICAgICBjaGlsZC5wdXNoKFxuICAgICAgICAgICAgaCgnZGl2JywgeyBjbGFzczogJ3EtdGFibGVfX2NvbnRyb2wnIH0sIFtcbiAgICAgICAgICAgICAgaCgnZGl2Jywge1xuICAgICAgICAgICAgICAgIGNsYXNzOiBbICdxLXRhYmxlX190aXRsZScsIHByb3BzLnRpdGxlQ2xhc3MgXVxuICAgICAgICAgICAgICB9LCBwcm9wcy50aXRsZSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0b3BSaWdodCAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGNoaWxkLnB1c2goXG4gICAgICAgICAgaCgnZGl2JywgeyBjbGFzczogJ3EtdGFibGVfX3NlcGFyYXRvciBjb2wnIH0pXG4gICAgICAgIClcbiAgICAgICAgY2hpbGQucHVzaChcbiAgICAgICAgICBoKCdkaXYnLCB7IGNsYXNzOiAncS10YWJsZV9fY29udHJvbCcgfSwgW1xuICAgICAgICAgICAgdG9wUmlnaHQobWFyZ2luYWxzU2NvcGUudmFsdWUpXG4gICAgICAgICAgXSlcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogdG9wQ2xhc3MgfSwgY2hpbGQpXG4gICAgfVxuXG4gICAgY29uc3QgaGVhZGVyU2VsZWN0ZWRWYWx1ZSA9IGNvbXB1dGVkKCgpID0+IChcbiAgICAgIHNvbWVSb3dzU2VsZWN0ZWQudmFsdWUgPT09IHRydWVcbiAgICAgICAgPyBudWxsXG4gICAgICAgIDogYWxsUm93c1NlbGVjdGVkLnZhbHVlXG4gICAgKSlcblxuICAgIGZ1bmN0aW9uIGdldFRIZWFkICgpIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gZ2V0VEhlYWRUUigpXG5cbiAgICAgIGlmIChwcm9wcy5sb2FkaW5nID09PSB0cnVlICYmIHNsb3RzLmxvYWRpbmcgPT09IHZvaWQgMCkge1xuICAgICAgICBjaGlsZC5wdXNoKFxuICAgICAgICAgIGgoJ3RyJywgeyBjbGFzczogJ3EtdGFibGVfX3Byb2dyZXNzJyB9LCBbXG4gICAgICAgICAgICBoKCd0aCcsIHtcbiAgICAgICAgICAgICAgY2xhc3M6ICdyZWxhdGl2ZS1wb3NpdGlvbicsXG4gICAgICAgICAgICAgIGNvbHNwYW46IGNvbXB1dGVkQ29sc3Bhbi52YWx1ZVxuICAgICAgICAgICAgfSwgZ2V0UHJvZ3Jlc3MoKSlcbiAgICAgICAgICBdKVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoKCd0aGVhZCcsIGNoaWxkKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFRIZWFkVFIgKCkge1xuICAgICAgY29uc3RcbiAgICAgICAgaGVhZGVyID0gc2xvdHMuaGVhZGVyLFxuICAgICAgICBoZWFkZXJDZWxsID0gc2xvdHNbICdoZWFkZXItY2VsbCcgXVxuXG4gICAgICBpZiAoaGVhZGVyICE9PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIGhlYWRlcihcbiAgICAgICAgICBnZXRIZWFkZXJTY29wZSh7IGhlYWRlcjogdHJ1ZSB9KVxuICAgICAgICApLnNsaWNlKClcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2hpbGQgPSBjb21wdXRlZENvbHMudmFsdWUubWFwKGNvbCA9PiB7XG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgaGVhZGVyQ2VsbENvbCA9IHNsb3RzWyBgaGVhZGVyLWNlbGwtJHsgY29sLm5hbWUgfWAgXSxcbiAgICAgICAgICBzbG90ID0gaGVhZGVyQ2VsbENvbCAhPT0gdm9pZCAwID8gaGVhZGVyQ2VsbENvbCA6IGhlYWRlckNlbGwsXG4gICAgICAgICAgcHJvcHMgPSBnZXRIZWFkZXJTY29wZSh7IGNvbCB9KVxuXG4gICAgICAgIHJldHVybiBzbG90ICE9PSB2b2lkIDBcbiAgICAgICAgICA/IHNsb3QocHJvcHMpXG4gICAgICAgICAgOiBoKFFUaCwge1xuICAgICAgICAgICAga2V5OiBjb2wubmFtZSxcbiAgICAgICAgICAgIHByb3BzXG4gICAgICAgICAgfSwgKCkgPT4gY29sLmxhYmVsKVxuICAgICAgfSlcblxuICAgICAgaWYgKHNpbmdsZVNlbGVjdGlvbi52YWx1ZSA9PT0gdHJ1ZSAmJiBwcm9wcy5ncmlkICE9PSB0cnVlKSB7XG4gICAgICAgIGNoaWxkLnVuc2hpZnQoXG4gICAgICAgICAgaCgndGgnLCB7IGNsYXNzOiAncS10YWJsZS0tY29sLWF1dG8td2lkdGgnIH0sICcgJylcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAobXVsdGlwbGVTZWxlY3Rpb24udmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgY29uc3Qgc2xvdCA9IHNsb3RzWyAnaGVhZGVyLXNlbGVjdGlvbicgXVxuICAgICAgICBjb25zdCBjb250ZW50ID0gc2xvdCAhPT0gdm9pZCAwXG4gICAgICAgICAgPyBzbG90KGdldEhlYWRlclNjb3BlKHt9KSlcbiAgICAgICAgICA6IFtcbiAgICAgICAgICAgICAgaChRQ2hlY2tib3gsIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICAgICAgICAgICAgbW9kZWxWYWx1ZTogaGVhZGVyU2VsZWN0ZWRWYWx1ZS52YWx1ZSxcbiAgICAgICAgICAgICAgICBkYXJrOiBpc0RhcmsudmFsdWUsXG4gICAgICAgICAgICAgICAgZGVuc2U6IHByb3BzLmRlbnNlLFxuICAgICAgICAgICAgICAgICdvblVwZGF0ZTptb2RlbFZhbHVlJzogb25NdWx0aXBsZVNlbGVjdGlvblNldFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXVxuXG4gICAgICAgIGNoaWxkLnVuc2hpZnQoXG4gICAgICAgICAgaCgndGgnLCB7IGNsYXNzOiAncS10YWJsZS0tY29sLWF1dG8td2lkdGgnIH0sIGNvbnRlbnQpXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgaCgndHInLCB7XG4gICAgICAgICAgY2xhc3M6IHByb3BzLnRhYmxlSGVhZGVyQ2xhc3MsXG4gICAgICAgICAgc3R5bGU6IHByb3BzLnRhYmxlSGVhZGVyU3R5bGVcbiAgICAgICAgfSwgY2hpbGQpXG4gICAgICBdXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SGVhZGVyU2NvcGUgKGRhdGEpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oZGF0YSwge1xuICAgICAgICBjb2xzOiBjb21wdXRlZENvbHMudmFsdWUsXG4gICAgICAgIHNvcnQsXG4gICAgICAgIGNvbHNNYXA6IGNvbXB1dGVkQ29sc01hcC52YWx1ZSxcbiAgICAgICAgY29sb3I6IHByb3BzLmNvbG9yLFxuICAgICAgICBkYXJrOiBpc0RhcmsudmFsdWUsXG4gICAgICAgIGRlbnNlOiBwcm9wcy5kZW5zZVxuICAgICAgfSlcblxuICAgICAgaWYgKG11bHRpcGxlU2VsZWN0aW9uLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIGluamVjdFByb3AoXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICAnc2VsZWN0ZWQnLFxuICAgICAgICAgICgpID0+IGhlYWRlclNlbGVjdGVkVmFsdWUudmFsdWUsXG4gICAgICAgICAgb25NdWx0aXBsZVNlbGVjdGlvblNldFxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25NdWx0aXBsZVNlbGVjdGlvblNldCAodmFsKSB7XG4gICAgICBpZiAoc29tZVJvd3NTZWxlY3RlZC52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICB2YWwgPSBmYWxzZVxuICAgICAgfVxuXG4gICAgICB1cGRhdGVTZWxlY3Rpb24oXG4gICAgICAgIGNvbXB1dGVkUm93cy52YWx1ZS5tYXAoZ2V0Um93S2V5LnZhbHVlKSxcbiAgICAgICAgY29tcHV0ZWRSb3dzLnZhbHVlLFxuICAgICAgICB2YWxcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBuYXZJY29uID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgaWNvID0gW1xuICAgICAgICBwcm9wcy5pY29uRmlyc3RQYWdlIHx8ICRxLmljb25TZXQudGFibGUuZmlyc3RQYWdlLFxuICAgICAgICBwcm9wcy5pY29uUHJldlBhZ2UgfHwgJHEuaWNvblNldC50YWJsZS5wcmV2UGFnZSxcbiAgICAgICAgcHJvcHMuaWNvbk5leHRQYWdlIHx8ICRxLmljb25TZXQudGFibGUubmV4dFBhZ2UsXG4gICAgICAgIHByb3BzLmljb25MYXN0UGFnZSB8fCAkcS5pY29uU2V0LnRhYmxlLmxhc3RQYWdlXG4gICAgICBdXG4gICAgICByZXR1cm4gJHEubGFuZy5ydGwgPT09IHRydWUgPyBpY28ucmV2ZXJzZSgpIDogaWNvXG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIGdldEJvdHRvbURpdiAoKSB7XG4gICAgICBpZiAocHJvcHMuaGlkZUJvdHRvbSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKG5vdGhpbmdUb0Rpc3BsYXkudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgaWYgKHByb3BzLmhpZGVOb0RhdGEgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBwcm9wcy5sb2FkaW5nID09PSB0cnVlXG4gICAgICAgICAgPyBwcm9wcy5sb2FkaW5nTGFiZWwgfHwgJHEubGFuZy50YWJsZS5sb2FkaW5nXG4gICAgICAgICAgOiAocHJvcHMuZmlsdGVyID8gcHJvcHMubm9SZXN1bHRzTGFiZWwgfHwgJHEubGFuZy50YWJsZS5ub1Jlc3VsdHMgOiBwcm9wcy5ub0RhdGFMYWJlbCB8fCAkcS5sYW5nLnRhYmxlLm5vRGF0YSlcblxuICAgICAgICBjb25zdCBub0RhdGEgPSBzbG90c1sgJ25vLWRhdGEnIF1cbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBub0RhdGEgIT09IHZvaWQgMFxuICAgICAgICAgID8gWyBub0RhdGEoeyBtZXNzYWdlLCBpY29uOiAkcS5pY29uU2V0LnRhYmxlLndhcm5pbmcsIGZpbHRlcjogcHJvcHMuZmlsdGVyIH0pIF1cbiAgICAgICAgICA6IFtcbiAgICAgICAgICAgICAgaChRSWNvbiwge1xuICAgICAgICAgICAgICAgIGNsYXNzOiAncS10YWJsZV9fYm90dG9tLW5vZGF0YS1pY29uJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAkcS5pY29uU2V0LnRhYmxlLndhcm5pbmdcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIG1lc3NhZ2VcbiAgICAgICAgICAgIF1cblxuICAgICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogYm90dG9tQ2xhc3MgKyAnIHEtdGFibGVfX2JvdHRvbS0tbm9kYXRhJyB9LCBjaGlsZHJlbilcbiAgICAgIH1cblxuICAgICAgY29uc3QgYm90dG9tID0gc2xvdHMuYm90dG9tXG5cbiAgICAgIGlmIChib3R0b20gIT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogYm90dG9tQ2xhc3MgfSwgWyBib3R0b20obWFyZ2luYWxzU2NvcGUudmFsdWUpIF0pXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNoaWxkID0gcHJvcHMuaGlkZVNlbGVjdGVkQmFubmVyICE9PSB0cnVlICYmIGhhc1NlbGVjdGlvbk1vZGUudmFsdWUgPT09IHRydWUgJiYgcm93c1NlbGVjdGVkTnVtYmVyLnZhbHVlID4gMFxuICAgICAgICA/IFtcbiAgICAgICAgICAgIGgoJ2RpdicsIHsgY2xhc3M6ICdxLXRhYmxlX19jb250cm9sJyB9LCBbXG4gICAgICAgICAgICAgIGgoJ2RpdicsIFtcbiAgICAgICAgICAgICAgICAocHJvcHMuc2VsZWN0ZWRSb3dzTGFiZWwgfHwgJHEubGFuZy50YWJsZS5zZWxlY3RlZFJlY29yZHMpKHJvd3NTZWxlY3RlZE51bWJlci52YWx1ZSlcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICA6IFtdXG5cbiAgICAgIGlmIChwcm9wcy5oaWRlUGFnaW5hdGlvbiAhPT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICAgIGNsYXNzOiBib3R0b21DbGFzcyArICcganVzdGlmeS1lbmQnXG4gICAgICAgIH0sIGdldFBhZ2luYXRpb25EaXYoY2hpbGQpKVxuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGQubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiBib3R0b21DbGFzcyB9LCBjaGlsZClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblBhZ1NlbGVjdGlvbiAocGFnKSB7XG4gICAgICBzZXRQYWdpbmF0aW9uKHtcbiAgICAgICAgcGFnZTogMSxcbiAgICAgICAgcm93c1BlclBhZ2U6IHBhZy52YWx1ZVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYWdpbmF0aW9uRGl2IChjaGlsZCkge1xuICAgICAgbGV0IGNvbnRyb2xcbiAgICAgIGNvbnN0XG4gICAgICAgIHsgcm93c1BlclBhZ2UgfSA9IGNvbXB1dGVkUGFnaW5hdGlvbi52YWx1ZSxcbiAgICAgICAgcGFnaW5hdGlvbkxhYmVsID0gcHJvcHMucGFnaW5hdGlvbkxhYmVsIHx8ICRxLmxhbmcudGFibGUucGFnaW5hdGlvbixcbiAgICAgICAgcGFnaW5hdGlvblNsb3QgPSBzbG90cy5wYWdpbmF0aW9uLFxuICAgICAgICBoYXNPcHRzID0gcHJvcHMucm93c1BlclBhZ2VPcHRpb25zLmxlbmd0aCA+IDFcblxuICAgICAgY2hpbGQucHVzaChcbiAgICAgICAgaCgnZGl2JywgeyBjbGFzczogJ3EtdGFibGVfX3NlcGFyYXRvciBjb2wnIH0pXG4gICAgICApXG5cbiAgICAgIGlmIChoYXNPcHRzID09PSB0cnVlKSB7XG4gICAgICAgIGNoaWxkLnB1c2goXG4gICAgICAgICAgaCgnZGl2JywgeyBjbGFzczogJ3EtdGFibGVfX2NvbnRyb2wnIH0sIFtcbiAgICAgICAgICAgIGgoJ3NwYW4nLCB7IGNsYXNzOiAncS10YWJsZV9fYm90dG9tLWl0ZW0nIH0sIFtcbiAgICAgICAgICAgICAgcHJvcHMucm93c1BlclBhZ2VMYWJlbCB8fCAkcS5sYW5nLnRhYmxlLnJlY29yZHNQZXJQYWdlXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIGgoUVNlbGVjdCwge1xuICAgICAgICAgICAgICBjbGFzczogJ3EtdGFibGVfX3NlbGVjdCBpbmxpbmUgcS10YWJsZV9fYm90dG9tLWl0ZW0nLFxuICAgICAgICAgICAgICBjb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICAgICAgICAgIG1vZGVsVmFsdWU6IHJvd3NQZXJQYWdlLFxuICAgICAgICAgICAgICBvcHRpb25zOiBjb21wdXRlZFJvd3NQZXJQYWdlT3B0aW9ucy52YWx1ZSxcbiAgICAgICAgICAgICAgZGlzcGxheVZhbHVlOiByb3dzUGVyUGFnZSA9PT0gMFxuICAgICAgICAgICAgICAgID8gJHEubGFuZy50YWJsZS5hbGxSb3dzXG4gICAgICAgICAgICAgICAgOiByb3dzUGVyUGFnZSxcbiAgICAgICAgICAgICAgZGFyazogaXNEYXJrLnZhbHVlLFxuICAgICAgICAgICAgICBib3JkZXJsZXNzOiB0cnVlLFxuICAgICAgICAgICAgICBkZW5zZTogdHJ1ZSxcbiAgICAgICAgICAgICAgb3B0aW9uc0RlbnNlOiB0cnVlLFxuICAgICAgICAgICAgICBvcHRpb25zQ292ZXI6IHRydWUsXG4gICAgICAgICAgICAgICdvblVwZGF0ZTptb2RlbFZhbHVlJzogb25QYWdTZWxlY3Rpb25cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXSlcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICBpZiAocGFnaW5hdGlvblNsb3QgIT09IHZvaWQgMCkge1xuICAgICAgICBjb250cm9sID0gcGFnaW5hdGlvblNsb3QobWFyZ2luYWxzU2NvcGUudmFsdWUpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29udHJvbCA9IFtcbiAgICAgICAgICBoKCdzcGFuJywgcm93c1BlclBhZ2UgIT09IDAgPyB7IGNsYXNzOiAncS10YWJsZV9fYm90dG9tLWl0ZW0nIH0gOiB7fSwgW1xuICAgICAgICAgICAgcm93c1BlclBhZ2VcbiAgICAgICAgICAgICAgPyBwYWdpbmF0aW9uTGFiZWwoZmlyc3RSb3dJbmRleC52YWx1ZSArIDEsIE1hdGgubWluKGxhc3RSb3dJbmRleC52YWx1ZSwgY29tcHV0ZWRSb3dzTnVtYmVyLnZhbHVlKSwgY29tcHV0ZWRSb3dzTnVtYmVyLnZhbHVlKVxuICAgICAgICAgICAgICA6IHBhZ2luYXRpb25MYWJlbCgxLCBmaWx0ZXJlZFNvcnRlZFJvd3NOdW1iZXIudmFsdWUsIGNvbXB1dGVkUm93c051bWJlci52YWx1ZSlcbiAgICAgICAgICBdKVxuICAgICAgICBdXG5cbiAgICAgICAgaWYgKHJvd3NQZXJQYWdlICE9PSAwICYmIHBhZ2VzTnVtYmVyLnZhbHVlID4gMSkge1xuICAgICAgICAgIGNvbnN0IGJ0blByb3BzID0ge1xuICAgICAgICAgICAgY29sb3I6IHByb3BzLmNvbG9yLFxuICAgICAgICAgICAgcm91bmQ6IHRydWUsXG4gICAgICAgICAgICBkZW5zZTogdHJ1ZSxcbiAgICAgICAgICAgIGZsYXQ6IHRydWVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocHJvcHMuZGVuc2UgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGJ0blByb3BzLnNpemUgPSAnc20nXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGFnZXNOdW1iZXIudmFsdWUgPiAyICYmIGNvbnRyb2wucHVzaChcbiAgICAgICAgICAgIGgoUUJ0biwge1xuICAgICAgICAgICAgICBrZXk6ICdwZ0ZpcnN0JyxcbiAgICAgICAgICAgICAgLi4uYnRuUHJvcHMsXG4gICAgICAgICAgICAgIGljb246IG5hdkljb24udmFsdWVbIDAgXSxcbiAgICAgICAgICAgICAgZGlzYWJsZTogaXNGaXJzdFBhZ2UudmFsdWUsXG4gICAgICAgICAgICAgIG9uQ2xpY2s6IGZpcnN0UGFnZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG5cbiAgICAgICAgICBjb250cm9sLnB1c2goXG4gICAgICAgICAgICBoKFFCdG4sIHtcbiAgICAgICAgICAgICAga2V5OiAncGdQcmV2JyxcbiAgICAgICAgICAgICAgLi4uYnRuUHJvcHMsXG4gICAgICAgICAgICAgIGljb246IG5hdkljb24udmFsdWVbIDEgXSxcbiAgICAgICAgICAgICAgZGlzYWJsZTogaXNGaXJzdFBhZ2UudmFsdWUsXG4gICAgICAgICAgICAgIG9uQ2xpY2s6IHByZXZQYWdlXG4gICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgaChRQnRuLCB7XG4gICAgICAgICAgICAgIGtleTogJ3BnTmV4dCcsXG4gICAgICAgICAgICAgIC4uLmJ0blByb3BzLFxuICAgICAgICAgICAgICBpY29uOiBuYXZJY29uLnZhbHVlWyAyIF0sXG4gICAgICAgICAgICAgIGRpc2FibGU6IGlzTGFzdFBhZ2UudmFsdWUsXG4gICAgICAgICAgICAgIG9uQ2xpY2s6IG5leHRQYWdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcblxuICAgICAgICAgIHBhZ2VzTnVtYmVyLnZhbHVlID4gMiAmJiBjb250cm9sLnB1c2goXG4gICAgICAgICAgICBoKFFCdG4sIHtcbiAgICAgICAgICAgICAga2V5OiAncGdMYXN0JyxcbiAgICAgICAgICAgICAgLi4uYnRuUHJvcHMsXG4gICAgICAgICAgICAgIGljb246IG5hdkljb24udmFsdWVbIDMgXSxcbiAgICAgICAgICAgICAgZGlzYWJsZTogaXNMYXN0UGFnZS52YWx1ZSxcbiAgICAgICAgICAgICAgb25DbGljazogbGFzdFBhZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNoaWxkLnB1c2goXG4gICAgICAgIGgoJ2RpdicsIHsgY2xhc3M6ICdxLXRhYmxlX19jb250cm9sJyB9LCBjb250cm9sKVxuICAgICAgKVxuXG4gICAgICByZXR1cm4gY2hpbGRcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRHcmlkSGVhZGVyICgpIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gcHJvcHMuZ3JpZEhlYWRlciA9PT0gdHJ1ZVxuICAgICAgICA/IFtcbiAgICAgICAgICAgIGgoJ3RhYmxlJywgeyBjbGFzczogJ3EtdGFibGUnIH0sIFtcbiAgICAgICAgICAgICAgZ2V0VEhlYWQoaClcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICA6IChcbiAgICAgICAgICAgIHByb3BzLmxvYWRpbmcgPT09IHRydWUgJiYgc2xvdHMubG9hZGluZyA9PT0gdm9pZCAwXG4gICAgICAgICAgICAgID8gZ2V0UHJvZ3Jlc3MoaClcbiAgICAgICAgICAgICAgOiB2b2lkIDBcbiAgICAgICAgICApXG5cbiAgICAgIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiAncS10YWJsZV9fbWlkZGxlJyB9LCBjaGlsZClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRHcmlkQm9keSAoKSB7XG4gICAgICBjb25zdCBpdGVtID0gc2xvdHMuaXRlbSAhPT0gdm9pZCAwXG4gICAgICAgID8gc2xvdHMuaXRlbVxuICAgICAgICA6IHNjb3BlID0+IHtcbiAgICAgICAgICBjb25zdCBjaGlsZCA9IHNjb3BlLmNvbHMubWFwKFxuICAgICAgICAgICAgY29sID0+IGgoJ2RpdicsIHsgY2xhc3M6ICdxLXRhYmxlX19ncmlkLWl0ZW0tcm93JyB9LCBbXG4gICAgICAgICAgICAgIGgoJ2RpdicsIHsgY2xhc3M6ICdxLXRhYmxlX19ncmlkLWl0ZW0tdGl0bGUnIH0sIFsgY29sLmxhYmVsIF0pLFxuICAgICAgICAgICAgICBoKCdkaXYnLCB7IGNsYXNzOiAncS10YWJsZV9fZ3JpZC1pdGVtLXZhbHVlJyB9LCBbIGNvbC52YWx1ZSBdKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICApXG5cbiAgICAgICAgICBpZiAoaGFzU2VsZWN0aW9uTW9kZS52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29uc3Qgc2xvdCA9IHNsb3RzWyAnYm9keS1zZWxlY3Rpb24nIF1cbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBzbG90ICE9PSB2b2lkIDBcbiAgICAgICAgICAgICAgPyBzbG90KHNjb3BlKVxuICAgICAgICAgICAgICA6IFtcbiAgICAgICAgICAgICAgICAgIGgoUUNoZWNrYm94LCB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVmFsdWU6IHNjb3BlLnNlbGVjdGVkLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICAgICAgICAgICAgICAgIGRhcms6IGlzRGFyay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGVuc2U6IHByb3BzLmRlbnNlLFxuICAgICAgICAgICAgICAgICAgICAnb25VcGRhdGU6bW9kZWxWYWx1ZSc6IChhZGRpbmcsIGV2dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNlbGVjdGlvbihbIHNjb3BlLmtleSBdLCBbIHNjb3BlLnJvdyBdLCBhZGRpbmcsIGV2dClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdXG5cbiAgICAgICAgICAgIGNoaWxkLnVuc2hpZnQoXG4gICAgICAgICAgICAgIGgoJ2RpdicsIHsgY2xhc3M6ICdxLXRhYmxlX19ncmlkLWl0ZW0tcm93JyB9LCBjb250ZW50KSxcbiAgICAgICAgICAgICAgaChRU2VwYXJhdG9yLCB7IGRhcms6IGlzRGFyay52YWx1ZSB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICBjbGFzczogW1xuICAgICAgICAgICAgICAncS10YWJsZV9fZ3JpZC1pdGVtLWNhcmQnICsgY2FyZERlZmF1bHRDbGFzcy52YWx1ZSxcbiAgICAgICAgICAgICAgcHJvcHMuY2FyZENsYXNzXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgc3R5bGU6IHByb3BzLmNhcmRTdHlsZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHByb3BzLm9uUm93Q2xpY2sgIT09IHZvaWQgMFxuICAgICAgICAgICAgfHwgcHJvcHMub25Sb3dEYmxjbGljayAhPT0gdm9pZCAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBkYXRhLmNsYXNzWyAwIF0gKz0gJyBjdXJzb3ItcG9pbnRlcidcblxuICAgICAgICAgICAgaWYgKHByb3BzLm9uUm93Q2xpY2sgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICBkYXRhLm9uQ2xpY2sgPSBldnQgPT4ge1xuICAgICAgICAgICAgICAgIGVtaXQoJ1Jvd0NsaWNrJywgZXZ0LCBzY29wZS5yb3csIHNjb3BlLnBhZ2VJbmRleClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocHJvcHMub25Sb3dEYmxjbGljayAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgIGRhdGEub25EYmxjbGljayA9IGV2dCA9PiB7XG4gICAgICAgICAgICAgICAgZW1pdCgnUm93RGJsY2xpY2snLCBldnQsIHNjb3BlLnJvdywgc2NvcGUucGFnZUluZGV4KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgICAgIGNsYXNzOiAncS10YWJsZV9fZ3JpZC1pdGVtIGNvbC14cy0xMiBjb2wtc20tNiBjb2wtbWQtNCBjb2wtbGctMydcbiAgICAgICAgICAgICAgKyAoc2NvcGUuc2VsZWN0ZWQgPT09IHRydWUgPyAnIHEtdGFibGVfX2dyaWQtaXRlbS0tc2VsZWN0ZWQnIDogJycpXG4gICAgICAgICAgfSwgW1xuICAgICAgICAgICAgaCgnZGl2JywgZGF0YSwgY2hpbGQpXG4gICAgICAgICAgXSlcbiAgICAgICAgfVxuXG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogW1xuICAgICAgICAgICdxLXRhYmxlX19ncmlkLWNvbnRlbnQgcm93JyxcbiAgICAgICAgICBwcm9wcy5jYXJkQ29udGFpbmVyQ2xhc3NcbiAgICAgICAgXSxcbiAgICAgICAgc3R5bGU6IHByb3BzLmNhcmRDb250YWluZXJTdHlsZVxuICAgICAgfSwgY29tcHV0ZWRSb3dzLnZhbHVlLm1hcCgocm93LCBwYWdlSW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIGl0ZW0oZ2V0Qm9keVNjb3BlKHtcbiAgICAgICAgICBrZXk6IGdldFJvd0tleS52YWx1ZShyb3cpLFxuICAgICAgICAgIHJvdyxcbiAgICAgICAgICBwYWdlSW5kZXhcbiAgICAgICAgfSkpXG4gICAgICB9KSlcbiAgICB9XG5cbiAgICAvLyBleHBvc2UgcHVibGljIG1ldGhvZHMgYW5kIG5lZWRlZCBjb21wdXRlZCBwcm9wc1xuICAgIE9iamVjdC5hc3NpZ24odm0ucHJveHksIHtcbiAgICAgIHJlcXVlc3RTZXJ2ZXJJbnRlcmFjdGlvbixcbiAgICAgIHNldFBhZ2luYXRpb24sXG4gICAgICBmaXJzdFBhZ2UsXG4gICAgICBwcmV2UGFnZSxcbiAgICAgIG5leHRQYWdlLFxuICAgICAgbGFzdFBhZ2UsXG4gICAgICBpc1Jvd1NlbGVjdGVkLFxuICAgICAgY2xlYXJTZWxlY3Rpb24sXG4gICAgICBpc1Jvd0V4cGFuZGVkLFxuICAgICAgc2V0RXhwYW5kZWQsXG4gICAgICBzb3J0LFxuICAgICAgcmVzZXRWaXJ0dWFsU2Nyb2xsLFxuICAgICAgc2Nyb2xsVG8sXG4gICAgICBnZXRDZWxsVmFsdWVcbiAgICB9KVxuXG4gICAgaW5qZWN0TXVsdGlwbGVQcm9wcyh2bS5wcm94eSwge1xuICAgICAgZmlsdGVyZWRTb3J0ZWRSb3dzOiAoKSA9PiBmaWx0ZXJlZFNvcnRlZFJvd3MudmFsdWUsXG4gICAgICBjb21wdXRlZFJvd3M6ICgpID0+IGNvbXB1dGVkUm93cy52YWx1ZSxcbiAgICAgIGNvbXB1dGVkUm93c051bWJlcjogKCkgPT4gY29tcHV0ZWRSb3dzTnVtYmVyLnZhbHVlXG4gICAgfSlcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBjaGlsZCA9IFsgZ2V0VG9wRGl2KCkgXVxuICAgICAgY29uc3QgZGF0YSA9IHsgcmVmOiByb290UmVmLCBjbGFzczogY29udGFpbmVyQ2xhc3MudmFsdWUgfVxuXG4gICAgICBpZiAocHJvcHMuZ3JpZCA9PT0gdHJ1ZSkge1xuICAgICAgICBjaGlsZC5wdXNoKGdldEdyaWRIZWFkZXIoKSlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBPYmplY3QuYXNzaWduKGRhdGEsIHtcbiAgICAgICAgICBjbGFzczogWyBkYXRhLmNsYXNzLCBwcm9wcy5jYXJkQ2xhc3MgXSxcbiAgICAgICAgICBzdHlsZTogcHJvcHMuY2FyZFN0eWxlXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGNoaWxkLnB1c2goXG4gICAgICAgIGdldEJvZHkoKSxcbiAgICAgICAgZ2V0Qm90dG9tRGl2KClcbiAgICAgIClcblxuICAgICAgaWYgKHByb3BzLmxvYWRpbmcgPT09IHRydWUgJiYgc2xvdHMubG9hZGluZyAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGNoaWxkLnB1c2goXG4gICAgICAgICAgc2xvdHMubG9hZGluZygpXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoJ2RpdicsIGRhdGEsIGNoaWxkKVxuICAgIH1cbiAgfVxufSlcbiIsImltcG9ydCB7IGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmNyZWF0ZS9jcmVhdGUuanMnXG5pbXBvcnQgeyBoU2xvdCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUucmVuZGVyL3JlbmRlci5qcydcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29tcG9uZW50KHtcbiAgbmFtZTogJ1FDYXJkU2VjdGlvbicsXG5cbiAgcHJvcHM6IHtcbiAgICB0YWc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdkaXYnXG4gICAgfSxcblxuICAgIGhvcml6b250YWw6IEJvb2xlYW5cbiAgfSxcblxuICBzZXR1cCAocHJvcHMsIHsgc2xvdHMgfSkge1xuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgJ3EtY2FyZF9fc2VjdGlvbidcbiAgICAgICsgYCBxLWNhcmRfX3NlY3Rpb24tLSR7IHByb3BzLmhvcml6b250YWwgPT09IHRydWUgPyAnaG9yaXogcm93IG5vLXdyYXAnIDogJ3ZlcnQnIH1gXG4gICAgKVxuXG4gICAgcmV0dXJuICgpID0+IGgocHJvcHMudGFnLCB7IGNsYXNzOiBjbGFzc2VzLnZhbHVlIH0sIGhTbG90KHNsb3RzLmRlZmF1bHQpKVxuICB9XG59KVxuIiwiaW1wb3J0IHsgaCwgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG5cbmltcG9ydCB1c2VBbGlnbiwgeyB1c2VBbGlnblByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvcHJpdmF0ZS51c2UtYWxpZ24vdXNlLWFsaWduLmpzJ1xuXG5pbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmNyZWF0ZS9jcmVhdGUuanMnXG5pbXBvcnQgeyBoU2xvdCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUucmVuZGVyL3JlbmRlci5qcydcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29tcG9uZW50KHtcbiAgbmFtZTogJ1FDYXJkQWN0aW9ucycsXG5cbiAgcHJvcHM6IHtcbiAgICAuLi51c2VBbGlnblByb3BzLFxuICAgIHZlcnRpY2FsOiBCb29sZWFuXG4gIH0sXG5cbiAgc2V0dXAgKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCBhbGlnbkNsYXNzID0gdXNlQWxpZ24ocHJvcHMpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgIGBxLWNhcmRfX2FjdGlvbnMgJHsgYWxpZ25DbGFzcy52YWx1ZSB9YFxuICAgICAgKyBgIHEtY2FyZF9fYWN0aW9ucy0tJHsgcHJvcHMudmVydGljYWwgPT09IHRydWUgPyAndmVydCBjb2x1bW4nIDogJ2hvcml6IHJvdycgfWBcbiAgICApXG5cbiAgICByZXR1cm4gKCkgPT4gaCgnZGl2JywgeyBjbGFzczogY2xhc3Nlcy52YWx1ZSB9LCBoU2xvdChzbG90cy5kZWZhdWx0KSlcbiAgfVxufSlcbiIsImltcG9ydCB7IGgsIGNvbXB1dGVkLCBnZXRDdXJyZW50SW5zdGFuY2UgfSBmcm9tICd2dWUnXG5cbmltcG9ydCB1c2VEYXJrLCB7IHVzZURhcmtQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUudXNlLWRhcmsvdXNlLWRhcmsuanMnXG5cbmltcG9ydCB7IGNyZWF0ZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUuY3JlYXRlL2NyZWF0ZS5qcydcbmltcG9ydCB7IGhTbG90IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5yZW5kZXIvcmVuZGVyLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb21wb25lbnQoe1xuICBuYW1lOiAnUUNhcmQnLFxuXG4gIHByb3BzOiB7XG4gICAgLi4udXNlRGFya1Byb3BzLFxuXG4gICAgdGFnOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZGl2J1xuICAgIH0sXG5cbiAgICBzcXVhcmU6IEJvb2xlYW4sXG4gICAgZmxhdDogQm9vbGVhbixcbiAgICBib3JkZXJlZDogQm9vbGVhblxuICB9LFxuXG4gIHNldHVwIChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgY29uc3QgeyBwcm94eTogeyAkcSB9IH0gPSBnZXRDdXJyZW50SW5zdGFuY2UoKVxuICAgIGNvbnN0IGlzRGFyayA9IHVzZURhcmsocHJvcHMsICRxKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+XG4gICAgICAncS1jYXJkJ1xuICAgICAgKyAoaXNEYXJrLnZhbHVlID09PSB0cnVlID8gJyBxLWNhcmQtLWRhcmsgcS1kYXJrJyA6ICcnKVxuICAgICAgKyAocHJvcHMuYm9yZGVyZWQgPT09IHRydWUgPyAnIHEtY2FyZC0tYm9yZGVyZWQnIDogJycpXG4gICAgICArIChwcm9wcy5zcXVhcmUgPT09IHRydWUgPyAnIHEtY2FyZC0tc3F1YXJlIG5vLWJvcmRlci1yYWRpdXMnIDogJycpXG4gICAgICArIChwcm9wcy5mbGF0ID09PSB0cnVlID8gJyBxLWNhcmQtLWZsYXQgbm8tc2hhZG93JyA6ICcnKVxuICAgIClcblxuICAgIHJldHVybiAoKSA9PiBoKHByb3BzLnRhZywgeyBjbGFzczogY2xhc3Nlcy52YWx1ZSB9LCBoU2xvdChzbG90cy5kZWZhdWx0KSlcbiAgfVxufSlcbiIsImltcG9ydCB7IGNyZWF0ZURpcmVjdGl2ZSB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUuY3JlYXRlL2NyZWF0ZS5qcydcbmltcG9ydCB7IGNsb3NlUG9ydGFscywgZ2V0UG9ydGFsUHJveHkgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLnBvcnRhbC9wb3J0YWwuanMnXG5pbXBvcnQgeyBpc0tleUNvZGUgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmtleWJvYXJkL2tleS1jb21wb3NpdGlvbi5qcydcbmltcG9ydCBnZXRTU1JQcm9wcyBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLm5vb3Atc3NyLWRpcmVjdGl2ZS10cmFuc2Zvcm0vbm9vcC1zc3ItZGlyZWN0aXZlLXRyYW5zZm9ybS5qcydcblxuLypcbiAqIGRlcHRoXG4gKiAgIDwgMCAgLS0+IGNsb3NlIGFsbCBjaGFpblxuICogICAwICAgIC0tPiBkaXNhYmxlZFxuICogICA+IDAgIC0tPiBjbG9zZSBjaGFpbiB1cCB0byBOIHBhcmVudFxuICovXG5cbmZ1bmN0aW9uIGdldERlcHRoICh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBjb25zdCBkZXB0aCA9IHBhcnNlSW50KHZhbHVlLCAxMClcbiAgcmV0dXJuIGlzTmFOKGRlcHRoKSA/IDAgOiBkZXB0aFxufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVEaXJlY3RpdmUoX19RVUFTQVJfU1NSX1NFUlZFUl9fXG4gID8geyBuYW1lOiAnY2xvc2UtcG9wdXAnLCBnZXRTU1JQcm9wcyB9XG4gIDoge1xuICAgICAgbmFtZTogJ2Nsb3NlLXBvcHVwJyxcblxuICAgICAgYmVmb3JlTW91bnQgKGVsLCB7IHZhbHVlIH0pIHtcbiAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgIGRlcHRoOiBnZXREZXB0aCh2YWx1ZSksXG5cbiAgICAgICAgICBoYW5kbGVyIChldnQpIHtcbiAgICAgICAgICAgIC8vIGFsbG93IEBjbGljayB0byBiZSBlbWl0dGVkXG4gICAgICAgICAgICBjdHguZGVwdGggIT09IDAgJiYgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHByb3h5ID0gZ2V0UG9ydGFsUHJveHkoZWwpXG4gICAgICAgICAgICAgIGlmIChwcm94eSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgY2xvc2VQb3J0YWxzKHByb3h5LCBldnQsIGN0eC5kZXB0aClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgaGFuZGxlcktleSAoZXZ0KSB7XG4gICAgICAgICAgICBpc0tleUNvZGUoZXZ0LCAxMykgPT09IHRydWUgJiYgY3R4LmhhbmRsZXIoZXZ0KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGVsLl9fcWNsb3NlcG9wdXAgPSBjdHhcblxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGN0eC5oYW5kbGVyKVxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGN0eC5oYW5kbGVyS2V5KVxuICAgICAgfSxcblxuICAgICAgdXBkYXRlZCAoZWwsIHsgdmFsdWUsIG9sZFZhbHVlIH0pIHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgIGVsLl9fcWNsb3NlcG9wdXAuZGVwdGggPSBnZXREZXB0aCh2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgYmVmb3JlVW5tb3VudCAoZWwpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gZWwuX19xY2xvc2Vwb3B1cFxuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGN0eC5oYW5kbGVyKVxuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIGN0eC5oYW5kbGVyS2V5KVxuICAgICAgICBkZWxldGUgZWwuX19xY2xvc2Vwb3B1cFxuICAgICAgfVxuICAgIH1cbilcbiIsIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUpOih0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6dHx8c2VsZikuZGF5anM9ZSgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciB0PTFlMyxlPTZlNCxuPTM2ZTUscj1cIm1pbGxpc2Vjb25kXCIsaT1cInNlY29uZFwiLHM9XCJtaW51dGVcIix1PVwiaG91clwiLGE9XCJkYXlcIixvPVwid2Vla1wiLGM9XCJtb250aFwiLGY9XCJxdWFydGVyXCIsaD1cInllYXJcIixkPVwiZGF0ZVwiLGw9XCJJbnZhbGlkIERhdGVcIiwkPS9eKFxcZHs0fSlbLS9dPyhcXGR7MSwyfSk/Wy0vXT8oXFxkezAsMn0pW1R0XFxzXSooXFxkezEsMn0pPzo/KFxcZHsxLDJ9KT86PyhcXGR7MSwyfSk/Wy46XT8oXFxkKyk/JC8seT0vXFxbKFteXFxdXSspXXxZezEsNH18TXsxLDR9fER7MSwyfXxkezEsNH18SHsxLDJ9fGh7MSwyfXxhfEF8bXsxLDJ9fHN7MSwyfXxaezEsMn18U1NTL2csTT17bmFtZTpcImVuXCIsd2Vla2RheXM6XCJTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheVwiLnNwbGl0KFwiX1wiKSxtb250aHM6XCJKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpLG9yZGluYWw6ZnVuY3Rpb24odCl7dmFyIGU9W1widGhcIixcInN0XCIsXCJuZFwiLFwicmRcIl0sbj10JTEwMDtyZXR1cm5cIltcIit0KyhlWyhuLTIwKSUxMF18fGVbbl18fGVbMF0pK1wiXVwifX0sbT1mdW5jdGlvbih0LGUsbil7dmFyIHI9U3RyaW5nKHQpO3JldHVybiFyfHxyLmxlbmd0aD49ZT90OlwiXCIrQXJyYXkoZSsxLXIubGVuZ3RoKS5qb2luKG4pK3R9LHY9e3M6bSx6OmZ1bmN0aW9uKHQpe3ZhciBlPS10LnV0Y09mZnNldCgpLG49TWF0aC5hYnMoZSkscj1NYXRoLmZsb29yKG4vNjApLGk9biU2MDtyZXR1cm4oZTw9MD9cIitcIjpcIi1cIikrbShyLDIsXCIwXCIpK1wiOlwiK20oaSwyLFwiMFwiKX0sbTpmdW5jdGlvbiB0KGUsbil7aWYoZS5kYXRlKCk8bi5kYXRlKCkpcmV0dXJuLXQobixlKTt2YXIgcj0xMioobi55ZWFyKCktZS55ZWFyKCkpKyhuLm1vbnRoKCktZS5tb250aCgpKSxpPWUuY2xvbmUoKS5hZGQocixjKSxzPW4taTwwLHU9ZS5jbG9uZSgpLmFkZChyKyhzPy0xOjEpLGMpO3JldHVybisoLShyKyhuLWkpLyhzP2ktdTp1LWkpKXx8MCl9LGE6ZnVuY3Rpb24odCl7cmV0dXJuIHQ8MD9NYXRoLmNlaWwodCl8fDA6TWF0aC5mbG9vcih0KX0scDpmdW5jdGlvbih0KXtyZXR1cm57TTpjLHk6aCx3Om8sZDphLEQ6ZCxoOnUsbTpzLHM6aSxtczpyLFE6Zn1bdF18fFN0cmluZyh0fHxcIlwiKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL3MkLyxcIlwiKX0sdTpmdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dH19LGc9XCJlblwiLEQ9e307RFtnXT1NO3ZhciBwPVwiJGlzRGF5anNPYmplY3RcIixTPWZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgX3x8ISghdHx8IXRbcF0pfSx3PWZ1bmN0aW9uIHQoZSxuLHIpe3ZhciBpO2lmKCFlKXJldHVybiBnO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXt2YXIgcz1lLnRvTG93ZXJDYXNlKCk7RFtzXSYmKGk9cyksbiYmKERbc109bixpPXMpO3ZhciB1PWUuc3BsaXQoXCItXCIpO2lmKCFpJiZ1Lmxlbmd0aD4xKXJldHVybiB0KHVbMF0pfWVsc2V7dmFyIGE9ZS5uYW1lO0RbYV09ZSxpPWF9cmV0dXJuIXImJmkmJihnPWkpLGl8fCFyJiZnfSxPPWZ1bmN0aW9uKHQsZSl7aWYoUyh0KSlyZXR1cm4gdC5jbG9uZSgpO3ZhciBuPVwib2JqZWN0XCI9PXR5cGVvZiBlP2U6e307cmV0dXJuIG4uZGF0ZT10LG4uYXJncz1hcmd1bWVudHMsbmV3IF8obil9LGI9djtiLmw9dyxiLmk9UyxiLnc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gTyh0LHtsb2NhbGU6ZS4kTCx1dGM6ZS4kdSx4OmUuJHgsJG9mZnNldDplLiRvZmZzZXR9KX07dmFyIF89ZnVuY3Rpb24oKXtmdW5jdGlvbiBNKHQpe3RoaXMuJEw9dyh0LmxvY2FsZSxudWxsLCEwKSx0aGlzLnBhcnNlKHQpLHRoaXMuJHg9dGhpcy4keHx8dC54fHx7fSx0aGlzW3BdPSEwfXZhciBtPU0ucHJvdG90eXBlO3JldHVybiBtLnBhcnNlPWZ1bmN0aW9uKHQpe3RoaXMuJGQ9ZnVuY3Rpb24odCl7dmFyIGU9dC5kYXRlLG49dC51dGM7aWYobnVsbD09PWUpcmV0dXJuIG5ldyBEYXRlKE5hTik7aWYoYi51KGUpKXJldHVybiBuZXcgRGF0ZTtpZihlIGluc3RhbmNlb2YgRGF0ZSlyZXR1cm4gbmV3IERhdGUoZSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJiEvWiQvaS50ZXN0KGUpKXt2YXIgcj1lLm1hdGNoKCQpO2lmKHIpe3ZhciBpPXJbMl0tMXx8MCxzPShyWzddfHxcIjBcIikuc3Vic3RyaW5nKDAsMyk7cmV0dXJuIG4/bmV3IERhdGUoRGF0ZS5VVEMoclsxXSxpLHJbM118fDEscls0XXx8MCxyWzVdfHwwLHJbNl18fDAscykpOm5ldyBEYXRlKHJbMV0saSxyWzNdfHwxLHJbNF18fDAscls1XXx8MCxyWzZdfHwwLHMpfX1yZXR1cm4gbmV3IERhdGUoZSl9KHQpLHRoaXMuaW5pdCgpfSxtLmluaXQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRkO3RoaXMuJHk9dC5nZXRGdWxsWWVhcigpLHRoaXMuJE09dC5nZXRNb250aCgpLHRoaXMuJEQ9dC5nZXREYXRlKCksdGhpcy4kVz10LmdldERheSgpLHRoaXMuJEg9dC5nZXRIb3VycygpLHRoaXMuJG09dC5nZXRNaW51dGVzKCksdGhpcy4kcz10LmdldFNlY29uZHMoKSx0aGlzLiRtcz10LmdldE1pbGxpc2Vjb25kcygpfSxtLiR1dGlscz1mdW5jdGlvbigpe3JldHVybiBifSxtLmlzVmFsaWQ9ZnVuY3Rpb24oKXtyZXR1cm4hKHRoaXMuJGQudG9TdHJpbmcoKT09PWwpfSxtLmlzU2FtZT1mdW5jdGlvbih0LGUpe3ZhciBuPU8odCk7cmV0dXJuIHRoaXMuc3RhcnRPZihlKTw9biYmbjw9dGhpcy5lbmRPZihlKX0sbS5pc0FmdGVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE8odCk8dGhpcy5zdGFydE9mKGUpfSxtLmlzQmVmb3JlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZW5kT2YoZSk8Tyh0KX0sbS4kZz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIGIudSh0KT90aGlzW2VdOnRoaXMuc2V0KG4sdCl9LG0udW5peD1mdW5jdGlvbigpe3JldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpLzFlMyl9LG0udmFsdWVPZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRkLmdldFRpbWUoKX0sbS5zdGFydE9mPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcyxyPSEhYi51KGUpfHxlLGY9Yi5wKHQpLGw9ZnVuY3Rpb24odCxlKXt2YXIgaT1iLncobi4kdT9EYXRlLlVUQyhuLiR5LGUsdCk6bmV3IERhdGUobi4keSxlLHQpLG4pO3JldHVybiByP2k6aS5lbmRPZihhKX0sJD1mdW5jdGlvbih0LGUpe3JldHVybiBiLncobi50b0RhdGUoKVt0XS5hcHBseShuLnRvRGF0ZShcInNcIiksKHI/WzAsMCwwLDBdOlsyMyw1OSw1OSw5OTldKS5zbGljZShlKSksbil9LHk9dGhpcy4kVyxNPXRoaXMuJE0sbT10aGlzLiRELHY9XCJzZXRcIisodGhpcy4kdT9cIlVUQ1wiOlwiXCIpO3N3aXRjaChmKXtjYXNlIGg6cmV0dXJuIHI/bCgxLDApOmwoMzEsMTEpO2Nhc2UgYzpyZXR1cm4gcj9sKDEsTSk6bCgwLE0rMSk7Y2FzZSBvOnZhciBnPXRoaXMuJGxvY2FsZSgpLndlZWtTdGFydHx8MCxEPSh5PGc/eSs3OnkpLWc7cmV0dXJuIGwocj9tLUQ6bSsoNi1EKSxNKTtjYXNlIGE6Y2FzZSBkOnJldHVybiAkKHYrXCJIb3Vyc1wiLDApO2Nhc2UgdTpyZXR1cm4gJCh2K1wiTWludXRlc1wiLDEpO2Nhc2UgczpyZXR1cm4gJCh2K1wiU2Vjb25kc1wiLDIpO2Nhc2UgaTpyZXR1cm4gJCh2K1wiTWlsbGlzZWNvbmRzXCIsMyk7ZGVmYXVsdDpyZXR1cm4gdGhpcy5jbG9uZSgpfX0sbS5lbmRPZj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5zdGFydE9mKHQsITEpfSxtLiRzZXQ9ZnVuY3Rpb24odCxlKXt2YXIgbixvPWIucCh0KSxmPVwic2V0XCIrKHRoaXMuJHU/XCJVVENcIjpcIlwiKSxsPShuPXt9LG5bYV09ZitcIkRhdGVcIixuW2RdPWYrXCJEYXRlXCIsbltjXT1mK1wiTW9udGhcIixuW2hdPWYrXCJGdWxsWWVhclwiLG5bdV09ZitcIkhvdXJzXCIsbltzXT1mK1wiTWludXRlc1wiLG5baV09ZitcIlNlY29uZHNcIixuW3JdPWYrXCJNaWxsaXNlY29uZHNcIixuKVtvXSwkPW89PT1hP3RoaXMuJEQrKGUtdGhpcy4kVyk6ZTtpZihvPT09Y3x8bz09PWgpe3ZhciB5PXRoaXMuY2xvbmUoKS5zZXQoZCwxKTt5LiRkW2xdKCQpLHkuaW5pdCgpLHRoaXMuJGQ9eS5zZXQoZCxNYXRoLm1pbih0aGlzLiRELHkuZGF5c0luTW9udGgoKSkpLiRkfWVsc2UgbCYmdGhpcy4kZFtsXSgkKTtyZXR1cm4gdGhpcy5pbml0KCksdGhpc30sbS5zZXQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5jbG9uZSgpLiRzZXQodCxlKX0sbS5nZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXNbYi5wKHQpXSgpfSxtLmFkZD1mdW5jdGlvbihyLGYpe3ZhciBkLGw9dGhpcztyPU51bWJlcihyKTt2YXIgJD1iLnAoZikseT1mdW5jdGlvbih0KXt2YXIgZT1PKGwpO3JldHVybiBiLncoZS5kYXRlKGUuZGF0ZSgpK01hdGgucm91bmQodCpyKSksbCl9O2lmKCQ9PT1jKXJldHVybiB0aGlzLnNldChjLHRoaXMuJE0rcik7aWYoJD09PWgpcmV0dXJuIHRoaXMuc2V0KGgsdGhpcy4keStyKTtpZigkPT09YSlyZXR1cm4geSgxKTtpZigkPT09bylyZXR1cm4geSg3KTt2YXIgTT0oZD17fSxkW3NdPWUsZFt1XT1uLGRbaV09dCxkKVskXXx8MSxtPXRoaXMuJGQuZ2V0VGltZSgpK3IqTTtyZXR1cm4gYi53KG0sdGhpcyl9LG0uc3VidHJhY3Q9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hZGQoLTEqdCxlKX0sbS5mb3JtYXQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPXRoaXMuJGxvY2FsZSgpO2lmKCF0aGlzLmlzVmFsaWQoKSlyZXR1cm4gbi5pbnZhbGlkRGF0ZXx8bDt2YXIgcj10fHxcIllZWVktTU0tRERUSEg6bW06c3NaXCIsaT1iLnoodGhpcykscz10aGlzLiRILHU9dGhpcy4kbSxhPXRoaXMuJE0sbz1uLndlZWtkYXlzLGM9bi5tb250aHMsZj1uLm1lcmlkaWVtLGg9ZnVuY3Rpb24odCxuLGkscyl7cmV0dXJuIHQmJih0W25dfHx0KGUscikpfHxpW25dLnNsaWNlKDAscyl9LGQ9ZnVuY3Rpb24odCl7cmV0dXJuIGIucyhzJTEyfHwxMix0LFwiMFwiKX0sJD1mfHxmdW5jdGlvbih0LGUsbil7dmFyIHI9dDwxMj9cIkFNXCI6XCJQTVwiO3JldHVybiBuP3IudG9Mb3dlckNhc2UoKTpyfTtyZXR1cm4gci5yZXBsYWNlKHksKGZ1bmN0aW9uKHQscil7cmV0dXJuIHJ8fGZ1bmN0aW9uKHQpe3N3aXRjaCh0KXtjYXNlXCJZWVwiOnJldHVybiBTdHJpbmcoZS4keSkuc2xpY2UoLTIpO2Nhc2VcIllZWVlcIjpyZXR1cm4gYi5zKGUuJHksNCxcIjBcIik7Y2FzZVwiTVwiOnJldHVybiBhKzE7Y2FzZVwiTU1cIjpyZXR1cm4gYi5zKGErMSwyLFwiMFwiKTtjYXNlXCJNTU1cIjpyZXR1cm4gaChuLm1vbnRoc1Nob3J0LGEsYywzKTtjYXNlXCJNTU1NXCI6cmV0dXJuIGgoYyxhKTtjYXNlXCJEXCI6cmV0dXJuIGUuJEQ7Y2FzZVwiRERcIjpyZXR1cm4gYi5zKGUuJEQsMixcIjBcIik7Y2FzZVwiZFwiOnJldHVybiBTdHJpbmcoZS4kVyk7Y2FzZVwiZGRcIjpyZXR1cm4gaChuLndlZWtkYXlzTWluLGUuJFcsbywyKTtjYXNlXCJkZGRcIjpyZXR1cm4gaChuLndlZWtkYXlzU2hvcnQsZS4kVyxvLDMpO2Nhc2VcImRkZGRcIjpyZXR1cm4gb1tlLiRXXTtjYXNlXCJIXCI6cmV0dXJuIFN0cmluZyhzKTtjYXNlXCJISFwiOnJldHVybiBiLnMocywyLFwiMFwiKTtjYXNlXCJoXCI6cmV0dXJuIGQoMSk7Y2FzZVwiaGhcIjpyZXR1cm4gZCgyKTtjYXNlXCJhXCI6cmV0dXJuICQocyx1LCEwKTtjYXNlXCJBXCI6cmV0dXJuICQocyx1LCExKTtjYXNlXCJtXCI6cmV0dXJuIFN0cmluZyh1KTtjYXNlXCJtbVwiOnJldHVybiBiLnModSwyLFwiMFwiKTtjYXNlXCJzXCI6cmV0dXJuIFN0cmluZyhlLiRzKTtjYXNlXCJzc1wiOnJldHVybiBiLnMoZS4kcywyLFwiMFwiKTtjYXNlXCJTU1NcIjpyZXR1cm4gYi5zKGUuJG1zLDMsXCIwXCIpO2Nhc2VcIlpcIjpyZXR1cm4gaX1yZXR1cm4gbnVsbH0odCl8fGkucmVwbGFjZShcIjpcIixcIlwiKX0pKX0sbS51dGNPZmZzZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMTUqLU1hdGgucm91bmQodGhpcy4kZC5nZXRUaW1lem9uZU9mZnNldCgpLzE1KX0sbS5kaWZmPWZ1bmN0aW9uKHIsZCxsKXt2YXIgJCx5PXRoaXMsTT1iLnAoZCksbT1PKHIpLHY9KG0udXRjT2Zmc2V0KCktdGhpcy51dGNPZmZzZXQoKSkqZSxnPXRoaXMtbSxEPWZ1bmN0aW9uKCl7cmV0dXJuIGIubSh5LG0pfTtzd2l0Y2goTSl7Y2FzZSBoOiQ9RCgpLzEyO2JyZWFrO2Nhc2UgYzokPUQoKTticmVhaztjYXNlIGY6JD1EKCkvMzticmVhaztjYXNlIG86JD0oZy12KS82MDQ4ZTU7YnJlYWs7Y2FzZSBhOiQ9KGctdikvODY0ZTU7YnJlYWs7Y2FzZSB1OiQ9Zy9uO2JyZWFrO2Nhc2UgczokPWcvZTticmVhaztjYXNlIGk6JD1nL3Q7YnJlYWs7ZGVmYXVsdDokPWd9cmV0dXJuIGw/JDpiLmEoJCl9LG0uZGF5c0luTW9udGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbmRPZihjKS4kRH0sbS4kbG9jYWxlPWZ1bmN0aW9uKCl7cmV0dXJuIERbdGhpcy4kTF19LG0ubG9jYWxlPWZ1bmN0aW9uKHQsZSl7aWYoIXQpcmV0dXJuIHRoaXMuJEw7dmFyIG49dGhpcy5jbG9uZSgpLHI9dyh0LGUsITApO3JldHVybiByJiYobi4kTD1yKSxufSxtLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIGIudyh0aGlzLiRkLHRoaXMpfSxtLnRvRGF0ZT1mdW5jdGlvbigpe3JldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSl9LG0udG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNWYWxpZCgpP3RoaXMudG9JU09TdHJpbmcoKTpudWxsfSxtLnRvSVNPU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGQudG9JU09TdHJpbmcoKX0sbS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRkLnRvVVRDU3RyaW5nKCl9LE19KCksaz1fLnByb3RvdHlwZTtyZXR1cm4gTy5wcm90b3R5cGU9ayxbW1wiJG1zXCIscl0sW1wiJHNcIixpXSxbXCIkbVwiLHNdLFtcIiRIXCIsdV0sW1wiJFdcIixhXSxbXCIkTVwiLGNdLFtcIiR5XCIsaF0sW1wiJERcIixkXV0uZm9yRWFjaCgoZnVuY3Rpb24odCl7a1t0WzFdXT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy4kZyhlLHRbMF0sdFsxXSl9fSkpLE8uZXh0ZW5kPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuJGl8fCh0KGUsXyxPKSx0LiRpPSEwKSxPfSxPLmxvY2FsZT13LE8uaXNEYXlqcz1TLE8udW5peD1mdW5jdGlvbih0KXtyZXR1cm4gTygxZTMqdCl9LE8uZW49RFtnXSxPLkxzPUQsTy5wPXt9LE99KSk7IiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6KGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczplfHxzZWxmKS5kYXlqc19wbHVnaW5fY3VzdG9tUGFyc2VGb3JtYXQ9dCgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBlPXtMVFM6XCJoOm1tOnNzIEFcIixMVDpcImg6bW0gQVwiLEw6XCJNTS9ERC9ZWVlZXCIsTEw6XCJNTU1NIEQsIFlZWVlcIixMTEw6XCJNTU1NIEQsIFlZWVkgaDptbSBBXCIsTExMTDpcImRkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEFcIn0sdD0vKFxcW1teW10qXFxdKXwoWy1fOi8uLCgpXFxzXSspfChBfGF8UXxZWVlZfFlZP3x3dz98TU0/TT9NP3xEb3xERD98aGg/fEhIP3xtbT98c3M/fFN7MSwzfXx6fFpaPykvZyxuPS9cXGQvLHI9L1xcZFxcZC8saT0vXFxkXFxkPy8sbz0vXFxkKlteLV86LywoKVxcc1xcZF0rLyxzPXt9LGE9ZnVuY3Rpb24oZSl7cmV0dXJuKGU9K2UpKyhlPjY4PzE5MDA6MmUzKX07dmFyIGY9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXNbZV09K3R9fSxoPVsvWystXVxcZFxcZDo/KFxcZFxcZCk/fFovLGZ1bmN0aW9uKGUpeyh0aGlzLnpvbmV8fCh0aGlzLnpvbmU9e30pKS5vZmZzZXQ9ZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuIDA7aWYoXCJaXCI9PT1lKXJldHVybiAwO3ZhciB0PWUubWF0Y2goLyhbKy1dfFxcZFxcZCkvZyksbj02MCp0WzFdKygrdFsyXXx8MCk7cmV0dXJuIDA9PT1uPzA6XCIrXCI9PT10WzBdPy1uOm59KGUpfV0sdT1mdW5jdGlvbihlKXt2YXIgdD1zW2VdO3JldHVybiB0JiYodC5pbmRleE9mP3Q6dC5zLmNvbmNhdCh0LmYpKX0sZD1mdW5jdGlvbihlLHQpe3ZhciBuLHI9cy5tZXJpZGllbTtpZihyKXtmb3IodmFyIGk9MTtpPD0yNDtpKz0xKWlmKGUuaW5kZXhPZihyKGksMCx0KSk+LTEpe249aT4xMjticmVha319ZWxzZSBuPWU9PT0odD9cInBtXCI6XCJQTVwiKTtyZXR1cm4gbn0sYz17QTpbbyxmdW5jdGlvbihlKXt0aGlzLmFmdGVybm9vbj1kKGUsITEpfV0sYTpbbyxmdW5jdGlvbihlKXt0aGlzLmFmdGVybm9vbj1kKGUsITApfV0sUTpbbixmdW5jdGlvbihlKXt0aGlzLm1vbnRoPTMqKGUtMSkrMX1dLFM6W24sZnVuY3Rpb24oZSl7dGhpcy5taWxsaXNlY29uZHM9MTAwKitlfV0sU1M6W3IsZnVuY3Rpb24oZSl7dGhpcy5taWxsaXNlY29uZHM9MTAqK2V9XSxTU1M6Wy9cXGR7M30vLGZ1bmN0aW9uKGUpe3RoaXMubWlsbGlzZWNvbmRzPStlfV0sczpbaSxmKFwic2Vjb25kc1wiKV0sc3M6W2ksZihcInNlY29uZHNcIildLG06W2ksZihcIm1pbnV0ZXNcIildLG1tOltpLGYoXCJtaW51dGVzXCIpXSxIOltpLGYoXCJob3Vyc1wiKV0saDpbaSxmKFwiaG91cnNcIildLEhIOltpLGYoXCJob3Vyc1wiKV0saGg6W2ksZihcImhvdXJzXCIpXSxEOltpLGYoXCJkYXlcIildLEREOltyLGYoXCJkYXlcIildLERvOltvLGZ1bmN0aW9uKGUpe3ZhciB0PXMub3JkaW5hbCxuPWUubWF0Y2goL1xcZCsvKTtpZih0aGlzLmRheT1uWzBdLHQpZm9yKHZhciByPTE7cjw9MzE7cis9MSl0KHIpLnJlcGxhY2UoL1xcW3xcXF0vZyxcIlwiKT09PWUmJih0aGlzLmRheT1yKX1dLHc6W2ksZihcIndlZWtcIildLHd3OltyLGYoXCJ3ZWVrXCIpXSxNOltpLGYoXCJtb250aFwiKV0sTU06W3IsZihcIm1vbnRoXCIpXSxNTU06W28sZnVuY3Rpb24oZSl7dmFyIHQ9dShcIm1vbnRoc1wiKSxuPSh1KFwibW9udGhzU2hvcnRcIil8fHQubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gZS5zbGljZSgwLDMpfSkpKS5pbmRleE9mKGUpKzE7aWYobjwxKXRocm93IG5ldyBFcnJvcjt0aGlzLm1vbnRoPW4lMTJ8fG59XSxNTU1NOltvLGZ1bmN0aW9uKGUpe3ZhciB0PXUoXCJtb250aHNcIikuaW5kZXhPZihlKSsxO2lmKHQ8MSl0aHJvdyBuZXcgRXJyb3I7dGhpcy5tb250aD10JTEyfHx0fV0sWTpbL1srLV0/XFxkKy8sZihcInllYXJcIildLFlZOltyLGZ1bmN0aW9uKGUpe3RoaXMueWVhcj1hKGUpfV0sWVlZWTpbL1xcZHs0fS8sZihcInllYXJcIildLFo6aCxaWjpofTtmdW5jdGlvbiBsKG4pe3ZhciByLGk7cj1uLGk9cyYmcy5mb3JtYXRzO2Zvcih2YXIgbz0obj1yLnJlcGxhY2UoLyhcXFtbXlxcXV0rXSl8KExUUz98bHsxLDR9fEx7MSw0fSkvZywoZnVuY3Rpb24odCxuLHIpe3ZhciBvPXImJnIudG9VcHBlckNhc2UoKTtyZXR1cm4gbnx8aVtyXXx8ZVtyXXx8aVtvXS5yZXBsYWNlKC8oXFxbW15cXF1dK10pfChNTU1NfE1NfEREfGRkZGQpL2csKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdHx8bi5zbGljZSgxKX0pKX0pKSkubWF0Y2godCksYT1vLmxlbmd0aCxmPTA7ZjxhO2YrPTEpe3ZhciBoPW9bZl0sdT1jW2hdLGQ9dSYmdVswXSxsPXUmJnVbMV07b1tmXT1sP3tyZWdleDpkLHBhcnNlcjpsfTpoLnJlcGxhY2UoL15cXFt8XFxdJC9nLFwiXCIpfXJldHVybiBmdW5jdGlvbihlKXtmb3IodmFyIHQ9e30sbj0wLHI9MDtuPGE7bis9MSl7dmFyIGk9b1tuXTtpZihcInN0cmluZ1wiPT10eXBlb2YgaSlyKz1pLmxlbmd0aDtlbHNle3ZhciBzPWkucmVnZXgsZj1pLnBhcnNlcixoPWUuc2xpY2UociksdT1zLmV4ZWMoaClbMF07Zi5jYWxsKHQsdSksZT1lLnJlcGxhY2UodSxcIlwiKX19cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PWUuYWZ0ZXJub29uO2lmKHZvaWQgMCE9PXQpe3ZhciBuPWUuaG91cnM7dD9uPDEyJiYoZS5ob3Vycys9MTIpOjEyPT09biYmKGUuaG91cnM9MCksZGVsZXRlIGUuYWZ0ZXJub29ufX0odCksdH19cmV0dXJuIGZ1bmN0aW9uKGUsdCxuKXtuLnAuY3VzdG9tUGFyc2VGb3JtYXQ9ITAsZSYmZS5wYXJzZVR3b0RpZ2l0WWVhciYmKGE9ZS5wYXJzZVR3b0RpZ2l0WWVhcik7dmFyIHI9dC5wcm90b3R5cGUsaT1yLnBhcnNlO3IucGFyc2U9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5kYXRlLHI9ZS51dGMsbz1lLmFyZ3M7dGhpcy4kdT1yO3ZhciBhPW9bMV07aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEpe3ZhciBmPSEwPT09b1syXSxoPSEwPT09b1szXSx1PWZ8fGgsZD1vWzJdO2gmJihkPW9bMl0pLHM9dGhpcy4kbG9jYWxlKCksIWYmJmQmJihzPW4uTHNbZF0pLHRoaXMuJGQ9ZnVuY3Rpb24oZSx0LG4scil7dHJ5e2lmKFtcInhcIixcIlhcIl0uaW5kZXhPZih0KT4tMSlyZXR1cm4gbmV3IERhdGUoKFwiWFwiPT09dD8xZTM6MSkqZSk7dmFyIGk9bCh0KShlKSxvPWkueWVhcixzPWkubW9udGgsYT1pLmRheSxmPWkuaG91cnMsaD1pLm1pbnV0ZXMsdT1pLnNlY29uZHMsZD1pLm1pbGxpc2Vjb25kcyxjPWkuem9uZSxtPWkud2VlayxNPW5ldyBEYXRlLFk9YXx8KG98fHM/MTpNLmdldERhdGUoKSkscD1vfHxNLmdldEZ1bGxZZWFyKCksdj0wO28mJiFzfHwodj1zPjA/cy0xOk0uZ2V0TW9udGgoKSk7dmFyIEQsdz1mfHwwLGc9aHx8MCx5PXV8fDAsTD1kfHwwO3JldHVybiBjP25ldyBEYXRlKERhdGUuVVRDKHAsdixZLHcsZyx5LEwrNjAqYy5vZmZzZXQqMWUzKSk6bj9uZXcgRGF0ZShEYXRlLlVUQyhwLHYsWSx3LGcseSxMKSk6KEQ9bmV3IERhdGUocCx2LFksdyxnLHksTCksbSYmKEQ9cihEKS53ZWVrKG0pLnRvRGF0ZSgpKSxEKX1jYXRjaChlKXtyZXR1cm4gbmV3IERhdGUoXCJcIil9fSh0LGEscixuKSx0aGlzLmluaXQoKSxkJiYhMCE9PWQmJih0aGlzLiRMPXRoaXMubG9jYWxlKGQpLiRMKSx1JiZ0IT10aGlzLmZvcm1hdChhKSYmKHRoaXMuJGQ9bmV3IERhdGUoXCJcIikpLHM9e319ZWxzZSBpZihhIGluc3RhbmNlb2YgQXJyYXkpZm9yKHZhciBjPWEubGVuZ3RoLG09MTttPD1jO20rPTEpe29bMV09YVttLTFdO3ZhciBNPW4uYXBwbHkodGhpcyxvKTtpZihNLmlzVmFsaWQoKSl7dGhpcy4kZD1NLiRkLHRoaXMuJEw9TS4kTCx0aGlzLmluaXQoKTticmVha31tPT09YyYmKHRoaXMuJGQ9bmV3IERhdGUoXCJcIikpfWVsc2UgaS5jYWxsKHRoaXMsZSl9fX0pKTsiLCJpbXBvcnQgZGF5anMgZnJvbSAnZGF5anMnO1xuaW1wb3J0IGN1c3RvbVBhcnNlRm9ybWF0UGx1Z2luIGZyb20gJ2RheWpzL3BsdWdpbi9jdXN0b21QYXJzZUZvcm1hdC5qcyc7XG5cbnZhciBjb25maWcgPSB7XG4gICAgZGVmYXVsdFVzZXJBZ2VudDogYFdpc2VPbGRNYW4gSlMgQ2xpZW50IHYke3Byb2Nlc3MuZW52Lm5wbV9wYWNrYWdlX3ZlcnNpb259YCxcbiAgICBiYXNlQVBJVXJsOiAnaHR0cHM6Ly9hcGkud2lzZW9sZG1hbi5uZXQvdjInXG59O1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcblxyXG5mdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cblxuZGF5anMuZXh0ZW5kKGN1c3RvbVBhcnNlRm9ybWF0UGx1Z2luKTtcbmZ1bmN0aW9uIHRyYXZlcnNlVHJhbnNmb3JtKGlucHV0LCB0cmFuc2Zvcm1hdGlvbikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgICByZXR1cm4gaW5wdXQubWFwKGl0ZW0gPT4gdHJhdmVyc2VUcmFuc2Zvcm0oaXRlbSwgdHJhbnNmb3JtYXRpb24pKTtcbiAgICB9XG4gICAgaWYgKGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3Qua2V5cyhpbnB1dCkubWFwKGtleSA9PiBba2V5LCB0cmF2ZXJzZVRyYW5zZm9ybShpbnB1dFtrZXldLCB0cmFuc2Zvcm1hdGlvbildKSk7XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2Zvcm1hdGlvbihpbnB1dCk7XG59XG5mdW5jdGlvbiBpc1ZhbGlkSVNPRGF0ZShpbnB1dCkge1xuICAgIGlmICghaW5wdXQgfHwgdHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vIERheUpTIGhhcyBhIGJ1ZyB3aXRoIHN0cmljdCBwYXJzaW5nIHdpdGggdGltZXpvbmVzIGh0dHBzOi8vZ2l0aHViLmNvbS9pYW1rdW4vZGF5anMvaXNzdWVzLzkyOVxuICAgIC8vIFNvIEknbGwganVzdCBzdHJpcCB0aGUgXCJaXCIgdGltZXpvbmVcbiAgICByZXR1cm4gaW5wdXQuZW5kc1dpdGgoJ1onKSAmJiBkYXlqcyhpbnB1dC5zbGljZSgwLCAtMSksICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTUycsIHRydWUpLmlzVmFsaWQoKTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybURhdGVzKGlucHV0KSB7XG4gICAgcmV0dXJuIHRyYXZlcnNlVHJhbnNmb3JtKGlucHV0LCB2YWwgPT4gKGlzVmFsaWRJU09EYXRlKHZhbCkgPyBuZXcgRGF0ZSh2YWwpIDogdmFsKSk7XG59XG5mdW5jdGlvbiBoYW5kbGVFcnJvcihzdGF0dXMsIHBhdGgsIGRhdGEpIHtcbiAgICBpZiAoIWRhdGEpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoc3RhdHVzID09PSA0MDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEJhZFJlcXVlc3RFcnJvcihwYXRoLCBkYXRhLm1lc3NhZ2UsIGRhdGEuZGF0YSk7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IDQwMykge1xuICAgICAgICB0aHJvdyBuZXcgRm9yYmlkZGVuRXJyb3IocGF0aCwgZGF0YS5tZXNzYWdlKTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgIHRocm93IG5ldyBOb3RGb3VuZEVycm9yKHBhdGgsIGRhdGEubWVzc2FnZSk7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IDQyOSkge1xuICAgICAgICB0aHJvdyBuZXcgUmF0ZUxpbWl0RXJyb3IocGF0aCwgZGF0YS5tZXNzYWdlKTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gNTAwKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnRlcm5hbFNlcnZlckVycm9yKHBhdGgsIGRhdGEubWVzc2FnZSk7XG4gICAgfVxufVxuY2xhc3MgQmFkUmVxdWVzdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHJlc291cmNlLCBtZXNzYWdlLCBkYXRhKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnQmFkUmVxdWVzdEVycm9yJztcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJlc291cmNlO1xuICAgICAgICB0aGlzLnN0YXR1c0NvZGUgPSA0MDA7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfVxufVxuY2xhc3MgRm9yYmlkZGVuRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IocmVzb3VyY2UsIG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdGb3JiaWRkZW5FcnJvcic7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByZXNvdXJjZTtcbiAgICAgICAgdGhpcy5zdGF0dXNDb2RlID0gNDAzO1xuICAgIH1cbn1cbmNsYXNzIE5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IocmVzb3VyY2UsIG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdOb3RGb3VuZEVycm9yJztcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJlc291cmNlO1xuICAgICAgICB0aGlzLnN0YXR1c0NvZGUgPSA0MDQ7XG4gICAgfVxufVxuY2xhc3MgUmF0ZUxpbWl0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IocmVzb3VyY2UsIG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdSYXRlTGltaXRFcnJvcic7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByZXNvdXJjZTtcbiAgICAgICAgdGhpcy5zdGF0dXNDb2RlID0gNDI5O1xuICAgIH1cbn1cbmNsYXNzIEludGVybmFsU2VydmVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IocmVzb3VyY2UsIG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdJbnRlcm5hbFNlcnZlckVycm9yJztcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJlc291cmNlO1xuICAgICAgICB0aGlzLnN0YXR1c0NvZGUgPSA1MDA7XG4gICAgfVxufVxuXG5jbGFzcyBCYXNlQVBJQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcihoZWFkZXJzLCBiYXNlVXJsKSB7XG4gICAgICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmw7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oeyBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJywgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LCBoZWFkZXJzKTtcbiAgICB9XG4gICAgYnVpbGRQYXJhbXMoX2EpIHtcbiAgICAgICAgdmFyIHBhcmFtcyA9IF9fcmVzdChfYSwgW10pO1xuICAgICAgICBjb25zdCBidWlsZGVyID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgICAgICBPYmplY3Qua2V5cyhwYXJhbXMpXG4gICAgICAgICAgICAuZmlsdGVyKGsgPT4gcGFyYW1zW2tdICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAuZm9yRWFjaChrID0+IGJ1aWxkZXIuc2V0KGssIHBhcmFtc1trXSkpO1xuICAgICAgICBjb25zdCBxdWVyeSA9IGJ1aWxkZXIudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIHF1ZXJ5ID8gYD8ke3F1ZXJ5fWAgOiAnJztcbiAgICB9XG4gICAgZmV0Y2goeyBtZXRob2QsIHBhdGgsIGJvZHksIHBhcmFtcyB9KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCByZXEgPSB7IG1ldGhvZCwgYm9keTogdW5kZWZpbmVkLCBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfTtcbiAgICAgICAgICAgIGxldCBxdWVyeSA9ICcnO1xuICAgICAgICAgICAgaWYgKGJvZHkpIHtcbiAgICAgICAgICAgICAgICByZXEuYm9keSA9IEpTT04uc3RyaW5naWZ5KGJvZHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmFtcykge1xuICAgICAgICAgICAgICAgIHF1ZXJ5ID0gdGhpcy5idWlsZFBhcmFtcyhwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIGZldGNoKHRoaXMuYmFzZVVybCArIHBhdGggKyBxdWVyeSwgcmVxKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlcXVlc3QoeyBtZXRob2QsIHBhdGgsIGJvZHksIHBhcmFtcyB9KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSB5aWVsZCB0aGlzLmZldGNoKHsgbWV0aG9kLCBwYXRoLCBib2R5LCBwYXJhbXMgfSk7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0geWllbGQgcmVzLmpzb24oKTtcbiAgICAgICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtRGF0ZXMoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYW5kbGVFcnJvcihyZXMuc3RhdHVzLCBwYXRoLCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlcXVlc3RUZXh0KHsgbWV0aG9kLCBwYXRoLCBib2R5LCBwYXJhbXMgfSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgcmVzID0geWllbGQgdGhpcy5mZXRjaCh7IG1ldGhvZCwgcGF0aCwgYm9keSwgcGFyYW1zIH0pO1xuICAgICAgICAgICAgY29uc3QgdGV4dCA9IHlpZWxkIHJlcy50ZXh0KCk7XG4gICAgICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYW5kbGVFcnJvcihyZXMuc3RhdHVzLCBwYXRoLCBKU09OLnBhcnNlKHRleHQpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHBvc3RSZXF1ZXN0KHBhdGgsIGJvZHkpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLnJlcXVlc3QoeyBtZXRob2Q6ICdQT1NUJywgcGF0aCwgYm9keTogYm9keSB8fCB7fSB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHB1dFJlcXVlc3QocGF0aCwgYm9keSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMucmVxdWVzdCh7IG1ldGhvZDogJ1BVVCcsIHBhdGgsIGJvZHk6IGJvZHkgfHwge30gfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkZWxldGVSZXF1ZXN0KHBhdGgsIGJvZHkpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLnJlcXVlc3QoeyBtZXRob2Q6ICdERUxFVEUnLCBwYXRoLCBib2R5OiBib2R5IHx8IHt9IH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0UmVxdWVzdChwYXRoLCBwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLnJlcXVlc3QoeyBtZXRob2Q6ICdHRVQnLCBwYXRoLCBwYXJhbXMgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRUZXh0KHBhdGgsIHBhcmFtcykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMucmVxdWVzdFRleHQoeyBtZXRob2Q6ICdHRVQnLCBwYXRoLCBwYXJhbXMgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY2xhc3MgRGVsdGFzQ2xpZW50IGV4dGVuZHMgQmFzZUFQSUNsaWVudCB7XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyB0aGUgY3VycmVudCB0b3AgbGVhZGVyYm9hcmQgZm9yIGEgc3BlY2lmaWMgbWV0cmljLCBwZXJpb2QsIHBsYXllclR5cGUsIHBsYXllckJ1aWxkIGFuZCBjb3VudHJ5LlxuICAgICAqIEByZXR1cm5zIEEgbGlzdCBvZiBkZWx0YXMsIHdpdGggdGhlaXIgcmVzcGVjdGl2ZSBwbGF5ZXJzLCB2YWx1ZXMgYW5kIGRhdGVzIGluY2x1ZGVkLlxuICAgICAqL1xuICAgIGdldERlbHRhTGVhZGVyYm9hcmQoZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlcXVlc3QoJy9kZWx0YXMvbGVhZGVyYm9hcmQnLCBmaWx0ZXIpO1xuICAgIH1cbn1cblxuY2xhc3MgR3JvdXBzQ2xpZW50IGV4dGVuZHMgQmFzZUFQSUNsaWVudCB7XG4gICAgLyoqXG4gICAgICogU2VhcmNoZXMgZm9yIGdyb3VwcyB0aGF0IG1hdGNoIGEgcGFydGlhbCBuYW1lLlxuICAgICAqIEByZXR1cm5zIEEgbGlzdCBvZiBncm91cHMuXG4gICAgICovXG4gICAgc2VhcmNoR3JvdXBzKG5hbWUsIHBhZ2luYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVxdWVzdCgnL2dyb3VwcycsIE9iamVjdC5hc3NpZ24oeyBuYW1lIH0sIHBhZ2luYXRpb24pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyBhIGdyb3VwJ3MgZGV0YWlscywgaW5jbHVkaW5nIGEgbGlzdCBvZiBtZW1iZXJzaGlwIG9iamVjdHMuXG4gICAgICogQHJldHVybnMgQSBncm91cCBkZXRhaWxzIG9iamVjdC5cbiAgICAgKi9cbiAgICBnZXRHcm91cERldGFpbHMoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVxdWVzdChgL2dyb3Vwcy8ke2lkfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGdyb3VwLlxuICAgICAqIEByZXR1cm5zIFRoZSBuZXdseSBjcmVhdGVkIGdyb3VwLCBhbmQgdGhlIHZlcmlmaWNhdGlvbiBjb2RlIHRoYXQgYXV0aG9yaXplcyBmdXR1cmUgY2hhbmdlcyB0byBpdC5cbiAgICAgKi9cbiAgICBjcmVhdGVHcm91cChwYXlsb2FkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc3RSZXF1ZXN0KCcvZ3JvdXBzJywgcGF5bG9hZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVkaXRzIGFuIGV4aXN0aW5nIGdyb3VwLlxuICAgICAqIEByZXR1cm5zIFRoZSB1cGRhdGVkIGdyb3VwLlxuICAgICAqL1xuICAgIGVkaXRHcm91cChpZCwgcGF5bG9hZCwgdmVyaWZpY2F0aW9uQ29kZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdXRSZXF1ZXN0KGAvZ3JvdXBzLyR7aWR9YCwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwYXlsb2FkKSwgeyB2ZXJpZmljYXRpb25Db2RlIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlcyBhbiBleGlzdGluZyBncm91cC5cbiAgICAgKiBAcmV0dXJucyBBIGNvbmZpcm1hdGlvbiBtZXNzYWdlLlxuICAgICAqL1xuICAgIGRlbGV0ZUdyb3VwKGlkLCB2ZXJpZmljYXRpb25Db2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlbGV0ZVJlcXVlc3QoYC9ncm91cHMvJHtpZH1gLCB7IHZlcmlmaWNhdGlvbkNvZGUgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYWxsICh2YWxpZCkgZ2l2ZW4gdXNlcm5hbWVzIChhbmQgcm9sZXMpIHRvIGEgZ3JvdXAsIGlnbm9yaW5nIGR1cGxpY2F0ZXMuXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBtZW1iZXJzIGFkZGVkIGFuZCBhIGNvbmZpcm1hdGlvbiBtZXNzYWdlLlxuICAgICAqL1xuICAgIGFkZE1lbWJlcnMoaWQsIG1lbWJlcnMsIHZlcmlmaWNhdGlvbkNvZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zdFJlcXVlc3QoYC9ncm91cHMvJHtpZH0vbWVtYmVyc2AsIHtcbiAgICAgICAgICAgIHZlcmlmaWNhdGlvbkNvZGUsXG4gICAgICAgICAgICBtZW1iZXJzXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYWxsIGdpdmVuIHVzZXJuYW1lcyBmcm9tIGEgZ3JvdXAsIGlnbm9yaW5nIHVzZXJuYW1lcyB0aGF0IGFyZW4ndCBtZW1iZXJzLlxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgbWVtYmVycyByZW1vdmVkIGFuZCBhIGNvbmZpcm1hdGlvbiBtZXNzYWdlLlxuICAgICAqL1xuICAgIHJlbW92ZU1lbWJlcnMoaWQsIHVzZXJuYW1lcywgdmVyaWZpY2F0aW9uQ29kZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWxldGVSZXF1ZXN0KGAvZ3JvdXBzLyR7aWR9L21lbWJlcnNgLCB7XG4gICAgICAgICAgICB2ZXJpZmljYXRpb25Db2RlLFxuICAgICAgICAgICAgbWVtYmVyczogdXNlcm5hbWVzXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIGEgcGxheWVyJ3Mgcm9sZSBpbiBhIGdpdmVuIGdyb3VwLlxuICAgICAqIEByZXR1cm5zIFRoZSB1cGRhdGVkIG1lbWJlcnNoaXAsIHdpdGggcGxheWVyIGluY2x1ZGVkLlxuICAgICAqL1xuICAgIGNoYW5nZVJvbGUoaWQsIHBheWxvYWQsIHZlcmlmaWNhdGlvbkNvZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHV0UmVxdWVzdChgL2dyb3Vwcy8ke2lkfS9yb2xlYCwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwYXlsb2FkKSwgeyB2ZXJpZmljYXRpb25Db2RlIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBcInVwZGF0ZVwiIHJlcXVlc3QgdG8gdGhlIHF1ZXVlLCBmb3IgZWFjaCBvdXRkYXRlZCBncm91cCBtZW1iZXIuXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBwbGF5ZXJzIHRvIGJlIHVwZGF0ZWQgYW5kIGEgY29uZmlybWF0aW9uIG1lc3NhZ2UuXG4gICAgICovXG4gICAgdXBkYXRlQWxsKGlkLCB2ZXJpZmljYXRpb25Db2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc3RSZXF1ZXN0KGAvZ3JvdXBzLyR7aWR9L3VwZGF0ZS1hbGxgLCB7XG4gICAgICAgICAgICB2ZXJpZmljYXRpb25Db2RlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIGFsbCBvZiB0aGUgZ3JvdXBzJ3MgY29tcGV0aXRpb25zXG4gICAgICogQHJldHVybnMgQSBsaXN0IG9mIGNvbXBldGl0aW9ucy5cbiAgICAgKi9cbiAgICBnZXRHcm91cENvbXBldGl0aW9ucyhpZCwgcGFnaW5hdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KGAvZ3JvdXBzLyR7aWR9L2NvbXBldGl0aW9uc2AsIE9iamVjdC5hc3NpZ24oe30sIHBhZ2luYXRpb24pKTtcbiAgICB9XG4gICAgZ2V0R3JvdXBHYWlucyhpZCwgZmlsdGVyLCBwYWdpbmF0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlcXVlc3QoYC9ncm91cHMvJHtpZH0vZ2FpbmVkYCwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwYWdpbmF0aW9uKSwgZmlsdGVyKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgYSBncm91cCBtZW1iZXJzJyBsYXRlc3QgYWNoaWV2ZW1lbnRzLlxuICAgICAqIEByZXR1cm5zIEEgbGlzdCBvZiBhY2hpZXZlbWVudHMuXG4gICAgICovXG4gICAgZ2V0R3JvdXBBY2hpZXZlbWVudHMoaWQsIHBhZ2luYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVxdWVzdChgL2dyb3Vwcy8ke2lkfS9hY2hpZXZlbWVudHNgLCBPYmplY3QuYXNzaWduKHt9LCBwYWdpbmF0aW9uKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgYSBncm91cCdzIHJlY29yZCBsZWFkZXJib2FyZCBmb3IgYSBzcGVjaWZpYyBtZXRyaWMgYW5kIHBlcmlvZC5cbiAgICAgKiBAcmV0dXJucyBBIGxpc3Qgb2YgcmVjb3JkcywgaW5jbHVkaW5nIHRoZWlyIHJlc3BlY3RpdmUgcGxheWVycy5cbiAgICAgKi9cbiAgICBnZXRHcm91cFJlY29yZHMoaWQsIGZpbHRlciwgcGFnaW5hdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KGAvZ3JvdXBzLyR7aWR9L3JlY29yZHNgLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBhZ2luYXRpb24pLCBmaWx0ZXIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyBhIGdyb3VwJ3MgaGlzY29yZXMgZm9yIGEgc3BlY2lmaWMgbWV0cmljLlxuICAgICAqIEByZXR1cm5zIEEgbGlzdCBvZiBoaXNjb3JlcyBlbnRyaWVzICh2YWx1ZSwgcmFuayksIGluY2x1ZGluZyB0aGVpciByZXNwZWN0aXZlIHBsYXllcnMuXG4gICAgICovXG4gICAgZ2V0R3JvdXBIaXNjb3JlcyhpZCwgbWV0cmljLCBwYWdpbmF0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlcXVlc3QoYC9ncm91cHMvJHtpZH0vaGlzY29yZXNgLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBhZ2luYXRpb24pLCB7IG1ldHJpYyB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgYSBncm91cCBtZW1iZXJzJyBsYXRlc3QgbmFtZSBjaGFuZ2VzLlxuICAgICAqIEByZXR1cm5zIEEgbGlzdCBvZiBuYW1lIGNoYW5nZSAoYXBwcm92ZWQpIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIGdldEdyb3VwTmFtZUNoYW5nZXMoaWQsIHBhZ2luYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVxdWVzdChgL2dyb3Vwcy8ke2lkfS9uYW1lLWNoYW5nZXNgLCBPYmplY3QuYXNzaWduKHt9LCBwYWdpbmF0aW9uKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgYSBncm91cCdzIGdlbmVyYWwgc3RhdGlzdGljcy5cbiAgICAgKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCBhIGZldyBzdGF0aXN0aWMgdmFsdWVzIGFuZCBhbiBhdmVyYWdlIHN0YXRzIHNuYXBzaG90LlxuICAgICAqL1xuICAgIGdldEdyb3VwU3RhdGlzdGljcyhpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KGAvZ3JvdXBzLyR7aWR9L3N0YXRpc3RpY3NgKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyBhIGdyb3VwJ3MgYWN0aXZpdHkuXG4gICAgICogQHJldHVybnMgQSBsaXN0IG9mIGEgZ3JvdXAncyAoam9pbiwgbGVhdmUgYW5kIHJvbGUgY2hhbmdlZCkgYWN0aXZpdHkuXG4gICAgICovXG4gICAgZ2V0R3JvdXBBY3Rpdml0eShpZCwgcGFnaW5hdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KGAvZ3JvdXBzLyR7aWR9L2FjdGl2aXR5YCwgT2JqZWN0LmFzc2lnbih7fSwgcGFnaW5hdGlvbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSBncm91cHMncyBtZW1iZXIgbGlzdCBpbiBDU1YgZm9ybWF0LlxuICAgICAqIEByZXR1cm5zIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIENTViBjb250ZW50LlxuICAgICAqL1xuICAgIGdldE1lbWJlcnNDU1YoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGV4dChgL2dyb3Vwcy8ke2lkfS9jc3ZgKTtcbiAgICB9XG59XG5cbmNsYXNzIFBsYXllcnNDbGllbnQgZXh0ZW5kcyBCYXNlQVBJQ2xpZW50IHtcbiAgICAvKipcbiAgICAgKiBTZWFyY2hlcyBwbGF5ZXJzIGJ5IHBhcnRpYWwgdXNlcm5hbWUuXG4gICAgICogQHJldHVybnMgQSBsaXN0IG9mIHBsYXllcnMuXG4gICAgICovXG4gICAgc2VhcmNoUGxheWVycyhwYXJ0aWFsVXNlcm5hbWUsIHBhZ2luYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVxdWVzdCgnL3BsYXllcnMvc2VhcmNoJywgT2JqZWN0LmFzc2lnbih7IHVzZXJuYW1lOiBwYXJ0aWFsVXNlcm5hbWUgfSwgcGFnaW5hdGlvbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzL3RyYWNrcyBhIHBsYXllci5cbiAgICAgKiBAcmV0dXJucyBUaGUgcGxheWVyJ3MgbmV3IGRldGFpbHMsIGluY2x1ZGluZyB0aGUgbGF0ZXN0IHNuYXBzaG90LlxuICAgICAqL1xuICAgIHVwZGF0ZVBsYXllcih1c2VybmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3N0UmVxdWVzdChgL3BsYXllcnMvJHt1c2VybmFtZX1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXNzZXJ0cyAoYW5kIGF0dGVtcHRzIHRvIGZpeCwgaWYgbmVjZXNzYXJ5KSBhIHBsYXllcidzIGdhbWUtbW9kZSB0eXBlLlxuICAgICAqIEByZXR1cm5zIFRoZSB1cGRhdGVkIHBsYXllciwgYW5kIGFuIGluZGljYXRpb24gb2Ygd2hldGhlciB0aGUgdHlwZSB3YXMgY2hhbmdlZC5cbiAgICAgKi9cbiAgICBhc3NlcnRQbGF5ZXJUeXBlKHVzZXJuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc3RSZXF1ZXN0KGAvcGxheWVycy8ke3VzZXJuYW1lfS9hc3NlcnQtdHlwZWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIGEgcGxheWVyJ3MgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyBUaGUgcGxheWVyJ3MgZGV0YWlscywgaW5jbHVkaW5nIHRoZSBsYXRlc3Qgc25hcHNob3QuXG4gICAgICovXG4gICAgZ2V0UGxheWVyRGV0YWlscyh1c2VybmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KGAvcGxheWVycy8ke3VzZXJuYW1lfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIGEgcGxheWVyJ3MgZGV0YWlscyBieSBJRC5cbiAgICAgKiBAcmV0dXJucyBUaGUgcGxheWVyJ3MgZGV0YWlscywgaW5jbHVkaW5nIHRoZSBsYXRlc3Qgc25hcHNob3QuXG4gICAgICovXG4gICAgZ2V0UGxheWVyRGV0YWlsc0J5SWQoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVxdWVzdChgL3BsYXllcnMvaWQvJHtpZH1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyBhIHBsYXllcidzIGN1cnJlbnQgYWNoaWV2ZW1lbnRzLlxuICAgICAqIEByZXR1cm5zIEEgbGlzdCBvZiBhY2hpZXZlbWVudHMuXG4gICAgICovXG4gICAgZ2V0UGxheWVyQWNoaWV2ZW1lbnRzKHVzZXJuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlcXVlc3QoYC9wbGF5ZXJzLyR7dXNlcm5hbWV9L2FjaGlldmVtZW50c2ApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIGEgcGxheWVyJ3MgY3VycmVudCBhY2hpZXZlbWVudCBwcm9ncmVzcy5cbiAgICAgKiBAcmV0dXJucyBBIGxpc3Qgb2YgYWNoaWV2ZW1lbnRzIChjb21wbGV0ZWQgb3Igb3RoZXJ3aXNlKSwgd2l0aCB0aGVpciByZXNwZWN0aXZlIHJlbGF0aXZlL2Fic29sdXRlIHByb2dyZXNzIHBlcmNlbnRhZ2UuXG4gICAgICovXG4gICAgZ2V0UGxheWVyQWNoaWV2ZW1lbnRQcm9ncmVzcyh1c2VybmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KGAvcGxheWVycy8ke3VzZXJuYW1lfS9hY2hpZXZlbWVudHMvcHJvZ3Jlc3NgKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyBhbGwgb2YgdGhlIHBsYXllcidzIGNvbXBldGl0aW9uIHBhcnRpY2lwYXRpb25zLlxuICAgICAqIEByZXR1cm5zIEEgbGlzdCBvZiBwYXJ0aWNpcGF0aW9ucywgd2l0aCB0aGUgcmVzcGVjdGl2ZSBjb21wZXRpdGlvbiBpbmNsdWRlZC5cbiAgICAgKi9cbiAgICBnZXRQbGF5ZXJDb21wZXRpdGlvbnModXNlcm5hbWUsIGZpbHRlciwgcGFnaW5hdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KGAvcGxheWVycy8ke3VzZXJuYW1lfS9jb21wZXRpdGlvbnNgLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGZpbHRlciksIHBhZ2luYXRpb24pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyBhbGwgb2YgdGhlIHBsYXllcidzIGNvbXBldGl0aW9uIHBhcnRpY2lwYXRpb25zJyBzdGFuZGluZ3MuXG4gICAgICogQHJldHVybnMgQSBsaXN0IG9mIHBhcnRpY2lwYXRpb25zLCB3aXRoIHRoZSByZXNwZWN0aXZlIGNvbXBldGl0aW9uLCByYW5rIGFuZCBwcm9ncmVzcyBpbmNsdWRlZC5cbiAgICAgKi9cbiAgICBnZXRQbGF5ZXJDb21wZXRpdGlvblN0YW5kaW5ncyh1c2VybmFtZSwgZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlcXVlc3QoYC9wbGF5ZXJzLyR7dXNlcm5hbWV9L2NvbXBldGl0aW9ucy9zdGFuZGluZ3NgLCBmaWx0ZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIGFsbCBvZiB0aGUgcGxheWVyJ3MgZ3JvdXAgbWVtYmVyc2hpcHMuXG4gICAgICogQHJldHVybnMgQSBsaXN0IG9mIG1lbWJlcnNoaXBzLCB3aXRoIHRoZSByZXNwZWN0aXZlIGdyb3VwIGluY2x1ZGVkLlxuICAgICAqL1xuICAgIGdldFBsYXllckdyb3Vwcyh1c2VybmFtZSwgcGFnaW5hdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KGAvcGxheWVycy8ke3VzZXJuYW1lfS9ncm91cHNgLCBwYWdpbmF0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyBhIHBsYXllcidzIGdhaW5zLCBmb3IgYSBzcGVjaWZpYyBwZXJpb2Qgb3IgdGltZSByYW5nZSwgYXMgYSBbbWV0cmljOiBkYXRhXSBtYXAuXG4gICAgICogQHJldHVybnMgQSBtYXAgb2YgZWFjaCBtZXRyaWMncyBnYWluZWQgZGF0YS5cbiAgICAgKi9cbiAgICBnZXRQbGF5ZXJHYWlucyh1c2VybmFtZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KGAvcGxheWVycy8ke3VzZXJuYW1lfS9nYWluZWRgLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyBhbGwgb2YgdGhlIHBsYXllcidzIHJlY29yZHMuXG4gICAgICogQHJldHVybnMgQSBsaXN0IG9mIHJlY29yZHMuXG4gICAgICovXG4gICAgZ2V0UGxheWVyUmVjb3Jkcyh1c2VybmFtZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KGAvcGxheWVycy8ke3VzZXJuYW1lfS9yZWNvcmRzYCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgYWxsIG9mIHRoZSBwbGF5ZXIncyBwYXN0IHNuYXBzaG90cy5cbiAgICAgKiBAcmV0dXJucyBBIGxpc3Qgb2Ygc25hcHNob3RzLlxuICAgICAqL1xuICAgIGdldFBsYXllclNuYXBzaG90cyh1c2VybmFtZSwgZmlsdGVyLCBwYWdpbmF0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlcXVlc3QoYC9wbGF5ZXJzLyR7dXNlcm5hbWV9L3NuYXBzaG90c2AsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZmlsdGVyKSwgcGFnaW5hdGlvbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIGFsbCBvZiB0aGUgcGxheWVyJ3MgcGFzdCBzbmFwc2hvdHMnIHRpbWVsaW5lLlxuICAgICAqIEByZXR1cm5zIEEgbGlzdCBvZiB0aW1lc2VyaWVzIGRhdGEgKHZhbHVlLCByYW5rLCBkYXRlKVxuICAgICAqL1xuICAgIGdldFBsYXllclNuYXBzaG90VGltZWxpbmUodXNlcm5hbWUsIG1ldHJpYywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KGAvcGxheWVycy8ke3VzZXJuYW1lfS9zbmFwc2hvdHMvdGltZWxpbmVgLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IG1ldHJpYyB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgYWxsIG9mIHRoZSBwbGF5ZXIncyBhcHByb3ZlZCBuYW1lIGNoYW5nZXMuXG4gICAgICogQHJldHVybnMgQSBsaXN0IG9mIG5hbWUgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBnZXRQbGF5ZXJOYW1lcyh1c2VybmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KGAvcGxheWVycy8ke3VzZXJuYW1lfS9uYW1lc2ApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIGFsbCBvZiBhcmNoaXZlZCBwbGF5ZXJzIHRoYXQgcHJldmlvdXNseSBoZWxkIHRoaXMgdXNlcm5hbWUuXG4gICAgICogQHJldHVybnMgQSBsaXN0IG9mIHBsYXllciBhcmNoaXZlcy5cbiAgICAgKi9cbiAgICBnZXRQbGF5ZXJBcmNoaXZlcyh1c2VybmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KGAvcGxheWVycy8ke3VzZXJuYW1lfS9hcmNoaXZlc2ApO1xuICAgIH1cbn1cblxuY2xhc3MgUmVjb3Jkc0NsaWVudCBleHRlbmRzIEJhc2VBUElDbGllbnQge1xuICAgIC8qKlxuICAgICAqIEZldGNoZXMgdGhlIGN1cnJlbnQgcmVjb3JkcyBsZWFkZXJib2FyZCBmb3IgYSBzcGVjaWZpYyBtZXRyaWMsIHBlcmlvZCwgcGxheWVyVHlwZSwgcGxheWVyQnVpbGQgYW5kIGNvdW50cnkuXG4gICAgICogQHJldHVybnMgQSBsaXN0IG9mIHJlY29yZHMsIHdpdGggdGhlaXIgcmVzcGVjdGl2ZSBwbGF5ZXJzLCBkYXRlcyBhbmQgdmFsdWVzIGluY2x1ZGVkLlxuICAgICAqL1xuICAgIGdldFJlY29yZExlYWRlcmJvYXJkKGZpbHRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KCcvcmVjb3Jkcy9sZWFkZXJib2FyZCcsIGZpbHRlcik7XG4gICAgfVxufVxuXG4vKipcbiAqIFByaXNtYSBjdXJyZW50bHkgc2VlbXMgdG8gaWdub3JlIHRoZSBAbWFwKCkgaW4gZW51bSBkZWNsYXJhdGlvbnMuXG4gKlxuICogU28gYnkgZGVjbGFyaW5nIHRoaXMgZW51bSBpbiB0aGUgc2NoZW1hIGZpbGU6XG4gKlxuICogZW51bSBOYW1lQ2hhbmdlU3RhdHVzIHtcbiAqICAgIFBFTkRJTkcgICAgIEBtYXAoJ3BlbmRpbmcnKVxuICogICAgREVOSUVEICAgICAgQG1hcCgnZGVuaWVkJylcbiAqICAgIEFQUFJPVkVEICAgIEBtYXAoJ2FwcHJvdmVkJylcbiAqIH1cbiAqXG4gKiB5b3Ugd291bGQgZXhwZWN0IHRoZSBwcmlzbWEgY2xpZW50IHRvIHRoZW4gZ2VuZXJhdGUgdGhlIGZvbGxvd2luZyBvYmplY3Q6XG4gKlxuICogY29uc3QgTmFtZUNoYW5nZVN0YXR1cyA9IHtcbiAqICAgIFBFTkRJTkc6ICdwZW5kaW5nJyxcbiAqICAgIERFTklFRDogJ2RlbmllZCcsXG4gKiAgICBBUFBST1ZFRDogJ2FwcHJvdmVkJyxcbiAqIH1cbiAqXG4gKiBidXQgdW5mb3J0dW5hdGVseSwgdGhlIG1hcHBpbmcgaXMgb25seSB1c2VkIGZvciBxdWVyaWVzLCBhbmQgdGhlIGFjdHVhbCBlc3VsdGluZyBvYmplY3QgaXMgdGhpczpcbiAqXG4gKiBjb25zdCBOYW1lQ2hhbmdlU3RhdHVzID0ge1xuICogICAgUEVORElORzogJ1BFTkRJTkcnLFxuICogICAgREVOSUVEOiAnREVOSUVEJyxcbiAqICAgIEFQUFJPVkVEOiAnQVBQUk9WRUQnLFxuICogfVxuICpcbiAqIEFuZCBiZWNhdXNlIEknZCBoYXRlIGhhdmluZyB0byBjYWxsIGVudW0gdmFsdWVzIGluIGxvd2VyY2FzZSwgbGlrZTpcbiAqICAgIE5hbWVDaGFuZ2VTdGF0dXMucGVuZGluZ1xuICogICAgTWV0cmljLmtpbmdfYmxhY2tfZHJhZ29uXG4gKiAgICBQZXJpb2QuZGF5XG4gKlxuICogSSdkIHJhdGhlciBkbyBzb21lIG1hcHBpbmcgdG8gZW5zdXJlIEkgaGF2ZSB0aGUgYmVzdCBvZiBib3RoIHdvcmxkcyxcbiAqIGxvd2VyY2FzZSBkYXRhYmFzZSB2YWx1ZXMsIGJ1dCB3aXRoIHVwcGVyY2FzZSBpbiBjb2RlLlxuICogV2l0aCB0aGUgbWFwcGluZ3MgYmVsb3csIHdlIGNhbiBub3cgdXNlIHByaXNtYSBlbnVtcyBieSBjYWxsaW5nIHRoZW0gd2l0aCB1cHBlcmNhc2UsIGxpa2U6XG4gKlxuICogICAgTmFtZUNoYW5nZVN0YXR1cy5QRU5ESU5HXG4gKiAgICBNZXRyaWMuS0lOR19CTEFDS19EUkFHT05cbiAqICAgIFBlcmlvZC5EQVlcbiAqXG4gKi9cbmNvbnN0IFNraWxsID0ge1xuICAgIE9WRVJBTEw6ICdvdmVyYWxsJyxcbiAgICBBVFRBQ0s6ICdhdHRhY2snLFxuICAgIERFRkVOQ0U6ICdkZWZlbmNlJyxcbiAgICBTVFJFTkdUSDogJ3N0cmVuZ3RoJyxcbiAgICBISVRQT0lOVFM6ICdoaXRwb2ludHMnLFxuICAgIFJBTkdFRDogJ3JhbmdlZCcsXG4gICAgUFJBWUVSOiAncHJheWVyJyxcbiAgICBNQUdJQzogJ21hZ2ljJyxcbiAgICBDT09LSU5HOiAnY29va2luZycsXG4gICAgV09PRENVVFRJTkc6ICd3b29kY3V0dGluZycsXG4gICAgRkxFVENISU5HOiAnZmxldGNoaW5nJyxcbiAgICBGSVNISU5HOiAnZmlzaGluZycsXG4gICAgRklSRU1BS0lORzogJ2ZpcmVtYWtpbmcnLFxuICAgIENSQUZUSU5HOiAnY3JhZnRpbmcnLFxuICAgIFNNSVRISU5HOiAnc21pdGhpbmcnLFxuICAgIE1JTklORzogJ21pbmluZycsXG4gICAgSEVSQkxPUkU6ICdoZXJibG9yZScsXG4gICAgQUdJTElUWTogJ2FnaWxpdHknLFxuICAgIFRISUVWSU5HOiAndGhpZXZpbmcnLFxuICAgIFNMQVlFUjogJ3NsYXllcicsXG4gICAgRkFSTUlORzogJ2Zhcm1pbmcnLFxuICAgIFJVTkVDUkFGVElORzogJ3J1bmVjcmFmdGluZycsXG4gICAgSFVOVEVSOiAnaHVudGVyJyxcbiAgICBDT05TVFJVQ1RJT046ICdjb25zdHJ1Y3Rpb24nXG59O1xuY29uc3QgQWN0aXZpdHkgPSB7XG4gICAgTEVBR1VFX1BPSU5UUzogJ2xlYWd1ZV9wb2ludHMnLFxuICAgIEJPVU5UWV9IVU5URVJfSFVOVEVSOiAnYm91bnR5X2h1bnRlcl9odW50ZXInLFxuICAgIEJPVU5UWV9IVU5URVJfUk9HVUU6ICdib3VudHlfaHVudGVyX3JvZ3VlJyxcbiAgICBDTFVFX1NDUk9MTFNfQUxMOiAnY2x1ZV9zY3JvbGxzX2FsbCcsXG4gICAgQ0xVRV9TQ1JPTExTX0JFR0lOTkVSOiAnY2x1ZV9zY3JvbGxzX2JlZ2lubmVyJyxcbiAgICBDTFVFX1NDUk9MTFNfRUFTWTogJ2NsdWVfc2Nyb2xsc19lYXN5JyxcbiAgICBDTFVFX1NDUk9MTFNfTUVESVVNOiAnY2x1ZV9zY3JvbGxzX21lZGl1bScsXG4gICAgQ0xVRV9TQ1JPTExTX0hBUkQ6ICdjbHVlX3Njcm9sbHNfaGFyZCcsXG4gICAgQ0xVRV9TQ1JPTExTX0VMSVRFOiAnY2x1ZV9zY3JvbGxzX2VsaXRlJyxcbiAgICBDTFVFX1NDUk9MTFNfTUFTVEVSOiAnY2x1ZV9zY3JvbGxzX21hc3RlcicsXG4gICAgTEFTVF9NQU5fU1RBTkRJTkc6ICdsYXN0X21hbl9zdGFuZGluZycsXG4gICAgUFZQX0FSRU5BOiAncHZwX2FyZW5hJyxcbiAgICBTT1VMX1dBUlNfWkVBTDogJ3NvdWxfd2Fyc196ZWFsJyxcbiAgICBHVUFSRElBTlNfT0ZfVEhFX1JJRlQ6ICdndWFyZGlhbnNfb2ZfdGhlX3JpZnQnLFxuICAgIENPTE9TU0VVTV9HTE9SWTogJ2NvbG9zc2V1bV9nbG9yeSdcbn07XG5jb25zdCBCb3NzID0ge1xuICAgIEFCWVNTQUxfU0lSRTogJ2FieXNzYWxfc2lyZScsXG4gICAgQUxDSEVNSUNBTF9IWURSQTogJ2FsY2hlbWljYWxfaHlkcmEnLFxuICAgIEFNT1hMSUFUTDogJ2Ftb3hsaWF0bCcsXG4gICAgQVJBWFhPUjogJ2FyYXh4b3InLFxuICAgIEFSVElPOiAnYXJ0aW8nLFxuICAgIEJBUlJPV1NfQ0hFU1RTOiAnYmFycm93c19jaGVzdHMnLFxuICAgIEJSWU9QSFlUQTogJ2JyeW9waHl0YScsXG4gICAgQ0FMTElTVE86ICdjYWxsaXN0bycsXG4gICAgQ0FMVkFSSU9OOiAnY2FsdmFyaW9uJyxcbiAgICBDRVJCRVJVUzogJ2NlcmJlcnVzJyxcbiAgICBDSEFNQkVSU19PRl9YRVJJQzogJ2NoYW1iZXJzX29mX3hlcmljJyxcbiAgICBDSEFNQkVSU19PRl9YRVJJQ19DTTogJ2NoYW1iZXJzX29mX3hlcmljX2NoYWxsZW5nZV9tb2RlJyxcbiAgICBDSEFPU19FTEVNRU5UQUw6ICdjaGFvc19lbGVtZW50YWwnLFxuICAgIENIQU9TX0ZBTkFUSUM6ICdjaGFvc19mYW5hdGljJyxcbiAgICBDT01NQU5ERVJfWklMWUFOQTogJ2NvbW1hbmRlcl96aWx5YW5hJyxcbiAgICBDT1JQT1JFQUxfQkVBU1Q6ICdjb3Jwb3JlYWxfYmVhc3QnLFxuICAgIENSQVpZX0FSQ0hBRU9MT0dJU1Q6ICdjcmF6eV9hcmNoYWVvbG9naXN0JyxcbiAgICBEQUdBTk5PVEhfUFJJTUU6ICdkYWdhbm5vdGhfcHJpbWUnLFxuICAgIERBR0FOTk9USF9SRVg6ICdkYWdhbm5vdGhfcmV4JyxcbiAgICBEQUdBTk5PVEhfU1VQUkVNRTogJ2RhZ2Fubm90aF9zdXByZW1lJyxcbiAgICBERVJBTkdFRF9BUkNIQUVPTE9HSVNUOiAnZGVyYW5nZWRfYXJjaGFlb2xvZ2lzdCcsXG4gICAgRFVLRV9TVUNFTExVUzogJ2R1a2Vfc3VjZWxsdXMnLFxuICAgIEdFTkVSQUxfR1JBQVJET1I6ICdnZW5lcmFsX2dyYWFyZG9yJyxcbiAgICBHSUFOVF9NT0xFOiAnZ2lhbnRfbW9sZScsXG4gICAgR1JPVEVTUVVFX0dVQVJESUFOUzogJ2dyb3Rlc3F1ZV9ndWFyZGlhbnMnLFxuICAgIEhFU1BPUkk6ICdoZXNwb3JpJyxcbiAgICBLQUxQSElURV9RVUVFTjogJ2thbHBoaXRlX3F1ZWVuJyxcbiAgICBLSU5HX0JMQUNLX0RSQUdPTjogJ2tpbmdfYmxhY2tfZHJhZ29uJyxcbiAgICBLUkFLRU46ICdrcmFrZW4nLFxuICAgIEtSRUVBUlJBOiAna3JlZWFycmEnLFxuICAgIEtSSUxfVFNVVFNBUk9USDogJ2tyaWxfdHN1dHNhcm90aCcsXG4gICAgTFVOQVJfQ0hFU1RTOiAnbHVuYXJfY2hlc3RzJyxcbiAgICBNSU1JQzogJ21pbWljJyxcbiAgICBORVg6ICduZXgnLFxuICAgIE5JR0hUTUFSRTogJ25pZ2h0bWFyZScsXG4gICAgUEhPU0FOSVNfTklHSFRNQVJFOiAncGhvc2FuaXNfbmlnaHRtYXJlJyxcbiAgICBPQk9SOiAnb2JvcicsXG4gICAgUEhBTlRPTV9NVVNQQUg6ICdwaGFudG9tX211c3BhaCcsXG4gICAgU0FSQUNITklTOiAnc2FyYWNobmlzJyxcbiAgICBTQ09SUElBOiAnc2NvcnBpYScsXG4gICAgU0NVUlJJVVM6ICdzY3Vycml1cycsXG4gICAgU0tPVElaTzogJ3Nrb3Rpem8nLFxuICAgIFNPTF9IRVJFRElUOiAnc29sX2hlcmVkaXQnLFxuICAgIFNQSU5ERUw6ICdzcGluZGVsJyxcbiAgICBURU1QT1JPU1M6ICd0ZW1wb3Jvc3MnLFxuICAgIFRIRV9HQVVOVExFVDogJ3RoZV9nYXVudGxldCcsXG4gICAgVEhFX0NPUlJVUFRFRF9HQVVOVExFVDogJ3RoZV9jb3JydXB0ZWRfZ2F1bnRsZXQnLFxuICAgIFRIRV9IVUVZQ09BVEw6ICd0aGVfaHVleWNvYXRsJyxcbiAgICBUSEVfTEVWSUFUSEFOOiAndGhlX2xldmlhdGhhbicsXG4gICAgVEhFX1dISVNQRVJFUjogJ3RoZV93aGlzcGVyZXInLFxuICAgIFRIRUFUUkVfT0ZfQkxPT0Q6ICd0aGVhdHJlX29mX2Jsb29kJyxcbiAgICBUSEVBVFJFX09GX0JMT09EX0hBUkRfTU9ERTogJ3RoZWF0cmVfb2ZfYmxvb2RfaGFyZF9tb2RlJyxcbiAgICBUSEVSTU9OVUNMRUFSX1NNT0tFX0RFVklMOiAndGhlcm1vbnVjbGVhcl9zbW9rZV9kZXZpbCcsXG4gICAgVE9NQlNfT0ZfQU1BU0NVVDogJ3RvbWJzX29mX2FtYXNjdXQnLFxuICAgIFRPTUJTX09GX0FNQVNDVVRfRVhQRVJUOiAndG9tYnNfb2ZfYW1hc2N1dF9leHBlcnQnLFxuICAgIFRaS0FMX1pVSzogJ3R6a2FsX3p1aycsXG4gICAgVFpUT0tfSkFEOiAndHp0b2tfamFkJyxcbiAgICBWQVJET1JWSVM6ICd2YXJkb3J2aXMnLFxuICAgIFZFTkVOQVRJUzogJ3ZlbmVuYXRpcycsXG4gICAgVkVUSU9OOiAndmV0aW9uJyxcbiAgICBWT1JLQVRIOiAndm9ya2F0aCcsXG4gICAgV0lOVEVSVE9EVDogJ3dpbnRlcnRvZHQnLFxuICAgIFpBTENBTk86ICd6YWxjYW5vJyxcbiAgICBaVUxSQUg6ICd6dWxyYWgnXG59O1xuY29uc3QgQ29tcHV0ZWRNZXRyaWMgPSB7XG4gICAgRUhQOiAnZWhwJyxcbiAgICBFSEI6ICdlaGInXG59O1xuY29uc3QgTWV0cmljID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgU2tpbGwpLCBBY3Rpdml0eSksIEJvc3MpLCBDb21wdXRlZE1ldHJpYyk7XG5jb25zdCBOYW1lQ2hhbmdlU3RhdHVzID0ge1xuICAgIFBFTkRJTkc6ICdwZW5kaW5nJyxcbiAgICBERU5JRUQ6ICdkZW5pZWQnLFxuICAgIEFQUFJPVkVEOiAnYXBwcm92ZWQnXG59O1xuY29uc3QgUGVyaW9kID0ge1xuICAgIEZJVkVfTUlOOiAnZml2ZV9taW4nLFxuICAgIERBWTogJ2RheScsXG4gICAgV0VFSzogJ3dlZWsnLFxuICAgIE1PTlRIOiAnbW9udGgnLFxuICAgIFlFQVI6ICd5ZWFyJ1xufTtcbmNvbnN0IFBsYXllclR5cGUgPSB7XG4gICAgVU5LTk9XTjogJ3Vua25vd24nLFxuICAgIFJFR1VMQVI6ICdyZWd1bGFyJyxcbiAgICBJUk9OTUFOOiAnaXJvbm1hbicsXG4gICAgSEFSRENPUkU6ICdoYXJkY29yZScsXG4gICAgVUxUSU1BVEU6ICd1bHRpbWF0ZSdcbn07XG5jb25zdCBQbGF5ZXJCdWlsZCA9IHtcbiAgICBNQUlOOiAnbWFpbicsXG4gICAgRjJQOiAnZjJwJyxcbiAgICBGMlBfTFZMMzogJ2YycF9sdmwzJyxcbiAgICBMVkwzOiAnbHZsMycsXG4gICAgWkVSS0VSOiAnemVya2VyJyxcbiAgICBERUYxOiAnZGVmMScsXG4gICAgSFAxMDogJ2hwMTAnXG59O1xuY29uc3QgUGxheWVyU3RhdHVzID0ge1xuICAgIEFDVElWRTogJ2FjdGl2ZScsXG4gICAgVU5SQU5LRUQ6ICd1bnJhbmtlZCcsXG4gICAgRkxBR0dFRDogJ2ZsYWdnZWQnLFxuICAgIEFSQ0hJVkVEOiAnYXJjaGl2ZWQnLFxuICAgIEJBTk5FRDogJ2Jhbm5lZCdcbn07XG5jb25zdCBDb21wZXRpdGlvblR5cGUgPSB7XG4gICAgQ0xBU1NJQzogJ2NsYXNzaWMnLFxuICAgIFRFQU06ICd0ZWFtJ1xufTtcbmNvbnN0IEdyb3VwUm9sZSA9IHtcbiAgICBBQ0hJRVZFUjogJ2FjaGlldmVyJyxcbiAgICBBREFNQU5UOiAnYWRhbWFudCcsXG4gICAgQURFUFQ6ICdhZGVwdCcsXG4gICAgQURNSU5JU1RSQVRPUjogJ2FkbWluaXN0cmF0b3InLFxuICAgIEFETUlSQUw6ICdhZG1pcmFsJyxcbiAgICBBRFZFTlRVUkVSOiAnYWR2ZW50dXJlcicsXG4gICAgQUlSOiAnYWlyJyxcbiAgICBBTkNIT1I6ICdhbmNob3InLFxuICAgIEFQT1RIRUNBUlk6ICdhcG90aGVjYXJ5JyxcbiAgICBBUkNIRVI6ICdhcmNoZXInLFxuICAgIEFSTUFEWUxFQU46ICdhcm1hZHlsZWFuJyxcbiAgICBBUlRJTExFUlk6ICdhcnRpbGxlcnknLFxuICAgIEFSVElTQU46ICdhcnRpc2FuJyxcbiAgICBBU0dBUk5JQU46ICdhc2dhcm5pYW4nLFxuICAgIEFTU0FTU0lOOiAnYXNzYXNzaW4nLFxuICAgIEFTU0lTVEFOVDogJ2Fzc2lzdGFudCcsXG4gICAgQVNUUkFMOiAnYXN0cmFsJyxcbiAgICBBVEhMRVRFOiAnYXRobGV0ZScsXG4gICAgQVRUQUNLRVI6ICdhdHRhY2tlcicsXG4gICAgQkFORElUOiAnYmFuZGl0JyxcbiAgICBCQU5ET1NJQU46ICdiYW5kb3NpYW4nLFxuICAgIEJBUkJBUklBTjogJ2JhcmJhcmlhbicsXG4gICAgQkFUVExFTUFHRTogJ2JhdHRsZW1hZ2UnLFxuICAgIEJFQVNUOiAnYmVhc3QnLFxuICAgIEJFUlNFUktFUjogJ2JlcnNlcmtlcicsXG4gICAgQkxJU1RFUldPT0Q6ICdibGlzdGVyd29vZCcsXG4gICAgQkxPT0Q6ICdibG9vZCcsXG4gICAgQkxVRTogJ2JsdWUnLFxuICAgIEJPQjogJ2JvYicsXG4gICAgQk9EWTogJ2JvZHknLFxuICAgIEJSQVNTSUNBTjogJ2JyYXNzaWNhbicsXG4gICAgQlJBV0xFUjogJ2JyYXdsZXInLFxuICAgIEJSSUdBRElFUjogJ2JyaWdhZGllcicsXG4gICAgQlJJR0FORDogJ2JyaWdhbmQnLFxuICAgIEJST05aRTogJ2Jyb256ZScsXG4gICAgQlJVSVNFUjogJ2JydWlzZXInLFxuICAgIEJVTFdBUks6ICdidWx3YXJrJyxcbiAgICBCVVJHTEFSOiAnYnVyZ2xhcicsXG4gICAgQlVSTlQ6ICdidXJudCcsXG4gICAgQ0FERVQ6ICdjYWRldCcsXG4gICAgQ0FQVEFJTjogJ2NhcHRhaW4nLFxuICAgIENBUlJZOiAnY2FycnknLFxuICAgIENIQU1QSU9OOiAnY2hhbXBpb24nLFxuICAgIENIQU9TOiAnY2hhb3MnLFxuICAgIENMRVJJQzogJ2NsZXJpYycsXG4gICAgQ09MTEVDVE9SOiAnY29sbGVjdG9yJyxcbiAgICBDT0xPTkVMOiAnY29sb25lbCcsXG4gICAgQ09NTUFOREVSOiAnY29tbWFuZGVyJyxcbiAgICBDT01QRVRJVE9SOiAnY29tcGV0aXRvcicsXG4gICAgQ09NUExFVElPTklTVDogJ2NvbXBsZXRpb25pc3QnLFxuICAgIENPTlNUUlVDVE9SOiAnY29uc3RydWN0b3InLFxuICAgIENPT0s6ICdjb29rJyxcbiAgICBDT09SRElOQVRPUjogJ2Nvb3JkaW5hdG9yJyxcbiAgICBDT1JQT1JBTDogJ2NvcnBvcmFsJyxcbiAgICBDT1NNSUM6ICdjb3NtaWMnLFxuICAgIENPVU5DSUxMT1I6ICdjb3VuY2lsbG9yJyxcbiAgICBDUkFGVEVSOiAnY3JhZnRlcicsXG4gICAgQ1JFVzogJ2NyZXcnLFxuICAgIENSVVNBREVSOiAnY3J1c2FkZXInLFxuICAgIENVVFBVUlNFOiAnY3V0cHVyc2UnLFxuICAgIERFQVRIOiAnZGVhdGgnLFxuICAgIERFRkVOREVSOiAnZGVmZW5kZXInLFxuICAgIERFRklMRVI6ICdkZWZpbGVyJyxcbiAgICBERVBVVFlfT1dORVI6ICdkZXB1dHlfb3duZXInLFxuICAgIERFU1RST1lFUjogJ2Rlc3Ryb3llcicsXG4gICAgRElBTU9ORDogJ2RpYW1vbmQnLFxuICAgIERJU0VBU0VEOiAnZGlzZWFzZWQnLFxuICAgIERPQ1RPUjogJ2RvY3RvcicsXG4gICAgRE9HU0JPRFk6ICdkb2dzYm9keScsXG4gICAgRFJBR09OOiAnZHJhZ29uJyxcbiAgICBEUkFHT05TVE9ORTogJ2RyYWdvbnN0b25lJyxcbiAgICBEUlVJRDogJ2RydWlkJyxcbiAgICBEVUVMTElTVDogJ2R1ZWxsaXN0JyxcbiAgICBFQVJUSDogJ2VhcnRoJyxcbiAgICBFTElURTogJ2VsaXRlJyxcbiAgICBFTUVSQUxEOiAnZW1lcmFsZCcsXG4gICAgRU5GT1JDRVI6ICdlbmZvcmNlcicsXG4gICAgRVBJQzogJ2VwaWMnLFxuICAgIEVYRUNVVElWRTogJ2V4ZWN1dGl2ZScsXG4gICAgRVhQRVJUOiAnZXhwZXJ0JyxcbiAgICBFWFBMT1JFUjogJ2V4cGxvcmVyJyxcbiAgICBGQVJNRVI6ICdmYXJtZXInLFxuICAgIEZFRURFUjogJ2ZlZWRlcicsXG4gICAgRklHSFRFUjogJ2ZpZ2h0ZXInLFxuICAgIEZJUkU6ICdmaXJlJyxcbiAgICBGSVJFTUFLRVI6ICdmaXJlbWFrZXInLFxuICAgIEZJUkVTVEFSVEVSOiAnZmlyZXN0YXJ0ZXInLFxuICAgIEZJU0hFUjogJ2Zpc2hlcicsXG4gICAgRkxFVENIRVI6ICdmbGV0Y2hlcicsXG4gICAgRk9SQUdFUjogJ2ZvcmFnZXInLFxuICAgIEZSRU1FTk5JSzogJ2ZyZW1lbm5paycsXG4gICAgR0FNRVI6ICdnYW1lcicsXG4gICAgR0FUSEVSRVI6ICdnYXRoZXJlcicsXG4gICAgR0VORVJBTDogJ2dlbmVyYWwnLFxuICAgIEdOT01FX0NISUxEOiAnZ25vbWVfY2hpbGQnLFxuICAgIEdOT01FX0VMREVSOiAnZ25vbWVfZWxkZXInLFxuICAgIEdPQkxJTjogJ2dvYmxpbicsXG4gICAgR09MRDogJ2dvbGQnLFxuICAgIEdPT046ICdnb29uJyxcbiAgICBHUkVFTjogJ2dyZWVuJyxcbiAgICBHUkVZOiAnZ3JleScsXG4gICAgR1VBUkRJQU46ICdndWFyZGlhbicsXG4gICAgR1VUSElYSUFOOiAnZ3V0aGl4aWFuJyxcbiAgICBIQVJQT09OOiAnaGFycG9vbicsXG4gICAgSEVBTEVSOiAnaGVhbGVyJyxcbiAgICBIRUxMQ0FUOiAnaGVsbGNhdCcsXG4gICAgSEVMUEVSOiAnaGVscGVyJyxcbiAgICBIRVJCT0xPR0lTVDogJ2hlcmJvbG9naXN0JyxcbiAgICBIRVJPOiAnaGVybycsXG4gICAgSE9MWTogJ2hvbHknLFxuICAgIEhPQVJERVI6ICdob2FyZGVyJyxcbiAgICBIVU5URVI6ICdodW50ZXInLFxuICAgIElHTklUT1I6ICdpZ25pdG9yJyxcbiAgICBJTExVU0lPTklTVDogJ2lsbHVzaW9uaXN0JyxcbiAgICBJTVA6ICdpbXAnLFxuICAgIElORkFOVFJZOiAnaW5mYW50cnknLFxuICAgIElOUVVJU0lUT1I6ICdpbnF1aXNpdG9yJyxcbiAgICBJUk9OOiAnaXJvbicsXG4gICAgSkFERTogJ2phZGUnLFxuICAgIEpVU1RJQ0lBUjogJ2p1c3RpY2lhcicsXG4gICAgS0FOREFSSU46ICdrYW5kYXJpbicsXG4gICAgS0FSQU1KQU46ICdrYXJhbWphbicsXG4gICAgS0hBUklESUFOOiAna2hhcmlkaWFuJyxcbiAgICBLSVRURU46ICdraXR0ZW4nLFxuICAgIEtOSUdIVDogJ2tuaWdodCcsXG4gICAgTEFCT1VSRVI6ICdsYWJvdXJlcicsXG4gICAgTEFXOiAnbGF3JyxcbiAgICBMRUFERVI6ICdsZWFkZXInLFxuICAgIExFQVJORVI6ICdsZWFybmVyJyxcbiAgICBMRUdBQ1k6ICdsZWdhY3knLFxuICAgIExFR0VORDogJ2xlZ2VuZCcsXG4gICAgTEVHSU9OTkFJUkU6ICdsZWdpb25uYWlyZScsXG4gICAgTElFVVRFTkFOVDogJ2xpZXV0ZW5hbnQnLFxuICAgIExPT1RFUjogJ2xvb3RlcicsXG4gICAgTFVNQkVSSkFDSzogJ2x1bWJlcmphY2snLFxuICAgIE1BR0lDOiAnbWFnaWMnLFxuICAgIE1BR0lDSUFOOiAnbWFnaWNpYW4nLFxuICAgIE1BSk9SOiAnbWFqb3InLFxuICAgIE1BUExFOiAnbWFwbGUnLFxuICAgIE1BUlNIQUw6ICdtYXJzaGFsJyxcbiAgICBNQVNURVI6ICdtYXN0ZXInLFxuICAgIE1BWEVEOiAnbWF4ZWQnLFxuICAgIE1FRElBVE9SOiAnbWVkaWF0b3InLFxuICAgIE1FRElDOiAnbWVkaWMnLFxuICAgIE1FTlRPUjogJ21lbnRvcicsXG4gICAgTUVNQkVSOiAnbWVtYmVyJyxcbiAgICBNRVJDSEFOVDogJ21lcmNoYW50JyxcbiAgICBNSU5EOiAnbWluZCcsXG4gICAgTUlORVI6ICdtaW5lcicsXG4gICAgTUlOSU9OOiAnbWluaW9uJyxcbiAgICBNSVNUSEFMSU5JQU46ICdtaXN0aGFsaW5pYW4nLFxuICAgIE1JVEhSSUw6ICdtaXRocmlsJyxcbiAgICBNT0RFUkFUT1I6ICdtb2RlcmF0b3InLFxuICAgIE1PTkFSQ0g6ICdtb25hcmNoJyxcbiAgICBNT1JZVEFOSUFOOiAnbW9yeXRhbmlhbicsXG4gICAgTVlTVElDOiAnbXlzdGljJyxcbiAgICBNWVRIOiAnbXl0aCcsXG4gICAgTkFUVVJBTDogJ25hdHVyYWwnLFxuICAgIE5BVFVSRTogJ25hdHVyZScsXG4gICAgTkVDUk9NQU5DRVI6ICduZWNyb21hbmNlcicsXG4gICAgTklOSkE6ICduaW5qYScsXG4gICAgTk9CTEU6ICdub2JsZScsXG4gICAgTk9WSUNFOiAnbm92aWNlJyxcbiAgICBOVVJTRTogJ251cnNlJyxcbiAgICBPQUs6ICdvYWsnLFxuICAgIE9GRklDRVI6ICdvZmZpY2VyJyxcbiAgICBPTllYOiAnb255eCcsXG4gICAgT1BBTDogJ29wYWwnLFxuICAgIE9SQUNMRTogJ29yYWNsZScsXG4gICAgT1JBTkdFOiAnb3JhbmdlJyxcbiAgICBPV05FUjogJ293bmVyJyxcbiAgICBQQUdFOiAncGFnZScsXG4gICAgUEFMQURJTjogJ3BhbGFkaW4nLFxuICAgIFBBV046ICdwYXduJyxcbiAgICBQSUxHUklNOiAncGlsZ3JpbScsXG4gICAgUElORTogJ3BpbmUnLFxuICAgIFBJTks6ICdwaW5rJyxcbiAgICBQUkVGRUNUOiAncHJlZmVjdCcsXG4gICAgUFJJRVNUOiAncHJpZXN0JyxcbiAgICBQUklWQVRFOiAncHJpdmF0ZScsXG4gICAgUFJPRElHWTogJ3Byb2RpZ3knLFxuICAgIFBST1NFTFlURTogJ3Byb3NlbHl0ZScsXG4gICAgUFJPU1BFQ1RPUjogJ3Byb3NwZWN0b3InLFxuICAgIFBST1RFQ1RPUjogJ3Byb3RlY3RvcicsXG4gICAgUFVSRTogJ3B1cmUnLFxuICAgIFBVUlBMRTogJ3B1cnBsZScsXG4gICAgUFlST01BTkNFUjogJ3B5cm9tYW5jZXInLFxuICAgIFFVRVNURVI6ICdxdWVzdGVyJyxcbiAgICBSQUNFUjogJ3JhY2VyJyxcbiAgICBSQUlERVI6ICdyYWlkZXInLFxuICAgIFJBTkdFUjogJ3JhbmdlcicsXG4gICAgUkVDT1JEX0NIQVNFUjogJ3JlY29yZF9jaGFzZXInLFxuICAgIFJFQ1JVSVQ6ICdyZWNydWl0JyxcbiAgICBSRUNSVUlURVI6ICdyZWNydWl0ZXInLFxuICAgIFJFRF9UT1BBWjogJ3JlZF90b3BheicsXG4gICAgUkVEOiAncmVkJyxcbiAgICBST0dVRTogJ3JvZ3VlJyxcbiAgICBSVUJZOiAncnVieScsXG4gICAgUlVORTogJ3J1bmUnLFxuICAgIFJVTkVDUkFGVEVSOiAncnVuZWNyYWZ0ZXInLFxuICAgIFNBR0U6ICdzYWdlJyxcbiAgICBTQVBQSElSRTogJ3NhcHBoaXJlJyxcbiAgICBTQVJBRE9NSU5JU1Q6ICdzYXJhZG9taW5pc3QnLFxuICAgIFNBVklPVVI6ICdzYXZpb3VyJyxcbiAgICBTQ0FWRU5HRVI6ICdzY2F2ZW5nZXInLFxuICAgIFNDSE9MQVI6ICdzY2hvbGFyJyxcbiAgICBTQ09VUkdFOiAnc2NvdXJnZScsXG4gICAgU0NPVVQ6ICdzY291dCcsXG4gICAgU0NSSUJFOiAnc2NyaWJlJyxcbiAgICBTRUVSOiAnc2VlcicsXG4gICAgU0VOQVRPUjogJ3NlbmF0b3InLFxuICAgIFNFTlRSWTogJ3NlbnRyeScsXG4gICAgU0VSRU5JU1Q6ICdzZXJlbmlzdCcsXG4gICAgU0VSR0VBTlQ6ICdzZXJnZWFudCcsXG4gICAgU0hBTUFOOiAnc2hhbWFuJyxcbiAgICBTSEVSSUZGOiAnc2hlcmlmZicsXG4gICAgU0hPUlRfR1JFRU5fR1VZOiAnc2hvcnRfZ3JlZW5fZ3V5JyxcbiAgICBTS0lMTEVSOiAnc2tpbGxlcicsXG4gICAgU0tVTExFRDogJ3NrdWxsZWQnLFxuICAgIFNMQVlFUjogJ3NsYXllcicsXG4gICAgU01JVEVSOiAnc21pdGVyJyxcbiAgICBTTUlUSDogJ3NtaXRoJyxcbiAgICBTTVVHR0xFUjogJ3NtdWdnbGVyJyxcbiAgICBTTklQRVI6ICdzbmlwZXInLFxuICAgIFNPVUw6ICdzb3VsJyxcbiAgICBTUEVDSUFMSVNUOiAnc3BlY2lhbGlzdCcsXG4gICAgU1BFRURfUlVOTkVSOiAnc3BlZWRfcnVubmVyJyxcbiAgICBTUEVMTENBU1RFUjogJ3NwZWxsY2FzdGVyJyxcbiAgICBTUVVJUkU6ICdzcXVpcmUnLFxuICAgIFNUQUZGOiAnc3RhZmYnLFxuICAgIFNURUVMOiAnc3RlZWwnLFxuICAgIFNUUklERVI6ICdzdHJpZGVyJyxcbiAgICBTVFJJS0VSOiAnc3RyaWtlcicsXG4gICAgU1VNTU9ORVI6ICdzdW1tb25lcicsXG4gICAgU1VQRVJJT1I6ICdzdXBlcmlvcicsXG4gICAgU1VQRVJWSVNPUjogJ3N1cGVydmlzb3InLFxuICAgIFRFQUNIRVI6ICd0ZWFjaGVyJyxcbiAgICBURU1QTEFSOiAndGVtcGxhcicsXG4gICAgVEhFUkFQSVNUOiAndGhlcmFwaXN0JyxcbiAgICBUSElFRjogJ3RoaWVmJyxcbiAgICBUSVJBTk5JQU46ICd0aXJhbm5pYW4nLFxuICAgIFRSSUFMSVNUOiAndHJpYWxpc3QnLFxuICAgIFRSSUNLU1RFUjogJ3RyaWNrc3RlcicsXG4gICAgVFpLQUw6ICd0emthbCcsXG4gICAgVFpUT0s6ICd0enRvaycsXG4gICAgVU5IT0xZOiAndW5ob2x5JyxcbiAgICBWQUdSQU5UOiAndmFncmFudCcsXG4gICAgVkFOR1VBUkQ6ICd2YW5ndWFyZCcsXG4gICAgV0FMS0VSOiAnd2Fsa2VyJyxcbiAgICBXQU5ERVJFUjogJ3dhbmRlcmVyJyxcbiAgICBXQVJERU46ICd3YXJkZW4nLFxuICAgIFdBUkxPQ0s6ICd3YXJsb2NrJyxcbiAgICBXQVJSSU9SOiAnd2FycmlvcicsXG4gICAgV0FURVI6ICd3YXRlcicsXG4gICAgV0lMRDogJ3dpbGQnLFxuICAgIFdJTExPVzogJ3dpbGxvdycsXG4gICAgV0lMWTogJ3dpbHknLFxuICAgIFdJTlRVTUJFUjogJ3dpbnR1bWJlcicsXG4gICAgV0lUQ0g6ICd3aXRjaCcsXG4gICAgV0laQVJEOiAnd2l6YXJkJyxcbiAgICBXT1JLRVI6ICd3b3JrZXInLFxuICAgIFdSQVRIOiAnd3JhdGgnLFxuICAgIFhFUklDSUFOOiAneGVyaWNpYW4nLFxuICAgIFlFTExPVzogJ3llbGxvdycsXG4gICAgWUVXOiAneWV3JyxcbiAgICBaQU1PUkFLSUFOOiAnemFtb3Jha2lhbicsXG4gICAgWkFST1NJQU46ICd6YXJvc2lhbicsXG4gICAgWkVBTE9UOiAnemVhbG90JyxcbiAgICBaRU5ZVEU6ICd6ZW55dGUnXG59O1xuY29uc3QgQ291bnRyeSA9IHtcbiAgICBBRDogJ0FEJyxcbiAgICBBRTogJ0FFJyxcbiAgICBBRjogJ0FGJyxcbiAgICBBRzogJ0FHJyxcbiAgICBBSTogJ0FJJyxcbiAgICBBTDogJ0FMJyxcbiAgICBBTTogJ0FNJyxcbiAgICBBTzogJ0FPJyxcbiAgICBBUTogJ0FRJyxcbiAgICBBUjogJ0FSJyxcbiAgICBBUzogJ0FTJyxcbiAgICBBVDogJ0FUJyxcbiAgICBBVTogJ0FVJyxcbiAgICBBVzogJ0FXJyxcbiAgICBBWDogJ0FYJyxcbiAgICBBWjogJ0FaJyxcbiAgICBCQTogJ0JBJyxcbiAgICBCQjogJ0JCJyxcbiAgICBCRDogJ0JEJyxcbiAgICBCRTogJ0JFJyxcbiAgICBCRjogJ0JGJyxcbiAgICBCRzogJ0JHJyxcbiAgICBCSDogJ0JIJyxcbiAgICBCSTogJ0JJJyxcbiAgICBCSjogJ0JKJyxcbiAgICBCTDogJ0JMJyxcbiAgICBCTTogJ0JNJyxcbiAgICBCTjogJ0JOJyxcbiAgICBCTzogJ0JPJyxcbiAgICBCUTogJ0JRJyxcbiAgICBCUjogJ0JSJyxcbiAgICBCUzogJ0JTJyxcbiAgICBCVDogJ0JUJyxcbiAgICBCVjogJ0JWJyxcbiAgICBCVzogJ0JXJyxcbiAgICBCWTogJ0JZJyxcbiAgICBCWjogJ0JaJyxcbiAgICBDQTogJ0NBJyxcbiAgICBDQzogJ0NDJyxcbiAgICBDRDogJ0NEJyxcbiAgICBDRjogJ0NGJyxcbiAgICBDRzogJ0NHJyxcbiAgICBDSDogJ0NIJyxcbiAgICBDSTogJ0NJJyxcbiAgICBDSzogJ0NLJyxcbiAgICBDTDogJ0NMJyxcbiAgICBDTTogJ0NNJyxcbiAgICBDTjogJ0NOJyxcbiAgICBDTzogJ0NPJyxcbiAgICBDUjogJ0NSJyxcbiAgICBDVTogJ0NVJyxcbiAgICBDVjogJ0NWJyxcbiAgICBDVzogJ0NXJyxcbiAgICBDWDogJ0NYJyxcbiAgICBDWTogJ0NZJyxcbiAgICBDWjogJ0NaJyxcbiAgICBERTogJ0RFJyxcbiAgICBESjogJ0RKJyxcbiAgICBESzogJ0RLJyxcbiAgICBETTogJ0RNJyxcbiAgICBETzogJ0RPJyxcbiAgICBEWjogJ0RaJyxcbiAgICBFQzogJ0VDJyxcbiAgICBFRTogJ0VFJyxcbiAgICBFRzogJ0VHJyxcbiAgICBFSDogJ0VIJyxcbiAgICBFUjogJ0VSJyxcbiAgICBFUzogJ0VTJyxcbiAgICBFVDogJ0VUJyxcbiAgICBGSTogJ0ZJJyxcbiAgICBGSjogJ0ZKJyxcbiAgICBGSzogJ0ZLJyxcbiAgICBGTTogJ0ZNJyxcbiAgICBGTzogJ0ZPJyxcbiAgICBGUjogJ0ZSJyxcbiAgICBHQTogJ0dBJyxcbiAgICBHQjogJ0dCJyxcbiAgICBHQl9OSVI6ICdHQl9OSVInLFxuICAgIEdCX1NDVDogJ0dCX1NDVCcsXG4gICAgR0JfV0xTOiAnR0JfV0xTJyxcbiAgICBHRDogJ0dEJyxcbiAgICBHRTogJ0dFJyxcbiAgICBHRjogJ0dGJyxcbiAgICBHRzogJ0dHJyxcbiAgICBHSDogJ0dIJyxcbiAgICBHSTogJ0dJJyxcbiAgICBHTDogJ0dMJyxcbiAgICBHTTogJ0dNJyxcbiAgICBHTjogJ0dOJyxcbiAgICBHUDogJ0dQJyxcbiAgICBHUTogJ0dRJyxcbiAgICBHUjogJ0dSJyxcbiAgICBHUzogJ0dTJyxcbiAgICBHVDogJ0dUJyxcbiAgICBHVTogJ0dVJyxcbiAgICBHVzogJ0dXJyxcbiAgICBHWTogJ0dZJyxcbiAgICBISzogJ0hLJyxcbiAgICBITTogJ0hNJyxcbiAgICBITjogJ0hOJyxcbiAgICBIUjogJ0hSJyxcbiAgICBIVDogJ0hUJyxcbiAgICBIVTogJ0hVJyxcbiAgICBJRDogJ0lEJyxcbiAgICBJRTogJ0lFJyxcbiAgICBJTDogJ0lMJyxcbiAgICBJTTogJ0lNJyxcbiAgICBJTjogJ0lOJyxcbiAgICBJTzogJ0lPJyxcbiAgICBJUTogJ0lRJyxcbiAgICBJUjogJ0lSJyxcbiAgICBJUzogJ0lTJyxcbiAgICBJVDogJ0lUJyxcbiAgICBKRTogJ0pFJyxcbiAgICBKTTogJ0pNJyxcbiAgICBKTzogJ0pPJyxcbiAgICBKUDogJ0pQJyxcbiAgICBLRTogJ0tFJyxcbiAgICBLRzogJ0tHJyxcbiAgICBLSDogJ0tIJyxcbiAgICBLSTogJ0tJJyxcbiAgICBLTTogJ0tNJyxcbiAgICBLTjogJ0tOJyxcbiAgICBLUDogJ0tQJyxcbiAgICBLUjogJ0tSJyxcbiAgICBLVzogJ0tXJyxcbiAgICBLWTogJ0tZJyxcbiAgICBLWjogJ0taJyxcbiAgICBMQTogJ0xBJyxcbiAgICBMQjogJ0xCJyxcbiAgICBMQzogJ0xDJyxcbiAgICBMSTogJ0xJJyxcbiAgICBMSzogJ0xLJyxcbiAgICBMUjogJ0xSJyxcbiAgICBMUzogJ0xTJyxcbiAgICBMVDogJ0xUJyxcbiAgICBMVTogJ0xVJyxcbiAgICBMVjogJ0xWJyxcbiAgICBMWTogJ0xZJyxcbiAgICBNQTogJ01BJyxcbiAgICBNQzogJ01DJyxcbiAgICBNRDogJ01EJyxcbiAgICBNRTogJ01FJyxcbiAgICBNRjogJ01GJyxcbiAgICBNRzogJ01HJyxcbiAgICBNSDogJ01IJyxcbiAgICBNSzogJ01LJyxcbiAgICBNTDogJ01MJyxcbiAgICBNTTogJ01NJyxcbiAgICBNTjogJ01OJyxcbiAgICBNTzogJ01PJyxcbiAgICBNUDogJ01QJyxcbiAgICBNUTogJ01RJyxcbiAgICBNUjogJ01SJyxcbiAgICBNUzogJ01TJyxcbiAgICBNVDogJ01UJyxcbiAgICBNVTogJ01VJyxcbiAgICBNVjogJ01WJyxcbiAgICBNVzogJ01XJyxcbiAgICBNWDogJ01YJyxcbiAgICBNWTogJ01ZJyxcbiAgICBNWjogJ01aJyxcbiAgICBOQTogJ05BJyxcbiAgICBOQzogJ05DJyxcbiAgICBORTogJ05FJyxcbiAgICBORjogJ05GJyxcbiAgICBORzogJ05HJyxcbiAgICBOSTogJ05JJyxcbiAgICBOTDogJ05MJyxcbiAgICBOTzogJ05PJyxcbiAgICBOUDogJ05QJyxcbiAgICBOUjogJ05SJyxcbiAgICBOVTogJ05VJyxcbiAgICBOWjogJ05aJyxcbiAgICBPTTogJ09NJyxcbiAgICBQQTogJ1BBJyxcbiAgICBQRTogJ1BFJyxcbiAgICBQRjogJ1BGJyxcbiAgICBQRzogJ1BHJyxcbiAgICBQSDogJ1BIJyxcbiAgICBQSzogJ1BLJyxcbiAgICBQTDogJ1BMJyxcbiAgICBQTTogJ1BNJyxcbiAgICBQTjogJ1BOJyxcbiAgICBQUjogJ1BSJyxcbiAgICBQUzogJ1BTJyxcbiAgICBQVDogJ1BUJyxcbiAgICBQVzogJ1BXJyxcbiAgICBQWTogJ1BZJyxcbiAgICBRQTogJ1FBJyxcbiAgICBSRTogJ1JFJyxcbiAgICBSTzogJ1JPJyxcbiAgICBSUzogJ1JTJyxcbiAgICBSVTogJ1JVJyxcbiAgICBSVzogJ1JXJyxcbiAgICBTQTogJ1NBJyxcbiAgICBTQjogJ1NCJyxcbiAgICBTQzogJ1NDJyxcbiAgICBTRDogJ1NEJyxcbiAgICBTRTogJ1NFJyxcbiAgICBTRzogJ1NHJyxcbiAgICBTSDogJ1NIJyxcbiAgICBTSTogJ1NJJyxcbiAgICBTSjogJ1NKJyxcbiAgICBTSzogJ1NLJyxcbiAgICBTTDogJ1NMJyxcbiAgICBTTTogJ1NNJyxcbiAgICBTTjogJ1NOJyxcbiAgICBTTzogJ1NPJyxcbiAgICBTUjogJ1NSJyxcbiAgICBTUzogJ1NTJyxcbiAgICBTVDogJ1NUJyxcbiAgICBTVjogJ1NWJyxcbiAgICBTWDogJ1NYJyxcbiAgICBTWTogJ1NZJyxcbiAgICBTWjogJ1NaJyxcbiAgICBUQzogJ1RDJyxcbiAgICBURDogJ1REJyxcbiAgICBURjogJ1RGJyxcbiAgICBURzogJ1RHJyxcbiAgICBUSDogJ1RIJyxcbiAgICBUSjogJ1RKJyxcbiAgICBUSzogJ1RLJyxcbiAgICBUTDogJ1RMJyxcbiAgICBUTTogJ1RNJyxcbiAgICBUTjogJ1ROJyxcbiAgICBUTzogJ1RPJyxcbiAgICBUUjogJ1RSJyxcbiAgICBUVDogJ1RUJyxcbiAgICBUVjogJ1RWJyxcbiAgICBUVzogJ1RXJyxcbiAgICBUWjogJ1RaJyxcbiAgICBVQTogJ1VBJyxcbiAgICBVRzogJ1VHJyxcbiAgICBVTTogJ1VNJyxcbiAgICBVUzogJ1VTJyxcbiAgICBVWTogJ1VZJyxcbiAgICBVWjogJ1VaJyxcbiAgICBWQTogJ1ZBJyxcbiAgICBWQzogJ1ZDJyxcbiAgICBWRTogJ1ZFJyxcbiAgICBWRzogJ1ZHJyxcbiAgICBWSTogJ1ZJJyxcbiAgICBWTjogJ1ZOJyxcbiAgICBWVTogJ1ZVJyxcbiAgICBXRjogJ1dGJyxcbiAgICBXUzogJ1dTJyxcbiAgICBZRTogJ1lFJyxcbiAgICBZVDogJ1lUJyxcbiAgICBaQTogJ1pBJyxcbiAgICBaTTogJ1pNJyxcbiAgICBaVzogJ1pXJ1xufTtcbmNvbnN0IEFjdGl2aXR5VHlwZSA9IHtcbiAgICBKT0lORUQ6ICdqb2luZWQnLFxuICAgIExFRlQ6ICdsZWZ0JyxcbiAgICBDSEFOR0VEX1JPTEU6ICdjaGFuZ2VkX3JvbGUnXG59O1xuXG52YXIgQ29tcGV0aXRpb25TdGF0dXM7XG4oZnVuY3Rpb24gKENvbXBldGl0aW9uU3RhdHVzKSB7XG4gICAgQ29tcGV0aXRpb25TdGF0dXNbXCJVUENPTUlOR1wiXSA9IFwidXBjb21pbmdcIjtcbiAgICBDb21wZXRpdGlvblN0YXR1c1tcIk9OR09JTkdcIl0gPSBcIm9uZ29pbmdcIjtcbiAgICBDb21wZXRpdGlvblN0YXR1c1tcIkZJTklTSEVEXCJdID0gXCJmaW5pc2hlZFwiO1xufSkoQ29tcGV0aXRpb25TdGF0dXMgfHwgKENvbXBldGl0aW9uU3RhdHVzID0ge30pKTtcbnZhciBDb21wZXRpdGlvbkNTVlRhYmxlVHlwZTtcbihmdW5jdGlvbiAoQ29tcGV0aXRpb25DU1ZUYWJsZVR5cGUpIHtcbiAgICBDb21wZXRpdGlvbkNTVlRhYmxlVHlwZVtcIlRFQU1cIl0gPSBcInRlYW1cIjtcbiAgICBDb21wZXRpdGlvbkNTVlRhYmxlVHlwZVtcIlRFQU1TXCJdID0gXCJ0ZWFtc1wiO1xuICAgIENvbXBldGl0aW9uQ1NWVGFibGVUeXBlW1wiUEFSVElDSVBBTlRTXCJdID0gXCJwYXJ0aWNpcGFudHNcIjtcbn0pKENvbXBldGl0aW9uQ1NWVGFibGVUeXBlIHx8IChDb21wZXRpdGlvbkNTVlRhYmxlVHlwZSA9IHt9KSk7XG5jb25zdCBDb21wZXRpdGlvblR5cGVQcm9wcyA9IHtcbiAgICBbQ29tcGV0aXRpb25UeXBlLkNMQVNTSUNdOiB7IG5hbWU6ICdDbGFzc2ljJyB9LFxuICAgIFtDb21wZXRpdGlvblR5cGUuVEVBTV06IHsgbmFtZTogJ1RlYW0nIH1cbn07XG5jb25zdCBDb21wZXRpdGlvblN0YXR1c1Byb3BzID0ge1xuICAgIFtDb21wZXRpdGlvblN0YXR1cy5VUENPTUlOR106IHsgbmFtZTogJ1VwY29taW5nJyB9LFxuICAgIFtDb21wZXRpdGlvblN0YXR1cy5PTkdPSU5HXTogeyBuYW1lOiAnT25nb2luZycgfSxcbiAgICBbQ29tcGV0aXRpb25TdGF0dXMuRklOSVNIRURdOiB7IG5hbWU6ICdGaW5pc2hlZCcgfVxufTtcbmNvbnN0IENPTVBFVElUSU9OX1RZUEVTID0gT2JqZWN0LnZhbHVlcyhDb21wZXRpdGlvblR5cGUpO1xuY29uc3QgQ09NUEVUSVRJT05fU1RBVFVTRVMgPSBPYmplY3QudmFsdWVzKENvbXBldGl0aW9uU3RhdHVzKTtcbmZ1bmN0aW9uIGlzQ29tcGV0aXRpb25UeXBlKHR5cGVTdHJpbmcpIHtcbiAgICByZXR1cm4gdHlwZVN0cmluZyBpbiBDb21wZXRpdGlvblR5cGVQcm9wcztcbn1cbmZ1bmN0aW9uIGlzQ29tcGV0aXRpb25TdGF0dXMoc3RhdHVzU3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0YXR1c1N0cmluZyBpbiBDb21wZXRpdGlvblN0YXR1c1Byb3BzO1xufVxuXG5jb25zdCBDb3VudHJ5UHJvcHMgPSB7XG4gICAgW0NvdW50cnkuQURdOiB7IGNvZGU6ICdBRCcsIG5hbWU6ICdBbmRvcnJhJyB9LFxuICAgIFtDb3VudHJ5LkFFXTogeyBjb2RlOiAnQUUnLCBuYW1lOiAnVW5pdGVkIEFyYWIgRW1pcmF0ZXMnIH0sXG4gICAgW0NvdW50cnkuQUZdOiB7IGNvZGU6ICdBRicsIG5hbWU6ICdBZmdoYW5pc3RhbicgfSxcbiAgICBbQ291bnRyeS5BR106IHsgY29kZTogJ0FHJywgbmFtZTogJ0FudGlndWEgYW5kIEJhcmJ1ZGEnIH0sXG4gICAgW0NvdW50cnkuQUldOiB7IGNvZGU6ICdBSScsIG5hbWU6ICdBbmd1aWxsYScgfSxcbiAgICBbQ291bnRyeS5BTF06IHsgY29kZTogJ0FMJywgbmFtZTogJ0FsYmFuaWEnIH0sXG4gICAgW0NvdW50cnkuQU1dOiB7IGNvZGU6ICdBTScsIG5hbWU6ICdBcm1lbmlhJyB9LFxuICAgIFtDb3VudHJ5LkFPXTogeyBjb2RlOiAnQU8nLCBuYW1lOiAnQW5nb2xhJyB9LFxuICAgIFtDb3VudHJ5LkFRXTogeyBjb2RlOiAnQVEnLCBuYW1lOiAnQW50YXJjdGljYScgfSxcbiAgICBbQ291bnRyeS5BUl06IHsgY29kZTogJ0FSJywgbmFtZTogJ0FyZ2VudGluYScgfSxcbiAgICBbQ291bnRyeS5BU106IHsgY29kZTogJ0FTJywgbmFtZTogJ0FtZXJpY2FuIFNhbW9hJyB9LFxuICAgIFtDb3VudHJ5LkFUXTogeyBjb2RlOiAnQVQnLCBuYW1lOiAnQXVzdHJpYScgfSxcbiAgICBbQ291bnRyeS5BVV06IHsgY29kZTogJ0FVJywgbmFtZTogJ0F1c3RyYWxpYScgfSxcbiAgICBbQ291bnRyeS5BV106IHsgY29kZTogJ0FXJywgbmFtZTogJ0FydWJhJyB9LFxuICAgIFtDb3VudHJ5LkFYXTogeyBjb2RlOiAnQVgnLCBuYW1lOiAnw4VsYW5kIElzbGFuZHMnIH0sXG4gICAgW0NvdW50cnkuQVpdOiB7IGNvZGU6ICdBWicsIG5hbWU6ICdBemVyYmFpamFuJyB9LFxuICAgIFtDb3VudHJ5LkJBXTogeyBjb2RlOiAnQkEnLCBuYW1lOiAnQm9zbmlhIGFuZCBIZXJ6ZWdvdmluYScgfSxcbiAgICBbQ291bnRyeS5CQl06IHsgY29kZTogJ0JCJywgbmFtZTogJ0JhcmJhZG9zJyB9LFxuICAgIFtDb3VudHJ5LkJEXTogeyBjb2RlOiAnQkQnLCBuYW1lOiAnQmFuZ2xhZGVzaCcgfSxcbiAgICBbQ291bnRyeS5CRV06IHsgY29kZTogJ0JFJywgbmFtZTogJ0JlbGdpdW0nIH0sXG4gICAgW0NvdW50cnkuQkZdOiB7IGNvZGU6ICdCRicsIG5hbWU6ICdCdXJraW5hIEZhc28nIH0sXG4gICAgW0NvdW50cnkuQkddOiB7IGNvZGU6ICdCRycsIG5hbWU6ICdCdWxnYXJpYScgfSxcbiAgICBbQ291bnRyeS5CSF06IHsgY29kZTogJ0JIJywgbmFtZTogJ0JhaHJhaW4nIH0sXG4gICAgW0NvdW50cnkuQkldOiB7IGNvZGU6ICdCSScsIG5hbWU6ICdCdXJ1bmRpJyB9LFxuICAgIFtDb3VudHJ5LkJKXTogeyBjb2RlOiAnQkonLCBuYW1lOiAnQmVuaW4nIH0sXG4gICAgW0NvdW50cnkuQkxdOiB7IGNvZGU6ICdCTCcsIG5hbWU6ICdTYWludCBCYXJ0aMOpbGVteScgfSxcbiAgICBbQ291bnRyeS5CTV06IHsgY29kZTogJ0JNJywgbmFtZTogJ0Jlcm11ZGEnIH0sXG4gICAgW0NvdW50cnkuQk5dOiB7IGNvZGU6ICdCTicsIG5hbWU6ICdCcnVuZWkgRGFydXNzYWxhbScgfSxcbiAgICBbQ291bnRyeS5CT106IHsgY29kZTogJ0JPJywgbmFtZTogJ0JvbGl2aWEnIH0sXG4gICAgW0NvdW50cnkuQlFdOiB7IGNvZGU6ICdCUScsIG5hbWU6ICdCb25haXJlJyB9LFxuICAgIFtDb3VudHJ5LkJSXTogeyBjb2RlOiAnQlInLCBuYW1lOiAnQnJhemlsJyB9LFxuICAgIFtDb3VudHJ5LkJTXTogeyBjb2RlOiAnQlMnLCBuYW1lOiAnQmFoYW1hcycgfSxcbiAgICBbQ291bnRyeS5CVF06IHsgY29kZTogJ0JUJywgbmFtZTogJ0JodXRhbicgfSxcbiAgICBbQ291bnRyeS5CVl06IHsgY29kZTogJ0JWJywgbmFtZTogJ0JvdXZldCBJc2xhbmQnIH0sXG4gICAgW0NvdW50cnkuQlddOiB7IGNvZGU6ICdCVycsIG5hbWU6ICdCb3Rzd2FuYScgfSxcbiAgICBbQ291bnRyeS5CWV06IHsgY29kZTogJ0JZJywgbmFtZTogJ0JlbGFydXMnIH0sXG4gICAgW0NvdW50cnkuQlpdOiB7IGNvZGU6ICdCWicsIG5hbWU6ICdCZWxpemUnIH0sXG4gICAgW0NvdW50cnkuQ0FdOiB7IGNvZGU6ICdDQScsIG5hbWU6ICdDYW5hZGEnIH0sXG4gICAgW0NvdW50cnkuQ0NdOiB7IGNvZGU6ICdDQycsIG5hbWU6ICdDb2NvcyAoS2VlbGluZykgSXNsYW5kcycgfSxcbiAgICBbQ291bnRyeS5DRF06IHsgY29kZTogJ0NEJywgbmFtZTogJ0NvbmdvJyB9LFxuICAgIFtDb3VudHJ5LkNGXTogeyBjb2RlOiAnQ0YnLCBuYW1lOiAnQ2VudHJhbCBBZnJpY2FuIFJlcHVibGljJyB9LFxuICAgIFtDb3VudHJ5LkNHXTogeyBjb2RlOiAnQ0cnLCBuYW1lOiAnQ29uZ28nIH0sXG4gICAgW0NvdW50cnkuQ0hdOiB7IGNvZGU6ICdDSCcsIG5hbWU6ICdTd2l0emVybGFuZCcgfSxcbiAgICBbQ291bnRyeS5DSV06IHsgY29kZTogJ0NJJywgbmFtZTogXCJDw7R0ZSBkJ0l2b2lyZVwiIH0sXG4gICAgW0NvdW50cnkuQ0tdOiB7IGNvZGU6ICdDSycsIG5hbWU6ICdDb29rIElzbGFuZHMnIH0sXG4gICAgW0NvdW50cnkuQ0xdOiB7IGNvZGU6ICdDTCcsIG5hbWU6ICdDaGlsZScgfSxcbiAgICBbQ291bnRyeS5DTV06IHsgY29kZTogJ0NNJywgbmFtZTogJ0NhbWVyb29uJyB9LFxuICAgIFtDb3VudHJ5LkNOXTogeyBjb2RlOiAnQ04nLCBuYW1lOiAnQ2hpbmEnIH0sXG4gICAgW0NvdW50cnkuQ09dOiB7IGNvZGU6ICdDTycsIG5hbWU6ICdDb2xvbWJpYScgfSxcbiAgICBbQ291bnRyeS5DUl06IHsgY29kZTogJ0NSJywgbmFtZTogJ0Nvc3RhIFJpY2EnIH0sXG4gICAgW0NvdW50cnkuQ1VdOiB7IGNvZGU6ICdDVScsIG5hbWU6ICdDdWJhJyB9LFxuICAgIFtDb3VudHJ5LkNWXTogeyBjb2RlOiAnQ1YnLCBuYW1lOiAnQ2FibyBWZXJkZScgfSxcbiAgICBbQ291bnRyeS5DV106IHsgY29kZTogJ0NXJywgbmFtZTogJ0N1cmHDp2FvJyB9LFxuICAgIFtDb3VudHJ5LkNYXTogeyBjb2RlOiAnQ1gnLCBuYW1lOiAnQ2hyaXN0bWFzIElzbGFuZCcgfSxcbiAgICBbQ291bnRyeS5DWV06IHsgY29kZTogJ0NZJywgbmFtZTogJ0N5cHJ1cycgfSxcbiAgICBbQ291bnRyeS5DWl06IHsgY29kZTogJ0NaJywgbmFtZTogJ0N6ZWNoaWEnIH0sXG4gICAgW0NvdW50cnkuREVdOiB7IGNvZGU6ICdERScsIG5hbWU6ICdHZXJtYW55JyB9LFxuICAgIFtDb3VudHJ5LkRKXTogeyBjb2RlOiAnREonLCBuYW1lOiAnRGppYm91dGknIH0sXG4gICAgW0NvdW50cnkuREtdOiB7IGNvZGU6ICdESycsIG5hbWU6ICdEZW5tYXJrJyB9LFxuICAgIFtDb3VudHJ5LkRNXTogeyBjb2RlOiAnRE0nLCBuYW1lOiAnRG9taW5pY2EnIH0sXG4gICAgW0NvdW50cnkuRE9dOiB7IGNvZGU6ICdETycsIG5hbWU6ICdEb21pbmljYW4gUmVwdWJsaWMnIH0sXG4gICAgW0NvdW50cnkuRFpdOiB7IGNvZGU6ICdEWicsIG5hbWU6ICdBbGdlcmlhJyB9LFxuICAgIFtDb3VudHJ5LkVDXTogeyBjb2RlOiAnRUMnLCBuYW1lOiAnRWN1YWRvcicgfSxcbiAgICBbQ291bnRyeS5FRV06IHsgY29kZTogJ0VFJywgbmFtZTogJ0VzdG9uaWEnIH0sXG4gICAgW0NvdW50cnkuRUddOiB7IGNvZGU6ICdFRycsIG5hbWU6ICdFZ3lwdCcgfSxcbiAgICBbQ291bnRyeS5FSF06IHsgY29kZTogJ0VIJywgbmFtZTogJ1dlc3Rlcm4gU2FoYXJhJyB9LFxuICAgIFtDb3VudHJ5LkVSXTogeyBjb2RlOiAnRVInLCBuYW1lOiAnRXJpdHJlYScgfSxcbiAgICBbQ291bnRyeS5FU106IHsgY29kZTogJ0VTJywgbmFtZTogJ1NwYWluJyB9LFxuICAgIFtDb3VudHJ5LkVUXTogeyBjb2RlOiAnRVQnLCBuYW1lOiAnRXRoaW9waWEnIH0sXG4gICAgW0NvdW50cnkuRkldOiB7IGNvZGU6ICdGSScsIG5hbWU6ICdGaW5sYW5kJyB9LFxuICAgIFtDb3VudHJ5LkZKXTogeyBjb2RlOiAnRkonLCBuYW1lOiAnRmlqaScgfSxcbiAgICBbQ291bnRyeS5GS106IHsgY29kZTogJ0ZLJywgbmFtZTogJ0ZhbGtsYW5kIElzbGFuZHMgKE1hbHZpbmFzKScgfSxcbiAgICBbQ291bnRyeS5GTV06IHsgY29kZTogJ0ZNJywgbmFtZTogJ01pY3JvbmVzaWEgKEZlZGVyYXRlZCBTdGF0ZXMgb2YpJyB9LFxuICAgIFtDb3VudHJ5LkZPXTogeyBjb2RlOiAnRk8nLCBuYW1lOiAnRmFyb2UgSXNsYW5kcycgfSxcbiAgICBbQ291bnRyeS5GUl06IHsgY29kZTogJ0ZSJywgbmFtZTogJ0ZyYW5jZScgfSxcbiAgICBbQ291bnRyeS5HQV06IHsgY29kZTogJ0dBJywgbmFtZTogJ0dhYm9uJyB9LFxuICAgIFtDb3VudHJ5LkdCXTogeyBjb2RlOiAnR0InLCBuYW1lOiAnVW5pdGVkIEtpbmdkb20nIH0sXG4gICAgW0NvdW50cnkuR0JfTklSXTogeyBjb2RlOiAnR0JfTklSJywgbmFtZTogJ05vcnRoZW4gSXJlbGFuZCcgfSxcbiAgICBbQ291bnRyeS5HQl9TQ1RdOiB7IGNvZGU6ICdHQl9TQ1QnLCBuYW1lOiAnU2NvdGxhbmQnIH0sXG4gICAgW0NvdW50cnkuR0JfV0xTXTogeyBjb2RlOiAnR0JfV0xTJywgbmFtZTogJ1dhbGVzJyB9LFxuICAgIFtDb3VudHJ5LkdEXTogeyBjb2RlOiAnR0QnLCBuYW1lOiAnR3JlbmFkYScgfSxcbiAgICBbQ291bnRyeS5HRV06IHsgY29kZTogJ0dFJywgbmFtZTogJ0dlb3JnaWEnIH0sXG4gICAgW0NvdW50cnkuR0ZdOiB7IGNvZGU6ICdHRicsIG5hbWU6ICdGcmVuY2ggR3VpYW5hJyB9LFxuICAgIFtDb3VudHJ5LkdHXTogeyBjb2RlOiAnR0cnLCBuYW1lOiAnR3Vlcm5zZXknIH0sXG4gICAgW0NvdW50cnkuR0hdOiB7IGNvZGU6ICdHSCcsIG5hbWU6ICdHaGFuYScgfSxcbiAgICBbQ291bnRyeS5HSV06IHsgY29kZTogJ0dJJywgbmFtZTogJ0dpYnJhbHRhcicgfSxcbiAgICBbQ291bnRyeS5HTF06IHsgY29kZTogJ0dMJywgbmFtZTogJ0dyZWVubGFuZCcgfSxcbiAgICBbQ291bnRyeS5HTV06IHsgY29kZTogJ0dNJywgbmFtZTogJ0dhbWJpYScgfSxcbiAgICBbQ291bnRyeS5HTl06IHsgY29kZTogJ0dOJywgbmFtZTogJ0d1aW5lYScgfSxcbiAgICBbQ291bnRyeS5HUF06IHsgY29kZTogJ0dQJywgbmFtZTogJ0d1YWRlbG91cGUnIH0sXG4gICAgW0NvdW50cnkuR1FdOiB7IGNvZGU6ICdHUScsIG5hbWU6ICdFcXVhdG9yaWFsIEd1aW5lYScgfSxcbiAgICBbQ291bnRyeS5HUl06IHsgY29kZTogJ0dSJywgbmFtZTogJ0dyZWVjZScgfSxcbiAgICBbQ291bnRyeS5HU106IHsgY29kZTogJ0dTJywgbmFtZTogJ1NvdXRoIEdlb3JnaWEgYW5kIHRoZSBTb3V0aCBTYW5kd2ljaCBJc2xhbmRzJyB9LFxuICAgIFtDb3VudHJ5LkdUXTogeyBjb2RlOiAnR1QnLCBuYW1lOiAnR3VhdGVtYWxhJyB9LFxuICAgIFtDb3VudHJ5LkdVXTogeyBjb2RlOiAnR1UnLCBuYW1lOiAnR3VhbScgfSxcbiAgICBbQ291bnRyeS5HV106IHsgY29kZTogJ0dXJywgbmFtZTogJ0d1aW5lYS1CaXNzYXUnIH0sXG4gICAgW0NvdW50cnkuR1ldOiB7IGNvZGU6ICdHWScsIG5hbWU6ICdHdXlhbmEnIH0sXG4gICAgW0NvdW50cnkuSEtdOiB7IGNvZGU6ICdISycsIG5hbWU6ICdIb25nIEtvbmcnIH0sXG4gICAgW0NvdW50cnkuSE1dOiB7IGNvZGU6ICdITScsIG5hbWU6ICdIZWFyZCBJc2xhbmQgYW5kIE1jRG9uYWxkIElzbGFuZHMnIH0sXG4gICAgW0NvdW50cnkuSE5dOiB7IGNvZGU6ICdITicsIG5hbWU6ICdIb25kdXJhcycgfSxcbiAgICBbQ291bnRyeS5IUl06IHsgY29kZTogJ0hSJywgbmFtZTogJ0Nyb2F0aWEnIH0sXG4gICAgW0NvdW50cnkuSFRdOiB7IGNvZGU6ICdIVCcsIG5hbWU6ICdIYWl0aScgfSxcbiAgICBbQ291bnRyeS5IVV06IHsgY29kZTogJ0hVJywgbmFtZTogJ0h1bmdhcnknIH0sXG4gICAgW0NvdW50cnkuSURdOiB7IGNvZGU6ICdJRCcsIG5hbWU6ICdJbmRvbmVzaWEnIH0sXG4gICAgW0NvdW50cnkuSUVdOiB7IGNvZGU6ICdJRScsIG5hbWU6ICdJcmVsYW5kJyB9LFxuICAgIFtDb3VudHJ5LklMXTogeyBjb2RlOiAnSUwnLCBuYW1lOiAnSXNyYWVsJyB9LFxuICAgIFtDb3VudHJ5LklNXTogeyBjb2RlOiAnSU0nLCBuYW1lOiAnSXNsZSBvZiBNYW4nIH0sXG4gICAgW0NvdW50cnkuSU5dOiB7IGNvZGU6ICdJTicsIG5hbWU6ICdJbmRpYScgfSxcbiAgICBbQ291bnRyeS5JT106IHsgY29kZTogJ0lPJywgbmFtZTogJ0JyaXRpc2ggSW5kaWFuIE9jZWFuIFRlcnJpdG9yeScgfSxcbiAgICBbQ291bnRyeS5JUV06IHsgY29kZTogJ0lRJywgbmFtZTogJ0lyYXEnIH0sXG4gICAgW0NvdW50cnkuSVJdOiB7IGNvZGU6ICdJUicsIG5hbWU6ICdJcmFuIChJc2xhbWljIFJlcHVibGljIG9mKScgfSxcbiAgICBbQ291bnRyeS5JU106IHsgY29kZTogJ0lTJywgbmFtZTogJ0ljZWxhbmQnIH0sXG4gICAgW0NvdW50cnkuSVRdOiB7IGNvZGU6ICdJVCcsIG5hbWU6ICdJdGFseScgfSxcbiAgICBbQ291bnRyeS5KRV06IHsgY29kZTogJ0pFJywgbmFtZTogJ0plcnNleScgfSxcbiAgICBbQ291bnRyeS5KTV06IHsgY29kZTogJ0pNJywgbmFtZTogJ0phbWFpY2EnIH0sXG4gICAgW0NvdW50cnkuSk9dOiB7IGNvZGU6ICdKTycsIG5hbWU6ICdKb3JkYW4nIH0sXG4gICAgW0NvdW50cnkuSlBdOiB7IGNvZGU6ICdKUCcsIG5hbWU6ICdKYXBhbicgfSxcbiAgICBbQ291bnRyeS5LRV06IHsgY29kZTogJ0tFJywgbmFtZTogJ0tlbnlhJyB9LFxuICAgIFtDb3VudHJ5LktHXTogeyBjb2RlOiAnS0cnLCBuYW1lOiAnS3lyZ3l6c3RhbicgfSxcbiAgICBbQ291bnRyeS5LSF06IHsgY29kZTogJ0tIJywgbmFtZTogJ0NhbWJvZGlhJyB9LFxuICAgIFtDb3VudHJ5LktJXTogeyBjb2RlOiAnS0knLCBuYW1lOiAnS2lyaWJhdGknIH0sXG4gICAgW0NvdW50cnkuS01dOiB7IGNvZGU6ICdLTScsIG5hbWU6ICdDb21vcm9zJyB9LFxuICAgIFtDb3VudHJ5LktOXTogeyBjb2RlOiAnS04nLCBuYW1lOiAnU2FpbnQgS2l0dHMgYW5kIE5ldmlzJyB9LFxuICAgIFtDb3VudHJ5LktQXTogeyBjb2RlOiAnS1AnLCBuYW1lOiBcIktvcmVhIChEZW1vY3JhdGljIFBlb3BsZSdzIFJlcHVibGljIG9mKVwiIH0sXG4gICAgW0NvdW50cnkuS1JdOiB7IGNvZGU6ICdLUicsIG5hbWU6ICdLb3JlYScgfSxcbiAgICBbQ291bnRyeS5LV106IHsgY29kZTogJ0tXJywgbmFtZTogJ0t1d2FpdCcgfSxcbiAgICBbQ291bnRyeS5LWV06IHsgY29kZTogJ0tZJywgbmFtZTogJ0NheW1hbiBJc2xhbmRzJyB9LFxuICAgIFtDb3VudHJ5LktaXTogeyBjb2RlOiAnS1onLCBuYW1lOiAnS2F6YWtoc3RhbicgfSxcbiAgICBbQ291bnRyeS5MQV06IHsgY29kZTogJ0xBJywgbmFtZTogXCJMYW8gUGVvcGxlJ3MgRGVtb2NyYXRpYyBSZXB1YmxpY1wiIH0sXG4gICAgW0NvdW50cnkuTEJdOiB7IGNvZGU6ICdMQicsIG5hbWU6ICdMZWJhbm9uJyB9LFxuICAgIFtDb3VudHJ5LkxDXTogeyBjb2RlOiAnTEMnLCBuYW1lOiAnU2FpbnQgTHVjaWEnIH0sXG4gICAgW0NvdW50cnkuTEldOiB7IGNvZGU6ICdMSScsIG5hbWU6ICdMaWVjaHRlbnN0ZWluJyB9LFxuICAgIFtDb3VudHJ5LkxLXTogeyBjb2RlOiAnTEsnLCBuYW1lOiAnU3JpIExhbmthJyB9LFxuICAgIFtDb3VudHJ5LkxSXTogeyBjb2RlOiAnTFInLCBuYW1lOiAnTGliZXJpYScgfSxcbiAgICBbQ291bnRyeS5MU106IHsgY29kZTogJ0xTJywgbmFtZTogJ0xlc290aG8nIH0sXG4gICAgW0NvdW50cnkuTFRdOiB7IGNvZGU6ICdMVCcsIG5hbWU6ICdMaXRodWFuaWEnIH0sXG4gICAgW0NvdW50cnkuTFVdOiB7IGNvZGU6ICdMVScsIG5hbWU6ICdMdXhlbWJvdXJnJyB9LFxuICAgIFtDb3VudHJ5LkxWXTogeyBjb2RlOiAnTFYnLCBuYW1lOiAnTGF0dmlhJyB9LFxuICAgIFtDb3VudHJ5LkxZXTogeyBjb2RlOiAnTFknLCBuYW1lOiAnTGlieWEnIH0sXG4gICAgW0NvdW50cnkuTUFdOiB7IGNvZGU6ICdNQScsIG5hbWU6ICdNb3JvY2NvJyB9LFxuICAgIFtDb3VudHJ5Lk1DXTogeyBjb2RlOiAnTUMnLCBuYW1lOiAnTW9uYWNvJyB9LFxuICAgIFtDb3VudHJ5Lk1EXTogeyBjb2RlOiAnTUQnLCBuYW1lOiAnTW9sZG92YScgfSxcbiAgICBbQ291bnRyeS5NRV06IHsgY29kZTogJ01FJywgbmFtZTogJ01vbnRlbmVncm8nIH0sXG4gICAgW0NvdW50cnkuTUZdOiB7IGNvZGU6ICdNRicsIG5hbWU6ICdTYWludCBNYXJ0aW4gKEZyZW5jaCBwYXJ0KScgfSxcbiAgICBbQ291bnRyeS5NR106IHsgY29kZTogJ01HJywgbmFtZTogJ01hZGFnYXNjYXInIH0sXG4gICAgW0NvdW50cnkuTUhdOiB7IGNvZGU6ICdNSCcsIG5hbWU6ICdNYXJzaGFsbCBJc2xhbmRzJyB9LFxuICAgIFtDb3VudHJ5Lk1LXTogeyBjb2RlOiAnTUsnLCBuYW1lOiAnTm9ydGggTWFjZWRvbmlhJyB9LFxuICAgIFtDb3VudHJ5Lk1MXTogeyBjb2RlOiAnTUwnLCBuYW1lOiAnTWFsaScgfSxcbiAgICBbQ291bnRyeS5NTV06IHsgY29kZTogJ01NJywgbmFtZTogJ015YW5tYXInIH0sXG4gICAgW0NvdW50cnkuTU5dOiB7IGNvZGU6ICdNTicsIG5hbWU6ICdNb25nb2xpYScgfSxcbiAgICBbQ291bnRyeS5NT106IHsgY29kZTogJ01PJywgbmFtZTogJ01hY2FvJyB9LFxuICAgIFtDb3VudHJ5Lk1QXTogeyBjb2RlOiAnTVAnLCBuYW1lOiAnTm9ydGhlcm4gTWFyaWFuYSBJc2xhbmRzJyB9LFxuICAgIFtDb3VudHJ5Lk1RXTogeyBjb2RlOiAnTVEnLCBuYW1lOiAnTWFydGluaXF1ZScgfSxcbiAgICBbQ291bnRyeS5NUl06IHsgY29kZTogJ01SJywgbmFtZTogJ01hdXJpdGFuaWEnIH0sXG4gICAgW0NvdW50cnkuTVNdOiB7IGNvZGU6ICdNUycsIG5hbWU6ICdNb250c2VycmF0JyB9LFxuICAgIFtDb3VudHJ5Lk1UXTogeyBjb2RlOiAnTVQnLCBuYW1lOiAnTWFsdGEnIH0sXG4gICAgW0NvdW50cnkuTVVdOiB7IGNvZGU6ICdNVScsIG5hbWU6ICdNYXVyaXRpdXMnIH0sXG4gICAgW0NvdW50cnkuTVZdOiB7IGNvZGU6ICdNVicsIG5hbWU6ICdNYWxkaXZlcycgfSxcbiAgICBbQ291bnRyeS5NV106IHsgY29kZTogJ01XJywgbmFtZTogJ01hbGF3aScgfSxcbiAgICBbQ291bnRyeS5NWF06IHsgY29kZTogJ01YJywgbmFtZTogJ01leGljbycgfSxcbiAgICBbQ291bnRyeS5NWV06IHsgY29kZTogJ01ZJywgbmFtZTogJ01hbGF5c2lhJyB9LFxuICAgIFtDb3VudHJ5Lk1aXTogeyBjb2RlOiAnTVonLCBuYW1lOiAnTW96YW1iaXF1ZScgfSxcbiAgICBbQ291bnRyeS5OQV06IHsgY29kZTogJ05BJywgbmFtZTogJ05hbWliaWEnIH0sXG4gICAgW0NvdW50cnkuTkNdOiB7IGNvZGU6ICdOQycsIG5hbWU6ICdOZXcgQ2FsZWRvbmlhJyB9LFxuICAgIFtDb3VudHJ5Lk5FXTogeyBjb2RlOiAnTkUnLCBuYW1lOiAnTmlnZXInIH0sXG4gICAgW0NvdW50cnkuTkZdOiB7IGNvZGU6ICdORicsIG5hbWU6ICdOb3Jmb2xrIElzbGFuZCcgfSxcbiAgICBbQ291bnRyeS5OR106IHsgY29kZTogJ05HJywgbmFtZTogJ05pZ2VyaWEnIH0sXG4gICAgW0NvdW50cnkuTkldOiB7IGNvZGU6ICdOSScsIG5hbWU6ICdOaWNhcmFndWEnIH0sXG4gICAgW0NvdW50cnkuTkxdOiB7IGNvZGU6ICdOTCcsIG5hbWU6ICdOZXRoZXJsYW5kcycgfSxcbiAgICBbQ291bnRyeS5OT106IHsgY29kZTogJ05PJywgbmFtZTogJ05vcndheScgfSxcbiAgICBbQ291bnRyeS5OUF06IHsgY29kZTogJ05QJywgbmFtZTogJ05lcGFsJyB9LFxuICAgIFtDb3VudHJ5Lk5SXTogeyBjb2RlOiAnTlInLCBuYW1lOiAnTmF1cnUnIH0sXG4gICAgW0NvdW50cnkuTlVdOiB7IGNvZGU6ICdOVScsIG5hbWU6ICdOaXVlJyB9LFxuICAgIFtDb3VudHJ5Lk5aXTogeyBjb2RlOiAnTlonLCBuYW1lOiAnTmV3IFplYWxhbmQnIH0sXG4gICAgW0NvdW50cnkuT01dOiB7IGNvZGU6ICdPTScsIG5hbWU6ICdPbWFuJyB9LFxuICAgIFtDb3VudHJ5LlBBXTogeyBjb2RlOiAnUEEnLCBuYW1lOiAnUGFuYW1hJyB9LFxuICAgIFtDb3VudHJ5LlBFXTogeyBjb2RlOiAnUEUnLCBuYW1lOiAnUGVydScgfSxcbiAgICBbQ291bnRyeS5QRl06IHsgY29kZTogJ1BGJywgbmFtZTogJ0ZyZW5jaCBQb2x5bmVzaWEnIH0sXG4gICAgW0NvdW50cnkuUEddOiB7IGNvZGU6ICdQRycsIG5hbWU6ICdQYXB1YSBOZXcgR3VpbmVhJyB9LFxuICAgIFtDb3VudHJ5LlBIXTogeyBjb2RlOiAnUEgnLCBuYW1lOiAnUGhpbGlwcGluZXMnIH0sXG4gICAgW0NvdW50cnkuUEtdOiB7IGNvZGU6ICdQSycsIG5hbWU6ICdQYWtpc3RhbicgfSxcbiAgICBbQ291bnRyeS5QTF06IHsgY29kZTogJ1BMJywgbmFtZTogJ1BvbGFuZCcgfSxcbiAgICBbQ291bnRyeS5QTV06IHsgY29kZTogJ1BNJywgbmFtZTogJ1NhaW50IFBpZXJyZSBhbmQgTWlxdWVsb24nIH0sXG4gICAgW0NvdW50cnkuUE5dOiB7IGNvZGU6ICdQTicsIG5hbWU6ICdQaXRjYWlybicgfSxcbiAgICBbQ291bnRyeS5QUl06IHsgY29kZTogJ1BSJywgbmFtZTogJ1B1ZXJ0byBSaWNvJyB9LFxuICAgIFtDb3VudHJ5LlBTXTogeyBjb2RlOiAnUFMnLCBuYW1lOiAnUGFsZXN0aW5lJyB9LFxuICAgIFtDb3VudHJ5LlBUXTogeyBjb2RlOiAnUFQnLCBuYW1lOiAnUG9ydHVnYWwnIH0sXG4gICAgW0NvdW50cnkuUFddOiB7IGNvZGU6ICdQVycsIG5hbWU6ICdQYWxhdScgfSxcbiAgICBbQ291bnRyeS5QWV06IHsgY29kZTogJ1BZJywgbmFtZTogJ1BhcmFndWF5JyB9LFxuICAgIFtDb3VudHJ5LlFBXTogeyBjb2RlOiAnUUEnLCBuYW1lOiAnUWF0YXInIH0sXG4gICAgW0NvdW50cnkuUkVdOiB7IGNvZGU6ICdSRScsIG5hbWU6ICdSw6l1bmlvbicgfSxcbiAgICBbQ291bnRyeS5ST106IHsgY29kZTogJ1JPJywgbmFtZTogJ1JvbWFuaWEnIH0sXG4gICAgW0NvdW50cnkuUlNdOiB7IGNvZGU6ICdSUycsIG5hbWU6ICdTZXJiaWEnIH0sXG4gICAgW0NvdW50cnkuUlVdOiB7IGNvZGU6ICdSVScsIG5hbWU6ICdSdXNzaWFuIEZlZGVyYXRpb24nIH0sXG4gICAgW0NvdW50cnkuUlddOiB7IGNvZGU6ICdSVycsIG5hbWU6ICdSd2FuZGEnIH0sXG4gICAgW0NvdW50cnkuU0FdOiB7IGNvZGU6ICdTQScsIG5hbWU6ICdTYXVkaSBBcmFiaWEnIH0sXG4gICAgW0NvdW50cnkuU0JdOiB7IGNvZGU6ICdTQicsIG5hbWU6ICdTb2xvbW9uIElzbGFuZHMnIH0sXG4gICAgW0NvdW50cnkuU0NdOiB7IGNvZGU6ICdTQycsIG5hbWU6ICdTZXljaGVsbGVzJyB9LFxuICAgIFtDb3VudHJ5LlNEXTogeyBjb2RlOiAnU0QnLCBuYW1lOiAnU3VkYW4nIH0sXG4gICAgW0NvdW50cnkuU0VdOiB7IGNvZGU6ICdTRScsIG5hbWU6ICdTd2VkZW4nIH0sXG4gICAgW0NvdW50cnkuU0ddOiB7IGNvZGU6ICdTRycsIG5hbWU6ICdTaW5nYXBvcmUnIH0sXG4gICAgW0NvdW50cnkuU0hdOiB7IGNvZGU6ICdTSCcsIG5hbWU6ICdTYWludCBIZWxlbmEnIH0sXG4gICAgW0NvdW50cnkuU0ldOiB7IGNvZGU6ICdTSScsIG5hbWU6ICdTbG92ZW5pYScgfSxcbiAgICBbQ291bnRyeS5TSl06IHsgY29kZTogJ1NKJywgbmFtZTogJ1N2YWxiYXJkIGFuZCBKYW4gTWF5ZW4nIH0sXG4gICAgW0NvdW50cnkuU0tdOiB7IGNvZGU6ICdTSycsIG5hbWU6ICdTbG92YWtpYScgfSxcbiAgICBbQ291bnRyeS5TTF06IHsgY29kZTogJ1NMJywgbmFtZTogJ1NpZXJyYSBMZW9uZScgfSxcbiAgICBbQ291bnRyeS5TTV06IHsgY29kZTogJ1NNJywgbmFtZTogJ1NhbiBNYXJpbm8nIH0sXG4gICAgW0NvdW50cnkuU05dOiB7IGNvZGU6ICdTTicsIG5hbWU6ICdTZW5lZ2FsJyB9LFxuICAgIFtDb3VudHJ5LlNPXTogeyBjb2RlOiAnU08nLCBuYW1lOiAnU29tYWxpYScgfSxcbiAgICBbQ291bnRyeS5TUl06IHsgY29kZTogJ1NSJywgbmFtZTogJ1N1cmluYW1lJyB9LFxuICAgIFtDb3VudHJ5LlNTXTogeyBjb2RlOiAnU1MnLCBuYW1lOiAnU291dGggU3VkYW4nIH0sXG4gICAgW0NvdW50cnkuU1RdOiB7IGNvZGU6ICdTVCcsIG5hbWU6ICdTYW8gVG9tZSBhbmQgUHJpbmNpcGUnIH0sXG4gICAgW0NvdW50cnkuU1ZdOiB7IGNvZGU6ICdTVicsIG5hbWU6ICdFbCBTYWx2YWRvcicgfSxcbiAgICBbQ291bnRyeS5TWF06IHsgY29kZTogJ1NYJywgbmFtZTogJ1NpbnQgTWFhcnRlbiAoRHV0Y2ggcGFydCknIH0sXG4gICAgW0NvdW50cnkuU1ldOiB7IGNvZGU6ICdTWScsIG5hbWU6ICdTeXJpYW4gQXJhYiBSZXB1YmxpYycgfSxcbiAgICBbQ291bnRyeS5TWl06IHsgY29kZTogJ1NaJywgbmFtZTogJ0Vzd2F0aW5pJyB9LFxuICAgIFtDb3VudHJ5LlRDXTogeyBjb2RlOiAnVEMnLCBuYW1lOiAnVHVya3MgYW5kIENhaWNvcyBJc2xhbmRzJyB9LFxuICAgIFtDb3VudHJ5LlREXTogeyBjb2RlOiAnVEQnLCBuYW1lOiAnQ2hhZCcgfSxcbiAgICBbQ291bnRyeS5URl06IHsgY29kZTogJ1RGJywgbmFtZTogJ0ZyZW5jaCBTb3V0aGVybiBUZXJyaXRvcmllcycgfSxcbiAgICBbQ291bnRyeS5UR106IHsgY29kZTogJ1RHJywgbmFtZTogJ1RvZ28nIH0sXG4gICAgW0NvdW50cnkuVEhdOiB7IGNvZGU6ICdUSCcsIG5hbWU6ICdUaGFpbGFuZCcgfSxcbiAgICBbQ291bnRyeS5USl06IHsgY29kZTogJ1RKJywgbmFtZTogJ1RhamlraXN0YW4nIH0sXG4gICAgW0NvdW50cnkuVEtdOiB7IGNvZGU6ICdUSycsIG5hbWU6ICdUb2tlbGF1JyB9LFxuICAgIFtDb3VudHJ5LlRMXTogeyBjb2RlOiAnVEwnLCBuYW1lOiAnVGltb3ItTGVzdGUnIH0sXG4gICAgW0NvdW50cnkuVE1dOiB7IGNvZGU6ICdUTScsIG5hbWU6ICdUdXJrbWVuaXN0YW4nIH0sXG4gICAgW0NvdW50cnkuVE5dOiB7IGNvZGU6ICdUTicsIG5hbWU6ICdUdW5pc2lhJyB9LFxuICAgIFtDb3VudHJ5LlRPXTogeyBjb2RlOiAnVE8nLCBuYW1lOiAnVG9uZ2EnIH0sXG4gICAgW0NvdW50cnkuVFJdOiB7IGNvZGU6ICdUUicsIG5hbWU6ICdUdXJrZXknIH0sXG4gICAgW0NvdW50cnkuVFRdOiB7IGNvZGU6ICdUVCcsIG5hbWU6ICdUcmluaWRhZCBhbmQgVG9iYWdvJyB9LFxuICAgIFtDb3VudHJ5LlRWXTogeyBjb2RlOiAnVFYnLCBuYW1lOiAnVHV2YWx1JyB9LFxuICAgIFtDb3VudHJ5LlRXXTogeyBjb2RlOiAnVFcnLCBuYW1lOiAnVGFpd2FuJyB9LFxuICAgIFtDb3VudHJ5LlRaXTogeyBjb2RlOiAnVFonLCBuYW1lOiAnVGFuemFuaWEnIH0sXG4gICAgW0NvdW50cnkuVUFdOiB7IGNvZGU6ICdVQScsIG5hbWU6ICdVa3JhaW5lJyB9LFxuICAgIFtDb3VudHJ5LlVHXTogeyBjb2RlOiAnVUcnLCBuYW1lOiAnVWdhbmRhJyB9LFxuICAgIFtDb3VudHJ5LlVNXTogeyBjb2RlOiAnVU0nLCBuYW1lOiAnVW5pdGVkIFN0YXRlcyBNaW5vciBPdXRseWluZyBJc2xhbmRzJyB9LFxuICAgIFtDb3VudHJ5LlVTXTogeyBjb2RlOiAnVVMnLCBuYW1lOiAnVW5pdGVkIFN0YXRlcyBvZiBBbWVyaWNhJyB9LFxuICAgIFtDb3VudHJ5LlVZXTogeyBjb2RlOiAnVVknLCBuYW1lOiAnVXJ1Z3VheScgfSxcbiAgICBbQ291bnRyeS5VWl06IHsgY29kZTogJ1VaJywgbmFtZTogJ1V6YmVraXN0YW4nIH0sXG4gICAgW0NvdW50cnkuVkFdOiB7IGNvZGU6ICdWQScsIG5hbWU6ICdIb2x5IFNlZScgfSxcbiAgICBbQ291bnRyeS5WQ106IHsgY29kZTogJ1ZDJywgbmFtZTogJ1NhaW50IFZpbmNlbnQgYW5kIHRoZSBHcmVuYWRpbmVzJyB9LFxuICAgIFtDb3VudHJ5LlZFXTogeyBjb2RlOiAnVkUnLCBuYW1lOiAnVmVuZXp1ZWxhIChCb2xpdmFyaWFuIFJlcHVibGljIG9mKScgfSxcbiAgICBbQ291bnRyeS5WR106IHsgY29kZTogJ1ZHJywgbmFtZTogJ1ZpcmdpbiBJc2xhbmRzIChCcml0aXNoKScgfSxcbiAgICBbQ291bnRyeS5WSV06IHsgY29kZTogJ1ZJJywgbmFtZTogJ1ZpcmdpbiBJc2xhbmRzIChVLlMuKScgfSxcbiAgICBbQ291bnRyeS5WTl06IHsgY29kZTogJ1ZOJywgbmFtZTogJ1ZpZXQgTmFtJyB9LFxuICAgIFtDb3VudHJ5LlZVXTogeyBjb2RlOiAnVlUnLCBuYW1lOiAnVmFudWF0dScgfSxcbiAgICBbQ291bnRyeS5XRl06IHsgY29kZTogJ1dGJywgbmFtZTogJ1dhbGxpcyBhbmQgRnV0dW5hJyB9LFxuICAgIFtDb3VudHJ5LldTXTogeyBjb2RlOiAnV1MnLCBuYW1lOiAnU2Ftb2EnIH0sXG4gICAgW0NvdW50cnkuWUVdOiB7IGNvZGU6ICdZRScsIG5hbWU6ICdZZW1lbicgfSxcbiAgICBbQ291bnRyeS5ZVF06IHsgY29kZTogJ1lUJywgbmFtZTogJ01heW90dGUnIH0sXG4gICAgW0NvdW50cnkuWkFdOiB7IGNvZGU6ICdaQScsIG5hbWU6ICdTb3V0aCBBZnJpY2EnIH0sXG4gICAgW0NvdW50cnkuWk1dOiB7IGNvZGU6ICdaTScsIG5hbWU6ICdaYW1iaWEnIH0sXG4gICAgW0NvdW50cnkuWlddOiB7IGNvZGU6ICdaVycsIG5hbWU6ICdaaW1iYWJ3ZScgfVxufTtcbmNvbnN0IENPVU5UUllfQ09ERVMgPSBPYmplY3QudmFsdWVzKENvdW50cnkpO1xuY29uc3QgQ09NTU9OX0FMSUFTRVMgPSBbXG4gICAgeyBjb21tb25JZGVudGlmaWVyOiAnVUsnLCB0cnVlSWRlbnRpZmllcjogJ0dCJyB9LFxuICAgIHsgY29tbW9uSWRlbnRpZmllcjogJ1VTQScsIHRydWVJZGVudGlmaWVyOiAnVVMnIH1cbl07XG5mdW5jdGlvbiBpc0NvdW50cnkoY291bnRyeUNvZGVTdHJpbmcpIHtcbiAgICByZXR1cm4gY291bnRyeUNvZGVTdHJpbmcgaW4gQ291bnRyeVByb3BzO1xufVxuZnVuY3Rpb24gZmluZENvdW50cnkoY291bnRyeUlkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gZmluZENvdW50cnlCeUNvZGUoY291bnRyeUlkZW50aWZpZXIpIHx8IGZpbmRDb3VudHJ5QnlOYW1lKGNvdW50cnlJZGVudGlmaWVyKTtcbn1cbmZ1bmN0aW9uIGZpbmRDb3VudHJ5QnlOYW1lKGNvdW50cnlOYW1lKSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoQ291bnRyeVByb3BzKS5maW5kKGMgPT4gYy5uYW1lLnRvVXBwZXJDYXNlKCkgPT09IGNvdW50cnlOYW1lLnRvVXBwZXJDYXNlKCkpO1xufVxuZnVuY3Rpb24gZmluZENvdW50cnlCeUNvZGUoY291bnRyeUNvZGUpIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhDb3VudHJ5UHJvcHMpLmZpbmQoYyA9PiBjLmNvZGUgPT09IHJlcGxhY2VDb21tb25BbGlhc2VzKGNvdW50cnlDb2RlLnRvVXBwZXJDYXNlKCkpKTtcbn1cbmZ1bmN0aW9uIHJlcGxhY2VDb21tb25BbGlhc2VzKGNvdW50cnlDb2RlKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICghY291bnRyeUNvZGUpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiAoKF9hID0gQ09NTU9OX0FMSUFTRVMuZmluZChjYSA9PiBjYS5jb21tb25JZGVudGlmaWVyID09PSBjb3VudHJ5Q29kZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50cnVlSWRlbnRpZmllcikgfHwgY291bnRyeUNvZGU7XG59XG5cbi8vIE1heGltdW0gZWZmZWN0aXZlIHNraWxsIGxldmVsIGF0IDEzLDAzNCw0MzEgZXhwZXJpZW5jZS5cbmNvbnN0IE1BWF9MRVZFTCA9IDk5O1xuLy8gVGhlIG1heGltdW0gdmlydHVhbCBza2lsbCBsZXZlbCBmb3IgYW55IHNraWxsICgyMDBNIGV4cGVyaWVuY2UpLlxuY29uc3QgTUFYX1ZJUlRVQUxfTEVWRUwgPSAxMjY7XG4vLyBUaGUgbWF4aW11bSBza2lsbCBleHBlcmllbmNlICgyMDBNIGV4cGVyaWVuY2UpLlxuY29uc3QgTUFYX1NLSUxMX0VYUCA9IDIwMDAwMDAwMDtcbi8vIFRoZSBtaW5pbXVtIHNraWxsIGV4cCBmb3IgbGV2ZWwgOTlcbmNvbnN0IFNLSUxMX0VYUF9BVF85OSA9IDEzMDM0NDMxO1xuLy8gVGhlIG1heGltdW0gc2tpbGwgYXQgZXhhY3RseSA5OSBvbiBhbGwgc2tpbGxzXG5jb25zdCBDQVBQRURfTUFYX1RPVEFMX1hQID0gMjMgKiBTS0lMTF9FWFBfQVRfOTk7XG4vLyBCdWlsZHMgYSBsb29rdXAgdGFibGUgZm9yIGVhY2ggbGV2ZWwncyByZXF1aXJlZCBleHBlcmllbmNlXG4vLyBleHAgPSBYUF9GT1JfTEVWRUxbbGV2ZWwgLSAxXSB8fCAxM20gPSBYUF9GT1JfTEVWRUxbOThdXG5jb25zdCBYUF9GT1JfTEVWRUwgPSAoZnVuY3Rpb24gKCkge1xuICAgIGxldCB4cCA9IDA7XG4gICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBsZXZlbCA9IDE7IGxldmVsIDw9IE1BWF9WSVJUVUFMX0xFVkVMOyArK2xldmVsKSB7XG4gICAgICAgIGFycmF5W2xldmVsIC0gMV0gPSBNYXRoLmZsb29yKHhwIC8gNCk7XG4gICAgICAgIHhwICs9IE1hdGguZmxvb3IobGV2ZWwgKyAzMDAgKiBNYXRoLnBvdygyLCBsZXZlbCAvIDcpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufSkoKTtcbmZ1bmN0aW9uIGdldEV4cEZvckxldmVsKGxldmVsKSB7XG4gICAgaWYgKGxldmVsIDwgMSB8fCBsZXZlbCA+IE1BWF9WSVJUVUFMX0xFVkVMKVxuICAgICAgICByZXR1cm4gMDtcbiAgICByZXR1cm4gWFBfRk9SX0xFVkVMW2xldmVsIC0gMV07XG59XG5mdW5jdGlvbiBnZXRMZXZlbChleHAsIHZpcnR1YWwgPSBmYWxzZSkge1xuICAgIGlmICghZXhwIHx8IGV4cCA8IDApIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGxldCBsb3cgPSAwO1xuICAgIGxldCBoaWdoID0gdmlydHVhbCA/IFhQX0ZPUl9MRVZFTC5sZW5ndGggLSAxIDogOTg7XG4gICAgd2hpbGUgKGxvdyA8PSBoaWdoKSB7XG4gICAgICAgIGNvbnN0IG1pZCA9IE1hdGguZmxvb3IobG93ICsgKGhpZ2ggLSBsb3cpIC8gMik7XG4gICAgICAgIGNvbnN0IHhwRm9yTGV2ZWwgPSBYUF9GT1JfTEVWRUxbbWlkXTtcbiAgICAgICAgaWYgKGV4cCA8IHhwRm9yTGV2ZWwpIHtcbiAgICAgICAgICAgIGhpZ2ggPSBtaWQgLSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV4cCA+IHhwRm9yTGV2ZWwpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbWlkICsgMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGlnaCArIDE7XG59XG5mdW5jdGlvbiBnZXRDb21iYXRMZXZlbChhdHRhY2ssIHN0cmVuZ3RoLCBkZWZlbmNlLCByYW5nZWQsIG1hZ2ljLCBoaXRwb2ludHMsIHByYXllcikge1xuICAgIGlmIChbYXR0YWNrLCBzdHJlbmd0aCwgZGVmZW5jZSwgcmFuZ2VkLCBtYWdpYywgaGl0cG9pbnRzLCBwcmF5ZXJdLnNvbWUobCA9PiBsID09PSAwKSlcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgY29uc3QgYmFzZUNvbWJhdCA9IDAuMjUgKiAoZGVmZW5jZSArIE1hdGgubWF4KGhpdHBvaW50cywgMTApICsgTWF0aC5mbG9vcihwcmF5ZXIgLyAyKSk7XG4gICAgY29uc3QgbWVsZWVDb21iYXQgPSAwLjMyNSAqIChhdHRhY2sgKyBzdHJlbmd0aCk7XG4gICAgY29uc3QgcmFuZ2VDb21iYXQgPSAwLjMyNSAqIE1hdGguZmxvb3IoKDMgKiByYW5nZWQpIC8gMik7XG4gICAgY29uc3QgbWFnZUNvbWJhdCA9IDAuMzI1ICogTWF0aC5mbG9vcigoMyAqIG1hZ2ljKSAvIDIpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKGJhc2VDb21iYXQgKyBNYXRoLm1heChtZWxlZUNvbWJhdCwgcmFuZ2VDb21iYXQsIG1hZ2VDb21iYXQpKTtcbn1cblxuZnVuY3Rpb24gbWFwVmFsdWVzKG9iaiwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBjbG9uZSA9IHt9O1xuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChrID0+IHtcbiAgICAgICAgY29uc3Qga2V5ID0gaztcbiAgICAgICAgY2xvbmVba2V5XSA9IGNhbGxiYWNrKG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNsb25lO1xufVxuXG5jb25zdCBHUk9VUF9ST0xFUyA9IE9iamVjdC52YWx1ZXMoR3JvdXBSb2xlKTtcbmNvbnN0IFBSSVZFTEVHRURfR1JPVVBfUk9MRVMgPSBbXG4gICAgR3JvdXBSb2xlLkFETUlOSVNUUkFUT1IsXG4gICAgR3JvdXBSb2xlLk9XTkVSLFxuICAgIEdyb3VwUm9sZS5MRUFERVIsXG4gICAgR3JvdXBSb2xlLkRFUFVUWV9PV05FUixcbiAgICBHcm91cFJvbGUuTU9ERVJBVE9SXG5dO1xuY29uc3QgR3JvdXBSb2xlUHJvcHMgPSBtYXBWYWx1ZXMoe1xuICAgIFtHcm91cFJvbGUuQUNISUVWRVJdOiB7IG5hbWU6ICdBY2hpZXZlcicgfSxcbiAgICBbR3JvdXBSb2xlLkFEQU1BTlRdOiB7IG5hbWU6ICdBZGFtYW50JyB9LFxuICAgIFtHcm91cFJvbGUuQURFUFRdOiB7IG5hbWU6ICdBZGVwdCcgfSxcbiAgICBbR3JvdXBSb2xlLkFETUlOSVNUUkFUT1JdOiB7IG5hbWU6ICdBZG1pbmlzdHJhdG9yJyB9LFxuICAgIFtHcm91cFJvbGUuQURNSVJBTF06IHsgbmFtZTogJ0FkbWlyYWwnIH0sXG4gICAgW0dyb3VwUm9sZS5BRFZFTlRVUkVSXTogeyBuYW1lOiAnQWR2ZW50dXJlcicgfSxcbiAgICBbR3JvdXBSb2xlLkFJUl06IHsgbmFtZTogJ0FpcicgfSxcbiAgICBbR3JvdXBSb2xlLkFOQ0hPUl06IHsgbmFtZTogJ0FuY2hvcicgfSxcbiAgICBbR3JvdXBSb2xlLkFQT1RIRUNBUlldOiB7IG5hbWU6ICdBcG90aGVjYXJ5JyB9LFxuICAgIFtHcm91cFJvbGUuQVJDSEVSXTogeyBuYW1lOiAnQXJjaGVyJyB9LFxuICAgIFtHcm91cFJvbGUuQVJNQURZTEVBTl06IHsgbmFtZTogJ0FybWFkeWxlYW4nIH0sXG4gICAgW0dyb3VwUm9sZS5BUlRJTExFUlldOiB7IG5hbWU6ICdBcnRpbGxlcnknIH0sXG4gICAgW0dyb3VwUm9sZS5BUlRJU0FOXTogeyBuYW1lOiAnQXJ0aXNhbicgfSxcbiAgICBbR3JvdXBSb2xlLkFTR0FSTklBTl06IHsgbmFtZTogJ0FzZ2FybmlhbicgfSxcbiAgICBbR3JvdXBSb2xlLkFTU0FTU0lOXTogeyBuYW1lOiAnQXNzYXNzaW4nIH0sXG4gICAgW0dyb3VwUm9sZS5BU1NJU1RBTlRdOiB7IG5hbWU6ICdBc3Npc3RhbnQnIH0sXG4gICAgW0dyb3VwUm9sZS5BU1RSQUxdOiB7IG5hbWU6ICdBc3RyYWwnIH0sXG4gICAgW0dyb3VwUm9sZS5BVEhMRVRFXTogeyBuYW1lOiAnQXRobGV0ZScgfSxcbiAgICBbR3JvdXBSb2xlLkFUVEFDS0VSXTogeyBuYW1lOiAnQXR0YWNrZXInIH0sXG4gICAgW0dyb3VwUm9sZS5CQU5ESVRdOiB7IG5hbWU6ICdCYW5kaXQnIH0sXG4gICAgW0dyb3VwUm9sZS5CQU5ET1NJQU5dOiB7IG5hbWU6ICdCYW5kb3NpYW4nIH0sXG4gICAgW0dyb3VwUm9sZS5CQVJCQVJJQU5dOiB7IG5hbWU6ICdCYXJiYXJpYW4nIH0sXG4gICAgW0dyb3VwUm9sZS5CQVRUTEVNQUdFXTogeyBuYW1lOiAnQmF0dGxlbWFnZScgfSxcbiAgICBbR3JvdXBSb2xlLkJFQVNUXTogeyBuYW1lOiAnQmVhc3QnIH0sXG4gICAgW0dyb3VwUm9sZS5CRVJTRVJLRVJdOiB7IG5hbWU6ICdCZXJzZXJrZXInIH0sXG4gICAgW0dyb3VwUm9sZS5CTElTVEVSV09PRF06IHsgbmFtZTogJ0JsaXN0ZXJ3b29kJyB9LFxuICAgIFtHcm91cFJvbGUuQkxPT0RdOiB7IG5hbWU6ICdCbG9vZCcgfSxcbiAgICBbR3JvdXBSb2xlLkJMVUVdOiB7IG5hbWU6ICdCbHVlJyB9LFxuICAgIFtHcm91cFJvbGUuQk9CXTogeyBuYW1lOiAnQm9iJyB9LFxuICAgIFtHcm91cFJvbGUuQk9EWV06IHsgbmFtZTogJ0JvZHknIH0sXG4gICAgW0dyb3VwUm9sZS5CUkFTU0lDQU5dOiB7IG5hbWU6ICdCcmFzc2ljYW4nIH0sXG4gICAgW0dyb3VwUm9sZS5CUkFXTEVSXTogeyBuYW1lOiAnQnJhd2xlcicgfSxcbiAgICBbR3JvdXBSb2xlLkJSSUdBRElFUl06IHsgbmFtZTogJ0JyaWdhZGllcicgfSxcbiAgICBbR3JvdXBSb2xlLkJSSUdBTkRdOiB7IG5hbWU6ICdCcmlnYW5kJyB9LFxuICAgIFtHcm91cFJvbGUuQlJPTlpFXTogeyBuYW1lOiAnQnJvbnplJyB9LFxuICAgIFtHcm91cFJvbGUuQlJVSVNFUl06IHsgbmFtZTogJ0JydWlzZXInIH0sXG4gICAgW0dyb3VwUm9sZS5CVUxXQVJLXTogeyBuYW1lOiAnQnVsd2FyaycgfSxcbiAgICBbR3JvdXBSb2xlLkJVUkdMQVJdOiB7IG5hbWU6ICdCdXJnbGFyJyB9LFxuICAgIFtHcm91cFJvbGUuQlVSTlRdOiB7IG5hbWU6ICdCdXJudCcgfSxcbiAgICBbR3JvdXBSb2xlLkNBREVUXTogeyBuYW1lOiAnQ2FkZXQnIH0sXG4gICAgW0dyb3VwUm9sZS5DQVBUQUlOXTogeyBuYW1lOiAnQ2FwdGFpbicgfSxcbiAgICBbR3JvdXBSb2xlLkNBUlJZXTogeyBuYW1lOiAnQ2FycnknIH0sXG4gICAgW0dyb3VwUm9sZS5DSEFNUElPTl06IHsgbmFtZTogJ0NoYW1waW9uJyB9LFxuICAgIFtHcm91cFJvbGUuQ0hBT1NdOiB7IG5hbWU6ICdDaGFvcycgfSxcbiAgICBbR3JvdXBSb2xlLkNMRVJJQ106IHsgbmFtZTogJ0NsZXJpYycgfSxcbiAgICBbR3JvdXBSb2xlLkNPTExFQ1RPUl06IHsgbmFtZTogJ0NvbGxlY3RvcicgfSxcbiAgICBbR3JvdXBSb2xlLkNPTE9ORUxdOiB7IG5hbWU6ICdDb2xvbmVsJyB9LFxuICAgIFtHcm91cFJvbGUuQ09NTUFOREVSXTogeyBuYW1lOiAnQ29tbWFuZGVyJyB9LFxuICAgIFtHcm91cFJvbGUuQ09NUEVUSVRPUl06IHsgbmFtZTogJ0NvbXBldGl0b3InIH0sXG4gICAgW0dyb3VwUm9sZS5DT01QTEVUSU9OSVNUXTogeyBuYW1lOiAnQ29tcGxldGlvbmlzdCcgfSxcbiAgICBbR3JvdXBSb2xlLkNPTlNUUlVDVE9SXTogeyBuYW1lOiAnQ29uc3RydWN0b3InIH0sXG4gICAgW0dyb3VwUm9sZS5DT09LXTogeyBuYW1lOiAnQ29vaycgfSxcbiAgICBbR3JvdXBSb2xlLkNPT1JESU5BVE9SXTogeyBuYW1lOiAnQ29vcmRpbmF0b3InIH0sXG4gICAgW0dyb3VwUm9sZS5DT1JQT1JBTF06IHsgbmFtZTogJ0NvcnBvcmFsJyB9LFxuICAgIFtHcm91cFJvbGUuQ09TTUlDXTogeyBuYW1lOiAnQ29zbWljJyB9LFxuICAgIFtHcm91cFJvbGUuQ09VTkNJTExPUl06IHsgbmFtZTogJ0NvdW5jaWxsb3InIH0sXG4gICAgW0dyb3VwUm9sZS5DUkFGVEVSXTogeyBuYW1lOiAnQ3JhZnRlcicgfSxcbiAgICBbR3JvdXBSb2xlLkNSRVddOiB7IG5hbWU6ICdDcmV3JyB9LFxuICAgIFtHcm91cFJvbGUuQ1JVU0FERVJdOiB7IG5hbWU6ICdDcnVzYWRlcicgfSxcbiAgICBbR3JvdXBSb2xlLkNVVFBVUlNFXTogeyBuYW1lOiAnQ3V0cHVyc2UnIH0sXG4gICAgW0dyb3VwUm9sZS5ERUFUSF06IHsgbmFtZTogJ0RlYXRoJyB9LFxuICAgIFtHcm91cFJvbGUuREVGRU5ERVJdOiB7IG5hbWU6ICdEZWZlbmRlcicgfSxcbiAgICBbR3JvdXBSb2xlLkRFRklMRVJdOiB7IG5hbWU6ICdEZWZpbGVyJyB9LFxuICAgIFtHcm91cFJvbGUuREVQVVRZX09XTkVSXTogeyBuYW1lOiAnRGVwdXR5IE93bmVyJyB9LFxuICAgIFtHcm91cFJvbGUuREVTVFJPWUVSXTogeyBuYW1lOiAnRGVzdHJveWVyJyB9LFxuICAgIFtHcm91cFJvbGUuRElBTU9ORF06IHsgbmFtZTogJ0RpYW1vbmQnIH0sXG4gICAgW0dyb3VwUm9sZS5ESVNFQVNFRF06IHsgbmFtZTogJ0Rpc2Vhc2VkJyB9LFxuICAgIFtHcm91cFJvbGUuRE9DVE9SXTogeyBuYW1lOiAnRG9jdG9yJyB9LFxuICAgIFtHcm91cFJvbGUuRE9HU0JPRFldOiB7IG5hbWU6ICdEb2dzYm9keScgfSxcbiAgICBbR3JvdXBSb2xlLkRSQUdPTl06IHsgbmFtZTogJ0RyYWdvbicgfSxcbiAgICBbR3JvdXBSb2xlLkRSQUdPTlNUT05FXTogeyBuYW1lOiAnRHJhZ29uc3RvbmUnIH0sXG4gICAgW0dyb3VwUm9sZS5EUlVJRF06IHsgbmFtZTogJ0RydWlkJyB9LFxuICAgIFtHcm91cFJvbGUuRFVFTExJU1RdOiB7IG5hbWU6ICdEdWVsbGlzdCcgfSxcbiAgICBbR3JvdXBSb2xlLkVBUlRIXTogeyBuYW1lOiAnRWFydGgnIH0sXG4gICAgW0dyb3VwUm9sZS5FTElURV06IHsgbmFtZTogJ0VsaXRlJyB9LFxuICAgIFtHcm91cFJvbGUuRU1FUkFMRF06IHsgbmFtZTogJ0VtZXJhbGQnIH0sXG4gICAgW0dyb3VwUm9sZS5FTkZPUkNFUl06IHsgbmFtZTogJ0VuZm9yY2VyJyB9LFxuICAgIFtHcm91cFJvbGUuRVBJQ106IHsgbmFtZTogJ0VwaWMnIH0sXG4gICAgW0dyb3VwUm9sZS5FWEVDVVRJVkVdOiB7IG5hbWU6ICdFeGVjdXRpdmUnIH0sXG4gICAgW0dyb3VwUm9sZS5FWFBFUlRdOiB7IG5hbWU6ICdFeHBlcnQnIH0sXG4gICAgW0dyb3VwUm9sZS5FWFBMT1JFUl06IHsgbmFtZTogJ0V4cGxvcmVyJyB9LFxuICAgIFtHcm91cFJvbGUuRkFSTUVSXTogeyBuYW1lOiAnRmFybWVyJyB9LFxuICAgIFtHcm91cFJvbGUuRkVFREVSXTogeyBuYW1lOiAnRmVlZGVyJyB9LFxuICAgIFtHcm91cFJvbGUuRklHSFRFUl06IHsgbmFtZTogJ0ZpZ2h0ZXInIH0sXG4gICAgW0dyb3VwUm9sZS5GSVJFXTogeyBuYW1lOiAnRmlyZScgfSxcbiAgICBbR3JvdXBSb2xlLkZJUkVNQUtFUl06IHsgbmFtZTogJ0ZpcmVtYWtlcicgfSxcbiAgICBbR3JvdXBSb2xlLkZJUkVTVEFSVEVSXTogeyBuYW1lOiAnRmlyZXN0YXJ0ZXInIH0sXG4gICAgW0dyb3VwUm9sZS5GSVNIRVJdOiB7IG5hbWU6ICdGaXNoZXInIH0sXG4gICAgW0dyb3VwUm9sZS5GTEVUQ0hFUl06IHsgbmFtZTogJ0ZsZXRjaGVyJyB9LFxuICAgIFtHcm91cFJvbGUuRk9SQUdFUl06IHsgbmFtZTogJ0ZvcmFnZXInIH0sXG4gICAgW0dyb3VwUm9sZS5GUkVNRU5OSUtdOiB7IG5hbWU6ICdGcmVtZW5uaWsnIH0sXG4gICAgW0dyb3VwUm9sZS5HQU1FUl06IHsgbmFtZTogJ0dhbWVyJyB9LFxuICAgIFtHcm91cFJvbGUuR0FUSEVSRVJdOiB7IG5hbWU6ICdHYXRoZXJlcicgfSxcbiAgICBbR3JvdXBSb2xlLkdFTkVSQUxdOiB7IG5hbWU6ICdHZW5lcmFsJyB9LFxuICAgIFtHcm91cFJvbGUuR05PTUVfQ0hJTERdOiB7IG5hbWU6ICdHbm9tZSBDaGlsZCcgfSxcbiAgICBbR3JvdXBSb2xlLkdOT01FX0VMREVSXTogeyBuYW1lOiAnR25vbWUgRWxkZXInIH0sXG4gICAgW0dyb3VwUm9sZS5HT0JMSU5dOiB7IG5hbWU6ICdHb2JsaW4nIH0sXG4gICAgW0dyb3VwUm9sZS5HT0xEXTogeyBuYW1lOiAnR29sZCcgfSxcbiAgICBbR3JvdXBSb2xlLkdPT05dOiB7IG5hbWU6ICdHb29uJyB9LFxuICAgIFtHcm91cFJvbGUuR1JFRU5dOiB7IG5hbWU6ICdHcmVlbicgfSxcbiAgICBbR3JvdXBSb2xlLkdSRVldOiB7IG5hbWU6ICdHcmV5JyB9LFxuICAgIFtHcm91cFJvbGUuR1VBUkRJQU5dOiB7IG5hbWU6ICdHdWFyZGlhbicgfSxcbiAgICBbR3JvdXBSb2xlLkdVVEhJWElBTl06IHsgbmFtZTogJ0d1dGhpeGlhbicgfSxcbiAgICBbR3JvdXBSb2xlLkhBUlBPT05dOiB7IG5hbWU6ICdIYXJwb29uJyB9LFxuICAgIFtHcm91cFJvbGUuSEVBTEVSXTogeyBuYW1lOiAnSGVhbGVyJyB9LFxuICAgIFtHcm91cFJvbGUuSEVMTENBVF06IHsgbmFtZTogJ0hlbGxjYXQnIH0sXG4gICAgW0dyb3VwUm9sZS5IRUxQRVJdOiB7IG5hbWU6ICdIZWxwZXInIH0sXG4gICAgW0dyb3VwUm9sZS5IRVJCT0xPR0lTVF06IHsgbmFtZTogJ0hlcmJvbG9naXN0JyB9LFxuICAgIFtHcm91cFJvbGUuSEVST106IHsgbmFtZTogJ0hlcm8nIH0sXG4gICAgW0dyb3VwUm9sZS5IT0xZXTogeyBuYW1lOiAnSG9seScgfSxcbiAgICBbR3JvdXBSb2xlLkhPQVJERVJdOiB7IG5hbWU6ICdIb2FyZGVyJyB9LFxuICAgIFtHcm91cFJvbGUuSFVOVEVSXTogeyBuYW1lOiAnSHVudGVyJyB9LFxuICAgIFtHcm91cFJvbGUuSUdOSVRPUl06IHsgbmFtZTogJ0lnbml0b3InIH0sXG4gICAgW0dyb3VwUm9sZS5JTExVU0lPTklTVF06IHsgbmFtZTogJ0lsbHVzaW9uaXN0JyB9LFxuICAgIFtHcm91cFJvbGUuSU1QXTogeyBuYW1lOiAnSW1wJyB9LFxuICAgIFtHcm91cFJvbGUuSU5GQU5UUlldOiB7IG5hbWU6ICdJbmZhbnRyeScgfSxcbiAgICBbR3JvdXBSb2xlLklOUVVJU0lUT1JdOiB7IG5hbWU6ICdJbnF1aXNpdG9yJyB9LFxuICAgIFtHcm91cFJvbGUuSVJPTl06IHsgbmFtZTogJ0lyb24nIH0sXG4gICAgW0dyb3VwUm9sZS5KQURFXTogeyBuYW1lOiAnSmFkZScgfSxcbiAgICBbR3JvdXBSb2xlLkpVU1RJQ0lBUl06IHsgbmFtZTogJ0p1c3RpY2lhcicgfSxcbiAgICBbR3JvdXBSb2xlLktBTkRBUklOXTogeyBuYW1lOiAnS2FuZGFyaW4nIH0sXG4gICAgW0dyb3VwUm9sZS5LQVJBTUpBTl06IHsgbmFtZTogJ0thcmFtamFuJyB9LFxuICAgIFtHcm91cFJvbGUuS0hBUklESUFOXTogeyBuYW1lOiAnS2hhcmlkaWFuJyB9LFxuICAgIFtHcm91cFJvbGUuS0lUVEVOXTogeyBuYW1lOiAnS2l0dGVuJyB9LFxuICAgIFtHcm91cFJvbGUuS05JR0hUXTogeyBuYW1lOiAnS25pZ2h0JyB9LFxuICAgIFtHcm91cFJvbGUuTEFCT1VSRVJdOiB7IG5hbWU6ICdMYWJvdXJlcicgfSxcbiAgICBbR3JvdXBSb2xlLkxBV106IHsgbmFtZTogJ0xhdycgfSxcbiAgICBbR3JvdXBSb2xlLkxFQURFUl06IHsgbmFtZTogJ0xlYWRlcicgfSxcbiAgICBbR3JvdXBSb2xlLkxFQVJORVJdOiB7IG5hbWU6ICdMZWFybmVyJyB9LFxuICAgIFtHcm91cFJvbGUuTEVHQUNZXTogeyBuYW1lOiAnTGVnYWN5JyB9LFxuICAgIFtHcm91cFJvbGUuTEVHRU5EXTogeyBuYW1lOiAnTGVnZW5kJyB9LFxuICAgIFtHcm91cFJvbGUuTEVHSU9OTkFJUkVdOiB7IG5hbWU6ICdMZWdpb25uYWlyZScgfSxcbiAgICBbR3JvdXBSb2xlLkxJRVVURU5BTlRdOiB7IG5hbWU6ICdMaWV1dGVuYW50JyB9LFxuICAgIFtHcm91cFJvbGUuTE9PVEVSXTogeyBuYW1lOiAnTG9vdGVyJyB9LFxuICAgIFtHcm91cFJvbGUuTFVNQkVSSkFDS106IHsgbmFtZTogJ0x1bWJlcmphY2snIH0sXG4gICAgW0dyb3VwUm9sZS5NQUdJQ106IHsgbmFtZTogJ01hZ2ljJyB9LFxuICAgIFtHcm91cFJvbGUuTUFHSUNJQU5dOiB7IG5hbWU6ICdNYWdpY2lhbicgfSxcbiAgICBbR3JvdXBSb2xlLk1BSk9SXTogeyBuYW1lOiAnTWFqb3InIH0sXG4gICAgW0dyb3VwUm9sZS5NQVBMRV06IHsgbmFtZTogJ01hcGxlJyB9LFxuICAgIFtHcm91cFJvbGUuTUFSU0hBTF06IHsgbmFtZTogJ01hcnNoYWwnIH0sXG4gICAgW0dyb3VwUm9sZS5NQVNURVJdOiB7IG5hbWU6ICdNYXN0ZXInIH0sXG4gICAgW0dyb3VwUm9sZS5NQVhFRF06IHsgbmFtZTogJ01heGVkJyB9LFxuICAgIFtHcm91cFJvbGUuTUVESUFUT1JdOiB7IG5hbWU6ICdNZWRpYXRvcicgfSxcbiAgICBbR3JvdXBSb2xlLk1FRElDXTogeyBuYW1lOiAnTWVkaWMnIH0sXG4gICAgW0dyb3VwUm9sZS5NRU5UT1JdOiB7IG5hbWU6ICdNZW50b3InIH0sXG4gICAgW0dyb3VwUm9sZS5NRU1CRVJdOiB7IG5hbWU6ICdNZW1iZXInIH0sXG4gICAgW0dyb3VwUm9sZS5NRVJDSEFOVF06IHsgbmFtZTogJ01lcmNoYW50JyB9LFxuICAgIFtHcm91cFJvbGUuTUlORF06IHsgbmFtZTogJ01pbmQnIH0sXG4gICAgW0dyb3VwUm9sZS5NSU5FUl06IHsgbmFtZTogJ01pbmVyJyB9LFxuICAgIFtHcm91cFJvbGUuTUlOSU9OXTogeyBuYW1lOiAnTWluaW9uJyB9LFxuICAgIFtHcm91cFJvbGUuTUlTVEhBTElOSUFOXTogeyBuYW1lOiAnTWlzdGhhbGluaWFuJyB9LFxuICAgIFtHcm91cFJvbGUuTUlUSFJJTF06IHsgbmFtZTogJ01pdGhyaWwnIH0sXG4gICAgW0dyb3VwUm9sZS5NT0RFUkFUT1JdOiB7IG5hbWU6ICdNb2RlcmF0b3InIH0sXG4gICAgW0dyb3VwUm9sZS5NT05BUkNIXTogeyBuYW1lOiAnTW9uYXJjaCcgfSxcbiAgICBbR3JvdXBSb2xlLk1PUllUQU5JQU5dOiB7IG5hbWU6ICdNb3J5dGFuaWFuJyB9LFxuICAgIFtHcm91cFJvbGUuTVlTVElDXTogeyBuYW1lOiAnTXlzdGljJyB9LFxuICAgIFtHcm91cFJvbGUuTVlUSF06IHsgbmFtZTogJ015dGgnIH0sXG4gICAgW0dyb3VwUm9sZS5OQVRVUkFMXTogeyBuYW1lOiAnTmF0dXJhbCcgfSxcbiAgICBbR3JvdXBSb2xlLk5BVFVSRV06IHsgbmFtZTogJ05hdHVyZScgfSxcbiAgICBbR3JvdXBSb2xlLk5FQ1JPTUFOQ0VSXTogeyBuYW1lOiAnTmVjcm9tYW5jZXInIH0sXG4gICAgW0dyb3VwUm9sZS5OSU5KQV06IHsgbmFtZTogJ05pbmphJyB9LFxuICAgIFtHcm91cFJvbGUuTk9CTEVdOiB7IG5hbWU6ICdOb2JsZScgfSxcbiAgICBbR3JvdXBSb2xlLk5PVklDRV06IHsgbmFtZTogJ05vdmljZScgfSxcbiAgICBbR3JvdXBSb2xlLk5VUlNFXTogeyBuYW1lOiAnTnVyc2UnIH0sXG4gICAgW0dyb3VwUm9sZS5PQUtdOiB7IG5hbWU6ICdPYWsnIH0sXG4gICAgW0dyb3VwUm9sZS5PRkZJQ0VSXTogeyBuYW1lOiAnT2ZmaWNlcicgfSxcbiAgICBbR3JvdXBSb2xlLk9OWVhdOiB7IG5hbWU6ICdPbnl4JyB9LFxuICAgIFtHcm91cFJvbGUuT1BBTF06IHsgbmFtZTogJ09wYWwnIH0sXG4gICAgW0dyb3VwUm9sZS5PUkFDTEVdOiB7IG5hbWU6ICdPcmFjbGUnIH0sXG4gICAgW0dyb3VwUm9sZS5PUkFOR0VdOiB7IG5hbWU6ICdPcmFuZ2UnIH0sXG4gICAgW0dyb3VwUm9sZS5PV05FUl06IHsgbmFtZTogJ093bmVyJyB9LFxuICAgIFtHcm91cFJvbGUuUEFHRV06IHsgbmFtZTogJ1BhZ2UnIH0sXG4gICAgW0dyb3VwUm9sZS5QQUxBRElOXTogeyBuYW1lOiAnUGFsYWRpbicgfSxcbiAgICBbR3JvdXBSb2xlLlBBV05dOiB7IG5hbWU6ICdQYXduJyB9LFxuICAgIFtHcm91cFJvbGUuUElMR1JJTV06IHsgbmFtZTogJ1BpbGdyaW0nIH0sXG4gICAgW0dyb3VwUm9sZS5QSU5FXTogeyBuYW1lOiAnUGluZScgfSxcbiAgICBbR3JvdXBSb2xlLlBJTktdOiB7IG5hbWU6ICdQaW5rJyB9LFxuICAgIFtHcm91cFJvbGUuUFJFRkVDVF06IHsgbmFtZTogJ1ByZWZlY3QnIH0sXG4gICAgW0dyb3VwUm9sZS5QUklFU1RdOiB7IG5hbWU6ICdQcmllc3QnIH0sXG4gICAgW0dyb3VwUm9sZS5QUklWQVRFXTogeyBuYW1lOiAnUHJpdmF0ZScgfSxcbiAgICBbR3JvdXBSb2xlLlBST0RJR1ldOiB7IG5hbWU6ICdQcm9kaWd5JyB9LFxuICAgIFtHcm91cFJvbGUuUFJPU0VMWVRFXTogeyBuYW1lOiAnUHJvc2VseXRlJyB9LFxuICAgIFtHcm91cFJvbGUuUFJPU1BFQ1RPUl06IHsgbmFtZTogJ1Byb3NwZWN0b3InIH0sXG4gICAgW0dyb3VwUm9sZS5QUk9URUNUT1JdOiB7IG5hbWU6ICdQcm90ZWN0b3InIH0sXG4gICAgW0dyb3VwUm9sZS5QVVJFXTogeyBuYW1lOiAnUHVyZScgfSxcbiAgICBbR3JvdXBSb2xlLlBVUlBMRV06IHsgbmFtZTogJ1B1cnBsZScgfSxcbiAgICBbR3JvdXBSb2xlLlBZUk9NQU5DRVJdOiB7IG5hbWU6ICdQeXJvbWFuY2VyJyB9LFxuICAgIFtHcm91cFJvbGUuUVVFU1RFUl06IHsgbmFtZTogJ1F1ZXN0ZXInIH0sXG4gICAgW0dyb3VwUm9sZS5SQUNFUl06IHsgbmFtZTogJ1JhY2VyJyB9LFxuICAgIFtHcm91cFJvbGUuUkFJREVSXTogeyBuYW1lOiAnUmFpZGVyJyB9LFxuICAgIFtHcm91cFJvbGUuUkFOR0VSXTogeyBuYW1lOiAnUmFuZ2VyJyB9LFxuICAgIFtHcm91cFJvbGUuUkVDT1JEX0NIQVNFUl06IHsgbmFtZTogJ1JlY29yZC1DaGFzZXInIH0sXG4gICAgW0dyb3VwUm9sZS5SRUNSVUlUXTogeyBuYW1lOiAnUmVjcnVpdCcgfSxcbiAgICBbR3JvdXBSb2xlLlJFQ1JVSVRFUl06IHsgbmFtZTogJ1JlY3J1aXRlcicgfSxcbiAgICBbR3JvdXBSb2xlLlJFRF9UT1BBWl06IHsgbmFtZTogJ1JlZCBUb3BheicgfSxcbiAgICBbR3JvdXBSb2xlLlJFRF06IHsgbmFtZTogJ1JlZCcgfSxcbiAgICBbR3JvdXBSb2xlLlJPR1VFXTogeyBuYW1lOiAnUm9ndWUnIH0sXG4gICAgW0dyb3VwUm9sZS5SVUJZXTogeyBuYW1lOiAnUnVieScgfSxcbiAgICBbR3JvdXBSb2xlLlJVTkVdOiB7IG5hbWU6ICdSdW5lJyB9LFxuICAgIFtHcm91cFJvbGUuUlVORUNSQUZURVJdOiB7IG5hbWU6ICdSdW5lY3JhZnRlcicgfSxcbiAgICBbR3JvdXBSb2xlLlNBR0VdOiB7IG5hbWU6ICdTYWdlJyB9LFxuICAgIFtHcm91cFJvbGUuU0FQUEhJUkVdOiB7IG5hbWU6ICdTYXBwaGlyZScgfSxcbiAgICBbR3JvdXBSb2xlLlNBUkFET01JTklTVF06IHsgbmFtZTogJ1NhcmFkb21pbmlzdCcgfSxcbiAgICBbR3JvdXBSb2xlLlNBVklPVVJdOiB7IG5hbWU6ICdTYXZpb3VyJyB9LFxuICAgIFtHcm91cFJvbGUuU0NBVkVOR0VSXTogeyBuYW1lOiAnU2NhdmVuZ2VyJyB9LFxuICAgIFtHcm91cFJvbGUuU0NIT0xBUl06IHsgbmFtZTogJ1NjaG9sYXInIH0sXG4gICAgW0dyb3VwUm9sZS5TQ09VUkdFXTogeyBuYW1lOiAnU2NvdXJnZScgfSxcbiAgICBbR3JvdXBSb2xlLlNDT1VUXTogeyBuYW1lOiAnU2NvdXQnIH0sXG4gICAgW0dyb3VwUm9sZS5TQ1JJQkVdOiB7IG5hbWU6ICdTY3JpYmUnIH0sXG4gICAgW0dyb3VwUm9sZS5TRUVSXTogeyBuYW1lOiAnU2VlcicgfSxcbiAgICBbR3JvdXBSb2xlLlNFTkFUT1JdOiB7IG5hbWU6ICdTZW5hdG9yJyB9LFxuICAgIFtHcm91cFJvbGUuU0VOVFJZXTogeyBuYW1lOiAnU2VudHJ5JyB9LFxuICAgIFtHcm91cFJvbGUuU0VSRU5JU1RdOiB7IG5hbWU6ICdTZXJlbmlzdCcgfSxcbiAgICBbR3JvdXBSb2xlLlNFUkdFQU5UXTogeyBuYW1lOiAnU2VyZ2VhbnQnIH0sXG4gICAgW0dyb3VwUm9sZS5TSEFNQU5dOiB7IG5hbWU6ICdTaGFtYW4nIH0sXG4gICAgW0dyb3VwUm9sZS5TSEVSSUZGXTogeyBuYW1lOiAnU2hlcmlmZicgfSxcbiAgICBbR3JvdXBSb2xlLlNIT1JUX0dSRUVOX0dVWV06IHsgbmFtZTogJ1Nob3J0IEdyZWVuIEd1eScgfSxcbiAgICBbR3JvdXBSb2xlLlNLSUxMRVJdOiB7IG5hbWU6ICdTa2lsbGVyJyB9LFxuICAgIFtHcm91cFJvbGUuU0tVTExFRF06IHsgbmFtZTogJ1NrdWxsZWQnIH0sXG4gICAgW0dyb3VwUm9sZS5TTEFZRVJdOiB7IG5hbWU6ICdTbGF5ZXInIH0sXG4gICAgW0dyb3VwUm9sZS5TTUlURVJdOiB7IG5hbWU6ICdTbWl0ZXInIH0sXG4gICAgW0dyb3VwUm9sZS5TTUlUSF06IHsgbmFtZTogJ1NtaXRoJyB9LFxuICAgIFtHcm91cFJvbGUuU01VR0dMRVJdOiB7IG5hbWU6ICdTbXVnZ2xlcicgfSxcbiAgICBbR3JvdXBSb2xlLlNOSVBFUl06IHsgbmFtZTogJ1NuaXBlcicgfSxcbiAgICBbR3JvdXBSb2xlLlNPVUxdOiB7IG5hbWU6ICdTb3VsJyB9LFxuICAgIFtHcm91cFJvbGUuU1BFQ0lBTElTVF06IHsgbmFtZTogJ1NwZWNpYWxpc3QnIH0sXG4gICAgW0dyb3VwUm9sZS5TUEVFRF9SVU5ORVJdOiB7IG5hbWU6ICdTcGVlZC1SdW5uZXInIH0sXG4gICAgW0dyb3VwUm9sZS5TUEVMTENBU1RFUl06IHsgbmFtZTogJ1NwZWxsY2FzdGVyJyB9LFxuICAgIFtHcm91cFJvbGUuU1FVSVJFXTogeyBuYW1lOiAnU3F1aXJlJyB9LFxuICAgIFtHcm91cFJvbGUuU1RBRkZdOiB7IG5hbWU6ICdTdGFmZicgfSxcbiAgICBbR3JvdXBSb2xlLlNURUVMXTogeyBuYW1lOiAnU3RlZWwnIH0sXG4gICAgW0dyb3VwUm9sZS5TVFJJREVSXTogeyBuYW1lOiAnU3RyaWRlcicgfSxcbiAgICBbR3JvdXBSb2xlLlNUUklLRVJdOiB7IG5hbWU6ICdTdHJpa2VyJyB9LFxuICAgIFtHcm91cFJvbGUuU1VNTU9ORVJdOiB7IG5hbWU6ICdTdW1tb25lcicgfSxcbiAgICBbR3JvdXBSb2xlLlNVUEVSSU9SXTogeyBuYW1lOiAnU3VwZXJpb3InIH0sXG4gICAgW0dyb3VwUm9sZS5TVVBFUlZJU09SXTogeyBuYW1lOiAnU3VwZXJ2aXNvcicgfSxcbiAgICBbR3JvdXBSb2xlLlRFQUNIRVJdOiB7IG5hbWU6ICdUZWFjaGVyJyB9LFxuICAgIFtHcm91cFJvbGUuVEVNUExBUl06IHsgbmFtZTogJ1RlbXBsYXInIH0sXG4gICAgW0dyb3VwUm9sZS5USEVSQVBJU1RdOiB7IG5hbWU6ICdUaGVyYXBpc3QnIH0sXG4gICAgW0dyb3VwUm9sZS5USElFRl06IHsgbmFtZTogJ1RoaWVmJyB9LFxuICAgIFtHcm91cFJvbGUuVElSQU5OSUFOXTogeyBuYW1lOiAnVGlyYW5uaWFuJyB9LFxuICAgIFtHcm91cFJvbGUuVFJJQUxJU1RdOiB7IG5hbWU6ICdUcmlhbGlzdCcgfSxcbiAgICBbR3JvdXBSb2xlLlRSSUNLU1RFUl06IHsgbmFtZTogJ1RyaWNrc3RlcicgfSxcbiAgICBbR3JvdXBSb2xlLlRaS0FMXTogeyBuYW1lOiAnVHpLYWwnIH0sXG4gICAgW0dyb3VwUm9sZS5UWlRPS106IHsgbmFtZTogJ1R6VG9rJyB9LFxuICAgIFtHcm91cFJvbGUuVU5IT0xZXTogeyBuYW1lOiAnVW5ob2x5JyB9LFxuICAgIFtHcm91cFJvbGUuVkFHUkFOVF06IHsgbmFtZTogJ1ZhZ3JhbnQnIH0sXG4gICAgW0dyb3VwUm9sZS5WQU5HVUFSRF06IHsgbmFtZTogJ1Zhbmd1YXJkJyB9LFxuICAgIFtHcm91cFJvbGUuV0FMS0VSXTogeyBuYW1lOiAnV2Fsa2VyJyB9LFxuICAgIFtHcm91cFJvbGUuV0FOREVSRVJdOiB7IG5hbWU6ICdXYW5kZXJlcicgfSxcbiAgICBbR3JvdXBSb2xlLldBUkRFTl06IHsgbmFtZTogJ1dhcmRlbicgfSxcbiAgICBbR3JvdXBSb2xlLldBUkxPQ0tdOiB7IG5hbWU6ICdXYXJsb2NrJyB9LFxuICAgIFtHcm91cFJvbGUuV0FSUklPUl06IHsgbmFtZTogJ1dhcnJpb3InIH0sXG4gICAgW0dyb3VwUm9sZS5XQVRFUl06IHsgbmFtZTogJ1dhdGVyJyB9LFxuICAgIFtHcm91cFJvbGUuV0lMRF06IHsgbmFtZTogJ1dpbGQnIH0sXG4gICAgW0dyb3VwUm9sZS5XSUxMT1ddOiB7IG5hbWU6ICdXaWxsb3cnIH0sXG4gICAgW0dyb3VwUm9sZS5XSUxZXTogeyBuYW1lOiAnV2lseScgfSxcbiAgICBbR3JvdXBSb2xlLldJTlRVTUJFUl06IHsgbmFtZTogJ1dpbnR1bWJlcicgfSxcbiAgICBbR3JvdXBSb2xlLldJVENIXTogeyBuYW1lOiAnV2l0Y2gnIH0sXG4gICAgW0dyb3VwUm9sZS5XSVpBUkRdOiB7IG5hbWU6ICdXaXphcmQnIH0sXG4gICAgW0dyb3VwUm9sZS5XT1JLRVJdOiB7IG5hbWU6ICdXb3JrZXInIH0sXG4gICAgW0dyb3VwUm9sZS5XUkFUSF06IHsgbmFtZTogJ1dyYXRoJyB9LFxuICAgIFtHcm91cFJvbGUuWEVSSUNJQU5dOiB7IG5hbWU6ICdYZXJpY2lhbicgfSxcbiAgICBbR3JvdXBSb2xlLllFTExPV106IHsgbmFtZTogJ1llbGxvdycgfSxcbiAgICBbR3JvdXBSb2xlLllFV106IHsgbmFtZTogJ1lldycgfSxcbiAgICBbR3JvdXBSb2xlLlpBTU9SQUtJQU5dOiB7IG5hbWU6ICdaYW1vcmFraWFuJyB9LFxuICAgIFtHcm91cFJvbGUuWkFST1NJQU5dOiB7IG5hbWU6ICdaYXJvc2lhbicgfSxcbiAgICBbR3JvdXBSb2xlLlpFQUxPVF06IHsgbmFtZTogJ1plYWxvdCcgfSxcbiAgICBbR3JvdXBSb2xlLlpFTllURV06IHsgbmFtZTogJ1plbnl0ZScgfVxufSwgKHByb3BzLCBrZXkpID0+IChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHByb3BzKSwgeyBpc1ByaXZlbGVnZWQ6IFBSSVZFTEVHRURfR1JPVVBfUk9MRVMuaW5jbHVkZXMoa2V5KSB9KSkpO1xuZnVuY3Rpb24gZmluZEdyb3VwUm9sZShyb2xlTmFtZSkge1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKEdyb3VwUm9sZVByb3BzKSkge1xuICAgICAgICBpZiAodmFsdWUubmFtZS50b1VwcGVyQ2FzZSgpID09PSByb2xlTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gaXNHcm91cFJvbGUocm9sZVN0cmluZykge1xuICAgIHJldHVybiByb2xlU3RyaW5nIGluIEdyb3VwUm9sZVByb3BzO1xufVxuXG52YXIgTWV0cmljVHlwZTtcbihmdW5jdGlvbiAoTWV0cmljVHlwZSkge1xuICAgIE1ldHJpY1R5cGVbXCJTS0lMTFwiXSA9IFwic2tpbGxcIjtcbiAgICBNZXRyaWNUeXBlW1wiQk9TU1wiXSA9IFwiYm9zc1wiO1xuICAgIE1ldHJpY1R5cGVbXCJBQ1RJVklUWVwiXSA9IFwiYWN0aXZpdHlcIjtcbiAgICBNZXRyaWNUeXBlW1wiQ09NUFVURURcIl0gPSBcImNvbXB1dGVkXCI7XG59KShNZXRyaWNUeXBlIHx8IChNZXRyaWNUeXBlID0ge30pKTtcbnZhciBNZXRyaWNNZWFzdXJlO1xuKGZ1bmN0aW9uIChNZXRyaWNNZWFzdXJlKSB7XG4gICAgTWV0cmljTWVhc3VyZVtcIkVYUEVSSUVOQ0VcIl0gPSBcImV4cGVyaWVuY2VcIjtcbiAgICBNZXRyaWNNZWFzdXJlW1wiS0lMTFNcIl0gPSBcImtpbGxzXCI7XG4gICAgTWV0cmljTWVhc3VyZVtcIlNDT1JFXCJdID0gXCJzY29yZVwiO1xuICAgIE1ldHJpY01lYXN1cmVbXCJWQUxVRVwiXSA9IFwidmFsdWVcIjtcbn0pKE1ldHJpY01lYXN1cmUgfHwgKE1ldHJpY01lYXN1cmUgPSB7fSkpO1xuY29uc3QgU2tpbGxQcm9wcyA9IG1hcFZhbHVlcyh7XG4gICAgW1NraWxsLk9WRVJBTExdOiB7IG5hbWU6ICdPdmVyYWxsJyB9LFxuICAgIFtTa2lsbC5BVFRBQ0tdOiB7IG5hbWU6ICdBdHRhY2snLCBpc0NvbWJhdDogdHJ1ZSB9LFxuICAgIFtTa2lsbC5ERUZFTkNFXTogeyBuYW1lOiAnRGVmZW5jZScsIGlzQ29tYmF0OiB0cnVlIH0sXG4gICAgW1NraWxsLlNUUkVOR1RIXTogeyBuYW1lOiAnU3RyZW5ndGgnLCBpc0NvbWJhdDogdHJ1ZSB9LFxuICAgIFtTa2lsbC5ISVRQT0lOVFNdOiB7IG5hbWU6ICdIaXRwb2ludHMnLCBpc0NvbWJhdDogdHJ1ZSB9LFxuICAgIFtTa2lsbC5SQU5HRURdOiB7IG5hbWU6ICdSYW5nZWQnLCBpc0NvbWJhdDogdHJ1ZSB9LFxuICAgIFtTa2lsbC5QUkFZRVJdOiB7IG5hbWU6ICdQcmF5ZXInLCBpc0NvbWJhdDogdHJ1ZSB9LFxuICAgIFtTa2lsbC5NQUdJQ106IHsgbmFtZTogJ01hZ2ljJywgaXNDb21iYXQ6IHRydWUgfSxcbiAgICBbU2tpbGwuQ09PS0lOR106IHsgbmFtZTogJ0Nvb2tpbmcnIH0sXG4gICAgW1NraWxsLldPT0RDVVRUSU5HXTogeyBuYW1lOiAnV29vZGN1dHRpbmcnIH0sXG4gICAgW1NraWxsLkZMRVRDSElOR106IHsgbmFtZTogJ0ZsZXRjaGluZycsIGlzTWVtYmVyczogdHJ1ZSB9LFxuICAgIFtTa2lsbC5GSVNISU5HXTogeyBuYW1lOiAnRmlzaGluZycgfSxcbiAgICBbU2tpbGwuRklSRU1BS0lOR106IHsgbmFtZTogJ0ZpcmVtYWtpbmcnIH0sXG4gICAgW1NraWxsLkNSQUZUSU5HXTogeyBuYW1lOiAnQ3JhZnRpbmcnIH0sXG4gICAgW1NraWxsLlNNSVRISU5HXTogeyBuYW1lOiAnU21pdGhpbmcnIH0sXG4gICAgW1NraWxsLk1JTklOR106IHsgbmFtZTogJ01pbmluZycgfSxcbiAgICBbU2tpbGwuSEVSQkxPUkVdOiB7IG5hbWU6ICdIZXJibG9yZScsIGlzTWVtYmVyczogdHJ1ZSB9LFxuICAgIFtTa2lsbC5BR0lMSVRZXTogeyBuYW1lOiAnQWdpbGl0eScsIGlzTWVtYmVyczogdHJ1ZSB9LFxuICAgIFtTa2lsbC5USElFVklOR106IHsgbmFtZTogJ1RoaWV2aW5nJywgaXNNZW1iZXJzOiB0cnVlIH0sXG4gICAgW1NraWxsLlNMQVlFUl06IHsgbmFtZTogJ1NsYXllcicsIGlzTWVtYmVyczogdHJ1ZSB9LFxuICAgIFtTa2lsbC5GQVJNSU5HXTogeyBuYW1lOiAnRmFybWluZycsIGlzTWVtYmVyczogdHJ1ZSB9LFxuICAgIFtTa2lsbC5SVU5FQ1JBRlRJTkddOiB7IG5hbWU6ICdSdW5lY3JhZnRpbmcnIH0sXG4gICAgW1NraWxsLkhVTlRFUl06IHsgbmFtZTogJ0h1bnRlcicsIGlzTWVtYmVyczogdHJ1ZSB9LFxuICAgIFtTa2lsbC5DT05TVFJVQ1RJT05dOiB7IG5hbWU6ICdDb25zdHJ1Y3Rpb24nLCBpc01lbWJlcnM6IHRydWUgfVxufSwgcHJvcHMgPT4gKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMpLCB7IHR5cGU6IE1ldHJpY1R5cGUuU0tJTEwsIG1lYXN1cmU6IE1ldHJpY01lYXN1cmUuRVhQRVJJRU5DRSwgaXNDb21iYXQ6ICdpc0NvbWJhdCcgaW4gcHJvcHMgPyBwcm9wcy5pc0NvbWJhdCA6IGZhbHNlLCBpc01lbWJlcnM6ICdpc01lbWJlcnMnIGluIHByb3BzID8gcHJvcHMuaXNNZW1iZXJzIDogZmFsc2UgfSkpKTtcbmNvbnN0IEJvc3NQcm9wcyA9IG1hcFZhbHVlcyh7XG4gICAgW0Jvc3MuQUJZU1NBTF9TSVJFXTogeyBuYW1lOiAnQWJ5c3NhbCBTaXJlJyB9LFxuICAgIFtCb3NzLkFMQ0hFTUlDQUxfSFlEUkFdOiB7IG5hbWU6ICdBbGNoZW1pY2FsIEh5ZHJhJyB9LFxuICAgIFtCb3NzLkFNT1hMSUFUTF06IHsgbmFtZTogJ0Ftb3hsaWF0bCcgfSxcbiAgICBbQm9zcy5BUkFYWE9SXTogeyBuYW1lOiAnQXJheHhvcicgfSxcbiAgICBbQm9zcy5BUlRJT106IHsgbmFtZTogJ0FydGlvJyB9LFxuICAgIFtCb3NzLkJBUlJPV1NfQ0hFU1RTXTogeyBuYW1lOiAnQmFycm93cyBDaGVzdHMnIH0sXG4gICAgW0Jvc3MuQlJZT1BIWVRBXTogeyBuYW1lOiAnQnJ5b3BoeXRhJywgaXNNZW1iZXJzOiBmYWxzZSB9LFxuICAgIFtCb3NzLkNBTExJU1RPXTogeyBuYW1lOiAnQ2FsbGlzdG8nIH0sXG4gICAgW0Jvc3MuQ0FMVkFSSU9OXTogeyBuYW1lOiBcIkNhbHZhcidpb25cIiB9LFxuICAgIFtCb3NzLkNFUkJFUlVTXTogeyBuYW1lOiAnQ2VyYmVydXMnIH0sXG4gICAgW0Jvc3MuQ0hBTUJFUlNfT0ZfWEVSSUNdOiB7IG5hbWU6ICdDaGFtYmVycyBPZiBYZXJpYycgfSxcbiAgICBbQm9zcy5DSEFNQkVSU19PRl9YRVJJQ19DTV06IHsgbmFtZTogJ0NoYW1iZXJzIE9mIFhlcmljIChDTSknIH0sXG4gICAgW0Jvc3MuQ0hBT1NfRUxFTUVOVEFMXTogeyBuYW1lOiAnQ2hhb3MgRWxlbWVudGFsJyB9LFxuICAgIFtCb3NzLkNIQU9TX0ZBTkFUSUNdOiB7IG5hbWU6ICdDaGFvcyBGYW5hdGljJyB9LFxuICAgIFtCb3NzLkNPTU1BTkRFUl9aSUxZQU5BXTogeyBuYW1lOiAnQ29tbWFuZGVyIFppbHlhbmEnIH0sXG4gICAgW0Jvc3MuQ09SUE9SRUFMX0JFQVNUXTogeyBuYW1lOiAnQ29ycG9yZWFsIEJlYXN0JyB9LFxuICAgIFtCb3NzLkNSQVpZX0FSQ0hBRU9MT0dJU1RdOiB7IG5hbWU6ICdDcmF6eSBBcmNoYWVvbG9naXN0JyB9LFxuICAgIFtCb3NzLkRBR0FOTk9USF9QUklNRV06IHsgbmFtZTogJ0RhZ2Fubm90aCBQcmltZScgfSxcbiAgICBbQm9zcy5EQUdBTk5PVEhfUkVYXTogeyBuYW1lOiAnRGFnYW5ub3RoIFJleCcgfSxcbiAgICBbQm9zcy5EQUdBTk5PVEhfU1VQUkVNRV06IHsgbmFtZTogJ0RhZ2Fubm90aCBTdXByZW1lJyB9LFxuICAgIFtCb3NzLkRFUkFOR0VEX0FSQ0hBRU9MT0dJU1RdOiB7IG5hbWU6ICdEZXJhbmdlZCBBcmNoYWVvbG9naXN0JyB9LFxuICAgIFtCb3NzLkRVS0VfU1VDRUxMVVNdOiB7IG5hbWU6ICdEdWtlIFN1Y2VsbHVzJyB9LFxuICAgIFtCb3NzLkdFTkVSQUxfR1JBQVJET1JdOiB7IG5hbWU6ICdHZW5lcmFsIEdyYWFyZG9yJyB9LFxuICAgIFtCb3NzLkdJQU5UX01PTEVdOiB7IG5hbWU6ICdHaWFudCBNb2xlJyB9LFxuICAgIFtCb3NzLkdST1RFU1FVRV9HVUFSRElBTlNdOiB7IG5hbWU6ICdHcm90ZXNxdWUgR3VhcmRpYW5zJyB9LFxuICAgIFtCb3NzLkhFU1BPUkldOiB7IG5hbWU6ICdIZXNwb3JpJyB9LFxuICAgIFtCb3NzLlRIRV9IVUVZQ09BVExdOiB7IG5hbWU6ICdUaGUgSHVleWNvYXRsJyB9LFxuICAgIFtCb3NzLktBTFBISVRFX1FVRUVOXTogeyBuYW1lOiAnS2FscGhpdGUgUXVlZW4nIH0sXG4gICAgW0Jvc3MuS0lOR19CTEFDS19EUkFHT05dOiB7IG5hbWU6ICdLaW5nIEJsYWNrIERyYWdvbicgfSxcbiAgICBbQm9zcy5LUkFLRU5dOiB7IG5hbWU6ICdLcmFrZW4nIH0sXG4gICAgW0Jvc3MuS1JFRUFSUkFdOiB7IG5hbWU6IFwiS3JlZSdBcnJhXCIgfSxcbiAgICBbQm9zcy5LUklMX1RTVVRTQVJPVEhdOiB7IG5hbWU6IFwiSydyaWwgVHN1dHNhcm90aFwiIH0sXG4gICAgW0Jvc3MuTFVOQVJfQ0hFU1RTXTogeyBuYW1lOiAnTHVuYXIgQ2hlc3RzJyB9LFxuICAgIFtCb3NzLk1JTUlDXTogeyBuYW1lOiAnTWltaWMnLCBtaW5pbXVtVmFsdWU6IDEgfSxcbiAgICBbQm9zcy5ORVhdOiB7IG5hbWU6ICdOZXgnIH0sXG4gICAgW0Jvc3MuTklHSFRNQVJFXTogeyBuYW1lOiAnTmlnaHRtYXJlJyB9LFxuICAgIFtCb3NzLlBIT1NBTklTX05JR0hUTUFSRV06IHsgbmFtZTogXCJQaG9zYW5pJ3MgTmlnaHRtYXJlXCIgfSxcbiAgICBbQm9zcy5PQk9SXTogeyBuYW1lOiAnT2JvcicsIGlzTWVtYmVyczogZmFsc2UgfSxcbiAgICBbQm9zcy5QSEFOVE9NX01VU1BBSF06IHsgbmFtZTogJ1BoYW50b20gTXVzcGFoJyB9LFxuICAgIFtCb3NzLlNBUkFDSE5JU106IHsgbmFtZTogJ1NhcmFjaG5pcycgfSxcbiAgICBbQm9zcy5TQ09SUElBXTogeyBuYW1lOiAnU2NvcnBpYScgfSxcbiAgICBbQm9zcy5TQ1VSUklVU106IHsgbmFtZTogJ1NjdXJyaXVzJyB9LFxuICAgIFtCb3NzLlNLT1RJWk9dOiB7IG5hbWU6ICdTa290aXpvJyB9LFxuICAgIFtCb3NzLlNPTF9IRVJFRElUXTogeyBuYW1lOiAnU29sIEhlcmVkaXQnIH0sXG4gICAgW0Jvc3MuU1BJTkRFTF06IHsgbmFtZTogJ1NwaW5kZWwnIH0sXG4gICAgW0Jvc3MuVEVNUE9ST1NTXTogeyBuYW1lOiAnVGVtcG9yb3NzJyB9LFxuICAgIFtCb3NzLlRIRV9HQVVOVExFVF06IHsgbmFtZTogJ1RoZSBHYXVudGxldCcgfSxcbiAgICBbQm9zcy5USEVfQ09SUlVQVEVEX0dBVU5UTEVUXTogeyBuYW1lOiAnVGhlIENvcnJ1cHRlZCBHYXVudGxldCcgfSxcbiAgICBbQm9zcy5USEVfTEVWSUFUSEFOXTogeyBuYW1lOiAnVGhlIExldmlhdGhhbicgfSxcbiAgICBbQm9zcy5USEVfV0hJU1BFUkVSXTogeyBuYW1lOiAnVGhlIFdoaXNwZXJlcicgfSxcbiAgICBbQm9zcy5USEVBVFJFX09GX0JMT09EXTogeyBuYW1lOiAnVGhlYXRyZSBPZiBCbG9vZCcgfSxcbiAgICBbQm9zcy5USEVBVFJFX09GX0JMT09EX0hBUkRfTU9ERV06IHsgbmFtZTogJ1RoZWF0cmUgT2YgQmxvb2QgKEhNKScgfSxcbiAgICBbQm9zcy5USEVSTU9OVUNMRUFSX1NNT0tFX0RFVklMXTogeyBuYW1lOiAnVGhlcm1vbnVjbGVhciBTbW9rZSBEZXZpbCcgfSxcbiAgICBbQm9zcy5UT01CU19PRl9BTUFTQ1VUXTogeyBuYW1lOiAnVG9tYnMgb2YgQW1hc2N1dCcgfSxcbiAgICBbQm9zcy5UT01CU19PRl9BTUFTQ1VUX0VYUEVSVF06IHsgbmFtZTogJ1RvbWJzIG9mIEFtYXNjdXQgKEV4cGVydCBNb2RlKScgfSxcbiAgICBbQm9zcy5UWktBTF9aVUtdOiB7IG5hbWU6ICdUekthbC1adWsnLCBtaW5pbXVtVmFsdWU6IDEgfSxcbiAgICBbQm9zcy5UWlRPS19KQURdOiB7IG5hbWU6ICdUelRvay1KYWQnIH0sXG4gICAgW0Jvc3MuVkFSRE9SVklTXTogeyBuYW1lOiAnVmFyZG9ydmlzJyB9LFxuICAgIFtCb3NzLlZFTkVOQVRJU106IHsgbmFtZTogJ1ZlbmVuYXRpcycgfSxcbiAgICBbQm9zcy5WRVRJT05dOiB7IG5hbWU6IFwiVmV0J2lvblwiIH0sXG4gICAgW0Jvc3MuVk9SS0FUSF06IHsgbmFtZTogJ1ZvcmthdGgnIH0sXG4gICAgW0Jvc3MuV0lOVEVSVE9EVF06IHsgbmFtZTogJ1dpbnRlcnRvZHQnIH0sXG4gICAgW0Jvc3MuWkFMQ0FOT106IHsgbmFtZTogJ1phbGNhbm8nIH0sXG4gICAgW0Jvc3MuWlVMUkFIXTogeyBuYW1lOiAnWnVscmFoJyB9XG59LCBwcm9wcyA9PiAoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwcm9wcyksIHsgdHlwZTogTWV0cmljVHlwZS5CT1NTLCBtZWFzdXJlOiBNZXRyaWNNZWFzdXJlLktJTExTLCBpc01lbWJlcnM6ICdpc01lbWJlcnMnIGluIHByb3BzID8gcHJvcHMuaXNNZW1iZXJzIDogdHJ1ZSwgbWluaW11bVZhbHVlOiAnbWluaW11bVZhbHVlJyBpbiBwcm9wcyA/IHByb3BzLm1pbmltdW1WYWx1ZSA6IDUgfSkpKTtcbmNvbnN0IEFjdGl2aXR5UHJvcHMgPSBtYXBWYWx1ZXMoe1xuICAgIFtBY3Rpdml0eS5MRUFHVUVfUE9JTlRTXTogeyBuYW1lOiAnTGVhZ3VlIFBvaW50cycsIG1pbmltdW1WYWx1ZTogMTAwIH0sXG4gICAgW0FjdGl2aXR5LkJPVU5UWV9IVU5URVJfSFVOVEVSXTogeyBuYW1lOiAnQm91bnR5IEh1bnRlciAoSHVudGVyKScsIG1pbmltdW1WYWx1ZTogMiB9LFxuICAgIFtBY3Rpdml0eS5CT1VOVFlfSFVOVEVSX1JPR1VFXTogeyBuYW1lOiAnQm91bnR5IEh1bnRlciAoUm9ndWUpJywgbWluaW11bVZhbHVlOiAyIH0sXG4gICAgW0FjdGl2aXR5LkNMVUVfU0NST0xMU19BTExdOiB7IG5hbWU6ICdDbHVlIFNjcm9sbHMgKEFsbCknIH0sXG4gICAgW0FjdGl2aXR5LkNMVUVfU0NST0xMU19CRUdJTk5FUl06IHsgbmFtZTogJ0NsdWUgU2Nyb2xscyAoQmVnaW5uZXIpJyB9LFxuICAgIFtBY3Rpdml0eS5DTFVFX1NDUk9MTFNfRUFTWV06IHsgbmFtZTogJ0NsdWUgU2Nyb2xscyAoRWFzeSknIH0sXG4gICAgW0FjdGl2aXR5LkNMVUVfU0NST0xMU19NRURJVU1dOiB7IG5hbWU6ICdDbHVlIFNjcm9sbHMgKE1lZGl1bSknIH0sXG4gICAgW0FjdGl2aXR5LkNMVUVfU0NST0xMU19IQVJEXTogeyBuYW1lOiAnQ2x1ZSBTY3JvbGxzIChIYXJkKScgfSxcbiAgICBbQWN0aXZpdHkuQ0xVRV9TQ1JPTExTX0VMSVRFXTogeyBuYW1lOiAnQ2x1ZSBTY3JvbGxzIChFbGl0ZSknIH0sXG4gICAgW0FjdGl2aXR5LkNMVUVfU0NST0xMU19NQVNURVJdOiB7IG5hbWU6ICdDbHVlIFNjcm9sbHMgKE1hc3RlciknIH0sXG4gICAgW0FjdGl2aXR5LkxBU1RfTUFOX1NUQU5ESU5HXTogeyBuYW1lOiAnTGFzdCBNYW4gU3RhbmRpbmcnLCBtaW5pbXVtVmFsdWU6IDUwMCB9LFxuICAgIFtBY3Rpdml0eS5QVlBfQVJFTkFdOiB7IG5hbWU6ICdQdlAgQXJlbmEnLCBtaW5pbXVtVmFsdWU6IDI1MjUgfSxcbiAgICBbQWN0aXZpdHkuU09VTF9XQVJTX1pFQUxdOiB7IG5hbWU6ICdTb3VsIFdhcnMgWmVhbCcsIG1pbmltdW1WYWx1ZTogMjAwIH0sXG4gICAgW0FjdGl2aXR5LkdVQVJESUFOU19PRl9USEVfUklGVF06IHsgbmFtZTogJ0d1YXJkaWFucyBvZiB0aGUgUmlmdCcsIG1pbmltdW1WYWx1ZTogMiB9LFxuICAgIFtBY3Rpdml0eS5DT0xPU1NFVU1fR0xPUlldOiB7IG5hbWU6ICdDb2xvc3NldW0gR2xvcnknLCBtaW5pbXVtVmFsdWU6IDMwMCB9XG59LCBwcm9wcyA9PiAoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwcm9wcyksIHsgdHlwZTogTWV0cmljVHlwZS5BQ1RJVklUWSwgbWVhc3VyZTogTWV0cmljTWVhc3VyZS5TQ09SRSwgbWluaW11bVZhbHVlOiAnbWluaW11bVZhbHVlJyBpbiBwcm9wcyA/IHByb3BzLm1pbmltdW1WYWx1ZSA6IDEgfSkpKTtcbmNvbnN0IENvbXB1dGVkTWV0cmljUHJvcHMgPSBtYXBWYWx1ZXMoe1xuICAgIFtDb21wdXRlZE1ldHJpYy5FSFBdOiB7IG5hbWU6ICdFSFAnIH0sXG4gICAgW0NvbXB1dGVkTWV0cmljLkVIQl06IHsgbmFtZTogJ0VIQicgfVxufSwgcHJvcHMgPT4gKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMpLCB7IHR5cGU6IE1ldHJpY1R5cGUuQ09NUFVURUQsIG1lYXN1cmU6IE1ldHJpY01lYXN1cmUuVkFMVUUgfSkpKTtcbmNvbnN0IE1ldHJpY1Byb3BzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgU2tpbGxQcm9wcyksIEJvc3NQcm9wcyksIEFjdGl2aXR5UHJvcHMpLCBDb21wdXRlZE1ldHJpY1Byb3BzKTtcbmNvbnN0IE1FVFJJQ1MgPSBPYmplY3QudmFsdWVzKE1ldHJpYyk7XG5jb25zdCBTS0lMTFMgPSBPYmplY3QudmFsdWVzKFNraWxsKTtcbmNvbnN0IEJPU1NFUyA9IE9iamVjdC52YWx1ZXMoQm9zcyk7XG5jb25zdCBBQ1RJVklUSUVTID0gT2JqZWN0LnZhbHVlcyhBY3Rpdml0eSk7XG5jb25zdCBDT01QVVRFRF9NRVRSSUNTID0gT2JqZWN0LnZhbHVlcyhDb21wdXRlZE1ldHJpYyk7XG5jb25zdCBSRUFMX1NLSUxMUyA9IFNLSUxMUy5maWx0ZXIocyA9PiBzICE9PSBTa2lsbC5PVkVSQUxMKTtcbmNvbnN0IEYyUF9CT1NTRVMgPSBCT1NTRVMuZmlsdGVyKGIgPT4gIU1ldHJpY1Byb3BzW2JdLmlzTWVtYmVycyk7XG5jb25zdCBNRU1CRVJfU0tJTExTID0gU0tJTExTLmZpbHRlcihzID0+IE1ldHJpY1Byb3BzW3NdLmlzTWVtYmVycyk7XG5jb25zdCBDT01CQVRfU0tJTExTID0gU0tJTExTLmZpbHRlcihzID0+IE1ldHJpY1Byb3BzW3NdLmlzQ29tYmF0KTtcbmNvbnN0IFJFQUxfTUVUUklDUyA9IFsuLi5TS0lMTFMsIC4uLkJPU1NFUywgLi4uQUNUSVZJVElFU107XG5mdW5jdGlvbiBmaW5kTWV0cmljKG1ldHJpY05hbWUpIHtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhNZXRyaWNQcm9wcykpIHtcbiAgICAgICAgaWYgKHZhbHVlLm5hbWUudG9VcHBlckNhc2UoKSA9PT0gbWV0cmljTmFtZS50b1VwcGVyQ2FzZSgpKVxuICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBpc01ldHJpYyhtZXRyaWMpIHtcbiAgICByZXR1cm4gbWV0cmljIGluIE1ldHJpY1Byb3BzO1xufVxuZnVuY3Rpb24gaXNTa2lsbChtZXRyaWMpIHtcbiAgICByZXR1cm4gbWV0cmljIGluIFNraWxsUHJvcHM7XG59XG5mdW5jdGlvbiBpc0FjdGl2aXR5KG1ldHJpYykge1xuICAgIHJldHVybiBtZXRyaWMgaW4gQWN0aXZpdHlQcm9wcztcbn1cbmZ1bmN0aW9uIGlzQm9zcyhtZXRyaWMpIHtcbiAgICByZXR1cm4gbWV0cmljIGluIEJvc3NQcm9wcztcbn1cbmZ1bmN0aW9uIGlzQ29tcHV0ZWRNZXRyaWMobWV0cmljKSB7XG4gICAgcmV0dXJuIG1ldHJpYyBpbiBDb21wdXRlZE1ldHJpY1Byb3BzO1xufVxuZnVuY3Rpb24gZ2V0TWV0cmljUmFua0tleShtZXRyaWMpIHtcbiAgICByZXR1cm4gYCR7bWV0cmljfVJhbmtgO1xufVxuLy8gTWF5YmUgc29tZWRheSBJJ2xsIGJlIGdvb2QgZW5vdWdoIHdpdGggVFMgdG8gcmVzdHJpY3QgdGhlIHJldHVybiB0eXBlIHRvIHRoZSBpbnB1dCBtZXRyaWMgdHlwZVxuZnVuY3Rpb24gZ2V0TWV0cmljVmFsdWVLZXkobWV0cmljKSB7XG4gICAgaWYgKGlzU2tpbGwobWV0cmljKSkge1xuICAgICAgICByZXR1cm4gYCR7bWV0cmljfUV4cGVyaWVuY2VgO1xuICAgIH1cbiAgICBpZiAoaXNCb3NzKG1ldHJpYykpIHtcbiAgICAgICAgcmV0dXJuIGAke21ldHJpY31LaWxsc2A7XG4gICAgfVxuICAgIGlmIChpc0FjdGl2aXR5KG1ldHJpYykpIHtcbiAgICAgICAgcmV0dXJuIGAke21ldHJpY31TY29yZWA7XG4gICAgfVxuICAgIHJldHVybiBgJHttZXRyaWN9VmFsdWVgO1xufVxuZnVuY3Rpb24gZ2V0TWV0cmljTWVhc3VyZShtZXRyaWMpIHtcbiAgICByZXR1cm4gTWV0cmljUHJvcHNbbWV0cmljXS5tZWFzdXJlO1xufVxuZnVuY3Rpb24gZ2V0TWV0cmljTmFtZShtZXRyaWMpIHtcbiAgICByZXR1cm4gTWV0cmljUHJvcHNbbWV0cmljXS5uYW1lO1xufVxuZnVuY3Rpb24gZ2V0TWluaW11bVZhbHVlKG1ldHJpYykge1xuICAgIHJldHVybiBpc0Jvc3MobWV0cmljKSB8fCBpc0FjdGl2aXR5KG1ldHJpYykgPyBNZXRyaWNQcm9wc1ttZXRyaWNdLm1pbmltdW1WYWx1ZSA6IDE7XG59XG5mdW5jdGlvbiBnZXRQYXJlbnRFZmZpY2llbmN5TWV0cmljKG1ldHJpYykge1xuICAgIGlmIChpc0Jvc3MobWV0cmljKSlcbiAgICAgICAgcmV0dXJuIE1ldHJpYy5FSEI7XG4gICAgaWYgKGlzU2tpbGwobWV0cmljKSlcbiAgICAgICAgcmV0dXJuIE1ldHJpYy5FSFA7XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IENVU1RPTV9QRVJJT0RfUkVHRVggPSAvKFxcZCt5KT8oXFxkK20pPyhcXGQrdyk/KFxcZCtkKT8oXFxkK2gpPy87XG5jb25zdCBQZXJpb2RQcm9wcyA9IHtcbiAgICBbUGVyaW9kLkZJVkVfTUlOXTogeyBuYW1lOiAnNSBNaW4nLCBtaWxsaXNlY29uZHM6IDMwMDAwMCB9LFxuICAgIFtQZXJpb2QuREFZXTogeyBuYW1lOiAnRGF5JywgbWlsbGlzZWNvbmRzOiA4NjQwMDAwMCB9LFxuICAgIFtQZXJpb2QuV0VFS106IHsgbmFtZTogJ1dlZWsnLCBtaWxsaXNlY29uZHM6IDYwNDgwMDAwMCB9LFxuICAgIFtQZXJpb2QuTU9OVEhdOiB7IG5hbWU6ICdNb250aCcsIG1pbGxpc2Vjb25kczogMjY3ODQwMDAwMCB9LFxuICAgIFtQZXJpb2QuWUVBUl06IHsgbmFtZTogJ1llYXInLCBtaWxsaXNlY29uZHM6IDMxNTU2OTI2MDAwIH1cbn07XG5jb25zdCBQRVJJT0RTID0gT2JqZWN0LnZhbHVlcyhQZXJpb2QpO1xuZnVuY3Rpb24gZmluZFBlcmlvZChwZXJpb2ROYW1lKSB7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoUGVyaW9kUHJvcHMpKSB7XG4gICAgICAgIGlmICh2YWx1ZS5uYW1lLnRvVXBwZXJDYXNlKCkgPT09IHBlcmlvZE5hbWUudG9VcHBlckNhc2UoKSlcbiAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gaXNQZXJpb2QocGVyaW9kU3RyaW5nKSB7XG4gICAgcmV0dXJuIHBlcmlvZFN0cmluZyBpbiBQZXJpb2RQcm9wcztcbn1cbmZ1bmN0aW9uIHBhcnNlUGVyaW9kRXhwcmVzc2lvbihwZXJpb2RFeHByZXNzaW9uKSB7XG4gICAgY29uc3QgZml4ZWQgPSBwZXJpb2RFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGlzUGVyaW9kKGZpeGVkKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXhwcmVzc2lvbjogZml4ZWQsXG4gICAgICAgICAgICBkdXJhdGlvbk1zOiBQZXJpb2RQcm9wc1tmaXhlZF0ubWlsbGlzZWNvbmRzXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGZpeGVkLm1hdGNoKENVU1RPTV9QRVJJT0RfUkVHRVgpO1xuICAgIGlmICghcmVzdWx0IHx8IHJlc3VsdC5sZW5ndGggPT09IDAgfHwgcmVzdWx0WzBdICE9PSBmaXhlZClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgeWVhcnMgPSByZXN1bHRbMV0gPyBwYXJzZUludChyZXN1bHRbMV0ucmVwbGFjZSgvXFxEL2csICcnKSkgOiAwO1xuICAgIGNvbnN0IG1vbnRocyA9IHJlc3VsdFsyXSA/IHBhcnNlSW50KHJlc3VsdFsyXS5yZXBsYWNlKC9cXEQvZywgJycpKSA6IDA7XG4gICAgY29uc3Qgd2Vla3MgPSByZXN1bHRbM10gPyBwYXJzZUludChyZXN1bHRbM10ucmVwbGFjZSgvXFxEL2csICcnKSkgOiAwO1xuICAgIGNvbnN0IGRheXMgPSByZXN1bHRbNF0gPyBwYXJzZUludChyZXN1bHRbNF0ucmVwbGFjZSgvXFxEL2csICcnKSkgOiAwO1xuICAgIGNvbnN0IGhvdXJzID0gcmVzdWx0WzVdID8gcGFyc2VJbnQocmVzdWx0WzVdLnJlcGxhY2UoL1xcRC9nLCAnJykpIDogMDtcbiAgICBjb25zdCB5ZWFyc01zID0geWVhcnMgKiBQZXJpb2RQcm9wc1tQZXJpb2QuWUVBUl0ubWlsbGlzZWNvbmRzO1xuICAgIGNvbnN0IG1vbnRoc01zID0gbW9udGhzICogUGVyaW9kUHJvcHNbUGVyaW9kLk1PTlRIXS5taWxsaXNlY29uZHM7XG4gICAgY29uc3Qgd2Vla3NNcyA9IHdlZWtzICogUGVyaW9kUHJvcHNbUGVyaW9kLldFRUtdLm1pbGxpc2Vjb25kcztcbiAgICBjb25zdCBkYXlzTXMgPSBkYXlzICogUGVyaW9kUHJvcHNbUGVyaW9kLkRBWV0ubWlsbGlzZWNvbmRzO1xuICAgIGNvbnN0IGhvdXJzTXMgPSBob3VycyAqIChQZXJpb2RQcm9wc1tQZXJpb2QuREFZXS5taWxsaXNlY29uZHMgLyAyNCk7XG4gICAgY29uc3QgdG90YWxNcyA9IHllYXJzTXMgKyBtb250aHNNcyArIHdlZWtzTXMgKyBkYXlzTXMgKyBob3Vyc01zO1xuICAgIHJldHVybiB7XG4gICAgICAgIGV4cHJlc3Npb246IHJlc3VsdFswXSxcbiAgICAgICAgZHVyYXRpb25NczogdG90YWxNc1xuICAgIH07XG59XG5cbmNvbnN0IFBsYXllclR5cGVQcm9wcyA9IHtcbiAgICBbUGxheWVyVHlwZS5VTktOT1dOXTogeyBuYW1lOiAnVW5rbm93bicgfSxcbiAgICBbUGxheWVyVHlwZS5SRUdVTEFSXTogeyBuYW1lOiAnUmVndWxhcicgfSxcbiAgICBbUGxheWVyVHlwZS5JUk9OTUFOXTogeyBuYW1lOiAnSXJvbm1hbicgfSxcbiAgICBbUGxheWVyVHlwZS5IQVJEQ09SRV06IHsgbmFtZTogJ0hhcmRjb3JlJyB9LFxuICAgIFtQbGF5ZXJUeXBlLlVMVElNQVRFXTogeyBuYW1lOiAnVWx0aW1hdGUnIH1cbn07XG5jb25zdCBQbGF5ZXJCdWlsZFByb3BzID0ge1xuICAgIFtQbGF5ZXJCdWlsZC5NQUlOXTogeyBuYW1lOiAnTWFpbicgfSxcbiAgICBbUGxheWVyQnVpbGQuRjJQXTogeyBuYW1lOiAnRjJQJyB9LFxuICAgIFtQbGF5ZXJCdWlsZC5GMlBfTFZMM106IHsgbmFtZTogJ0YyUCAmIExldmVsIDMnIH0sXG4gICAgW1BsYXllckJ1aWxkLkxWTDNdOiB7IG5hbWU6ICdMZXZlbCAzJyB9LFxuICAgIFtQbGF5ZXJCdWlsZC5aRVJLRVJdOiB7IG5hbWU6ICdaZXJrZXIgUHVyZScgfSxcbiAgICBbUGxheWVyQnVpbGQuREVGMV06IHsgbmFtZTogJzEgRGVmZW5jZSBQdXJlJyB9LFxuICAgIFtQbGF5ZXJCdWlsZC5IUDEwXTogeyBuYW1lOiAnMTAgSGl0cG9pbnRzIFB1cmUnIH1cbn07XG5jb25zdCBQbGF5ZXJTdGF0dXNQcm9wcyA9IHtcbiAgICBbUGxheWVyU3RhdHVzLkFDVElWRV06IHsgbmFtZTogJ0FjdGl2ZScgfSxcbiAgICBbUGxheWVyU3RhdHVzLlVOUkFOS0VEXTogeyBuYW1lOiAnVW5yYW5rZWQnIH0sXG4gICAgW1BsYXllclN0YXR1cy5GTEFHR0VEXTogeyBuYW1lOiAnRmxhZ2dlZCcgfSxcbiAgICBbUGxheWVyU3RhdHVzLkFSQ0hJVkVEXTogeyBuYW1lOiAnQXJjaGl2ZWQnIH0sXG4gICAgW1BsYXllclN0YXR1cy5CQU5ORURdOiB7IG5hbWU6ICdCYW5uZWQnIH1cbn07XG5jb25zdCBQTEFZRVJfVFlQRVMgPSBPYmplY3QudmFsdWVzKFBsYXllclR5cGUpO1xuY29uc3QgUExBWUVSX0JVSUxEUyA9IE9iamVjdC52YWx1ZXMoUGxheWVyQnVpbGQpO1xuY29uc3QgUExBWUVSX1NUQVRVU0VTID0gT2JqZWN0LnZhbHVlcyhQbGF5ZXJTdGF0dXMpO1xuZnVuY3Rpb24gaXNQbGF5ZXJUeXBlKHR5cGVTdHJpbmcpIHtcbiAgICByZXR1cm4gdHlwZVN0cmluZyBpbiBQbGF5ZXJUeXBlUHJvcHM7XG59XG5mdW5jdGlvbiBpc1BsYXllckJ1aWxkKGJ1aWxkU3RyaW5nKSB7XG4gICAgcmV0dXJuIGJ1aWxkU3RyaW5nIGluIFBsYXllckJ1aWxkUHJvcHM7XG59XG5mdW5jdGlvbiBpc1BsYXllclN0YXR1cyhzdGF0dXNTdHJpbmcpIHtcbiAgICByZXR1cm4gc3RhdHVzU3RyaW5nIGluIFBsYXllclN0YXR1c1Byb3BzO1xufVxuZnVuY3Rpb24gZmluZFBsYXllclR5cGUodHlwZU5hbWUpIHtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhQbGF5ZXJUeXBlUHJvcHMpKSB7XG4gICAgICAgIGlmICh2YWx1ZS5uYW1lLnRvVXBwZXJDYXNlKCkgPT09IHR5cGVOYW1lLnRvVXBwZXJDYXNlKCkpXG4gICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGZpbmRQbGF5ZXJCdWlsZChidWlsZE5hbWUpIHtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhQbGF5ZXJCdWlsZFByb3BzKSkge1xuICAgICAgICBpZiAodmFsdWUubmFtZS50b1VwcGVyQ2FzZSgpID09PSBidWlsZE5hbWUudG9VcHBlckNhc2UoKSlcbiAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBmb3JtYXROdW1iZXIobnVtLCB3aXRoTGV0dGVycyA9IGZhbHNlLCBkZWNpbWFsUHJlY2lzaW9uID0gMikge1xuICAgIGlmIChudW0gPT09IHVuZGVmaW5lZCB8fCBudW0gPT09IG51bGwpXG4gICAgICAgIHJldHVybiAtMTtcbiAgICAvLyBJZiBudW1iZXIgaXMgZmxvYXRcbiAgICBpZiAobnVtICUgMSAhPT0gMCkge1xuICAgICAgICByZXR1cm4gKE1hdGgucm91bmQobnVtICogMTAwKSAvIDEwMCkudG9Mb2NhbGVTdHJpbmcoJ2VuLVVTJyk7XG4gICAgfVxuICAgIGlmICgobnVtIDwgMTAwMDAgJiYgbnVtID4gLTEwMDAwKSB8fCAhd2l0aExldHRlcnMpIHtcbiAgICAgICAgcmV0dXJuIG51bS50b0xvY2FsZVN0cmluZygnZW4tVVMnKTtcbiAgICB9XG4gICAgLy8gPCAxMDBrXG4gICAgaWYgKG51bSA8IDEwMDAwMCAmJiBudW0gPiAtMTAwMDAwKSB7XG4gICAgICAgIC8vIElmIGhhcyBubyBkZWNpbWFscywgcmV0dXJuIGFzIHdob2xlIG51bWJlciBpbnN0ZWFkICgxMC4wMGsgPT4gMTBrKVxuICAgICAgICBpZiAoKG51bSAvIDEwMDApICUgMSA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBgJHtudW0gLyAxMDAwfWtgO1xuICAgICAgICByZXR1cm4gYCR7KG51bSAvIDEwMDApLnRvRml4ZWQoZGVjaW1hbFByZWNpc2lvbil9a2A7XG4gICAgfVxuICAgIC8vIDwgMTAgbWlsbGlvblxuICAgIGlmIChudW0gPCAxMDAwMDAwMCAmJiBudW0gPiAtMTAwMDAwMDApIHtcbiAgICAgICAgcmV0dXJuIGAke01hdGgucm91bmQobnVtIC8gMTAwMCl9a2A7XG4gICAgfVxuICAgIC8vIDwgMSBiaWxsaW9uXG4gICAgaWYgKG51bSA8IDEwMDAwMDAwMDAgJiYgbnVtID4gLTEwMDAwMDAwMDApIHtcbiAgICAgICAgLy8gSWYgaGFzIG5vIGRlY2ltYWxzLCByZXR1cm4gYXMgd2hvbGUgbnVtYmVyIGluc3RlYWQgKDEwLjAwbSA9PiAxMG0pXG4gICAgICAgIGlmICgobnVtIC8gMTAwMDAwMCkgJSAxID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGAke251bSAvIDEwMDAwMDB9bWA7XG4gICAgICAgIHJldHVybiBgJHsobnVtIC8gMTAwMDAwMCkudG9GaXhlZChkZWNpbWFsUHJlY2lzaW9uKX1tYDtcbiAgICB9XG4gICAgLy8gSWYgaGFzIG5vIGRlY2ltYWxzLCByZXR1cm4gYXMgd2hvbGUgbnVtYmVyIGluc3RlYWQgKDEwLjAwYiA9PiAxMGIpXG4gICAgaWYgKChudW0gLyAxMDAwMDAwMDAwKSAlIDEgPT09IDApXG4gICAgICAgIHJldHVybiBgJHtudW0gLyAxMDAwMDAwMDAwfWJgO1xuICAgIHJldHVybiBgJHsobnVtIC8gMTAwMDAwMDAwMCkudG9GaXhlZChkZWNpbWFsUHJlY2lzaW9uKX1iYDtcbn1cbmZ1bmN0aW9uIHBhZE51bWJlcih2YWx1ZSkge1xuICAgIGlmICghdmFsdWUpXG4gICAgICAgIHJldHVybiAnMDAnO1xuICAgIHJldHVybiB2YWx1ZSA8IDEwID8gYDAke3ZhbHVlfWAgOiB2YWx1ZS50b1N0cmluZygpO1xufVxuZnVuY3Rpb24gcm91bmQobnVtLCBjYXNlcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG51bSAqIE1hdGgucG93KDEwLCBjYXNlcykpIC8gTWF0aC5wb3coMTAsIGNhc2VzKTtcbn1cblxudmFyIEVmZmljaWVuY3lBbGdvcml0aG1UeXBlO1xuKGZ1bmN0aW9uIChFZmZpY2llbmN5QWxnb3JpdGhtVHlwZSkge1xuICAgIEVmZmljaWVuY3lBbGdvcml0aG1UeXBlW1wiTUFJTlwiXSA9IFwibWFpblwiO1xuICAgIEVmZmljaWVuY3lBbGdvcml0aG1UeXBlW1wiSVJPTk1BTlwiXSA9IFwiaXJvbm1hblwiO1xuICAgIEVmZmljaWVuY3lBbGdvcml0aG1UeXBlW1wiVUxUSU1BVEVcIl0gPSBcInVsdGltYXRlXCI7XG4gICAgRWZmaWNpZW5jeUFsZ29yaXRobVR5cGVbXCJMVkwzXCJdID0gXCJsdmwzXCI7XG4gICAgRWZmaWNpZW5jeUFsZ29yaXRobVR5cGVbXCJGMlBcIl0gPSBcImYycFwiO1xuICAgIEVmZmljaWVuY3lBbGdvcml0aG1UeXBlW1wiRjJQX0xWTDNcIl0gPSBcImYycF9sdmwzXCI7XG4gICAgRWZmaWNpZW5jeUFsZ29yaXRobVR5cGVbXCJGMlBfSVJPTk1BTlwiXSA9IFwiZjJwX2lyb25tYW5cIjtcbiAgICBFZmZpY2llbmN5QWxnb3JpdGhtVHlwZVtcIkYyUF9MVkwzX0lST05NQU5cIl0gPSBcImYycF9sdmwzX2lyb25tYW5cIjtcbn0pKEVmZmljaWVuY3lBbGdvcml0aG1UeXBlIHx8IChFZmZpY2llbmN5QWxnb3JpdGhtVHlwZSA9IHt9KSk7XG5cbmNsYXNzIEVmZmljaWVuY3lDbGllbnQgZXh0ZW5kcyBCYXNlQVBJQ2xpZW50IHtcbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSBjdXJyZW50IGVmZmljaWVuY3kgbGVhZGVyYm9hcmQgZm9yIGEgc3BlY2lmaWMgZWZmaWNpZW5jeSBtZXRyaWMsIHBsYXllclR5cGUsIHBsYXllckJ1aWxkIGFuZCBjb3VudHJ5LlxuICAgICAqIEByZXR1cm5zIEEgbGlzdCBvZiBwbGF5ZXJzLlxuICAgICAqL1xuICAgIGdldEVmZmljaWVuY3lMZWFkZXJib2FyZHMoZmlsdGVyLCBwYWdpbmF0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlcXVlc3QoJy9lZmZpY2llbmN5L2xlYWRlcmJvYXJkJywgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBmaWx0ZXIpLCBwYWdpbmF0aW9uKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgdGhlIHRvcCBFSFAgKEVmZmljaWVudCBIb3VycyBQbGF5ZWQpIHJhdGVzLlxuICAgICAqIEByZXR1cm5zIEEgbGlzdCBvZiBza2lsbGluZyBtZXRob2RzIGFuZCB0aGVpciBib251cyBleHAgcmF0aW9zLlxuICAgICAqL1xuICAgIGdldEVIUFJhdGVzKGFsZ29yaXRobVR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVxdWVzdCgnL2VmZmljaWVuY3kvcmF0ZXMnLCB7XG4gICAgICAgICAgICBtZXRyaWM6IE1ldHJpYy5FSFAsXG4gICAgICAgICAgICB0eXBlOiBhbGdvcml0aG1UeXBlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSB0b3AgRUhCIChFZmZpY2llbnQgSG91cnMgQm9zc2VkKSByYXRlcy5cbiAgICAgKiBAcmV0dXJucyBBIGxpc3Qgb2YgYm9zc2VzIGFuZCB0aGVpciByZXNwZWN0aXZlIFwicGVyLWhvdXJcIiBraWxsIHJhdGVzLlxuICAgICAqL1xuICAgIGdldEVIQlJhdGVzKGFsZ29yaXRobVR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVxdWVzdCgnL2VmZmljaWVuY3kvcmF0ZXMnLCB7XG4gICAgICAgICAgICBtZXRyaWM6IE1ldHJpYy5FSEIsXG4gICAgICAgICAgICB0eXBlOiBhbGdvcml0aG1UeXBlXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY2xhc3MgTmFtZUNoYW5nZXNDbGllbnQgZXh0ZW5kcyBCYXNlQVBJQ2xpZW50IHtcbiAgICAvKipcbiAgICAgKiBTZWFyY2hlcyBmb3IgbmFtZSBjaGFuZ2VzIHRoYXQgbWF0Y2ggYSBuYW1lIGFuZC9vciBzdGF0dXMgZmlsdGVyLlxuICAgICAqIEByZXR1cm5zIEEgbGlzdCBvZiBuYW1lIGNoYW5nZXMuXG4gICAgICovXG4gICAgc2VhcmNoTmFtZUNoYW5nZXMoZmlsdGVyLCBwYWdpbmF0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlcXVlc3QoJy9uYW1lcycsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZmlsdGVyKSwgcGFnaW5hdGlvbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdWJtaXRzIGEgbmFtZSBjaGFuZ2UgcmVxdWVzdCBiZXR3ZWVuIHR3byB1c2VybmFtZXMgKG9sZCBhbmQgbmV3KS5cbiAgICAgKiBAcmV0dXJucyBBIHBlbmRpbmcgbmFtZSBjaGFuZ2UgcmVxdWVzdCwgdG8gYmUgcmV2aWV3ZWQgYW5kIHJlc29sdmVkIGF0IGEgbGF0ZXIgZGF0ZS5cbiAgICAgKi9cbiAgICBzdWJtaXROYW1lQ2hhbmdlKG9sZE5hbWUsIG5ld05hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zdFJlcXVlc3QoJy9uYW1lcycsIHsgb2xkTmFtZSwgbmV3TmFtZSB9KTtcbiAgICB9XG59XG5cbmNsYXNzIENvbXBldGl0aW9uc0NsaWVudCBleHRlbmRzIEJhc2VBUElDbGllbnQge1xuICAgIC8qKlxuICAgICAqIFNlYXJjaGVzIGZvciBjb21wZXRpdGlvbnMgdGhhdCBtYXRjaCBhIHRpdGxlLCB0eXBlLCBtZXRyaWMgYW5kIHN0YXR1cyBmaWx0ZXIuXG4gICAgICogQHJldHVybnMgQSBsaXN0IG9mIGNvbXBldGl0aW9ucy5cbiAgICAgKi9cbiAgICBzZWFyY2hDb21wZXRpdGlvbnMoZmlsdGVyLCBwYWdpbmF0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlcXVlc3QoJy9jb21wZXRpdGlvbnMnLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGZpbHRlciksIHBhZ2luYXRpb24pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyB0aGUgY29tcGV0aXRpb24ncyBmdWxsIGRldGFpbHMsIGluY2x1ZGluZyBhbGwgdGhlIHBhcnRpY2lwYW50cyBhbmQgdGhlaXIgcHJvZ3Jlc3MuXG4gICAgICogQHJldHVybnMgQSBjb21wZXRpdGlvbiB3aXRoIGEgbGlzdCBvZiBwYXJ0aWNpcGFudHMuXG4gICAgICovXG4gICAgZ2V0Q29tcGV0aXRpb25EZXRhaWxzKGlkLCBwcmV2aWV3TWV0cmljKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlcXVlc3QoYC9jb21wZXRpdGlvbnMvJHtpZH1gLCB7IG1ldHJpYzogcHJldmlld01ldHJpYyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyB0aGUgY29tcGV0aXRpb24ncyBwYXJ0aWNpcGFudCBsaXN0IGluIENTViBmb3JtYXQuXG4gICAgICogQHJldHVybnMgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgQ1NWIGNvbnRlbnQuXG4gICAgICovXG4gICAgZ2V0Q29tcGV0aXRpb25EZXRhaWxzQ1NWKGlkLCBwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGV4dChgL2NvbXBldGl0aW9ucy8ke2lkfS9jc3ZgLCBPYmplY3QuYXNzaWduKHsgbWV0cmljOiBwYXJhbXMucHJldmlld01ldHJpYyB9LCBwYXJhbXMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyBhbGwgdGhlIHZhbHVlcyAoZXhwLCBrYywgZXRjKSBpbiBjaHJvbm9sb2dpY2FsIG9yZGVyIHdpdGhpbiB0aGUgYm91bmRzXG4gICAgICogb2YgdGhlIGNvbXBldGl0aW9uLCBmb3IgdGhlIHRvcCA1IHBhcnRpY2lwYW50cy5cbiAgICAgKiBAcmV0dXJucyBBIGxpc3Qgb2YgY29tcGV0aXRpb24gcHJvZ3Jlc3Mgb2JqZWN0cywgaW5jbHVkaW5nIHRoZSBwbGF5ZXIgYW5kIHRoZWlyIHZhbHVlIGhpc3Rvcnkgb3ZlciB0aW1lLlxuICAgICAqL1xuICAgIGdldENvbXBldGl0aW9uVG9wSGlzdG9yeShpZCwgcHJldmlld01ldHJpYykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KGAvY29tcGV0aXRpb25zLyR7aWR9L3RvcC1oaXN0b3J5YCwge1xuICAgICAgICAgICAgbWV0cmljOiBwcmV2aWV3TWV0cmljXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGNvbXBldGl0aW9uLlxuICAgICAqIEByZXR1cm5zIFRoZSBuZXdseSBjcmVhdGVkIGNvbXBldGl0aW9uLCBhbmQgdGhlIHZlcmlmaWNhdGlvbiBjb2RlIHRoYXQgYXV0aG9yaXplcyBmdXR1cmUgY2hhbmdlcyB0byBpdC5cbiAgICAgKi9cbiAgICBjcmVhdGVDb21wZXRpdGlvbihwYXlsb2FkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc3RSZXF1ZXN0KCcvY29tcGV0aXRpb25zJywgcGF5bG9hZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVkaXRzIGFuIGV4aXN0aW5nIGNvbXBldGl0aW9uLlxuICAgICAqIEByZXR1cm5zIFRoZSB1cGRhdGVkIGNvbXBldGl0aW9uLlxuICAgICAqL1xuICAgIGVkaXRDb21wZXRpdGlvbihpZCwgcGF5bG9hZCwgdmVyaWZpY2F0aW9uQ29kZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdXRSZXF1ZXN0KGAvY29tcGV0aXRpb25zLyR7aWR9YCwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwYXlsb2FkKSwgeyB2ZXJpZmljYXRpb25Db2RlIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlcyBhbiBleGlzdGluZyBjb21wZXRpdGlvbi5cbiAgICAgKiBAcmV0dXJucyBBIGNvbmZpcm1hdGlvbiBtZXNzYWdlLlxuICAgICAqL1xuICAgIGRlbGV0ZUNvbXBldGl0aW9uKGlkLCB2ZXJpZmljYXRpb25Db2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlbGV0ZVJlcXVlc3QoYC9jb21wZXRpdGlvbnMvJHtpZH1gLCB7IHZlcmlmaWNhdGlvbkNvZGUgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYWxsICh2YWxpZCkgZ2l2ZW4gcGFydGljaXBhbnRzIHRvIGEgY29tcGV0aXRpb24sIGlnbm9yaW5nIGR1cGxpY2F0ZXMuXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBwYXJ0aWNpcGFudHMgYWRkZWQgYW5kIGEgY29uZmlybWF0aW9uIG1lc3NhZ2UuXG4gICAgICovXG4gICAgYWRkUGFydGljaXBhbnRzKGlkLCBwYXJ0aWNpcGFudHMsIHZlcmlmaWNhdGlvbkNvZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zdFJlcXVlc3QoYC9jb21wZXRpdGlvbnMvJHtpZH0vcGFydGljaXBhbnRzYCwge1xuICAgICAgICAgICAgdmVyaWZpY2F0aW9uQ29kZSxcbiAgICAgICAgICAgIHBhcnRpY2lwYW50c1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCBnaXZlbiB1c2VybmFtZXMgZnJvbSBhIGNvbXBldGl0aW9uLCBpZ25vcmluZyB1c2VybmFtZXMgdGhhdCBhcmVuJ3QgY29tcGV0aW5nLlxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgcGFydGljaXBhbnRzIHJlbW92ZWQgYW5kIGEgY29uZmlybWF0aW9uIG1lc3NhZ2UuXG4gICAgICovXG4gICAgcmVtb3ZlUGFydGljaXBhbnRzKGlkLCBwYXJ0aWNpcGFudHMsIHZlcmlmaWNhdGlvbkNvZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlUmVxdWVzdChgL2NvbXBldGl0aW9ucy8ke2lkfS9wYXJ0aWNpcGFudHNgLCB7XG4gICAgICAgICAgICB2ZXJpZmljYXRpb25Db2RlLFxuICAgICAgICAgICAgcGFydGljaXBhbnRzXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCAodmFsaWQpIGdpdmVuIHRlYW1zIHRvIGEgdGVhbSBjb21wZXRpdGlvbiwgaWdub3JpbmcgZHVwbGljYXRlcy5cbiAgICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIHBhcnRpY2lwYW50cyBhZGRlZCBhbmQgYSBjb25maXJtYXRpb24gbWVzc2FnZS5cbiAgICAgKi9cbiAgICBhZGRUZWFtcyhpZCwgdGVhbXMsIHZlcmlmaWNhdGlvbkNvZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zdFJlcXVlc3QoYC9jb21wZXRpdGlvbnMvJHtpZH0vdGVhbXNgLCB7XG4gICAgICAgICAgICB2ZXJpZmljYXRpb25Db2RlLFxuICAgICAgICAgICAgdGVhbXNcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbGwgZ2l2ZW4gdGVhbSBuYW1lcyBmcm9tIGEgY29tcGV0aXRpb24sIGlnbm9yaW5nIG5hbWVzIHRoYXQgZG9uJ3QgZXhpc3QuXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBwYXJ0aWNpcGFudHMgcmVtb3ZlZCBhbmQgYSBjb25maXJtYXRpb24gbWVzc2FnZS5cbiAgICAgKi9cbiAgICByZW1vdmVUZWFtcyhpZCwgdGVhbU5hbWVzLCB2ZXJpZmljYXRpb25Db2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlbGV0ZVJlcXVlc3QoYC9jb21wZXRpdGlvbnMvJHtpZH0vdGVhbXNgLCB7XG4gICAgICAgICAgICB2ZXJpZmljYXRpb25Db2RlLFxuICAgICAgICAgICAgdGVhbU5hbWVzXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIFwidXBkYXRlXCIgcmVxdWVzdCB0byB0aGUgcXVldWUsIGZvciBlYWNoIG91dGRhdGVkIGNvbXBldGl0aW9uIHBhcnRpY2lwYW50LlxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgcGxheWVycyB0byBiZSB1cGRhdGVkIGFuZCBhIGNvbmZpcm1hdGlvbiBtZXNzYWdlLlxuICAgICAqL1xuICAgIHVwZGF0ZUFsbChpZCwgdmVyaWZpY2F0aW9uQ29kZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3N0UmVxdWVzdChgL2NvbXBldGl0aW9ucy8ke2lkfS91cGRhdGUtYWxsYCwge1xuICAgICAgICAgICAgdmVyaWZpY2F0aW9uQ29kZVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIFdPTUNsaWVudCBleHRlbmRzIEJhc2VBUElDbGllbnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYmFzZUFwaVVybCA9IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYmFzZUFQSVVybCkgfHwgY29uZmlnLmJhc2VBUElVcmw7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAneC11c2VyLWFnZW50JzogKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy51c2VyQWdlbnQpIHx8IGNvbmZpZy5kZWZhdWx0VXNlckFnZW50XG4gICAgICAgIH07XG4gICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYXBpS2V5KSB7XG4gICAgICAgICAgICBoZWFkZXJzWyd4LWFwaS1rZXknXSA9IG9wdGlvbnMuYXBpS2V5O1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKGhlYWRlcnMsIGJhc2VBcGlVcmwpO1xuICAgICAgICB0aGlzLmRlbHRhcyA9IG5ldyBEZWx0YXNDbGllbnQoaGVhZGVycywgYmFzZUFwaVVybCk7XG4gICAgICAgIHRoaXMuZ3JvdXBzID0gbmV3IEdyb3Vwc0NsaWVudChoZWFkZXJzLCBiYXNlQXBpVXJsKTtcbiAgICAgICAgdGhpcy5wbGF5ZXJzID0gbmV3IFBsYXllcnNDbGllbnQoaGVhZGVycywgYmFzZUFwaVVybCk7XG4gICAgICAgIHRoaXMucmVjb3JkcyA9IG5ldyBSZWNvcmRzQ2xpZW50KGhlYWRlcnMsIGJhc2VBcGlVcmwpO1xuICAgICAgICB0aGlzLmVmZmljaWVuY3kgPSBuZXcgRWZmaWNpZW5jeUNsaWVudChoZWFkZXJzLCBiYXNlQXBpVXJsKTtcbiAgICAgICAgdGhpcy5uYW1lQ2hhbmdlcyA9IG5ldyBOYW1lQ2hhbmdlc0NsaWVudChoZWFkZXJzLCBiYXNlQXBpVXJsKTtcbiAgICAgICAgdGhpcy5jb21wZXRpdGlvbnMgPSBuZXcgQ29tcGV0aXRpb25zQ2xpZW50KGhlYWRlcnMsIGJhc2VBcGlVcmwpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgQUNUSVZJVElFUywgQWN0aXZpdHksIEFjdGl2aXR5VHlwZSwgQk9TU0VTLCBCb3NzLCBDQVBQRURfTUFYX1RPVEFMX1hQLCBDT01CQVRfU0tJTExTLCBDT01QRVRJVElPTl9TVEFUVVNFUywgQ09NUEVUSVRJT05fVFlQRVMsIENPTVBVVEVEX01FVFJJQ1MsIENPVU5UUllfQ09ERVMsIENvbXBldGl0aW9uQ1NWVGFibGVUeXBlLCBDb21wZXRpdGlvblN0YXR1cywgQ29tcGV0aXRpb25TdGF0dXNQcm9wcywgQ29tcGV0aXRpb25UeXBlLCBDb21wZXRpdGlvblR5cGVQcm9wcywgQ29tcHV0ZWRNZXRyaWMsIENvdW50cnksIENvdW50cnlQcm9wcywgRWZmaWNpZW5jeUFsZ29yaXRobVR5cGUsIEYyUF9CT1NTRVMsIEdST1VQX1JPTEVTLCBHcm91cFJvbGUsIEdyb3VwUm9sZVByb3BzLCBNQVhfTEVWRUwsIE1BWF9TS0lMTF9FWFAsIE1BWF9WSVJUVUFMX0xFVkVMLCBNRU1CRVJfU0tJTExTLCBNRVRSSUNTLCBNZXRyaWMsIE1ldHJpY01lYXN1cmUsIE1ldHJpY1Byb3BzLCBNZXRyaWNUeXBlLCBOYW1lQ2hhbmdlU3RhdHVzLCBQRVJJT0RTLCBQTEFZRVJfQlVJTERTLCBQTEFZRVJfU1RBVFVTRVMsIFBMQVlFUl9UWVBFUywgUFJJVkVMRUdFRF9HUk9VUF9ST0xFUywgUGVyaW9kLCBQZXJpb2RQcm9wcywgUGxheWVyQnVpbGQsIFBsYXllckJ1aWxkUHJvcHMsIFBsYXllclN0YXR1cywgUGxheWVyU3RhdHVzUHJvcHMsIFBsYXllclR5cGUsIFBsYXllclR5cGVQcm9wcywgUkVBTF9NRVRSSUNTLCBSRUFMX1NLSUxMUywgU0tJTExTLCBTS0lMTF9FWFBfQVRfOTksIFNraWxsLCBXT01DbGllbnQsIGZpbmRDb3VudHJ5LCBmaW5kQ291bnRyeUJ5Q29kZSwgZmluZENvdW50cnlCeU5hbWUsIGZpbmRHcm91cFJvbGUsIGZpbmRNZXRyaWMsIGZpbmRQZXJpb2QsIGZpbmRQbGF5ZXJCdWlsZCwgZmluZFBsYXllclR5cGUsIGZvcm1hdE51bWJlciwgZ2V0Q29tYmF0TGV2ZWwsIGdldEV4cEZvckxldmVsLCBnZXRMZXZlbCwgZ2V0TWV0cmljTWVhc3VyZSwgZ2V0TWV0cmljTmFtZSwgZ2V0TWV0cmljUmFua0tleSwgZ2V0TWV0cmljVmFsdWVLZXksIGdldE1pbmltdW1WYWx1ZSwgZ2V0UGFyZW50RWZmaWNpZW5jeU1ldHJpYywgaXNBY3Rpdml0eSwgaXNCb3NzLCBpc0NvbXBldGl0aW9uU3RhdHVzLCBpc0NvbXBldGl0aW9uVHlwZSwgaXNDb21wdXRlZE1ldHJpYywgaXNDb3VudHJ5LCBpc0dyb3VwUm9sZSwgaXNNZXRyaWMsIGlzUGVyaW9kLCBpc1BsYXllckJ1aWxkLCBpc1BsYXllclN0YXR1cywgaXNQbGF5ZXJUeXBlLCBpc1NraWxsLCBwYWROdW1iZXIsIHBhcnNlUGVyaW9kRXhwcmVzc2lvbiwgcm91bmQgfTtcbiIsIi8qKlxuICogQG1vZHVsZSBjb25zdGFudHNcbiAqIEBzdW1tYXJ5IFVzZWZ1bCBjb25zdGFudHNcbiAqIEBkZXNjcmlwdGlvblxuICogQ29sbGVjdGlvbiBvZiB1c2VmdWwgZGF0ZSBjb25zdGFudHMuXG4gKlxuICogVGhlIGNvbnN0YW50cyBjb3VsZCBiZSBpbXBvcnRlZCBmcm9tIGBkYXRlLWZucy9jb25zdGFudHNgOlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBtYXhUaW1lLCBtaW5UaW1lIH0gZnJvbSBcIi4vY29uc3RhbnRzL2RhdGUtZm5zL2NvbnN0YW50c1wiO1xuICpcbiAqIGZ1bmN0aW9uIGlzQWxsb3dlZFRpbWUodGltZSkge1xuICogICByZXR1cm4gdGltZSA8PSBtYXhUaW1lICYmIHRpbWUgPj0gbWluVGltZTtcbiAqIH1cbiAqIGBgYFxuICovXG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBkYXlzSW5XZWVrXG4gKiBAc3VtbWFyeSBEYXlzIGluIDEgd2Vlay5cbiAqL1xuZXhwb3J0IGNvbnN0IGRheXNJbldlZWsgPSA3O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgZGF5c0luWWVhclxuICogQHN1bW1hcnkgRGF5cyBpbiAxIHllYXIuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIb3cgbWFueSBkYXlzIGluIGEgeWVhci5cbiAqXG4gKiBPbmUgeWVhcnMgZXF1YWxzIDM2NS4yNDI1IGRheXMgYWNjb3JkaW5nIHRvIHRoZSBmb3JtdWxhOlxuICpcbiAqID4gTGVhcCB5ZWFyIG9jY3VycyBldmVyeSA0IHllYXJzLCBleGNlcHQgZm9yIHllYXJzIHRoYXQgYXJlIGRpdmlzaWJsZSBieSAxMDAgYW5kIG5vdCBkaXZpc2libGUgYnkgNDAwLlxuICogPiAxIG1lYW4geWVhciA9ICgzNjUrMS80LTEvMTAwKzEvNDAwKSBkYXlzID0gMzY1LjI0MjUgZGF5c1xuICovXG5leHBvcnQgY29uc3QgZGF5c0luWWVhciA9IDM2NS4yNDI1O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWF4VGltZVxuICogQHN1bW1hcnkgTWF4aW11bSBhbGxvd2VkIHRpbWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IG1heFRpbWUgfSBmcm9tIFwiLi9jb25zdGFudHMvZGF0ZS1mbnMvY29uc3RhbnRzXCI7XG4gKlxuICogY29uc3QgaXNWYWxpZCA9IDg2NDAwMDAwMDAwMDAwMDEgPD0gbWF4VGltZTtcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBuZXcgRGF0ZSg4NjQwMDAwMDAwMDAwMDAxKTtcbiAqIC8vPT4gSW52YWxpZCBEYXRlXG4gKi9cbmV4cG9ydCBjb25zdCBtYXhUaW1lID0gTWF0aC5wb3coMTAsIDgpICogMjQgKiA2MCAqIDYwICogMTAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pblRpbWVcbiAqIEBzdW1tYXJ5IE1pbmltdW0gYWxsb3dlZCB0aW1lLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBtaW5UaW1lIH0gZnJvbSBcIi4vY29uc3RhbnRzL2RhdGUtZm5zL2NvbnN0YW50c1wiO1xuICpcbiAqIGNvbnN0IGlzVmFsaWQgPSAtODY0MDAwMDAwMDAwMDAwMSA+PSBtaW5UaW1lO1xuICogLy89PiBmYWxzZVxuICpcbiAqIG5ldyBEYXRlKC04NjQwMDAwMDAwMDAwMDAxKVxuICogLy89PiBJbnZhbGlkIERhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IG1pblRpbWUgPSAtbWF4VGltZTtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luV2Vla1xuICogQHN1bW1hcnkgTWlsbGlzZWNvbmRzIGluIDEgd2Vlay5cbiAqL1xuZXhwb3J0IGNvbnN0IG1pbGxpc2Vjb25kc0luV2VlayA9IDYwNDgwMDAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luRGF5XG4gKiBAc3VtbWFyeSBNaWxsaXNlY29uZHMgaW4gMSBkYXkuXG4gKi9cbmV4cG9ydCBjb25zdCBtaWxsaXNlY29uZHNJbkRheSA9IDg2NDAwMDAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWlsbGlzZWNvbmRzSW5NaW51dGVcbiAqIEBzdW1tYXJ5IE1pbGxpc2Vjb25kcyBpbiAxIG1pbnV0ZVxuICovXG5leHBvcnQgY29uc3QgbWlsbGlzZWNvbmRzSW5NaW51dGUgPSA2MDAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luSG91clxuICogQHN1bW1hcnkgTWlsbGlzZWNvbmRzIGluIDEgaG91clxuICovXG5leHBvcnQgY29uc3QgbWlsbGlzZWNvbmRzSW5Ib3VyID0gMzYwMDAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luU2Vjb25kXG4gKiBAc3VtbWFyeSBNaWxsaXNlY29uZHMgaW4gMSBzZWNvbmRcbiAqL1xuZXhwb3J0IGNvbnN0IG1pbGxpc2Vjb25kc0luU2Vjb25kID0gMTAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbnV0ZXNJblllYXJcbiAqIEBzdW1tYXJ5IE1pbnV0ZXMgaW4gMSB5ZWFyLlxuICovXG5leHBvcnQgY29uc3QgbWludXRlc0luWWVhciA9IDUyNTYwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbnV0ZXNJbk1vbnRoXG4gKiBAc3VtbWFyeSBNaW51dGVzIGluIDEgbW9udGguXG4gKi9cbmV4cG9ydCBjb25zdCBtaW51dGVzSW5Nb250aCA9IDQzMjAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWludXRlc0luRGF5XG4gKiBAc3VtbWFyeSBNaW51dGVzIGluIDEgZGF5LlxuICovXG5leHBvcnQgY29uc3QgbWludXRlc0luRGF5ID0gMTQ0MDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbnV0ZXNJbkhvdXJcbiAqIEBzdW1tYXJ5IE1pbnV0ZXMgaW4gMSBob3VyLlxuICovXG5leHBvcnQgY29uc3QgbWludXRlc0luSG91ciA9IDYwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbW9udGhzSW5RdWFydGVyXG4gKiBAc3VtbWFyeSBNb250aHMgaW4gMSBxdWFydGVyLlxuICovXG5leHBvcnQgY29uc3QgbW9udGhzSW5RdWFydGVyID0gMztcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1vbnRoc0luWWVhclxuICogQHN1bW1hcnkgTW9udGhzIGluIDEgeWVhci5cbiAqL1xuZXhwb3J0IGNvbnN0IG1vbnRoc0luWWVhciA9IDEyO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgcXVhcnRlcnNJblllYXJcbiAqIEBzdW1tYXJ5IFF1YXJ0ZXJzIGluIDEgeWVhclxuICovXG5leHBvcnQgY29uc3QgcXVhcnRlcnNJblllYXIgPSA0O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luSG91clxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIGhvdXIuXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5Ib3VyID0gMzYwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJbk1pbnV0ZVxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIG1pbnV0ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHNlY29uZHNJbk1pbnV0ZSA9IDYwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luRGF5XG4gKiBAc3VtbWFyeSBTZWNvbmRzIGluIDEgZGF5LlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luRGF5ID0gc2Vjb25kc0luSG91ciAqIDI0O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luV2Vla1xuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIHdlZWsuXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5XZWVrID0gc2Vjb25kc0luRGF5ICogNztcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJblllYXJcbiAqIEBzdW1tYXJ5IFNlY29uZHMgaW4gMSB5ZWFyLlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luWWVhciA9IHNlY29uZHNJbkRheSAqIGRheXNJblllYXI7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBzZWNvbmRzSW5Nb250aFxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIG1vbnRoXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5Nb250aCA9IHNlY29uZHNJblllYXIgLyAxMjtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJblF1YXJ0ZXJcbiAqIEBzdW1tYXJ5IFNlY29uZHMgaW4gMSBxdWFydGVyLlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luUXVhcnRlciA9IHNlY29uZHNJbk1vbnRoICogMztcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIGNvbnN0cnVjdEZyb21TeW1ib2xcbiAqIEBzdW1tYXJ5IFN5bWJvbCBlbmFibGluZyBEYXRlIGV4dGVuc2lvbnMgdG8gaW5oZXJpdCBwcm9wZXJ0aWVzIGZyb20gdGhlIHJlZmVyZW5jZSBkYXRlLlxuICpcbiAqIFRoZSBzeW1ib2wgaXMgdXNlZCB0byBlbmFibGUgdGhlIGBjb25zdHJ1Y3RGcm9tYCBmdW5jdGlvbiB0byBjb25zdHJ1Y3QgYSBkYXRlXG4gKiB1c2luZyBhIHJlZmVyZW5jZSBkYXRlIGFuZCBhIHZhbHVlLiBJdCBhbGxvd3MgdG8gdHJhbnNmZXIgZXh0cmEgcHJvcGVydGllc1xuICogZnJvbSB0aGUgcmVmZXJlbmNlIGRhdGUgdG8gdGhlIG5ldyBkYXRlLiBJdCdzIHVzZWZ1bCBmb3IgZXh0ZW5zaW9ucyBsaWtlXG4gKiBbYFRaRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy90eikgdGhhdCBhY2NlcHQgYSB0aW1lIHpvbmUgYXNcbiAqIGEgY29uc3RydWN0b3IgYXJndW1lbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBjb25zdHJ1Y3RGcm9tU3ltYm9sID0gU3ltYm9sLmZvcihcImNvbnN0cnVjdERhdGVGcm9tXCIpO1xuIiwiaW1wb3J0IHsgY29uc3RydWN0RnJvbVN5bWJvbCB9IGZyb20gXCIuL2NvbnN0YW50cy5qc1wiO1xuXG4vKipcbiAqIEBuYW1lIGNvbnN0cnVjdEZyb21cbiAqIEBjYXRlZ29yeSBHZW5lcmljIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnN0cnVjdHMgYSBkYXRlIHVzaW5nIHRoZSByZWZlcmVuY2UgZGF0ZSBhbmQgdGhlIHZhbHVlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgZnVuY3Rpb24gY29uc3RydWN0cyBhIG5ldyBkYXRlIHVzaW5nIHRoZSBjb25zdHJ1Y3RvciBmcm9tIHRoZSByZWZlcmVuY2VcbiAqIGRhdGUgYW5kIHRoZSBnaXZlbiB2YWx1ZS4gSXQgaGVscHMgdG8gYnVpbGQgZ2VuZXJpYyBmdW5jdGlvbnMgdGhhdCBhY2NlcHRcbiAqIGRhdGUgZXh0ZW5zaW9ucy5cbiAqXG4gKiBJdCBkZWZhdWx0cyB0byBgRGF0ZWAgaWYgdGhlIHBhc3NlZCByZWZlcmVuY2UgZGF0ZSBpcyBhIG51bWJlciBvciBhIHN0cmluZy5cbiAqXG4gKiBTdGFydGluZyBmcm9tIHYzLjcuMCwgaXQgYWxsb3dzIHRvIGNvbnN0cnVjdCBhIGRhdGUgdXNpbmcgYFtTeW1ib2wuZm9yKFwiY29uc3RydWN0RGF0ZUZyb21cIildYFxuICogZW5hYmxpbmcgdG8gdHJhbnNmZXIgZXh0cmEgcHJvcGVydGllcyBmcm9tIHRoZSByZWZlcmVuY2UgZGF0ZSB0byB0aGUgbmV3IGRhdGUuXG4gKiBJdCdzIHVzZWZ1bCBmb3IgZXh0ZW5zaW9ucyBsaWtlIFtgVFpEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3R6KVxuICogdGhhdCBhY2NlcHQgYSB0aW1lIHpvbmUgYXMgYSBjb25zdHJ1Y3RvciBhcmd1bWVudC5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSByZWZlcmVuY2UgZGF0ZSB0byB0YWtlIGNvbnN0cnVjdG9yIGZyb21cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjcmVhdGUgdGhlIGRhdGVcbiAqXG4gKiBAcmV0dXJucyBEYXRlIGluaXRpYWxpemVkIHVzaW5nIHRoZSBnaXZlbiBkYXRlIGFuZCB2YWx1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSBcIi4vY29uc3RydWN0RnJvbS9kYXRlLWZuc1wiO1xuICpcbiAqIC8vIEEgZnVuY3Rpb24gdGhhdCBjbG9uZXMgYSBkYXRlIHByZXNlcnZpbmcgdGhlIG9yaWdpbmFsIHR5cGVcbiAqIGZ1bmN0aW9uIGNsb25lRGF0ZTxEYXRlVHlwZSBleHRlbmRzIERhdGU+KGRhdGU6IERhdGVUeXBlKTogRGF0ZVR5cGUge1xuICogICByZXR1cm4gY29uc3RydWN0RnJvbShcbiAqICAgICBkYXRlLCAvLyBVc2UgY29uc3RydWN0b3IgZnJvbSB0aGUgZ2l2ZW4gZGF0ZVxuICogICAgIGRhdGUuZ2V0VGltZSgpIC8vIFVzZSB0aGUgZGF0ZSB2YWx1ZSB0byBjcmVhdGUgYSBuZXcgZGF0ZVxuICogICApO1xuICogfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uc3RydWN0RnJvbShkYXRlLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIGRhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIGRhdGUodmFsdWUpO1xuXG4gIGlmIChkYXRlICYmIHR5cGVvZiBkYXRlID09PSBcIm9iamVjdFwiICYmIGNvbnN0cnVjdEZyb21TeW1ib2wgaW4gZGF0ZSlcbiAgICByZXR1cm4gZGF0ZVtjb25zdHJ1Y3RGcm9tU3ltYm9sXSh2YWx1ZSk7XG5cbiAgaWYgKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSByZXR1cm4gbmV3IGRhdGUuY29uc3RydWN0b3IodmFsdWUpO1xuXG4gIHJldHVybiBuZXcgRGF0ZSh2YWx1ZSk7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgY29uc3RydWN0RnJvbTtcbiIsImltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tIFwiLi9jb25zdHJ1Y3RGcm9tLmpzXCI7XG5cbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqIFN0YXJ0aW5nIGZyb20gdjMuNy4wLCBpdCBjbG9uZXMgYSBkYXRlIHVzaW5nIGBbU3ltYm9sLmZvcihcImNvbnN0cnVjdERhdGVGcm9tXCIpXWBcbiAqIGVuYWJsaW5nIHRvIHRyYW5zZmVyIGV4dHJhIHByb3BlcnRpZXMgZnJvbSB0aGUgcmVmZXJlbmNlIGRhdGUgdG8gdGhlIG5ldyBkYXRlLlxuICogSXQncyB1c2VmdWwgZm9yIGV4dGVuc2lvbnMgbGlrZSBbYFRaRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy90eilcbiAqIHRoYXQgYWNjZXB0IGEgdGltZSB6b25lIGFzIGEgY29uc3RydWN0b3IgYXJndW1lbnQuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKiBAdHlwZVBhcmFtIFJlc3VsdERhdGUgLSBUaGUgcmVzdWx0IGBEYXRlYCB0eXBlLCBpdCBpcyB0aGUgdHlwZSByZXR1cm5lZCBmcm9tIHRoZSBjb250ZXh0IGZ1bmN0aW9uIGlmIGl0IGlzIHBhc3NlZCwgb3IgaW5mZXJyZWQgZnJvbSB0aGUgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSBhcmd1bWVudCAtIFRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQsIGNvbnRleHQpIHtcbiAgLy8gW1RPRE9dIEdldCByaWQgb2YgYHRvRGF0ZWAgb3IgYGNvbnN0cnVjdEZyb21gP1xuICByZXR1cm4gY29uc3RydWN0RnJvbShjb250ZXh0IHx8IGFyZ3VtZW50LCBhcmd1bWVudCk7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgdG9EYXRlO1xuIiwibGV0IGRlZmF1bHRPcHRpb25zID0ge307XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0T3B0aW9ucygpIHtcbiAgcmV0dXJuIGRlZmF1bHRPcHRpb25zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdE9wdGlvbnMobmV3T3B0aW9ucykge1xuICBkZWZhdWx0T3B0aW9ucyA9IG5ld09wdGlvbnM7XG59XG4iLCJpbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi4vdG9EYXRlLmpzXCI7XG5cbi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgY29uc3QgdXRjRGF0ZSA9IG5ldyBEYXRlKFxuICAgIERhdGUuVVRDKFxuICAgICAgX2RhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgIF9kYXRlLmdldE1vbnRoKCksXG4gICAgICBfZGF0ZS5nZXREYXRlKCksXG4gICAgICBfZGF0ZS5nZXRIb3VycygpLFxuICAgICAgX2RhdGUuZ2V0TWludXRlcygpLFxuICAgICAgX2RhdGUuZ2V0U2Vjb25kcygpLFxuICAgICAgX2RhdGUuZ2V0TWlsbGlzZWNvbmRzKCksXG4gICAgKSxcbiAgKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihfZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgcmV0dXJuICtkYXRlIC0gK3V0Y0RhdGU7XG59XG4iLCJpbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSBcIi4uL2NvbnN0cnVjdEZyb20uanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZURhdGVzKGNvbnRleHQsIC4uLmRhdGVzKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZSA9IGNvbnN0cnVjdEZyb20uYmluZChcbiAgICBudWxsLFxuICAgIGNvbnRleHQgfHwgZGF0ZXMuZmluZCgoZGF0ZSkgPT4gdHlwZW9mIGRhdGUgPT09IFwib2JqZWN0XCIpLFxuICApO1xuICByZXR1cm4gZGF0ZXMubWFwKG5vcm1hbGl6ZSk7XG59XG4iLCJpbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUuanNcIjtcblxuLyoqXG4gKiBAbmFtZSBjb21wYXJlQXNjXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbXBhcmUgdGhlIHR3byBkYXRlcyBhbmQgcmV0dXJuIC0xLCAwIG9yIDEuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb21wYXJlIHRoZSB0d28gZGF0ZXMgYW5kIHJldHVybiAxIGlmIHRoZSBmaXJzdCBkYXRlIGlzIGFmdGVyIHRoZSBzZWNvbmQsXG4gKiAtMSBpZiB0aGUgZmlyc3QgZGF0ZSBpcyBiZWZvcmUgdGhlIHNlY29uZCBvciAwIGlmIGRhdGVzIGFyZSBlcXVhbC5cbiAqXG4gKiBAcGFyYW0gZGF0ZUxlZnQgLSBUaGUgZmlyc3QgZGF0ZSB0byBjb21wYXJlXG4gKiBAcGFyYW0gZGF0ZVJpZ2h0IC0gVGhlIHNlY29uZCBkYXRlIHRvIGNvbXBhcmVcbiAqXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0IG9mIHRoZSBjb21wYXJpc29uXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbXBhcmUgMTEgRmVicnVhcnkgMTk4NyBhbmQgMTAgSnVseSAxOTg5OlxuICogY29uc3QgcmVzdWx0ID0gY29tcGFyZUFzYyhuZXcgRGF0ZSgxOTg3LCAxLCAxMSksIG5ldyBEYXRlKDE5ODksIDYsIDEwKSlcbiAqIC8vPT4gLTFcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU29ydCB0aGUgYXJyYXkgb2YgZGF0ZXM6XG4gKiBjb25zdCByZXN1bHQgPSBbXG4gKiAgIG5ldyBEYXRlKDE5OTUsIDYsIDIpLFxuICogICBuZXcgRGF0ZSgxOTg3LCAxLCAxMSksXG4gKiAgIG5ldyBEYXRlKDE5ODksIDYsIDEwKVxuICogXS5zb3J0KGNvbXBhcmVBc2MpXG4gKiAvLz0+IFtcbiAqIC8vICAgV2VkIEZlYiAxMSAxOTg3IDAwOjAwOjAwLFxuICogLy8gICBNb24gSnVsIDEwIDE5ODkgMDA6MDA6MDAsXG4gKiAvLyAgIFN1biBKdWwgMDIgMTk5NSAwMDowMDowMFxuICogLy8gXVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZUFzYyhkYXRlTGVmdCwgZGF0ZVJpZ2h0KSB7XG4gIGNvbnN0IGRpZmYgPSArdG9EYXRlKGRhdGVMZWZ0KSAtICt0b0RhdGUoZGF0ZVJpZ2h0KTtcblxuICBpZiAoZGlmZiA8IDApIHJldHVybiAtMTtcbiAgZWxzZSBpZiAoZGlmZiA+IDApIHJldHVybiAxO1xuXG4gIC8vIFJldHVybiAwIGlmIGRpZmYgaXMgMDsgcmV0dXJuIE5hTiBpZiBkaWZmIGlzIE5hTlxuICByZXR1cm4gZGlmZjtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBjb21wYXJlQXNjO1xuIiwiaW1wb3J0IHsgbm9ybWFsaXplRGF0ZXMgfSBmcm9tIFwiLi9fbGliL25vcm1hbGl6ZURhdGVzLmpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRoc30gZnVuY3Rpb24gb3B0aW9ucy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzXG4gKiBAY2F0ZWdvcnkgTW9udGggSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgbW9udGhzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgbW9udGhzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBwYXJhbSBsYXRlckRhdGUgLSBUaGUgbGF0ZXIgZGF0ZVxuICogQHBhcmFtIGVhcmxpZXJEYXRlIC0gVGhlIGVhcmxpZXIgZGF0ZVxuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjYWxlbmRhciBtb250aHNcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgY2FsZW5kYXIgbW9udGhzIGFyZSBiZXR3ZWVuIDMxIEphbnVhcnkgMjAxNCBhbmQgMSBTZXB0ZW1iZXIgMjAxND9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzKFxuICogICBuZXcgRGF0ZSgyMDE0LCA4LCAxKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgMCwgMzEpXG4gKiApXG4gKiAvLz0+IDhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzKGxhdGVyRGF0ZSwgZWFybGllckRhdGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgW2xhdGVyRGF0ZV8sIGVhcmxpZXJEYXRlX10gPSBub3JtYWxpemVEYXRlcyhcbiAgICBvcHRpb25zPy5pbixcbiAgICBsYXRlckRhdGUsXG4gICAgZWFybGllckRhdGUsXG4gICk7XG5cbiAgY29uc3QgeWVhcnNEaWZmID0gbGF0ZXJEYXRlXy5nZXRGdWxsWWVhcigpIC0gZWFybGllckRhdGVfLmdldEZ1bGxZZWFyKCk7XG4gIGNvbnN0IG1vbnRoc0RpZmYgPSBsYXRlckRhdGVfLmdldE1vbnRoKCkgLSBlYXJsaWVyRGF0ZV8uZ2V0TW9udGgoKTtcblxuICByZXR1cm4geWVhcnNEaWZmICogMTIgKyBtb250aHNEaWZmO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGdldFJvdW5kaW5nTWV0aG9kKG1ldGhvZCkge1xuICByZXR1cm4gKG51bWJlcikgPT4ge1xuICAgIGNvbnN0IHJvdW5kID0gbWV0aG9kID8gTWF0aFttZXRob2RdIDogTWF0aC50cnVuYztcbiAgICBjb25zdCByZXN1bHQgPSByb3VuZChudW1iZXIpO1xuICAgIC8vIFByZXZlbnQgbmVnYXRpdmUgemVyb1xuICAgIHJldHVybiByZXN1bHQgPT09IDAgPyAwIDogcmVzdWx0O1xuICB9O1xufVxuIiwiaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLmpzXCI7XG5cbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBwYXJhbSBsYXRlckRhdGUgLSBUaGUgbGF0ZXIgZGF0ZVxuICogQHBhcmFtIGVhcmxpZXJEYXRlIC0gVGhlIGVhcmxpZXIgZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IG1pbGxpc2Vjb25kcyBhcmUgYmV0d2VlblxuICogLy8gMiBKdWx5IDIwMTQgMTI6MzA6MjAuNjAwIGFuZCAyIEp1bHkgMjAxNCAxMjozMDoyMS43MDA/XG4gKiBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMoXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDYsIDIsIDEyLCAzMCwgMjEsIDcwMCksXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDYsIDIsIDEyLCAzMCwgMjAsIDYwMClcbiAqIClcbiAqIC8vPT4gMTEwMFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzKGxhdGVyRGF0ZSwgZWFybGllckRhdGUpIHtcbiAgcmV0dXJuICt0b0RhdGUobGF0ZXJEYXRlKSAtICt0b0RhdGUoZWFybGllckRhdGUpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcztcbiIsImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5qc1wiO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgZW5kT2ZEYXl9IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBlbmRPZkRheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGVuZCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGVuZCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICogQHR5cGVQYXJhbSBSZXN1bHREYXRlIC0gVGhlIHJlc3VsdCBgRGF0ZWAgdHlwZSwgaXQgaXMgdGhlIHR5cGUgcmV0dXJuZWQgZnJvbSB0aGUgY29udGV4dCBmdW5jdGlvbiBpZiBpdCBpcyBwYXNzZWQsIG9yIGluZmVycmVkIGZyb20gdGhlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyBUaGUgZW5kIG9mIGEgZGF5XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBlbmQgb2YgYSBkYXkgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBlbmRPZkRheShuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDAyIDIwMTQgMjM6NTk6NTkuOTk5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmRPZkRheShkYXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUsIG9wdGlvbnM/LmluKTtcbiAgX2RhdGUuc2V0SG91cnMoMjMsIDU5LCA1OSwgOTk5KTtcbiAgcmV0dXJuIF9kYXRlO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGVuZE9mRGF5O1xuIiwiaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLmpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBlbmRPZk1vbnRofSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgZW5kT2ZNb250aFxuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgZW5kIG9mIGEgbW9udGggZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBlbmQgb2YgYSBtb250aCBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICogQHR5cGVQYXJhbSBSZXN1bHREYXRlIC0gVGhlIHJlc3VsdCBgRGF0ZWAgdHlwZSwgaXQgaXMgdGhlIHR5cGUgcmV0dXJuZWQgZnJvbSB0aGUgY29udGV4dCBmdW5jdGlvbiBpZiBpdCBpcyBwYXNzZWQsIG9yIGluZmVycmVkIGZyb20gdGhlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyBUaGUgZW5kIG9mIGEgbW9udGhcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIGVuZCBvZiBhIG1vbnRoIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gZW5kT2ZNb250aChuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDMwIDIwMTQgMjM6NTk6NTkuOTk5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmRPZk1vbnRoKGRhdGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSwgb3B0aW9ucz8uaW4pO1xuICBjb25zdCBtb250aCA9IF9kYXRlLmdldE1vbnRoKCk7XG4gIF9kYXRlLnNldEZ1bGxZZWFyKF9kYXRlLmdldEZ1bGxZZWFyKCksIG1vbnRoICsgMSwgMCk7XG4gIF9kYXRlLnNldEhvdXJzKDIzLCA1OSwgNTksIDk5OSk7XG4gIHJldHVybiBfZGF0ZTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBlbmRPZk1vbnRoO1xuIiwiaW1wb3J0IHsgZW5kT2ZEYXkgfSBmcm9tIFwiLi9lbmRPZkRheS5qc1wiO1xuaW1wb3J0IHsgZW5kT2ZNb250aCB9IGZyb20gXCIuL2VuZE9mTW9udGguanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5qc1wiO1xuXG4vKipcbiAqIEBuYW1lIGlzTGFzdERheU9mTW9udGhcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB0aGUgbGFzdCBkYXkgb2YgYSBtb250aD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIElzIHRoZSBnaXZlbiBkYXRlIHRoZSBsYXN0IGRheSBvZiBhIG1vbnRoP1xuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIGRhdGUgdG8gY2hlY2tcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IHdpdGggb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIFRoZSBkYXRlIGlzIHRoZSBsYXN0IGRheSBvZiBhIG1vbnRoXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElzIDI4IEZlYnJ1YXJ5IDIwMTQgdGhlIGxhc3QgZGF5IG9mIGEgbW9udGg/XG4gKiBjb25zdCByZXN1bHQgPSBpc0xhc3REYXlPZk1vbnRoKG5ldyBEYXRlKDIwMTQsIDEsIDI4KSlcbiAqIC8vPT4gdHJ1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNMYXN0RGF5T2ZNb250aChkYXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUsIG9wdGlvbnM/LmluKTtcbiAgcmV0dXJuICtlbmRPZkRheShfZGF0ZSwgb3B0aW9ucykgPT09ICtlbmRPZk1vbnRoKF9kYXRlLCBvcHRpb25zKTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBpc0xhc3REYXlPZk1vbnRoO1xuIiwiaW1wb3J0IHsgbm9ybWFsaXplRGF0ZXMgfSBmcm9tIFwiLi9fbGliL25vcm1hbGl6ZURhdGVzLmpzXCI7XG5pbXBvcnQgeyBjb21wYXJlQXNjIH0gZnJvbSBcIi4vY29tcGFyZUFzYy5qc1wiO1xuaW1wb3J0IHsgZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMgfSBmcm9tIFwiLi9kaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocy5qc1wiO1xuaW1wb3J0IHsgaXNMYXN0RGF5T2ZNb250aCB9IGZyb20gXCIuL2lzTGFzdERheU9mTW9udGguanNcIjtcblxuLyoqXG4gKiBUaGUge0BsaW5rIGRpZmZlcmVuY2VJbk1vbnRoc30gZnVuY3Rpb24gb3B0aW9ucy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIGRpZmZlcmVuY2VJbk1vbnRoc1xuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIGZ1bGwgbW9udGhzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBwYXJhbSBsYXRlckRhdGUgLSBUaGUgbGF0ZXIgZGF0ZVxuICogQHBhcmFtIGVhcmxpZXJEYXRlIC0gVGhlIGVhcmxpZXIgZGF0ZVxuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIG51bWJlciBvZiBmdWxsIG1vbnRoc1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBmdWxsIG1vbnRocyBhcmUgYmV0d2VlbiAzMSBKYW51YXJ5IDIwMTQgYW5kIDEgU2VwdGVtYmVyIDIwMTQ/XG4gKiBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlSW5Nb250aHMobmV3IERhdGUoMjAxNCwgOCwgMSksIG5ldyBEYXRlKDIwMTQsIDAsIDMxKSlcbiAqIC8vPT4gN1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZmVyZW5jZUluTW9udGhzKGxhdGVyRGF0ZSwgZWFybGllckRhdGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgW2xhdGVyRGF0ZV8sIHdvcmtpbmdMYXRlckRhdGUsIGVhcmxpZXJEYXRlX10gPSBub3JtYWxpemVEYXRlcyhcbiAgICBvcHRpb25zPy5pbixcbiAgICBsYXRlckRhdGUsXG4gICAgbGF0ZXJEYXRlLFxuICAgIGVhcmxpZXJEYXRlLFxuICApO1xuXG4gIGNvbnN0IHNpZ24gPSBjb21wYXJlQXNjKHdvcmtpbmdMYXRlckRhdGUsIGVhcmxpZXJEYXRlXyk7XG4gIGNvbnN0IGRpZmZlcmVuY2UgPSBNYXRoLmFicyhcbiAgICBkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocyh3b3JraW5nTGF0ZXJEYXRlLCBlYXJsaWVyRGF0ZV8pLFxuICApO1xuXG4gIGlmIChkaWZmZXJlbmNlIDwgMSkgcmV0dXJuIDA7XG5cbiAgaWYgKHdvcmtpbmdMYXRlckRhdGUuZ2V0TW9udGgoKSA9PT0gMSAmJiB3b3JraW5nTGF0ZXJEYXRlLmdldERhdGUoKSA+IDI3KVxuICAgIHdvcmtpbmdMYXRlckRhdGUuc2V0RGF0ZSgzMCk7XG5cbiAgd29ya2luZ0xhdGVyRGF0ZS5zZXRNb250aCh3b3JraW5nTGF0ZXJEYXRlLmdldE1vbnRoKCkgLSBzaWduICogZGlmZmVyZW5jZSk7XG5cbiAgbGV0IGlzTGFzdE1vbnRoTm90RnVsbCA9IGNvbXBhcmVBc2Mod29ya2luZ0xhdGVyRGF0ZSwgZWFybGllckRhdGVfKSA9PT0gLXNpZ247XG5cbiAgaWYgKFxuICAgIGlzTGFzdERheU9mTW9udGgobGF0ZXJEYXRlXykgJiZcbiAgICBkaWZmZXJlbmNlID09PSAxICYmXG4gICAgY29tcGFyZUFzYyhsYXRlckRhdGVfLCBlYXJsaWVyRGF0ZV8pID09PSAxXG4gICkge1xuICAgIGlzTGFzdE1vbnRoTm90RnVsbCA9IGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcmVzdWx0ID0gc2lnbiAqIChkaWZmZXJlbmNlIC0gK2lzTGFzdE1vbnRoTm90RnVsbCk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgPyAwIDogcmVzdWx0O1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGRpZmZlcmVuY2VJbk1vbnRocztcbiIsImltcG9ydCB7IGdldFJvdW5kaW5nTWV0aG9kIH0gZnJvbSBcIi4vX2xpYi9nZXRSb3VuZGluZ01ldGhvZC5qc1wiO1xuaW1wb3J0IHsgZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzIH0gZnJvbSBcIi4vZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzLmpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBkaWZmZXJlbmNlSW5TZWNvbmRzfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluU2Vjb25kc1xuICogQGNhdGVnb3J5IFNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBzZWNvbmRzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBudW1iZXIgb2Ygc2Vjb25kcyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiBAcGFyYW0gbGF0ZXJEYXRlIC0gVGhlIGxhdGVyIGRhdGVcbiAqIEBwYXJhbSBlYXJsaWVyRGF0ZSAtIFRoZSBlYXJsaWVyIGRhdGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqXG4gKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIHNlY29uZHNcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgc2Vjb25kcyBhcmUgYmV0d2VlblxuICogLy8gMiBKdWx5IDIwMTQgMTI6MzA6MDcuOTk5IGFuZCAyIEp1bHkgMjAxNCAxMjozMDoyMC4wMDA/XG4gKiBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlSW5TZWNvbmRzKFxuICogICBuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxMiwgMzAsIDIwLCAwKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgMTIsIDMwLCA3LCA5OTkpXG4gKiApXG4gKiAvLz0+IDEyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaWZmZXJlbmNlSW5TZWNvbmRzKGxhdGVyRGF0ZSwgZWFybGllckRhdGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgZGlmZiA9IGRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcyhsYXRlckRhdGUsIGVhcmxpZXJEYXRlKSAvIDEwMDA7XG4gIHJldHVybiBnZXRSb3VuZGluZ01ldGhvZChvcHRpb25zPy5yb3VuZGluZ01ldGhvZCkoZGlmZik7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZGlmZmVyZW5jZUluU2Vjb25kcztcbiIsImNvbnN0IGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiBcImxlc3MgdGhhbiBhIHNlY29uZFwiLFxuICAgIG90aGVyOiBcImxlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kc1wiLFxuICB9LFxuXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiBcIjEgc2Vjb25kXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IHNlY29uZHNcIixcbiAgfSxcblxuICBoYWxmQU1pbnV0ZTogXCJoYWxmIGEgbWludXRlXCIsXG5cbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogXCJsZXNzIHRoYW4gYSBtaW51dGVcIixcbiAgICBvdGhlcjogXCJsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXNcIixcbiAgfSxcblxuICB4TWludXRlczoge1xuICAgIG9uZTogXCIxIG1pbnV0ZVwiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSBtaW51dGVzXCIsXG4gIH0sXG5cbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6IFwiYWJvdXQgMSBob3VyXCIsXG4gICAgb3RoZXI6IFwiYWJvdXQge3tjb3VudH19IGhvdXJzXCIsXG4gIH0sXG5cbiAgeEhvdXJzOiB7XG4gICAgb25lOiBcIjEgaG91clwiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSBob3Vyc1wiLFxuICB9LFxuXG4gIHhEYXlzOiB7XG4gICAgb25lOiBcIjEgZGF5XCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IGRheXNcIixcbiAgfSxcblxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogXCJhYm91dCAxIHdlZWtcIixcbiAgICBvdGhlcjogXCJhYm91dCB7e2NvdW50fX0gd2Vla3NcIixcbiAgfSxcblxuICB4V2Vla3M6IHtcbiAgICBvbmU6IFwiMSB3ZWVrXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IHdlZWtzXCIsXG4gIH0sXG5cbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiBcImFib3V0IDEgbW9udGhcIixcbiAgICBvdGhlcjogXCJhYm91dCB7e2NvdW50fX0gbW9udGhzXCIsXG4gIH0sXG5cbiAgeE1vbnRoczoge1xuICAgIG9uZTogXCIxIG1vbnRoXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IG1vbnRoc1wiLFxuICB9LFxuXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiBcImFib3V0IDEgeWVhclwiLFxuICAgIG90aGVyOiBcImFib3V0IHt7Y291bnR9fSB5ZWFyc1wiLFxuICB9LFxuXG4gIHhZZWFyczoge1xuICAgIG9uZTogXCIxIHllYXJcIixcbiAgICBvdGhlcjogXCJ7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcblxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiBcIm92ZXIgMSB5ZWFyXCIsXG4gICAgb3RoZXI6IFwib3ZlciB7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcblxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6IFwiYWxtb3N0IDEgeWVhclwiLFxuICAgIG90aGVyOiBcImFsbW9zdCB7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXREaXN0YW5jZSA9ICh0b2tlbiwgY291bnQsIG9wdGlvbnMpID0+IHtcbiAgbGV0IHJlc3VsdDtcblxuICBjb25zdCB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICBpZiAodHlwZW9mIHRva2VuVmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vdGhlci5yZXBsYWNlKFwie3tjb3VudH19XCIsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnM/LmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gJiYgb3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuIFwiaW4gXCIgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyBcIiBhZ29cIjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsImV4cG9ydCBmdW5jdGlvbiBidWlsZEZvcm1hdExvbmdGbihhcmdzKSB7XG4gIHJldHVybiAob3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgY29uc3Qgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgY29uc3QgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59XG4iLCJpbXBvcnQgeyBidWlsZEZvcm1hdExvbmdGbiB9IGZyb20gXCIuLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuLmpzXCI7XG5cbmNvbnN0IGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiBcIkVFRUUsIE1NTU0gZG8sIHlcIixcbiAgbG9uZzogXCJNTU1NIGRvLCB5XCIsXG4gIG1lZGl1bTogXCJNTU0gZCwgeVwiLFxuICBzaG9ydDogXCJNTS9kZC95eXl5XCIsXG59O1xuXG5jb25zdCB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJoOm1tOnNzIGEgenp6elwiLFxuICBsb25nOiBcImg6bW06c3MgYSB6XCIsXG4gIG1lZGl1bTogXCJoOm1tOnNzIGFcIixcbiAgc2hvcnQ6IFwiaDptbSBhXCIsXG59O1xuXG5jb25zdCBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbWVkaXVtOiBcInt7ZGF0ZX19LCB7e3RpbWV9fVwiLFxuICBzaG9ydDogXCJ7e2RhdGV9fSwge3t0aW1lfX1cIixcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiBcImZ1bGxcIixcbiAgfSksXG5cbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJmdWxsXCIsXG4gIH0pLFxuXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJmdWxsXCIsXG4gIH0pLFxufTtcbiIsImNvbnN0IGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbGFzdCcgZWVlZSAnYXQnIHBcIixcbiAgeWVzdGVyZGF5OiBcIid5ZXN0ZXJkYXkgYXQnIHBcIixcbiAgdG9kYXk6IFwiJ3RvZGF5IGF0JyBwXCIsXG4gIHRvbW9ycm93OiBcIid0b21vcnJvdyBhdCcgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdhdCcgcFwiLFxuICBvdGhlcjogXCJQXCIsXG59O1xuXG5leHBvcnQgY29uc3QgZm9ybWF0UmVsYXRpdmUgPSAodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSA9PlxuICBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG4iLCIvKipcbiAqIFRoZSBsb2NhbGl6ZSBmdW5jdGlvbiBhcmd1bWVudCBjYWxsYmFjayB3aGljaCBhbGxvd3MgdG8gY29udmVydCByYXcgdmFsdWUgdG9cbiAqIHRoZSBhY3R1YWwgdHlwZS5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY29udmVydFxuICpcbiAqIEByZXR1cm5zIFRoZSBjb252ZXJ0ZWQgdmFsdWVcbiAqL1xuXG4vKipcbiAqIFRoZSBtYXAgb2YgbG9jYWxpemVkIHZhbHVlcyBmb3IgZWFjaCB3aWR0aC5cbiAqL1xuXG4vKipcbiAqIFRoZSBpbmRleCB0eXBlIG9mIHRoZSBsb2NhbGUgdW5pdCB2YWx1ZS4gSXQgdHlwZXMgY29udmVyc2lvbiBvZiB1bml0cyBvZlxuICogdmFsdWVzIHRoYXQgZG9uJ3Qgc3RhcnQgYXQgMCAoaS5lLiBxdWFydGVycykuXG4gKi9cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgdW5pdCB2YWx1ZSB0byB0aGUgdHVwbGUgb2YgdmFsdWVzLlxuICovXG5cbi8qKlxuICogVGhlIHR1cGxlIG9mIGxvY2FsaXplZCBlcmEgdmFsdWVzLiBUaGUgZmlyc3QgZWxlbWVudCByZXByZXNlbnRzIEJDLFxuICogdGhlIHNlY29uZCBlbGVtZW50IHJlcHJlc2VudHMgQUQuXG4gKi9cblxuLyoqXG4gKiBUaGUgdHVwbGUgb2YgbG9jYWxpemVkIHF1YXJ0ZXIgdmFsdWVzLiBUaGUgZmlyc3QgZWxlbWVudCByZXByZXNlbnRzIFExLlxuICovXG5cbi8qKlxuICogVGhlIHR1cGxlIG9mIGxvY2FsaXplZCBkYXkgdmFsdWVzLiBUaGUgZmlyc3QgZWxlbWVudCByZXByZXNlbnRzIFN1bmRheS5cbiAqL1xuXG4vKipcbiAqIFRoZSB0dXBsZSBvZiBsb2NhbGl6ZWQgbW9udGggdmFsdWVzLiBUaGUgZmlyc3QgZWxlbWVudCByZXByZXNlbnRzIEphbnVhcnkuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTG9jYWxpemVGbihhcmdzKSB7XG4gIHJldHVybiAodmFsdWUsIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBjb250ZXh0ID0gb3B0aW9ucz8uY29udGV4dCA/IFN0cmluZyhvcHRpb25zLmNvbnRleHQpIDogXCJzdGFuZGFsb25lXCI7XG5cbiAgICBsZXQgdmFsdWVzQXJyYXk7XG4gICAgaWYgKGNvbnRleHQgPT09IFwiZm9ybWF0dGluZ1wiICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgY29uc3QgZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIHx8IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgY29uc3Qgd2lkdGggPSBvcHRpb25zPy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFsdWVzQXJyYXkgPVxuICAgICAgICBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1tkZWZhdWx0V2lkdGhdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIGNvbnN0IHdpZHRoID0gb3B0aW9ucz8ud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLnZhbHVlc1t3aWR0aF0gfHwgYXJncy52YWx1ZXNbZGVmYXVsdFdpZHRoXTtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG5cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gRm9yIHNvbWUgcmVhc29uIFR5cGVTY3JpcHQganVzdCBkb24ndCB3YW50IHRvIG1hdGNoIGl0LCBubyBtYXR0ZXIgaG93IGhhcmQgd2UgdHJ5LiBJIGNoYWxsZW5nZSB5b3UgdG8gdHJ5IHRvIHJlbW92ZSBpdCFcbiAgICByZXR1cm4gdmFsdWVzQXJyYXlbaW5kZXhdO1xuICB9O1xufVxuIiwiaW1wb3J0IHsgYnVpbGRMb2NhbGl6ZUZuIH0gZnJvbSBcIi4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuLmpzXCI7XG5cbmNvbnN0IGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbXCJCXCIsIFwiQVwiXSxcbiAgYWJicmV2aWF0ZWQ6IFtcIkJDXCIsIFwiQURcIl0sXG4gIHdpZGU6IFtcIkJlZm9yZSBDaHJpc3RcIiwgXCJBbm5vIERvbWluaVwiXSxcbn07XG5cbmNvbnN0IHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogW1wiMVwiLCBcIjJcIiwgXCIzXCIsIFwiNFwiXSxcbiAgYWJicmV2aWF0ZWQ6IFtcIlExXCIsIFwiUTJcIiwgXCJRM1wiLCBcIlE0XCJdLFxuICB3aWRlOiBbXCIxc3QgcXVhcnRlclwiLCBcIjJuZCBxdWFydGVyXCIsIFwiM3JkIHF1YXJ0ZXJcIiwgXCI0dGggcXVhcnRlclwiXSxcbn07XG5cbi8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cbmNvbnN0IG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFtcIkpcIiwgXCJGXCIsIFwiTVwiLCBcIkFcIiwgXCJNXCIsIFwiSlwiLCBcIkpcIiwgXCJBXCIsIFwiU1wiLCBcIk9cIiwgXCJOXCIsIFwiRFwiXSxcbiAgYWJicmV2aWF0ZWQ6IFtcbiAgICBcIkphblwiLFxuICAgIFwiRmViXCIsXG4gICAgXCJNYXJcIixcbiAgICBcIkFwclwiLFxuICAgIFwiTWF5XCIsXG4gICAgXCJKdW5cIixcbiAgICBcIkp1bFwiLFxuICAgIFwiQXVnXCIsXG4gICAgXCJTZXBcIixcbiAgICBcIk9jdFwiLFxuICAgIFwiTm92XCIsXG4gICAgXCJEZWNcIixcbiAgXSxcblxuICB3aWRlOiBbXG4gICAgXCJKYW51YXJ5XCIsXG4gICAgXCJGZWJydWFyeVwiLFxuICAgIFwiTWFyY2hcIixcbiAgICBcIkFwcmlsXCIsXG4gICAgXCJNYXlcIixcbiAgICBcIkp1bmVcIixcbiAgICBcIkp1bHlcIixcbiAgICBcIkF1Z3VzdFwiLFxuICAgIFwiU2VwdGVtYmVyXCIsXG4gICAgXCJPY3RvYmVyXCIsXG4gICAgXCJOb3ZlbWJlclwiLFxuICAgIFwiRGVjZW1iZXJcIixcbiAgXSxcbn07XG5cbmNvbnN0IGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbXCJTXCIsIFwiTVwiLCBcIlRcIiwgXCJXXCIsIFwiVFwiLCBcIkZcIiwgXCJTXCJdLFxuICBzaG9ydDogW1wiU3VcIiwgXCJNb1wiLCBcIlR1XCIsIFwiV2VcIiwgXCJUaFwiLCBcIkZyXCIsIFwiU2FcIl0sXG4gIGFiYnJldmlhdGVkOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gIHdpZGU6IFtcbiAgICBcIlN1bmRheVwiLFxuICAgIFwiTW9uZGF5XCIsXG4gICAgXCJUdWVzZGF5XCIsXG4gICAgXCJXZWRuZXNkYXlcIixcbiAgICBcIlRodXJzZGF5XCIsXG4gICAgXCJGcmlkYXlcIixcbiAgICBcIlNhdHVyZGF5XCIsXG4gIF0sXG59O1xuXG5jb25zdCBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiBcImFcIixcbiAgICBwbTogXCJwXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlcIixcbiAgICBub29uOiBcIm5cIixcbiAgICBtb3JuaW5nOiBcIm1vcm5pbmdcIixcbiAgICBhZnRlcm5vb246IFwiYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwibmlnaHRcIixcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogXCJBTVwiLFxuICAgIHBtOiBcIlBNXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlkbmlnaHRcIixcbiAgICBub29uOiBcIm5vb25cIixcbiAgICBtb3JuaW5nOiBcIm1vcm5pbmdcIixcbiAgICBhZnRlcm5vb246IFwiYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwibmlnaHRcIixcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiBcImEubS5cIixcbiAgICBwbTogXCJwLm0uXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlkbmlnaHRcIixcbiAgICBub29uOiBcIm5vb25cIixcbiAgICBtb3JuaW5nOiBcIm1vcm5pbmdcIixcbiAgICBhZnRlcm5vb246IFwiYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwibmlnaHRcIixcbiAgfSxcbn07XG5cbmNvbnN0IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiBcImFcIixcbiAgICBwbTogXCJwXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlcIixcbiAgICBub29uOiBcIm5cIixcbiAgICBtb3JuaW5nOiBcImluIHRoZSBtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImluIHRoZSBhZnRlcm5vb25cIixcbiAgICBldmVuaW5nOiBcImluIHRoZSBldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwiYXQgbmlnaHRcIixcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogXCJBTVwiLFxuICAgIHBtOiBcIlBNXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlkbmlnaHRcIixcbiAgICBub29uOiBcIm5vb25cIixcbiAgICBtb3JuaW5nOiBcImluIHRoZSBtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImluIHRoZSBhZnRlcm5vb25cIixcbiAgICBldmVuaW5nOiBcImluIHRoZSBldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwiYXQgbmlnaHRcIixcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiBcImEubS5cIixcbiAgICBwbTogXCJwLm0uXCIsXG4gICAgbWlkbmlnaHQ6IFwibWlkbmlnaHRcIixcbiAgICBub29uOiBcIm5vb25cIixcbiAgICBtb3JuaW5nOiBcImluIHRoZSBtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImluIHRoZSBhZnRlcm5vb25cIixcbiAgICBldmVuaW5nOiBcImluIHRoZSBldmVuaW5nXCIsXG4gICAgbmlnaHQ6IFwiYXQgbmlnaHRcIixcbiAgfSxcbn07XG5cbmNvbnN0IG9yZGluYWxOdW1iZXIgPSAoZGlydHlOdW1iZXIsIF9vcHRpb25zKSA9PiB7XG4gIGNvbnN0IG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgLlxuICAvL1xuICAvLyBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJy5cblxuICBjb25zdCByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArIFwic3RcIjtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArIFwibmRcIjtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArIFwicmRcIjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bWJlciArIFwidGhcIjtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcixcblxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiBcIndpZGVcIixcbiAgfSksXG5cbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiBcIndpZGVcIixcbiAgICBhcmd1bWVudENhbGxiYWNrOiAocXVhcnRlcikgPT4gcXVhcnRlciAtIDEsXG4gIH0pLFxuXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiBcIndpZGVcIixcbiAgfSksXG5cbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJ3aWRlXCIsXG4gIH0pLFxuXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6IFwid2lkZVwiLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogXCJ3aWRlXCIsXG4gIH0pLFxufTtcbiIsImV4cG9ydCBmdW5jdGlvbiBidWlsZE1hdGNoRm4oYXJncykge1xuICByZXR1cm4gKHN0cmluZywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3Qgd2lkdGggPSBvcHRpb25zLndpZHRoO1xuXG4gICAgY29uc3QgbWF0Y2hQYXR0ZXJuID1cbiAgICAgICh3aWR0aCAmJiBhcmdzLm1hdGNoUGF0dGVybnNbd2lkdGhdKSB8fFxuICAgICAgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIGNvbnN0IG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuXG4gICAgY29uc3QgcGFyc2VQYXR0ZXJucyA9XG4gICAgICAod2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSkgfHxcbiAgICAgIGFyZ3MucGFyc2VQYXR0ZXJuc1thcmdzLmRlZmF1bHRQYXJzZVdpZHRoXTtcblxuICAgIGNvbnN0IGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucylcbiAgICAgID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIChwYXR0ZXJuKSA9PiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZykpXG4gICAgICA6IC8vIFtUT0RPXSAtLSBJIGNoYWxsZW5nZSB5b3UgdG8gZml4IHRoZSB0eXBlXG4gICAgICAgIGZpbmRLZXkocGFyc2VQYXR0ZXJucywgKHBhdHRlcm4pID0+IHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKSk7XG5cbiAgICBsZXQgdmFsdWU7XG5cbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhrZXkpIDoga2V5O1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrXG4gICAgICA/IC8vIFtUT0RPXSAtLSBJIGNoYWxsZW5nZSB5b3UgdG8gZml4IHRoZSB0eXBlXG4gICAgICAgIG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSlcbiAgICAgIDogdmFsdWU7XG5cbiAgICBjb25zdCByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcblxuICAgIHJldHVybiB7IHZhbHVlLCByZXN0IH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKFxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJlxuICAgICAgcHJlZGljYXRlKG9iamVjdFtrZXldKVxuICAgICkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgZm9yIChsZXQga2V5ID0gMDsga2V5IDwgYXJyYXkubGVuZ3RoOyBrZXkrKykge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiAoc3RyaW5nLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuXG4gICAgY29uc3QgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuICAgIGlmICghcGFyc2VSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIGxldCB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFja1xuICAgICAgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pXG4gICAgICA6IHBhcnNlUmVzdWx0WzBdO1xuXG4gICAgLy8gW1RPRE9dIEkgY2hhbGxlbmdlIHlvdSB0byBmaXggdGhlIHR5cGVcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgIGNvbnN0IHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuXG4gICAgcmV0dXJuIHsgdmFsdWUsIHJlc3QgfTtcbiAgfTtcbn1cbiIsImltcG9ydCB7IGJ1aWxkTWF0Y2hGbiB9IGZyb20gXCIuLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi5qc1wiO1xuaW1wb3J0IHsgYnVpbGRNYXRjaFBhdHRlcm5GbiB9IGZyb20gXCIuLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4uanNcIjtcblxuY29uc3QgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbmNvbnN0IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xuXG5jb25zdCBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2ksXG59O1xuY29uc3QgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV0sXG59O1xuXG5jb25zdCBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pLFxufTtcbmNvbnN0IHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXSxcbn07XG5cbmNvbnN0IG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pLFxufTtcbmNvbnN0IHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbXG4gICAgL15qL2ksXG4gICAgL15mL2ksXG4gICAgL15tL2ksXG4gICAgL15hL2ksXG4gICAgL15tL2ksXG4gICAgL15qL2ksXG4gICAgL15qL2ksXG4gICAgL15hL2ksXG4gICAgL15zL2ksXG4gICAgL15vL2ksXG4gICAgL15uL2ksXG4gICAgL15kL2ksXG4gIF0sXG5cbiAgYW55OiBbXG4gICAgL15qYS9pLFxuICAgIC9eZi9pLFxuICAgIC9ebWFyL2ksXG4gICAgL15hcC9pLFxuICAgIC9ebWF5L2ksXG4gICAgL15qdW4vaSxcbiAgICAvXmp1bC9pLFxuICAgIC9eYXUvaSxcbiAgICAvXnMvaSxcbiAgICAvXm8vaSxcbiAgICAvXm4vaSxcbiAgICAvXmQvaSxcbiAgXSxcbn07XG5cbmNvbnN0IG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2ksXG59O1xuY29uc3QgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldLFxufTtcblxuY29uc3QgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG59O1xuY29uc3QgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pLFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6ICh2YWx1ZSkgPT4gcGFyc2VJbnQodmFsdWUsIDEwKSxcbiAgfSksXG5cbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxuXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiBcImFueVwiLFxuICAgIHZhbHVlQ2FsbGJhY2s6IChpbmRleCkgPT4gaW5kZXggKyAxLFxuICB9KSxcblxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogXCJhbnlcIixcbiAgfSksXG5cbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxuXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiBcImFueVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxufTtcbiIsImltcG9ydCB7IGZvcm1hdERpc3RhbmNlIH0gZnJvbSBcIi4vZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS5qc1wiO1xuaW1wb3J0IHsgZm9ybWF0TG9uZyB9IGZyb20gXCIuL2VuLVVTL19saWIvZm9ybWF0TG9uZy5qc1wiO1xuaW1wb3J0IHsgZm9ybWF0UmVsYXRpdmUgfSBmcm9tIFwiLi9lbi1VUy9fbGliL2Zvcm1hdFJlbGF0aXZlLmpzXCI7XG5pbXBvcnQgeyBsb2NhbGl6ZSB9IGZyb20gXCIuL2VuLVVTL19saWIvbG9jYWxpemUuanNcIjtcbmltcG9ydCB7IG1hdGNoIH0gZnJvbSBcIi4vZW4tVVMvX2xpYi9tYXRjaC5qc1wiO1xuXG4vKipcbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBdKGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwKVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXShodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzKVxuICovXG5leHBvcnQgY29uc3QgZW5VUyA9IHtcbiAgY29kZTogXCJlbi1VU1wiLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDAgLyogU3VuZGF5ICovLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMSxcbiAgfSxcbn07XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZW5VUztcbiIsImltcG9ydCB7IGRlZmF1bHRMb2NhbGUgfSBmcm9tIFwiLi9fbGliL2RlZmF1bHRMb2NhbGUuanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4vX2xpYi9kZWZhdWx0T3B0aW9ucy5qc1wiO1xuaW1wb3J0IHsgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyB9IGZyb20gXCIuL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy5qc1wiO1xuaW1wb3J0IHsgbm9ybWFsaXplRGF0ZXMgfSBmcm9tIFwiLi9fbGliL25vcm1hbGl6ZURhdGVzLmpzXCI7XG5pbXBvcnQgeyBjb21wYXJlQXNjIH0gZnJvbSBcIi4vY29tcGFyZUFzYy5qc1wiO1xuaW1wb3J0IHsgbWludXRlc0luRGF5LCBtaW51dGVzSW5Nb250aCB9IGZyb20gXCIuL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgZGlmZmVyZW5jZUluTW9udGhzIH0gZnJvbSBcIi4vZGlmZmVyZW5jZUluTW9udGhzLmpzXCI7XG5pbXBvcnQgeyBkaWZmZXJlbmNlSW5TZWNvbmRzIH0gZnJvbSBcIi4vZGlmZmVyZW5jZUluU2Vjb25kcy5qc1wiO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgZm9ybWF0RGlzdGFuY2V9IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBmb3JtYXREaXN0YW5jZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzIGluIHdvcmRzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcyBpbiB3b3Jkcy5cbiAqXG4gKiB8IERpc3RhbmNlIGJldHdlZW4gZGF0ZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUmVzdWx0ICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IDAgLi4uIDMwIHNlY3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbGVzcyB0aGFuIGEgbWludXRlICB8XG4gKiB8IDMwIHNlY3MgLi4uIDEgbWluIDMwIHNlY3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMSBtaW51dGUgICAgICAgICAgICB8XG4gKiB8IDEgbWluIDMwIHNlY3MgLi4uIDQ0IG1pbnMgMzAgc2VjcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWzIuLjQ0XSBtaW51dGVzICAgICB8XG4gKiB8IDQ0IG1pbnMgLi4uIDMwIHNlY3MgLi4uIDg5IG1pbnMgMzAgc2VjcyAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWJvdXQgMSBob3VyICAgICAgICB8XG4gKiB8IDg5IG1pbnMgMzAgc2VjcyAuLi4gMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAgICAgICAgICAgICAgICAgICAgICAgIHwgYWJvdXQgWzIuLjI0XSBob3VycyB8XG4gKiB8IDIzIGhycyA1OSBtaW5zIDMwIHNlY3MgLi4uIDQxIGhycyA1OSBtaW5zIDMwIHNlY3MgICAgICAgICAgICAgICAgIHwgMSBkYXkgICAgICAgICAgICAgICB8XG4gKiB8IDQxIGhycyA1OSBtaW5zIDMwIHNlY3MgLi4uIDI5IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAgICAgICAgIHwgWzIuLjMwXSBkYXlzICAgICAgICB8XG4gKiB8IDI5IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAuLi4gNDQgZGF5cyAyMyBocnMgNTkgbWlucyAzMCBzZWNzIHwgYWJvdXQgMSBtb250aCAgICAgICB8XG4gKiB8IDQ0IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAuLi4gNTkgZGF5cyAyMyBocnMgNTkgbWlucyAzMCBzZWNzIHwgYWJvdXQgMiBtb250aHMgICAgICB8XG4gKiB8IDU5IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAuLi4gMSB5ciAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWzIuLjEyXSBtb250aHMgICAgICB8XG4gKiB8IDEgeXIgLi4uIDEgeXIgMyBtb250aHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWJvdXQgMSB5ZWFyICAgICAgICB8XG4gKiB8IDEgeXIgMyBtb250aHMgLi4uIDEgeXIgOSBtb250aCBzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgb3ZlciAxIHllYXIgICAgICAgICB8XG4gKiB8IDEgeXIgOSBtb250aHMgLi4uIDIgeXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWxtb3N0IDIgeWVhcnMgICAgICB8XG4gKiB8IE4geXJzIC4uLiBOIHlycyAzIG1vbnRocyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWJvdXQgTiB5ZWFycyAgICAgICB8XG4gKiB8IE4geXJzIDMgbW9udGhzIC4uLiBOIHlycyA5IG1vbnRocyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgb3ZlciBOIHllYXJzICAgICAgICB8XG4gKiB8IE4geXJzIDkgbW9udGhzIC4uLiBOKzEgeXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWxtb3N0IE4rMSB5ZWFycyAgICB8XG4gKlxuICogV2l0aCBgb3B0aW9ucy5pbmNsdWRlU2Vjb25kcyA9PSB0cnVlYDpcbiAqIHwgRGlzdGFuY2UgYmV0d2VlbiBkYXRlcyB8IFJlc3VsdCAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgMCBzZWNzIC4uLiA1IHNlY3MgICAgICB8IGxlc3MgdGhhbiA1IHNlY29uZHMgIHxcbiAqIHwgNSBzZWNzIC4uLiAxMCBzZWNzICAgICB8IGxlc3MgdGhhbiAxMCBzZWNvbmRzIHxcbiAqIHwgMTAgc2VjcyAuLi4gMjAgc2VjcyAgICB8IGxlc3MgdGhhbiAyMCBzZWNvbmRzIHxcbiAqIHwgMjAgc2VjcyAuLi4gNDAgc2VjcyAgICB8IGhhbGYgYSBtaW51dGUgICAgICAgIHxcbiAqIHwgNDAgc2VjcyAuLi4gNjAgc2VjcyAgICB8IGxlc3MgdGhhbiBhIG1pbnV0ZSAgIHxcbiAqIHwgNjAgc2VjcyAuLi4gOTAgc2VjcyAgICB8IDEgbWludXRlICAgICAgICAgICAgIHxcbiAqXG4gKiBAcGFyYW0gbGF0ZXJEYXRlIC0gVGhlIGRhdGVcbiAqIEBwYXJhbSBlYXJsaWVyRGF0ZSAtIFRoZSBkYXRlIHRvIGNvbXBhcmUgd2l0aFxuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIGRpc3RhbmNlIGluIHdvcmRzXG4gKlxuICogQHRocm93cyBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIGBiYXNlRGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBmb3JtYXREaXN0YW5jZWAgcHJvcGVydHlcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hhdCBpcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiAyIEp1bHkgMjAxNCBhbmQgMSBKYW51YXJ5IDIwMTU/XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXREaXN0YW5jZShuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgbmV3IERhdGUoMjAxNSwgMCwgMSkpXG4gKiAvLz0+ICc2IG1vbnRocydcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hhdCBpcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiAxIEphbnVhcnkgMjAxNSAwMDowMDoxNVxuICogLy8gYW5kIDEgSmFudWFyeSAyMDE1IDAwOjAwOjAwLCBpbmNsdWRpbmcgc2Vjb25kcz9cbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlKFxuICogICBuZXcgRGF0ZSgyMDE1LCAwLCAxLCAwLCAwLCAxNSksXG4gKiAgIG5ldyBEYXRlKDIwMTUsIDAsIDEsIDAsIDAsIDApLFxuICogICB7IGluY2x1ZGVTZWNvbmRzOiB0cnVlIH1cbiAqIClcbiAqIC8vPT4gJ2xlc3MgdGhhbiAyMCBzZWNvbmRzJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGF0IGlzIHRoZSBkaXN0YW5jZSBmcm9tIDEgSmFudWFyeSAyMDE2XG4gKiAvLyB0byAxIEphbnVhcnkgMjAxNSwgd2l0aCBhIHN1ZmZpeD9cbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlKG5ldyBEYXRlKDIwMTUsIDAsIDEpLCBuZXcgRGF0ZSgyMDE2LCAwLCAxKSwge1xuICogICBhZGRTdWZmaXg6IHRydWVcbiAqIH0pXG4gKiAvLz0+ICdhYm91dCAxIHllYXIgYWdvJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGF0IGlzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIDEgQXVndXN0IDIwMTYgYW5kIDEgSmFudWFyeSAyMDE1IGluIEVzcGVyYW50bz9cbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2UobmV3IERhdGUoMjAxNiwgNywgMSksIG5ldyBEYXRlKDIwMTUsIDAsIDEpLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICdwbGkgb2wgMSBqYXJvJ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UobGF0ZXJEYXRlLCBlYXJsaWVyRGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIGNvbnN0IGxvY2FsZSA9IG9wdGlvbnM/LmxvY2FsZSA/PyBkZWZhdWx0T3B0aW9ucy5sb2NhbGUgPz8gZGVmYXVsdExvY2FsZTtcbiAgY29uc3QgbWludXRlc0luQWxtb3N0VHdvRGF5cyA9IDI1MjA7XG5cbiAgY29uc3QgY29tcGFyaXNvbiA9IGNvbXBhcmVBc2MobGF0ZXJEYXRlLCBlYXJsaWVyRGF0ZSk7XG5cbiAgaWYgKGlzTmFOKGNvbXBhcmlzb24pKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgdGltZSB2YWx1ZVwiKTtcblxuICBjb25zdCBsb2NhbGl6ZU9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7XG4gICAgYWRkU3VmZml4OiBvcHRpb25zPy5hZGRTdWZmaXgsXG4gICAgY29tcGFyaXNvbjogY29tcGFyaXNvbixcbiAgfSk7XG5cbiAgY29uc3QgW2xhdGVyRGF0ZV8sIGVhcmxpZXJEYXRlX10gPSBub3JtYWxpemVEYXRlcyhcbiAgICBvcHRpb25zPy5pbixcbiAgICAuLi4oY29tcGFyaXNvbiA+IDAgPyBbZWFybGllckRhdGUsIGxhdGVyRGF0ZV0gOiBbbGF0ZXJEYXRlLCBlYXJsaWVyRGF0ZV0pLFxuICApO1xuXG4gIGNvbnN0IHNlY29uZHMgPSBkaWZmZXJlbmNlSW5TZWNvbmRzKGVhcmxpZXJEYXRlXywgbGF0ZXJEYXRlXyk7XG4gIGNvbnN0IG9mZnNldEluU2Vjb25kcyA9XG4gICAgKGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZWFybGllckRhdGVfKSAtXG4gICAgICBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGxhdGVyRGF0ZV8pKSAvXG4gICAgMTAwMDtcbiAgY29uc3QgbWludXRlcyA9IE1hdGgucm91bmQoKHNlY29uZHMgLSBvZmZzZXRJblNlY29uZHMpIC8gNjApO1xuICBsZXQgbW9udGhzO1xuXG4gIC8vIDAgdXAgdG8gMiBtaW5zXG4gIGlmIChtaW51dGVzIDwgMikge1xuICAgIGlmIChvcHRpb25zPy5pbmNsdWRlU2Vjb25kcykge1xuICAgICAgaWYgKHNlY29uZHMgPCA1KSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoXCJsZXNzVGhhblhTZWNvbmRzXCIsIDUsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHNlY29uZHMgPCAxMCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKFwibGVzc1RoYW5YU2Vjb25kc1wiLCAxMCwgbG9jYWxpemVPcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAoc2Vjb25kcyA8IDIwKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoXCJsZXNzVGhhblhTZWNvbmRzXCIsIDIwLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChzZWNvbmRzIDwgNDApIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZShcImhhbGZBTWludXRlXCIsIDAsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHNlY29uZHMgPCA2MCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKFwibGVzc1RoYW5YTWludXRlc1wiLCAxLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZShcInhNaW51dGVzXCIsIDEsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtaW51dGVzID09PSAwKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoXCJsZXNzVGhhblhNaW51dGVzXCIsIDEsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKFwieE1pbnV0ZXNcIiwgbWludXRlcywgbG9jYWxpemVPcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAyIG1pbnMgdXAgdG8gMC43NSBocnNcbiAgfSBlbHNlIGlmIChtaW51dGVzIDwgNDUpIHtcbiAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKFwieE1pbnV0ZXNcIiwgbWludXRlcywgbG9jYWxpemVPcHRpb25zKTtcblxuICAgIC8vIDAuNzUgaHJzIHVwIHRvIDEuNSBocnNcbiAgfSBlbHNlIGlmIChtaW51dGVzIDwgOTApIHtcbiAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKFwiYWJvdXRYSG91cnNcIiwgMSwgbG9jYWxpemVPcHRpb25zKTtcblxuICAgIC8vIDEuNSBocnMgdXAgdG8gMjQgaHJzXG4gIH0gZWxzZSBpZiAobWludXRlcyA8IG1pbnV0ZXNJbkRheSkge1xuICAgIGNvbnN0IGhvdXJzID0gTWF0aC5yb3VuZChtaW51dGVzIC8gNjApO1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoXCJhYm91dFhIb3Vyc1wiLCBob3VycywgbG9jYWxpemVPcHRpb25zKTtcblxuICAgIC8vIDEgZGF5IHVwIHRvIDEuNzUgZGF5c1xuICB9IGVsc2UgaWYgKG1pbnV0ZXMgPCBtaW51dGVzSW5BbG1vc3RUd29EYXlzKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZShcInhEYXlzXCIsIDEsIGxvY2FsaXplT3B0aW9ucyk7XG5cbiAgICAvLyAxLjc1IGRheXMgdXAgdG8gMzAgZGF5c1xuICB9IGVsc2UgaWYgKG1pbnV0ZXMgPCBtaW51dGVzSW5Nb250aCkge1xuICAgIGNvbnN0IGRheXMgPSBNYXRoLnJvdW5kKG1pbnV0ZXMgLyBtaW51dGVzSW5EYXkpO1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoXCJ4RGF5c1wiLCBkYXlzLCBsb2NhbGl6ZU9wdGlvbnMpO1xuXG4gICAgLy8gMSBtb250aCB1cCB0byAyIG1vbnRoc1xuICB9IGVsc2UgaWYgKG1pbnV0ZXMgPCBtaW51dGVzSW5Nb250aCAqIDIpIHtcbiAgICBtb250aHMgPSBNYXRoLnJvdW5kKG1pbnV0ZXMgLyBtaW51dGVzSW5Nb250aCk7XG4gICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZShcImFib3V0WE1vbnRoc1wiLCBtb250aHMsIGxvY2FsaXplT3B0aW9ucyk7XG4gIH1cblxuICBtb250aHMgPSBkaWZmZXJlbmNlSW5Nb250aHMoZWFybGllckRhdGVfLCBsYXRlckRhdGVfKTtcblxuICAvLyAyIG1vbnRocyB1cCB0byAxMiBtb250aHNcbiAgaWYgKG1vbnRocyA8IDEyKSB7XG4gICAgY29uc3QgbmVhcmVzdE1vbnRoID0gTWF0aC5yb3VuZChtaW51dGVzIC8gbWludXRlc0luTW9udGgpO1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoXCJ4TW9udGhzXCIsIG5lYXJlc3RNb250aCwgbG9jYWxpemVPcHRpb25zKTtcblxuICAgIC8vIDEgeWVhciB1cCB0byBtYXggRGF0ZVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IG1vbnRoc1NpbmNlU3RhcnRPZlllYXIgPSBtb250aHMgJSAxMjtcbiAgICBjb25zdCB5ZWFycyA9IE1hdGgudHJ1bmMobW9udGhzIC8gMTIpO1xuXG4gICAgLy8gTiB5ZWFycyB1cCB0byAxIHllYXJzIDMgbW9udGhzXG4gICAgaWYgKG1vbnRoc1NpbmNlU3RhcnRPZlllYXIgPCAzKSB7XG4gICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKFwiYWJvdXRYWWVhcnNcIiwgeWVhcnMsIGxvY2FsaXplT3B0aW9ucyk7XG5cbiAgICAgIC8vIE4geWVhcnMgMyBtb250aHMgdXAgdG8gTiB5ZWFycyA5IG1vbnRoc1xuICAgIH0gZWxzZSBpZiAobW9udGhzU2luY2VTdGFydE9mWWVhciA8IDkpIHtcbiAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoXCJvdmVyWFllYXJzXCIsIHllYXJzLCBsb2NhbGl6ZU9wdGlvbnMpO1xuXG4gICAgICAvLyBOIHllYXJzIDkgbW9udGhzIHVwIHRvIE4geWVhciAxMiBtb250aHNcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZShcImFsbW9zdFhZZWFyc1wiLCB5ZWFycyArIDEsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgfVxuICB9XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0RGlzdGFuY2U7XG4iLCJpbXBvcnQgeyBoIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLmNyZWF0ZS9jcmVhdGUuanMnXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRU3BhY2UnLFxuXG4gIHNldHVwICgpIHtcbiAgICBjb25zdCBzcGFjZSA9IGgoJ2RpdicsIHsgY2xhc3M6ICdxLXNwYWNlJyB9KVxuICAgIHJldHVybiAoKSA9PiBzcGFjZVxuICB9XG59KVxuIiwiaW1wb3J0IHsgaCwgY29tcHV0ZWQsIGdldEN1cnJlbnRJbnN0YW5jZSB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IHsgY3JlYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS5jcmVhdGUvY3JlYXRlLmpzJ1xuaW1wb3J0IHsgaFNsb3QgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlLnJlbmRlci9yZW5kZXIuanMnXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRVGQnLFxuXG4gIHByb3BzOiB7XG4gICAgcHJvcHM6IE9iamVjdCxcbiAgICBhdXRvV2lkdGg6IEJvb2xlYW4sXG4gICAgbm9Ib3ZlcjogQm9vbGVhblxuICB9LFxuXG4gIHNldHVwIChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgY29uc3Qgdm0gPSBnZXRDdXJyZW50SW5zdGFuY2UoKVxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgJ3EtdGQnICsgKHByb3BzLmF1dG9XaWR0aCA9PT0gdHJ1ZSA/ICcgcS10YWJsZS0tY29sLWF1dG8td2lkdGgnIDogJycpXG4gICAgICArIChwcm9wcy5ub0hvdmVyID09PSB0cnVlID8gJyBxLXRkLS1uby1ob3ZlcicgOiAnJylcbiAgICAgICsgJyAnXG4gICAgKVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5wcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybiBoKCd0ZCcsIHsgY2xhc3M6IGNsYXNzZXMudmFsdWUgfSwgaFNsb3Qoc2xvdHMuZGVmYXVsdCkpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5hbWUgPSB2bS52bm9kZS5rZXlcbiAgICAgIGNvbnN0IGNvbCA9IChcbiAgICAgICAgKHByb3BzLnByb3BzLmNvbHNNYXAgIT09IHZvaWQgMCA/IHByb3BzLnByb3BzLmNvbHNNYXBbIG5hbWUgXSA6IG51bGwpXG4gICAgICAgIHx8IHByb3BzLnByb3BzLmNvbFxuICAgICAgKVxuXG4gICAgICBpZiAoY29sID09PSB2b2lkIDApIHJldHVyblxuXG4gICAgICBjb25zdCB7IHJvdyB9ID0gcHJvcHMucHJvcHNcblxuICAgICAgcmV0dXJuIGgoJ3RkJywge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSArIGNvbC5fX3RkQ2xhc3Mocm93KSxcbiAgICAgICAgc3R5bGU6IGNvbC5fX3RkU3R5bGUocm93KVxuICAgICAgfSwgaFNsb3Qoc2xvdHMuZGVmYXVsdCkpXG4gICAgfVxuICB9XG59KVxuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3c7XG4iLCIvKiogVXNlZCB0byBtYXRjaCBhIHNpbmdsZSB3aGl0ZXNwYWNlIGNoYXJhY3Rlci4gKi9cbnZhciByZVdoaXRlc3BhY2UgPSAvXFxzLztcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlXG4gKiBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyLlxuICovXG5mdW5jdGlvbiB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSB7XG4gIHZhciBpbmRleCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgd2hpbGUgKGluZGV4LS0gJiYgcmVXaGl0ZXNwYWNlLnRlc3Qoc3RyaW5nLmNoYXJBdChpbmRleCkpKSB7fVxuICByZXR1cm4gaW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJpbW1lZEVuZEluZGV4O1xuIiwidmFyIHRyaW1tZWRFbmRJbmRleCA9IHJlcXVpcmUoJy4vX3RyaW1tZWRFbmRJbmRleCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRyaW1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVHJpbShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZ1xuICAgID8gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSkucmVwbGFjZShyZVRyaW1TdGFydCwgJycpXG4gICAgOiBzdHJpbmc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRyaW07XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgZ2V0UmF3VGFnID0gcmVxdWlyZSgnLi9fZ2V0UmF3VGFnJyksXG4gICAgb2JqZWN0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19vYmplY3RUb1N0cmluZycpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0VGFnO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3ltYm9sO1xuIiwidmFyIGJhc2VUcmltID0gcmVxdWlyZSgnLi9fYmFzZVRyaW0nKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IGJhc2VUcmltKHZhbHVlKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9OdW1iZXI7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgbm93ID0gcmVxdWlyZSgnLi9ub3cnKSxcbiAgICB0b051bWJlciA9IHJlcXVpcmUoJy4vdG9OdW1iZXInKTtcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAqIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICpcbiAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICogICAnbGVhZGluZyc6IHRydWUsXG4gKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gKiB9KSk7XG4gKlxuICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGFzdEFyZ3MsXG4gICAgICBsYXN0VGhpcyxcbiAgICAgIG1heFdhaXQsXG4gICAgICByZXN1bHQsXG4gICAgICB0aW1lcklkLFxuICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgcmV0dXJuIG1heGluZ1xuICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgOiB0aW1lV2FpdGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgIH1cbiAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgfVxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgfVxuICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJxLXBhLW1kXCI+XG4gICAgPCEtLSBTZWFyY2ggQmFyIC0tPlxuICAgIDxxLWlucHV0XG4gICAgICBmaWxsZWRcbiAgICAgIHYtbW9kZWw9XCJzZWFyY2hRdWVyeVwiXG4gICAgICBsYWJlbD1cIlNlYXJjaCBQbGF5ZXIgYnkgVXNlcm5hbWUuLi5cIlxuICAgICAgQGlucHV0PVwiZGVib3VuY2VkU2VhcmNoXCJcbiAgICAgIGNsYXNzPVwicS1tYi1tZFwiXG4gICAgLz5cblxuICAgIDwhLS0gVmlydHVhbCBTY3JvbGxlciBUYWJsZSAtLT5cbiAgICA8cS10YWJsZVxuICAgICAgdGl0bGU9XCJMb3JkcyBvZiBSTkcgTWVtYmVyc1wiXG4gICAgICA6cm93cz1cImZpbHRlcmVkUm93c1wiXG4gICAgICA6Y29sdW1ucz1cImNvbHVtbnNcIlxuICAgICAgcm93LWtleT1cImlkXCJcbiAgICAgIHZpcnR1YWwtc2Nyb2xsXG4gICAgICA6dmlydHVhbC1zY3JvbGwtaXRlbS1zaXplPVwiNDhcIlxuICAgICAgOnJvdy1jbGFzcz1cImdldFJvd0NsYXNzXCJcbiAgICAgIGxvYWRpbmc9XCJsb2FkaW5nXCJcbiAgICA+XG4gICAgICA8dGVtcGxhdGUgdi1zbG90OnRvcD5cbiAgICAgICAgPHEtYnRuIGZsYXQ+XG4gICAgICAgICAgPGltZyBzcmM9XCIvaWNvbnMvV0lUQ0hORVcucG5nXCIgLz5cbiAgICAgICAgPC9xLWJ0bj5cblxuICAgICAgICA8cS1zcGFjZSAvPlxuXG4gICAgICAgIDxxLWJ0biBmbGF0PlxuICAgICAgICAgIDxpbWcgc3JjPVwiL2ljb25zL3dpbGQucG5nXCIgLz5cbiAgICAgICAgPC9xLWJ0bj5cbiAgICAgICAgPHEtc3BhY2UgLz5cblxuICAgICAgICA8cS1idG4gZmxhdD5cbiAgICAgICAgICA8aW1nIHNyYz1cIi9pY29ucy9sZWFndWVzLnBuZ1wiIC8+XG4gICAgICAgIDwvcS1idG4+XG4gICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICA8dGVtcGxhdGUgdi1zbG90PlxuICAgICAgICA8aGVhZGVyIGNsYXNzPVwiaGVhZGVyLWZhbmN5XCI+TWVtYmVyczwvaGVhZGVyPlxuICAgICAgPC90ZW1wbGF0ZT5cblxuICAgICAgPCEtLSBUeXBlIENvbHVtbiB3aXRoIGFuIEltYWdlIC0tPlxuICAgICAgPHRlbXBsYXRlIHYtc2xvdDpib2R5LWNlbGwtdHlwZT1cInByb3BzXCI+XG4gICAgICAgIDxxLXRkIDpwcm9wcz1cInByb3BzXCI+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgOnNyYz1cInR5cGVJbWFnZXNbcHJvcHMucm93LnR5cGVdXCJcbiAgICAgICAgICAgIDphbHQ9XCJwcm9wcy5yb3cudHlwZVwiXG4gICAgICAgICAgICB3aWR0aD1cIjI4XCJcbiAgICAgICAgICAgIGhlaWdodD1cIjI4XCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L3EtdGQ+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgIDwvcS10YWJsZT5cblxuICAgIDwhLS0gRGlhbG9nIGZvciBQbGF5ZXIgTm90IEZvdW5kIC0tPlxuICAgIDxxLWRpYWxvZyB2LW1vZGVsPVwicGxheWVyTm90Rm91bmREaWFsb2dcIj5cbiAgICAgIDxxLWNhcmQ+XG4gICAgICAgIDxxLWNhcmQtc2VjdGlvbj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1oNlwiPlBsYXllciBOb3QgRm91bmQ8L2Rpdj5cbiAgICAgICAgPC9xLWNhcmQtc2VjdGlvbj5cbiAgICAgICAgPHEtY2FyZC1zZWN0aW9uPlxuICAgICAgICAgIFNvcnJ5LCBubyBwbGF5ZXIgbWF0Y2hpbmcgdGhlIHNlYXJjaCBjcml0ZXJpYSB3YXMgZm91bmQuXG4gICAgICAgIDwvcS1jYXJkLXNlY3Rpb24+XG4gICAgICAgIDxxLWNhcmQtYWN0aW9ucyBhbGlnbj1cInJpZ2h0XCI+XG4gICAgICAgICAgPHEtYnRuIGZsYXQgbGFiZWw9XCJDbG9zZVwiIHYtY2xvc2UtcG9wdXAgLz5cbiAgICAgICAgPC9xLWNhcmQtYWN0aW9ucz5cbiAgICAgIDwvcS1jYXJkPlxuICAgIDwvcS1kaWFsb2c+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IHJlZiwgY29tcHV0ZWQsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBkZWJvdW5jZSBmcm9tIFwibG9kYXNoL2RlYm91bmNlXCI7XG5pbXBvcnQgeyBXT01DbGllbnQgfSBmcm9tIFwiQHdpc2Utb2xkLW1hbi91dGlsc1wiO1xuaW1wb3J0IHsgZm9ybWF0RGlzdGFuY2UgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcbmltcG9ydCBXaXRjaEljb24gZnJvbSBcIi4vV2l0Y2hJY29uLnZ1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNldHVwKCkge1xuICAgIGNvbnN0IGdyb3VwRGF0YSA9IHJlZihbXSk7IC8vIFJhdyBncm91cCBkYXRhXG4gICAgY29uc3QgdGFibGVEYXRhID0gcmVmKFtdKTsgLy8gRW5yaWNoZWQgdGFibGUgZGF0YVxuICAgIGNvbnN0IHNlYXJjaFF1ZXJ5ID0gcmVmKFwiXCIpOyAvLyBTZWFyY2ggcXVlcnlcbiAgICBjb25zdCBoaWdobGlnaHRlZElkID0gcmVmKG51bGwpOyAvLyBUcmFjayBoaWdobGlnaHRlZCByb3dcbiAgICBjb25zdCBwbGF5ZXJOb3RGb3VuZERpYWxvZyA9IHJlZihmYWxzZSk7IC8vIERpYWxvZyB2aXNpYmlsaXR5XG4gICAgY29uc3QgbG9hZGluZyA9IHJlZihmYWxzZSk7IC8vIExvYWRpbmcgc3RhdGVcbiAgICBjb25zdCB0eXBlSW1hZ2VzID0ge1xuICAgICAgcmVndWxhcjogXCIvaWNvbnMvbWF4ZWQucG5nXCIsXG4gICAgICBpcm9ubWFuOiBcIi9pY29ucy9pcm9ubWFuLnBuZ1wiLFxuICAgICAgdWx0aW1hdGU6IFwiL2ljb25zL3VpbS5wbmdcIixcbiAgICAgIGhhcmRjb3JlOiBcIi9pY29ucy9oY2ltLnBuZ1wiLFxuICAgIH07XG5cbiAgICBjb25zdCBjb2x1bW5zID0gcmVmKFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJ1c2VybmFtZVwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgbGFiZWw6IFwiVXNlcm5hbWVcIixcbiAgICAgICAgYWxpZ246IFwibGVmdFwiLFxuICAgICAgICBmaWVsZDogXCJ1c2VybmFtZVwiLFxuICAgICAgICBzb3J0YWJsZTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwidHlwZVwiLCBsYWJlbDogXCJUeXBlXCIsIGFsaWduOiBcImxlZnRcIiwgZmllbGQ6IFwidHlwZVwiIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiZXhwXCIsXG4gICAgICAgIGxhYmVsOiBcIkV4cGVyaWVuY2VcIixcbiAgICAgICAgYWxpZ246IFwicmlnaHRcIixcbiAgICAgICAgZmllbGQ6IFwiZXhwXCIsXG4gICAgICAgIHNvcnRhYmxlOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJsYXN0Q2hhbmdlZEF0XCIsXG4gICAgICAgIGxhYmVsOiBcIkxhc3QgQ2hhbmdlXCIsXG4gICAgICAgIGFsaWduOiBcInJpZ2h0XCIsXG4gICAgICAgIGZpZWxkOiBcImxhc3RDaGFuZ2VkQXRcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYWNoaWV2ZW1lbnROYW1lXCIsXG4gICAgICAgIGxhYmVsOiBcIkxhdGVzdCBBY2hpZXZlbWVudFwiLFxuICAgICAgICBhbGlnbjogXCJyaWdodFwiLFxuICAgICAgICBmaWVsZDogXCJhY2hpZXZlbWVudE5hbWVcIixcbiAgICAgICAgc29ydGFibGU6IHRydWUsXG4gICAgICB9LFxuICAgIF0pO1xuXG4gICAgY29uc3QgZmV0Y2hHcm91cERhdGEgPSBhc3luYyAoKSA9PiB7XG4gICAgICBsb2FkaW5nLnZhbHVlID0gdHJ1ZTtcbiAgICAgIGNvbnN0IGNsaWVudCA9IG5ldyBXT01DbGllbnQoeyBhcGlLZXk6IHByb2Nlc3MuZW52LlZVRV9BUFBfV09NX0FQSV9LRVkgfSk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGdyb3VwSWQgPSA2ODQ3OyAvLyBFeGFtcGxlIGdyb3VwIElEXG4gICAgICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgY2xpZW50Lmdyb3Vwcy5nZXRHcm91cERldGFpbHMoZ3JvdXBJZCk7XG4gICAgICAgIGNvbnN0IGFjaGlldmVtZW50cyA9IGF3YWl0IGNsaWVudC5ncm91cHMuZ2V0R3JvdXBBY2hpZXZlbWVudHMoZ3JvdXBJZCk7XG5cbiAgICAgICAgdGFibGVEYXRhLnZhbHVlID0gZ3JvdXAubWVtYmVyc2hpcHMubWFwKChtZW1iZXJzaGlwKSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVsYXRlZEFjaGlldmVtZW50ID0gYWNoaWV2ZW1lbnRzLmZpbmQoXG4gICAgICAgICAgICAoYWNoKSA9PiBhY2gucGxheWVySWQgPT09IG1lbWJlcnNoaXAucGxheWVyLmlkXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IG1lbWJlcnNoaXAucGxheWVyLmlkLFxuICAgICAgICAgICAgdXNlcm5hbWU6IG1lbWJlcnNoaXAucGxheWVyLnVzZXJuYW1lLFxuICAgICAgICAgICAgdHlwZTogbWVtYmVyc2hpcC5wbGF5ZXIudHlwZSxcbiAgICAgICAgICAgIGV4cDogbWVtYmVyc2hpcC5wbGF5ZXIuZXhwLFxuICAgICAgICAgICAgbGFzdENoYW5nZWRBdDogZm9ybWF0RGlzdGFuY2UoXG4gICAgICAgICAgICAgIG5ldyBEYXRlKG1lbWJlcnNoaXAucGxheWVyLmxhc3RDaGFuZ2VkQXQpLFxuICAgICAgICAgICAgICBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICB7IGFkZFN1ZmZpeDogdHJ1ZSB9XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgYWNoaWV2ZW1lbnROYW1lOiByZWxhdGVkQWNoaWV2ZW1lbnQ/Lm5hbWUgfHwgXCJOb25lXCIsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGZldGNoIGdyb3VwIGRhdGE6XCIsIGVycm9yKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGxvYWRpbmcudmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgZ2V0Um93Q2xhc3MgPSAocm93KSA9PlxuICAgICAgaGlnaGxpZ2h0ZWRJZC52YWx1ZSA9PT0gcm93LmlkID8gXCJoaWdobGlnaHRlZC1yb3dcIiA6IFwiXCI7XG5cbiAgICBjb25zdCBoaWdobGlnaHRSb3cgPSAoaWQpID0+IHtcbiAgICAgIGhpZ2hsaWdodGVkSWQudmFsdWUgPSBpZDtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBoaWdobGlnaHRlZElkLnZhbHVlID0gbnVsbDtcbiAgICAgIH0sIDIwMDApO1xuICAgIH07XG5cbiAgICBjb25zdCBkZWJvdW5jZWRTZWFyY2ggPSBkZWJvdW5jZSgoKSA9PiB7XG4gICAgICBpZiAoIXNlYXJjaFF1ZXJ5LnZhbHVlLnRyaW0oKSkge1xuICAgICAgICByZXR1cm47IC8vIFN0b3AgaWYgc2VhcmNoIHF1ZXJ5IGlzIGVtcHR5XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG1hdGNoID0gdGFibGVEYXRhLnZhbHVlLmZpbmQoKHJvdykgPT5cbiAgICAgICAgcm93LnVzZXJuYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoc2VhcmNoUXVlcnkudmFsdWUudG9Mb3dlckNhc2UoKSlcbiAgICAgICk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRhYmxlRGF0YS52YWx1ZS5maW5kSW5kZXgoKHJvdykgPT4gcm93LmlkID09PSBtYXRjaC5pZCk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICBjb25zdCBbZm91bmRQbGF5ZXJdID0gdGFibGVEYXRhLnZhbHVlLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgdGFibGVEYXRhLnZhbHVlLnVuc2hpZnQoZm91bmRQbGF5ZXIpOyAvLyBNb3ZlIHRvIHRoZSB0b3BcbiAgICAgICAgICBoaWdobGlnaHRSb3coZm91bmRQbGF5ZXIuaWQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwbGF5ZXJOb3RGb3VuZERpYWxvZy52YWx1ZSA9IHRydWU7IC8vIFNob3cgZGlhbG9nIGlmIG5vIG1hdGNoXG4gICAgICB9XG4gICAgfSwgMzAwKTtcblxuICAgIGNvbnN0IGZpbHRlcmVkUm93cyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmICghc2VhcmNoUXVlcnkudmFsdWUudHJpbSgpKSByZXR1cm4gdGFibGVEYXRhLnZhbHVlO1xuICAgICAgcmV0dXJuIHRhYmxlRGF0YS52YWx1ZS5maWx0ZXIoKHJvdykgPT5cbiAgICAgICAgcm93LnVzZXJuYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoc2VhcmNoUXVlcnkudmFsdWUudG9Mb3dlckNhc2UoKSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBvbk1vdW50ZWQoZmV0Y2hHcm91cERhdGEpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbHVtbnMsXG4gICAgICBmaWx0ZXJlZFJvd3MsXG4gICAgICBzZWFyY2hRdWVyeSxcbiAgICAgIGhpZ2hsaWdodGVkSWQsXG4gICAgICBnZXRSb3dDbGFzcyxcbiAgICAgIGRlYm91bmNlZFNlYXJjaCxcbiAgICAgIHBsYXllck5vdEZvdW5kRGlhbG9nLFxuICAgICAgbG9hZGluZyxcbiAgICAgIHR5cGVJbWFnZXMsXG4gICAgfTtcbiAgfSxcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzYXNzXCI+XG4vKiBIaWdobGlnaHRlZCByb3cgYW5pbWF0aW9uICovXG4uaGlnaGxpZ2h0ZWQtcm93XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDAsIDAuMilcbiAgYW5pbWF0aW9uOiBoaWdobGlnaHQtZmFkZSAycyBlYXNlLWluLW91dFxuXG4vKmhlYWRlclxuLmhlYWRlci1mYW5jeVxuICBmb250LWZhbWlseTogZmFudGFzeVxuICBmb250LXNpemU6IDI1cHhcbiAgZm9udC1zdHlsZTogYm9sZFxuICBwYWRkaW5nLWxlZnQ6IDE1cHhcblxuXG4vKmNvbmRpdGlvbmFsIHJlbmRlcmluZyBzdHlsZXMqL1xuXG5cblxuXG4vKiBTbW9vdGggZmFkZSBhbmltYXRpb24gKi9cbkBrZXlmcmFtZXMgaGlnaGxpZ2h0LWZhZGVcbiAgMCVcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAwLCAwLjUpXG5cbiAgMTAwJVxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDAsIDAuMilcbjwvc3R5bGU+XG4iXSwibmFtZXMiOlsidXBkYXRlIiwiZGVib3VuY2UiLCJ0YXJnZXQiLCJhdHRycyIsImVsIiwiaCIsImRlZmF1bHRTaXplcyIsIm9uS2V5dXAiLCJoYW5kbGVycyIsInBvcnRhbEluZGV4Iiwid2lkdGgiLCJvcHRpb25JbmRleCIsInJvb3QiLCJvbktleWRvd24iLCJpc09iamVjdCIsImRlZiIsImxhc3RQYWdlIiwiY2xlYXJTZWxlY3Rpb24iLCJwcm9wcyIsInRoaXMiLCJ0IiwiZSIsIm4iLCJyIiwiaSIsInMiLCJ1IiwiYSIsIk0iLCJtIiwiZiIsImwiLCIkIiwieSIsInYiLCJnIiwiRCIsIm8iLCJkIiwiYyIsIkNvbXBldGl0aW9uU3RhdHVzIiwiQ29tcGV0aXRpb25DU1ZUYWJsZVR5cGUiLCJNZXRyaWNUeXBlIiwiTWV0cmljTWVhc3VyZSIsIkVmZmljaWVuY3lBbGdvcml0aG1UeXBlIiwiZm9ybWF0RGlzdGFuY2UiLCJkZWZhdWx0T3B0aW9ucyIsImRlZmF1bHRMb2NhbGUiLCJmcmVlR2xvYmFsIiwiZ2xvYmFsIiwicmVxdWlyZSQkMCIsIm5vdyIsInRyaW1tZWRFbmRJbmRleCIsImJhc2VUcmltIiwiU3ltYm9sIiwib2JqZWN0UHJvdG8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsInN5bVRvU3RyaW5nVGFnIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJyZXF1aXJlJCQxIiwicmVxdWlyZSQkMiIsImJhc2VHZXRUYWciLCJpc09iamVjdExpa2UiLCJpc1N5bWJvbCIsInRvTnVtYmVyIiwiX3NmY19tYWluIiwiY2xpZW50IiwibWF0Y2giLCJfb3BlbkJsb2NrIiwiX2NyZWF0ZUVsZW1lbnRCbG9jayIsIl9jcmVhdGVWTm9kZSIsIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCJfd2l0aEN0eCJdLCJtYXBwaW5ncyI6Ijs7O0FBTUEsSUFBQSxRQUFlLGdCQUFnQjtBQUFBLEVBQzdCLE1BQU07QUFBQSxFQUVOLE9BQU87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QUFNLEdBQUc7QUFBRSxZQUFHLENBQUNHLE1BQUdFLEdBQUUsU0FBTztBQUFFLGlCQUFPTixHQUFFTSxHQUFFLEVBQUU7QUFBQSxNQUFDLE9BQUs7QUFBQyxZQUFJQyxLQUFFTixHQUFFO0FBQUssVUFBRU0sTUFBR04sSUFBRUcsS0FBRUc7QUFBQSxNQUFDO0FBQUMsYUFBTSxDQUFDSixNQUFHQyxPQUFJLElBQUVBLEtBQUdBLE1BQUcsQ0FBQ0QsTUFBRztBQUFBLElBQUMsR0FBRSxJQUFFLFNBQVNILElBQUVDLElBQUU7QUFBQyxVQUFHLEVBQUVELEVBQUM7QUFBRSxlQUFPQSxHQUFFLE1BQUs7QUFBRyxVQUFJRSxLQUFFLFlBQVUsT0FBT0QsS0FBRUEsS0FBRSxDQUFBO0FBQUcsYUFBT0MsR0FBRSxPQUFLRixJQUFFRSxHQUFFLE9BQUssV0FBVSxJQUFJLEVBQUVBLEVBQUM7QUFBQSxJQUFDLEdBQUUsSUFBRTtBQUFFLE1BQUUsSUFBRSxHQUFFLEVBQUUsSUFBRSxHQUFFLEVBQUUsSUFBRSxTQUFTRixJQUFFQyxJQUFFO0FBQUMsYUFBTyxFQUFFRCxJQUFFLEVBQUMsUUFBT0MsR0FBRSxJQUFHLEtBQUlBLEdBQUUsSUFBRyxHQUFFQSxHQUFFLElBQUcsU0FBUUEsR0FBRSxRQUFPLENBQUM7QUFBQSxJQUFDO0FBQUUsUUFBSSxJQUFFLFdBQVU7QUFBQyxlQUFTTyxHQUFFUixJQUFFO0FBQUMsYUFBSyxLQUFHLEVBQUVBLEdBQUUsUUFBTyxNQUFLLElBQUUsR0FBRSxLQUFLLE1BQU1BLEVBQUMsR0FBRSxLQUFLLEtBQUcsS0FBSyxNQUFJQSxHQUFFLEtBQUcsQ0FBRSxHQUFDLEtBQUssS0FBRztBQUFBLE1BQUU7QUFBQyxVQUFJUyxLQUFFRCxHQUFFO0FBQVUsYUFBT0MsR0FBRSxRQUFNLFNBQVNULElBQUU7QUFBQyxhQUFLLEtBQUcsU0FBU0EsSUFBRTtBQUFDLGNBQUlDLEtBQUVELEdBQUUsTUFBS0UsS0FBRUYsR0FBRTtBQUFJLGNBQUcsU0FBT0M7QUFBRSxtQkFBTyxJQUFJLEtBQUssR0FBRztBQUFFLGNBQUcsRUFBRSxFQUFFQSxFQUFDO0FBQUUsbUJBQU8sSUFBSTtBQUFLLGNBQUdBLGNBQWE7QUFBSyxtQkFBTyxJQUFJLEtBQUtBLEVBQUM7QUFBRSxjQUFHLFlBQVUsT0FBT0EsTUFBRyxDQUFDLE1BQU0sS0FBS0EsRUFBQyxHQUFFO0FBQUMsZ0JBQUlFLEtBQUVGLEdBQUUsTUFBTSxDQUFDO0FBQUUsZ0JBQUdFLElBQUU7QUFBQyxrQkFBSUMsS0FBRUQsR0FBRSxLQUFHLEtBQUcsR0FBRUUsTUFBR0YsR0FBRSxNQUFJLEtBQUssVUFBVSxHQUFFLENBQUM7QUFBRSxxQkFBT0QsS0FBRSxJQUFJLEtBQUssS0FBSyxJQUFJQyxHQUFFLElBQUdDLElBQUVELEdBQUUsTUFBSSxHQUFFQSxHQUFFLE1BQUksR0FBRUEsR0FBRSxNQUFJLEdBQUVBLEdBQUUsTUFBSSxHQUFFRSxFQUFDLENBQUMsSUFBRSxJQUFJLEtBQUtGLEdBQUUsSUFBR0MsSUFBRUQsR0FBRSxNQUFJLEdBQUVBLEdBQUUsTUFBSSxHQUFFQSxHQUFFLE1BQUksR0FBRUEsR0FBRSxNQUFJLEdBQUVFLEVBQUM7QUFBQSxZQUFDO0FBQUEsVUFBQztBQUFDLGlCQUFPLElBQUksS0FBS0osRUFBQztBQUFBLFFBQUMsRUFBRUQsRUFBQyxHQUFFLEtBQUssS0FBTTtBQUFBLE1BQUEsR0FBRVMsR0FBRSxPQUFLLFdBQVU7QUFBQyxZQUFJVCxLQUFFLEtBQUs7QUFBRyxhQUFLLEtBQUdBLEdBQUUsZUFBYyxLQUFLLEtBQUdBLEdBQUUsU0FBUSxHQUFHLEtBQUssS0FBR0EsR0FBRSxRQUFPLEdBQUcsS0FBSyxLQUFHQSxHQUFFLFVBQVMsS0FBSyxLQUFHQSxHQUFFLFNBQVEsR0FBRyxLQUFLLEtBQUdBLEdBQUUsV0FBWSxHQUFDLEtBQUssS0FBR0EsR0FBRSxXQUFZLEdBQUMsS0FBSyxNQUFJQSxHQUFFO01BQWlCLEdBQUVTLEdBQUUsU0FBTyxXQUFVO0FBQUMsZUFBTztBQUFBLE1BQUMsR0FBRUEsR0FBRSxVQUFRLFdBQVU7QUFBQyxlQUFNLEVBQUUsS0FBSyxHQUFHLGVBQWE7QUFBQSxNQUFFLEdBQUVBLEdBQUUsU0FBTyxTQUFTVCxJQUFFQyxJQUFFO0FBQUMsWUFBSUMsS0FBRSxFQUFFRixFQUFDO0FBQUUsZUFBTyxLQUFLLFFBQVFDLEVBQUMsS0FBR0MsTUFBR0EsTUFBRyxLQUFLLE1BQU1ELEVBQUM7QUFBQSxNQUFDLEdBQUVRLEdBQUUsVUFBUSxTQUFTVCxJQUFFQyxJQUFFO0FBQUMsZUFBTyxFQUFFRCxFQUFDLElBQUUsS0FBSyxRQUFRQyxFQUFDO0FBQUEsTUFBQyxHQUFFUSxHQUFFLFdBQVMsU0FBU1QsSUFBRUMsSUFBRTtBQUFDLGVBQU8sS0FBSyxNQUFNQSxFQUFDLElBQUUsRUFBRUQsRUFBQztBQUFBLE1BQUMsR0FBRVMsR0FBRSxLQUFHLFNBQVNULElBQUVDLElBQUVDLElBQUU7QUFBQyxlQUFPLEVBQUUsRUFBRUYsRUFBQyxJQUFFLEtBQUtDLE1BQUcsS0FBSyxJQUFJQyxJQUFFRixFQUFDO0FBQUEsTUFBQyxHQUFFUyxHQUFFLE9BQUssV0FBVTtBQUFDLGVBQU8sS0FBSyxNQUFNLEtBQUssUUFBTyxJQUFHLEdBQUc7QUFBQSxNQUFDLEdBQUVBLEdBQUUsVUFBUSxXQUFVO0FBQUMsZUFBTyxLQUFLLEdBQUcsUUFBUztBQUFBLE1BQUEsR0FBRUEsR0FBRSxVQUFRLFNBQVNULElBQUVDLElBQUU7QUFBQyxZQUFJQyxLQUFFLE1BQUtDLEtBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRUYsRUFBQyxLQUFHQSxJQUFFUyxLQUFFLEVBQUUsRUFBRVYsRUFBQyxHQUFFVyxLQUFFLFNBQVNYLElBQUVDLElBQUU7QUFBQyxjQUFJRyxLQUFFLEVBQUUsRUFBRUYsR0FBRSxLQUFHLEtBQUssSUFBSUEsR0FBRSxJQUFHRCxJQUFFRCxFQUFDLElBQUUsSUFBSSxLQUFLRSxHQUFFLElBQUdELElBQUVELEVBQUMsR0FBRUUsRUFBQztBQUFFLGlCQUFPQyxLQUFFQyxLQUFFQSxHQUFFLE1BQU0sQ0FBQztBQUFBLFFBQUMsR0FBRVEsS0FBRSxTQUFTWixJ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QUssWUFBVSxFQUFFQSxJQUFFLEtBQUU7QUFBQSxJQUFDLENBQUMsR0FBRSxHQUFFLENBQUMsR0FBRSxTQUFTQSxJQUFFO0FBQUMsV0FBSyxZQUFVLEVBQUVBLElBQUUsSUFBRTtBQUFBLElBQUMsQ0FBQyxHQUFFLEdBQUUsQ0FBQyxHQUFFLFNBQVNBLElBQUU7QUFBQyxXQUFLLFFBQU0sS0FBR0EsS0FBRSxLQUFHO0FBQUEsSUFBQyxDQUFDLEdBQUUsR0FBRSxDQUFDLEdBQUUsU0FBU0EsSUFBRTtBQUFDLFdBQUssZUFBYSxNQUFJLENBQUNBO0FBQUEsSUFBQyxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsU0FBU0EsSUFBRTtBQUFDLFdBQUssZUFBYSxLQUFHLENBQUNBO0FBQUEsSUFBQyxDQUFDLEdBQUUsS0FBSSxDQUFDLFNBQVEsU0FBU0EsSUFBRTtBQUFDLFdBQUssZUFBYSxDQUFDQTtBQUFBLElBQUMsQ0FBQyxHQUFFLEdBQUUsQ0FBQyxHQUFFLEVBQUUsU0FBUyxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxTQUFTLENBQUMsR0FBRSxHQUFFLENBQUMsR0FBRSxFQUFFLFNBQVMsQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsU0FBUyxDQUFDLEdBQUUsR0FBRSxDQUFDLEdBQUUsRUFBRSxPQUFPLENBQUMsR0FBRSxHQUFFLENBQUMsR0FBRSxFQUFFLE9BQU8sQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsT0FBTyxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsRUFBRSxPQUFPLENBQUMsR0FBRSxHQUFFLENBQUMsR0FBRSxFQUFFLEtBQUssQ0FBQyxHQUFFLElBQUcsQ0FBQyxHQUFFLEVBQUUsS0FBSyxDQUFDLEdBQUUsSUFBRyxDQUFDLEdBQUUsU0FBU0EsSUFBRTtBQUFDLFVBQUlELEtBQUUsRUFBRSxTQUFRRSxLQUFFRCxHQUFFLE1BQU0sS0FBSztBQUFFLFVBQUcsS0FBSyxNQUFJQyxHQUFFLElBQUdGO0FBQUUsaUJBQVFHLEtBQUUsR0FBRUEsTUFBRyxJQUFHQSxN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QUFZO0FBQUEsRUFDWixXQUFXO0FBQUEsRUFDWCxTQUFTO0FBQUEsRUFDVCxXQUFXO0FBQUEsRUFDWCxVQUFVO0FBQUEsRUFDVixXQUFXO0FBQUEsRUFDWCxRQUFRO0FBQUEsRUFDUixTQUFTO0FBQUEsRUFDVCxVQUFVO0FBQUEsRUFDVixRQUFRO0FBQUEsRUFDUixXQUFXO0FBQUEsRUFDWCxXQUFXO0FBQUEsRUFDWCxZQUFZO0FBQUEsRUFDWixPQUFPO0FBQUEsRUFDUCxXQUFXO0FBQUEsRUFDWCxhQUFhO0FBQUEsRUFDYixPQUFPO0FBQUEsRUFDUCxNQUFNO0FBQUEsRUFDTixLQUFLO0FBQUEsRUFDTCxNQUFNO0FBQUEsRUFDTixXQUFXO0FBQUEsRUFDWCxTQUFTO0FBQUEsRUFDVCxXQUFXO0FBQUEsRUFDWCxTQUFTO0FBQUEsRUFDVCxRQUFRO0FBQUEsRUFDUixTQUFTO0FBQUEsRUFDVCxTQUFTO0FBQUEsRUFDVCxTQUFTO0FBQUEsRUFDVCxPQUFPO0FBQUEsRUFDUCxPQUFPO0FBQUEsRUFDUCxTQUFTO0FBQUEsRUFDVCxPQUFPO0FBQUEsRUFDUCxVQUFVO0FBQUEsRUFDVixPQUFPO0FBQUEsRUFDUCxRQUFRO0FBQUEsRUFDUixXQUFXO0FBQUEsRUFDWCxTQUFTO0FBQUEsRUFDVCxXQUFXO0FBQUEsRUFDWCxZQUFZO0FBQUEsRUFDWixlQUFlO0FBQUEsRUFDZixhQUFhO0FBQUEsRUFDYixNQUFNO0FBQUEsRUFDTixhQUFhO0FBQUEsRUFDYixVQUFVO0FBQUEsRUFDVixRQUFRO0FBQUEsRUFDUixZQUFZO0FBQUEsRUFDWixTQUFTO0FBQUEsRUFDVCxNQUFNO0FBQUEsRUFDTixVQUFVO0FBQUEsRUFDVixVQUFVO0FBQUEsRUFDVixPQUFPO0FBQUEsRUFDUCxVQUFVO0FBQUEsRUFDVixTQUFTO0FBQUEsRUFDVCxjQUFjO0FBQUEsRUFDZCxXQUFXO0FBQUEsRUFDWCxTQUFTO0FBQUEsRUFDVCxVQUFVO0FBQUEsRUFDVixRQUFRO0FBQUEsRUFDUixVQUFVO0FBQUEsRUFDVixRQUFRO0FBQUEsRUFDUixhQUFhO0FBQUEsRUFDYixPQUFPO0FBQUEsRUFDUCxVQUFVO0FBQUEsRUFDVixPQUFPO0FBQUEsRUFDUCxPQUFPO0FBQUEsRUFDUCxTQUFTO0FBQUEsRUFDVCxVQUFVO0FBQUEsRUFDVixNQUFNO0FBQUEsRUFDTixXQUFXO0FBQUEsRUFDWCxRQUFRO0FBQUEsRUFDUixVQUFVO0FBQUEsRUFDVixRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixTQUFTO0FBQUEsRUFDVCxNQUFNO0FBQUEsRUFDTixXQUFXO0FBQUEsRUFDWCxhQUFhO0FBQUEsRUFDYixRQUFRO0FBQUEsRUFDUixVQUFVO0FBQUEsRUFDVixTQUFTO0FBQUEsRUFDVCxXQUFXO0FBQUEsRUFDWCxPQUFPO0FBQUEsRUFDUCxVQUFVO0FBQUEsRUFDVixTQUFTO0FBQUEsRUFDVCxhQUFhO0FBQUEsRUFDYixhQUFhO0FBQUEsRUFDYixRQUFRO0FBQUEsRUFDUixNQUFNO0FBQUEsRUFDTixNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsRUFDUCxNQUFNO0FBQUEsRUFDTixVQUFVO0FBQUEsRUFDVixXQUFXO0FBQUEsRUFDWCxTQUFTO0FBQUEsRUFDVCxRQUFRO0FBQUEsRUFDUixTQUFTO0FBQUEsRUFDVCxRQUFRO0FBQUEsRUFDUixhQUFhO0FBQUEsRUFDYixNQUFNO0FBQUEsRUFDTixNQUFNO0FBQUEsRUFDTixTQUFTO0FBQUEsRUFDVCxRQUFRO0FBQUEsRUFDUixTQUFTO0FBQUEsRUFDVCxhQUFhO0FBQUEsRUFDYixLQUFLO0FBQUEsRUFDTCxVQUFVO0FBQUEsRUFDVixZQUFZO0FBQUEsRUFDWixNQUFNO0FBQUEsRUFDTixNQUFNO0FBQUEsRUFDTixXQUFXO0FBQUEsRUFDWCxVQUFVO0FBQUEsRUFDVixVQUFVO0FBQUEsRUFDVixXQUFXO0FBQUEsRUFDWCxRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixVQUFVO0FBQUEsRUFDVixLQUFLO0FBQUEsRUFDTCxRQUFRO0FBQUEsRUFDUixTQUFTO0FBQUEsRUFDVCxRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixhQUFhO0FBQUEsRUFDYixZQUFZO0FBQUEsRUFDWixRQUFRO0FBQUEsRUFDUixZQUFZO0FBQUEsRUFDWixPQUFPO0FBQUEsRUFDUCxVQUFVO0FBQUEsRUFDVixPQUFPO0FBQUEsRUFDUCxPQUFPO0FBQUEsRUFDUCxTQUFTO0FBQUEsRUFDVCxRQUFRO0FBQUEsRUFDUixPQUFPO0FBQUEsRUFDUCxVQUFVO0FBQUEsRUFDVixPQUFPO0FBQUEsRUFDUCxRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixVQUFVO0FBQUEsRUFDVixNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsRUFDUCxRQUFRO0FBQUEsRUFDUixjQUFjO0FBQUEsRUFDZCxTQUFTO0FBQUEsRUFDVCxXQUFXO0FBQUEsRUFDWCxTQUFTO0FBQUEsRUFDVCxZQUFZO0FBQUEsRUFDWixRQUFRO0FBQUEsRUFDUixNQUFNO0FBQUEsRUFDTixTQUFTO0FBQUEsRUFDVCxRQUFRO0FBQUEsRUFDUixhQUFhO0FBQUEsRUFDYixPQUFPO0FBQUEsRUFDUCxPQUFPO0FBQUEsRUFDUCxRQUFRO0FBQUEsRUFDUixPQUFPO0FBQUEsRUFDUCxLQUFLO0FBQUEsRUFDTCxTQUFTO0FBQUEsRUFDVCxNQUFNO0FBQUEsRUFDTixNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixPQUFPO0FBQUEsRUFDUCxNQUFNO0FBQUEsRUFDTixTQUFTO0FBQUEsRUFDVCxNQUFNO0FBQUEsRUFDTixTQUFTO0FBQUEsRUFDVCxNQUFNO0FBQUEsRUFDTixNQUFNO0FBQUEsRUFDTixTQUFTO0FBQUEsRUFDVCxRQUFRO0FBQUEsRUFDUixTQUFTO0FBQUEsRUFDVCxTQUFTO0FBQUEsRUFDVCxXQUFXO0FBQUEsRUFDWCxZQUFZO0FBQUEsRUFDWixXQUFXO0FBQUEsRUFDWCxNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixZQUFZO0FBQUEsRUFDWixTQUFTO0FBQUEsRUFDVCxPQUFPO0FBQUEsRUFDUCxRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixlQUFlO0FBQUEsRUFDZixTQUFTO0FBQUEsRUFDVCxXQUFXO0FBQUEsRUFDWCxXQUFXO0FBQUEsRUFDWCxLQUFLO0FBQUEsRUFDTCxPQUFPO0FBQUEsRUFDUCxNQUFNO0FBQUEsRUFDTixNQUFNO0FBQUEsRUFDTixhQUFhO0FBQUEsRUFDYixNQUFNO0FBQUEsRUFDTixVQUFVO0FBQUEsRUFDVixjQUFjO0FBQUEsRUFDZCxTQUFTO0FBQUEsRUFDVCxXQUFXO0FBQUEsRUFDWCxTQUFTO0FBQUEsRUFDVCxTQUFTO0FBQUEsRUFDVCxPQUFPO0FBQUEsRUFDUCxRQUFRO0FBQUEsRUFDUixNQUFNO0FBQUEsRUFDTixTQUFTO0FBQUEsRUFDVCxRQUFRO0FBQUEsRUFDUixVQUFVO0FBQUEsRUFDVixVQUFVO0FBQUEsRUFDVixRQUFRO0FBQUEsRUFDUixTQUFTO0FBQUEsRUFDVCxpQkFBaUI7QUFBQSxFQUNqQixTQUFTO0FBQUEsRUFDVCxTQUFTO0FBQUEsRUFDVCxRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixPQUFPO0FBQUEsRUFDUCxVQUFVO0FBQUEsRUFDVixRQUFRO0FBQUEsRUFDUixNQUFNO0FBQUEsRUFDTixZQUFZO0FBQUEsRUFDWixjQUFjO0FBQUEsRUFDZCxhQUFhO0FBQUEsRUFDYixRQUFRO0FBQUEsRUFDUixPQUFPO0FBQUEsRUFDUCxPQUFPO0FBQUEsRUFDUCxTQUFTO0FBQUEsRUFDVCxTQUFTO0FBQUEsRUFDVCxVQUFVO0FBQUEsRUFDVixVQUFVO0FBQUEsRUFDVixZQUFZO0FBQUEsRUFDWixTQUFTO0FBQUEsRUFDVCxTQUFTO0FBQUEsRUFDVCxXQUFXO0FBQUEsRUFDWCxPQUFPO0FBQUEsRUFDUCxXQUFXO0FBQUEsRUFDWCxVQUFVO0FBQUEsRUFDVixXQUFXO0FBQUEsRUFDWCxPQUFPO0FBQUEsRUFDUCxPQUFPO0FBQUEsRUFDUCxRQUFRO0FBQUEsRUFDUixTQUFTO0FBQUEsRUFDVCxVQUFVO0FBQUEsRUFDVixRQUFRO0FBQUEsRUFDUixVQUFVO0FBQUEsRUFDVixRQUFRO0FBQUEsRUFDUixTQUFTO0FBQUEsRUFDVCxTQUFTO0FBQUEsRUFDVCxPQUFPO0FBQUEsRUFDUCxNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixNQUFNO0FBQUEsRUFDTixXQUFXO0FBQUEsRUFDWCxPQUFPO0FBQUEsRUFDUCxRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixPQUFPO0FBQUEsRUFDUCxVQUFVO0FBQUEsRUFDVixRQUFRO0FBQUEsRUFDUixLQUFLO0FBQUEsRUFDTCxZQUFZO0FBQUEsRUFDWixVQUFVO0FBQUEsRUFDVixRQUFRO0FBQUEsRUFDUixRQUFRO0FBQ1o7QUFDQSxNQUFNLFVBQVU7QUFBQSxFQUNaLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLFFBQVE7QUFBQSxFQUNSLFFBQVE7QUFBQSxFQUNSLFFBQVE7QUFBQSxFQUNSLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFB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TSxNQUFNLE1BQU0sVUFBVztBQUFBLEVBQzdDLENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sU0FBVTtBQUFBLEVBQzVDLENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sZ0JBQWlCO0FBQUEsRUFDbkQsQ0FBQyxRQUFRLEtBQUssRUFBRSxNQUFNLE1BQU0sTUFBTSxXQUFZO0FBQUEsRUFDOUMsQ0FBQyxRQUFRLEtBQUssRUFBRSxNQUFNLE1BQU0sTUFBTSxVQUFXO0FBQUEsRUFDN0MsQ0FBQyxRQUFRLEtBQUssRUFBRSxNQUFNLE1BQU0sTUFBTSxTQUFVO0FBQUEsRUFDNUMsQ0FBQyxRQUFRLEtBQUssRUFBRSxNQUFNLE1BQU0sTUFBTSxTQUFVO0FBQUEsRUFDNUMsQ0FBQyxRQUFRLEtBQUssRUFBRSxNQUFNLE1BQU0sTUFBTSwwQkFBMkI7QUFBQSxFQUM3RCxDQUFDLFFBQVEsS0FBSyxFQUFFLE1BQU0sTUFBTSxNQUFNLFFBQVM7QUFBQSxFQUMzQyxDQUFDLFFBQVEsS0FBSyxFQUFFLE1BQU0sTUFBTSxNQUFNLDJCQUE0QjtBQUFBLEVBQzlELENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sUUFBUztBQUFBLEVBQzNDLENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sY0FBZTtBQUFBLEVBQ2pELENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sbUJBQWlCO0FBQUEsRUFDbkQsQ0FBQyxRQUFRLEtBQUssRUFBRSxNQUFNLE1BQU0sTUFBTSxlQUFnQjtBQUFBLEVBQ2xELENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sUUFBUztBQUFBLEVBQzNDLENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sV0FBWTtBQUFBLEVBQzlDLENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sUUFBUztBQUFBLEVBQzNDLENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sV0FBWTtBQUFBLEVB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RSxNQUFNLE1BQU0sTUFBTSxRQUFTO0FBQUEsRUFDM0MsQ0FBQyxRQUFRLEtBQUssRUFBRSxNQUFNLE1BQU0sTUFBTSxVQUFXO0FBQUEsRUFDN0MsQ0FBQyxRQUFRLEtBQUssRUFBRSxNQUFNLE1BQU0sTUFBTSxZQUFhO0FBQUEsRUFDL0MsQ0FBQyxRQUFRLEtBQUssRUFBRSxNQUFNLE1BQU0sTUFBTSxVQUFXO0FBQUEsRUFDN0MsQ0FBQyxRQUFRLEtBQUssRUFBRSxNQUFNLE1BQU0sTUFBTSxTQUFVO0FBQUEsRUFDNUMsQ0FBQyxRQUFRLEtBQUssRUFBRSxNQUFNLE1BQU0sTUFBTSxjQUFlO0FBQUEsRUFDakQsQ0FBQyxRQUFRLEtBQUssRUFBRSxNQUFNLE1BQU0sTUFBTSxRQUFTO0FBQUEsRUFDM0MsQ0FBQyxRQUFRLEtBQUssRUFBRSxNQUFNLE1BQU0sTUFBTSxpQ0FBa0M7QUFBQSxFQUNwRSxDQUFDLFFBQVEsS0FBSyxFQUFFLE1BQU0sTUFBTSxNQUFNLE9BQVE7QUFBQSxFQUMxQyxDQUFDLFFBQVEsS0FBSyxFQUFFLE1BQU0sTUFBTSxNQUFNLDZCQUE4QjtBQUFBLEVBQ2hFLENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sVUFBVztBQUFBLEVBQzdDLENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sUUFBUztBQUFBLEVBQzNDLENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sU0FBVTtBQUFBLEVBQzVDLENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sVUFBVztBQUFBLEVBQzdDLENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sU0FBVTtBQUFBLEVBQzVDLENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sUUFBUztBQUFBLEVBQzNDLENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sUUFBUztBQUFBLEVBQzNDLENBQUMsUUFBUSxLQUFLLEVBQUUsTUFBTSxNQUFNLE1BQU0sYUFBYztBQUFBLEVB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QUFDLFVBQVUsVUFBVSxFQUFFLE1BQU0sVUFBVztBQUFBLEVBQ3hDLENBQUMsVUFBVSxTQUFTLEVBQUUsTUFBTSxTQUFVO0FBQUEsRUFDdEMsQ0FBQyxVQUFVLFVBQVUsRUFBRSxNQUFNLFVBQVc7QUFBQSxFQUN4QyxDQUFDLFVBQVUsY0FBYyxFQUFFLE1BQU0sY0FBZTtBQUFBLEVBQ2hELENBQUMsVUFBVSxNQUFNLEVBQUUsTUFBTSxNQUFPO0FBQUEsRUFDaEMsQ0FBQyxVQUFVLFdBQVcsRUFBRSxNQUFNLFdBQVk7QUFBQSxFQUMxQyxDQUFDLFVBQVUsYUFBYSxFQUFFLE1BQU0sYUFBYztBQUFBLEVBQzlDLENBQUMsVUFBVSxPQUFPLEVBQUUsTUFBTSxPQUFRO0FBQUEsRUFDbEMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxNQUFNLE9BQVE7QUFBQSxFQUNsQyxDQUFDLFVBQVUsWUFBWSxFQUFFLE1BQU0sWUFBYTtBQUFBLEVBQzVDLENBQUMsVUFBVSxXQUFXLEVBQUUsTUFBTSxXQUFZO0FBQUEsRUFDMUMsQ0FBQyxVQUFVLFdBQVcsRUFBRSxNQUFNLFdBQVk7QUFBQSxFQUMxQyxDQUFDLFVBQVUsWUFBWSxFQUFFLE1BQU0sWUFBYTtBQUFBLEVBQzVDLENBQUMsVUFBVSxTQUFTLEVBQUUsTUFBTSxTQUFVO0FBQUEsRUFDdEMsQ0FBQyxVQUFVLFNBQVMsRUFBRSxNQUFNLFNBQVU7QUFBQSxFQUN0QyxDQUFDLFVBQVUsV0FBVyxFQUFFLE1BQU0sV0FBWTtBQUFBLEVBQzFDLENBQUMsVUFBVSxNQUFNLEVBQUUsTUFBTSxNQUFPO0FBQUEsRUFDaEMsQ0FBQyxVQUFVLFNBQVMsRUFBRSxNQUFNLFNBQVU7QUFBQSxFQUN0QyxDQUFDLFVBQVUsVUFBVSxFQUFFLE1BQU0sVUFBVztBQUFBLEVBQ3hDLENBQUMsVUFBVSxTQUFTLEVBQUUsTUFBTSxTQUFVO0FBQUEsRUFDdEMsQ0FBQyxVQUFVLFNBQVMsRUFBRSxNQUFNLFNBQVU7QUFBQSxFQUN0QyxDQUFDLFVBQVUsY0FBYyxFQUFFLE1BQU0sY0FBZTtBQUFBLEVBQ2hELENBQUMsVUFBVSxhQUFhLEVBQUUsTUFBTSxhQUFjO0FBQUEsRUFDOUMsQ0FBQyxVQUFVLFNBQVMsRUFBRSxNQUFNLFNBQVU7QUFBQSxFQUN0QyxDQUFDLFVBQVUsYUFBYSxFQUFFLE1BQU0sYUFBYztBQUFBLEVBQzlDLENBQUMsVUFBVSxRQUFRLEVBQUUsTUFBTSxRQUFTO0FBQUEsRUFDcEMsQ0FBQyxVQUFVLFdBQVcsRUFBRSxNQUFNLFdBQVk7QUFBQSxFQUMxQyxDQUFDLFVBQVUsUUFBUSxFQUFFLE1BQU0sUUFBUztBQUFBLEVBQ3BDLENBQUMsVUFBVSxRQUFRLEVBQUUsTUFBTSxRQUFTO0FBQUEsRUFDcEMsQ0FBQyxVQUFVLFVBQVUsRUFBRSxNQUFNLFVBQVc7QUFBQSxFQUN4QyxDQUFDLFVBQVUsU0FBUyxFQUFFLE1BQU0sU0FBVTtBQUFBLEVBQ3RDLENBQUMsVUFBVSxRQUFRLEVBQUUsTUFBTSxRQUFTO0FBQUEsRUFDcEMsQ0FBQyxVQUFVLFdBQVcsRUFBRSxNQUFNLFdBQVk7QUFBQSxFQUMxQyxDQUFDLFVBQVUsUUFBUSxFQUFFLE1BQU0sUUFBUztBQUFBLEVBQ3BDLENBQUMsVUFBVSxTQUFTLEVBQUUsTUFBTSxTQUFVO0FBQUEsRUFDdEMsQ0FBQyxVQUFVLFNBQVMsRUFBRSxNQUFNLFNBQVU7QUFBQSxFQUN0QyxDQUFDLFVBQVUsV0FBVyxFQUFFLE1BQU0sV0FBWTtBQUFBLEVBQzFDLENBQUMsVUFBVSxPQUFPLEVBQUUsTUFBTSxPQUFRO0FBQUEsRUFDbEMsQ0FBQyxVQUFVLFFBQVEsRUFBRSxNQUFNLFFBQVM7QUFBQSxFQUNwQyxDQUFDLFVBQVUsU0FBUyxFQUFFLE1BQU0sU0FBVTtBQUFBLEVBQ3RDLENBQUMsVUFBVSxlQUFlLEVBQUUsTUFBTSxlQUFnQjtBQUFBLEVBQ2xELENBQUMsVUFBVSxVQUFVLEVBQUUsTUFBTSxVQUFXO0FBQUEsRUFDeEMsQ0FBQyxVQUFVLFlBQVksRUFBRSxNQUFNLFlBQWE7QUFBQSxFQUM1QyxDQUFDLFVBQVUsVUFBVSxFQUFFLE1BQU0sVUFBVztBQUFBLEVBQ3hDLENBQUMsVUFBVSxhQUFhLEVBQUUsTUFBTSxhQUFjO0FBQUEsRUFDOUMsQ0FBQyxVQUFVLFNBQVMsRUFBRSxNQUFNLFNBQVU7QUFBQSxFQUN0QyxDQUFDLFVBQVUsT0FBTyxFQUFFLE1BQU0sT0FBUTtBQUFBLEVBQ2xDLENBQUMsVUFBVSxVQUFVLEVBQUUsTUFBTSxVQUFXO0FBQUEsRUFDeEMsQ0FBQyxVQUFVLFNBQVMsRUFBRSxNQUFNLFNBQVU7QUFBQSxFQUN0QyxDQUFDLFVBQVUsY0FBYyxFQUFFLE1BQU0sY0FBZTtBQUFBLEVBQ2hELENBQUMsVUFBVSxRQUFRLEVBQUUsTUFBTSxRQUFTO0FBQUEsRUFDcEMsQ0FBQyxVQUFVLFFBQVEsRUFBRSxNQUFNLFFBQVM7QUFBQSxFQUNwQyxDQUFDLFVBQVUsU0FBUyxFQUFFLE1BQU0sU0FBVTtBQUFBLEVBQ3RDLENBQUMsVUFBVSxRQUFRLEVBQUUsTUFBTSxRQUFTO0FBQUEsRUFDcEMsQ0FBQyxVQUFVLE1BQU0sRUFBRSxNQUFNLE1BQU87QUFBQSxFQUNoQyxDQUFDLFVBQVUsVUFBVSxFQUFFLE1BQU0sVUFBVztBQUFBLEVBQ3hDLENBQUMsVUFBVSxPQUFPLEVBQUUsTUFBTSxPQUFRO0FBQUEsRUFDbEMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxNQUFNLE9BQVE7QUFBQSxFQUNsQyxDQUFDLFVBQVUsU0FBUyxFQUFFLE1BQU0sU0FBVTtBQUFBLEVBQ3RDLENBQUMsVUFBVSxTQUFTLEVBQUUsTUFBTSxTQUFVO0FBQUEsRUFDdEMsQ0FBQyxVQUFVLFFBQVEsRUFBRSxNQUFNLFFBQVM7QUFBQSxFQUNwQyxDQUFDLFVBQVUsT0FBTyxFQUFFLE1BQU0sT0FBUTtBQUFBLEVBQ2xDLENBQUMsVUFBVSxVQUFVLEVBQUUsTUFBTSxVQUFXO0FBQUEsRUFDeEMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxNQUFNLE9BQVE7QUFBQSxFQUNsQyxDQUFDLFVBQVUsVUFBVSxFQUFFLE1BQU0sVUFBVztBQUFBLEVBQ3hDLENBQUMsVUFBVSxPQUFPLEVBQUUsTUFBTSxPQUFRO0FBQUEs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LE1BQU0sV0FBWTtBQUFBLEVBQzFDLENBQUMsVUFBVSxZQUFZLEVBQUUsTUFBTSxZQUFhO0FBQUEsRUFDNUMsQ0FBQyxVQUFVLFFBQVEsRUFBRSxNQUFNLFFBQVM7QUFBQSxFQUNwQyxDQUFDLFVBQVUsUUFBUSxFQUFFLE1BQU0sUUFBUztBQUFBLEVBQ3BDLENBQUMsVUFBVSxTQUFTLEVBQUUsTUFBTSxTQUFVO0FBQUEsRUFDdEMsQ0FBQyxVQUFVLFVBQVUsRUFBRSxNQUFNLFVBQVc7QUFBQSxFQUN4QyxDQUFDLFVBQVUsV0FBVyxFQUFFLE1BQU0sV0FBWTtBQUFBLEVBQzFDLENBQUMsVUFBVSxTQUFTLEVBQUUsTUFBTSxTQUFVO0FBQUEsRUFDdEMsQ0FBQyxVQUFVLFdBQVcsRUFBRSxNQUFNLFdBQVk7QUFBQSxFQUMxQyxDQUFDLFVBQVUsU0FBUyxFQUFFLE1BQU0sU0FBVTtBQUFBLEVBQ3RDLENBQUMsVUFBVSxVQUFVLEVBQUUsTUFBTSxVQUFXO0FBQUEsRUFDeEMsQ0FBQyxVQUFVLFVBQVUsRUFBRSxNQUFNLFVBQVc7QUFBQSxFQUN4QyxDQUFDLFVBQVUsUUFBUSxFQUFFLE1BQU0sUUFBUztBQUFBLEVBQ3BDLENBQUMsVUFBVSxPQUFPLEVBQUUsTUFBTSxPQUFRO0FBQUEsRUFDbEMsQ0FBQyxVQUFVLFNBQVMsRUFBRSxNQUFNLFNBQVU7QUFBQSxFQUN0QyxDQUFDLFVBQVUsT0FBTyxFQUFFLE1BQU0sT0FBUTtBQUFBLEVBQ2xDLENBQUMsVUFBVSxZQUFZLEVBQUUsTUFBTSxZQUFhO0FBQUEsRUFDNUMsQ0FBQyxVQUFVLFFBQVEsRUFBRSxNQUFNLFFBQVM7QUFBQSxFQUNwQyxDQUFDLFVBQVUsU0FBUyxFQUFFLE1BQU0sU0FBVTtBQUFBLEVBQ3RDLENBQUMsVUFBVSxTQUFTLEVBQUUsTUFBTSxTQUFVO0FBQUEsRUFDdEMsQ0FBQyxVQUFVLFFBQVEsRUFBRSxNQUFNLFFBQVM7QUFBQSxFQUNwQyxDQUFDLFVBQVUsV0FBVyxFQUFFLE1BQU0sV0FBWTtBQUFBLEVBQzFDLENBQUMsVUFBVSxTQUFTLEVB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
